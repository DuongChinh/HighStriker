
smart-scale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f5c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800510c  0800510c  0000610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051c4  080051c4  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080051c4  080051c4  000061c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051cc  080051cc  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051cc  080051cc  000061cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051d0  080051d0  000061d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080051d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          000002e8  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000354  20000354  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd23  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002485  00000000  00000000  00016dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  00019248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bfc  00000000  00000000  0001a1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000247bc  00000000  00000000  0001ada4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d5c  00000000  00000000  0003f560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcf14  00000000  00000000  000512bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012e1d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000466c  00000000  00000000  0012e214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00132880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080050f4 	.word	0x080050f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	080050f4 	.word	0x080050f4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b988 	b.w	8000990 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	468e      	mov	lr, r1
 80006a0:	4604      	mov	r4, r0
 80006a2:	4688      	mov	r8, r1
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d14a      	bne.n	800073e <__udivmoddi4+0xa6>
 80006a8:	428a      	cmp	r2, r1
 80006aa:	4617      	mov	r7, r2
 80006ac:	d962      	bls.n	8000774 <__udivmoddi4+0xdc>
 80006ae:	fab2 f682 	clz	r6, r2
 80006b2:	b14e      	cbz	r6, 80006c8 <__udivmoddi4+0x30>
 80006b4:	f1c6 0320 	rsb	r3, r6, #32
 80006b8:	fa01 f806 	lsl.w	r8, r1, r6
 80006bc:	fa20 f303 	lsr.w	r3, r0, r3
 80006c0:	40b7      	lsls	r7, r6
 80006c2:	ea43 0808 	orr.w	r8, r3, r8
 80006c6:	40b4      	lsls	r4, r6
 80006c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006cc:	fa1f fc87 	uxth.w	ip, r7
 80006d0:	fbb8 f1fe 	udiv	r1, r8, lr
 80006d4:	0c23      	lsrs	r3, r4, #16
 80006d6:	fb0e 8811 	mls	r8, lr, r1, r8
 80006da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006de:	fb01 f20c 	mul.w	r2, r1, ip
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d909      	bls.n	80006fa <__udivmoddi4+0x62>
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	f101 30ff 	add.w	r0, r1, #4294967295
 80006ec:	f080 80ea 	bcs.w	80008c4 <__udivmoddi4+0x22c>
 80006f0:	429a      	cmp	r2, r3
 80006f2:	f240 80e7 	bls.w	80008c4 <__udivmoddi4+0x22c>
 80006f6:	3902      	subs	r1, #2
 80006f8:	443b      	add	r3, r7
 80006fa:	1a9a      	subs	r2, r3, r2
 80006fc:	b2a3      	uxth	r3, r4
 80006fe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000702:	fb0e 2210 	mls	r2, lr, r0, r2
 8000706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800070a:	fb00 fc0c 	mul.w	ip, r0, ip
 800070e:	459c      	cmp	ip, r3
 8000710:	d909      	bls.n	8000726 <__udivmoddi4+0x8e>
 8000712:	18fb      	adds	r3, r7, r3
 8000714:	f100 32ff 	add.w	r2, r0, #4294967295
 8000718:	f080 80d6 	bcs.w	80008c8 <__udivmoddi4+0x230>
 800071c:	459c      	cmp	ip, r3
 800071e:	f240 80d3 	bls.w	80008c8 <__udivmoddi4+0x230>
 8000722:	443b      	add	r3, r7
 8000724:	3802      	subs	r0, #2
 8000726:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800072a:	eba3 030c 	sub.w	r3, r3, ip
 800072e:	2100      	movs	r1, #0
 8000730:	b11d      	cbz	r5, 800073a <__udivmoddi4+0xa2>
 8000732:	40f3      	lsrs	r3, r6
 8000734:	2200      	movs	r2, #0
 8000736:	e9c5 3200 	strd	r3, r2, [r5]
 800073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073e:	428b      	cmp	r3, r1
 8000740:	d905      	bls.n	800074e <__udivmoddi4+0xb6>
 8000742:	b10d      	cbz	r5, 8000748 <__udivmoddi4+0xb0>
 8000744:	e9c5 0100 	strd	r0, r1, [r5]
 8000748:	2100      	movs	r1, #0
 800074a:	4608      	mov	r0, r1
 800074c:	e7f5      	b.n	800073a <__udivmoddi4+0xa2>
 800074e:	fab3 f183 	clz	r1, r3
 8000752:	2900      	cmp	r1, #0
 8000754:	d146      	bne.n	80007e4 <__udivmoddi4+0x14c>
 8000756:	4573      	cmp	r3, lr
 8000758:	d302      	bcc.n	8000760 <__udivmoddi4+0xc8>
 800075a:	4282      	cmp	r2, r0
 800075c:	f200 8105 	bhi.w	800096a <__udivmoddi4+0x2d2>
 8000760:	1a84      	subs	r4, r0, r2
 8000762:	eb6e 0203 	sbc.w	r2, lr, r3
 8000766:	2001      	movs	r0, #1
 8000768:	4690      	mov	r8, r2
 800076a:	2d00      	cmp	r5, #0
 800076c:	d0e5      	beq.n	800073a <__udivmoddi4+0xa2>
 800076e:	e9c5 4800 	strd	r4, r8, [r5]
 8000772:	e7e2      	b.n	800073a <__udivmoddi4+0xa2>
 8000774:	2a00      	cmp	r2, #0
 8000776:	f000 8090 	beq.w	800089a <__udivmoddi4+0x202>
 800077a:	fab2 f682 	clz	r6, r2
 800077e:	2e00      	cmp	r6, #0
 8000780:	f040 80a4 	bne.w	80008cc <__udivmoddi4+0x234>
 8000784:	1a8a      	subs	r2, r1, r2
 8000786:	0c03      	lsrs	r3, r0, #16
 8000788:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800078c:	b280      	uxth	r0, r0
 800078e:	b2bc      	uxth	r4, r7
 8000790:	2101      	movs	r1, #1
 8000792:	fbb2 fcfe 	udiv	ip, r2, lr
 8000796:	fb0e 221c 	mls	r2, lr, ip, r2
 800079a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800079e:	fb04 f20c 	mul.w	r2, r4, ip
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d907      	bls.n	80007b6 <__udivmoddi4+0x11e>
 80007a6:	18fb      	adds	r3, r7, r3
 80007a8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80007ac:	d202      	bcs.n	80007b4 <__udivmoddi4+0x11c>
 80007ae:	429a      	cmp	r2, r3
 80007b0:	f200 80e0 	bhi.w	8000974 <__udivmoddi4+0x2dc>
 80007b4:	46c4      	mov	ip, r8
 80007b6:	1a9b      	subs	r3, r3, r2
 80007b8:	fbb3 f2fe 	udiv	r2, r3, lr
 80007bc:	fb0e 3312 	mls	r3, lr, r2, r3
 80007c0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80007c4:	fb02 f404 	mul.w	r4, r2, r4
 80007c8:	429c      	cmp	r4, r3
 80007ca:	d907      	bls.n	80007dc <__udivmoddi4+0x144>
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	f102 30ff 	add.w	r0, r2, #4294967295
 80007d2:	d202      	bcs.n	80007da <__udivmoddi4+0x142>
 80007d4:	429c      	cmp	r4, r3
 80007d6:	f200 80ca 	bhi.w	800096e <__udivmoddi4+0x2d6>
 80007da:	4602      	mov	r2, r0
 80007dc:	1b1b      	subs	r3, r3, r4
 80007de:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80007e2:	e7a5      	b.n	8000730 <__udivmoddi4+0x98>
 80007e4:	f1c1 0620 	rsb	r6, r1, #32
 80007e8:	408b      	lsls	r3, r1
 80007ea:	fa22 f706 	lsr.w	r7, r2, r6
 80007ee:	431f      	orrs	r7, r3
 80007f0:	fa0e f401 	lsl.w	r4, lr, r1
 80007f4:	fa20 f306 	lsr.w	r3, r0, r6
 80007f8:	fa2e fe06 	lsr.w	lr, lr, r6
 80007fc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000800:	4323      	orrs	r3, r4
 8000802:	fa00 f801 	lsl.w	r8, r0, r1
 8000806:	fa1f fc87 	uxth.w	ip, r7
 800080a:	fbbe f0f9 	udiv	r0, lr, r9
 800080e:	0c1c      	lsrs	r4, r3, #16
 8000810:	fb09 ee10 	mls	lr, r9, r0, lr
 8000814:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000818:	fb00 fe0c 	mul.w	lr, r0, ip
 800081c:	45a6      	cmp	lr, r4
 800081e:	fa02 f201 	lsl.w	r2, r2, r1
 8000822:	d909      	bls.n	8000838 <__udivmoddi4+0x1a0>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 3aff 	add.w	sl, r0, #4294967295
 800082a:	f080 809c 	bcs.w	8000966 <__udivmoddi4+0x2ce>
 800082e:	45a6      	cmp	lr, r4
 8000830:	f240 8099 	bls.w	8000966 <__udivmoddi4+0x2ce>
 8000834:	3802      	subs	r0, #2
 8000836:	443c      	add	r4, r7
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	fa1f fe83 	uxth.w	lr, r3
 8000840:	fbb4 f3f9 	udiv	r3, r4, r9
 8000844:	fb09 4413 	mls	r4, r9, r3, r4
 8000848:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800084c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000850:	45a4      	cmp	ip, r4
 8000852:	d908      	bls.n	8000866 <__udivmoddi4+0x1ce>
 8000854:	193c      	adds	r4, r7, r4
 8000856:	f103 3eff 	add.w	lr, r3, #4294967295
 800085a:	f080 8082 	bcs.w	8000962 <__udivmoddi4+0x2ca>
 800085e:	45a4      	cmp	ip, r4
 8000860:	d97f      	bls.n	8000962 <__udivmoddi4+0x2ca>
 8000862:	3b02      	subs	r3, #2
 8000864:	443c      	add	r4, r7
 8000866:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800086a:	eba4 040c 	sub.w	r4, r4, ip
 800086e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000872:	4564      	cmp	r4, ip
 8000874:	4673      	mov	r3, lr
 8000876:	46e1      	mov	r9, ip
 8000878:	d362      	bcc.n	8000940 <__udivmoddi4+0x2a8>
 800087a:	d05f      	beq.n	800093c <__udivmoddi4+0x2a4>
 800087c:	b15d      	cbz	r5, 8000896 <__udivmoddi4+0x1fe>
 800087e:	ebb8 0203 	subs.w	r2, r8, r3
 8000882:	eb64 0409 	sbc.w	r4, r4, r9
 8000886:	fa04 f606 	lsl.w	r6, r4, r6
 800088a:	fa22 f301 	lsr.w	r3, r2, r1
 800088e:	431e      	orrs	r6, r3
 8000890:	40cc      	lsrs	r4, r1
 8000892:	e9c5 6400 	strd	r6, r4, [r5]
 8000896:	2100      	movs	r1, #0
 8000898:	e74f      	b.n	800073a <__udivmoddi4+0xa2>
 800089a:	fbb1 fcf2 	udiv	ip, r1, r2
 800089e:	0c01      	lsrs	r1, r0, #16
 80008a0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80008a4:	b280      	uxth	r0, r0
 80008a6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80008aa:	463b      	mov	r3, r7
 80008ac:	4638      	mov	r0, r7
 80008ae:	463c      	mov	r4, r7
 80008b0:	46b8      	mov	r8, r7
 80008b2:	46be      	mov	lr, r7
 80008b4:	2620      	movs	r6, #32
 80008b6:	fbb1 f1f7 	udiv	r1, r1, r7
 80008ba:	eba2 0208 	sub.w	r2, r2, r8
 80008be:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80008c2:	e766      	b.n	8000792 <__udivmoddi4+0xfa>
 80008c4:	4601      	mov	r1, r0
 80008c6:	e718      	b.n	80006fa <__udivmoddi4+0x62>
 80008c8:	4610      	mov	r0, r2
 80008ca:	e72c      	b.n	8000726 <__udivmoddi4+0x8e>
 80008cc:	f1c6 0220 	rsb	r2, r6, #32
 80008d0:	fa2e f302 	lsr.w	r3, lr, r2
 80008d4:	40b7      	lsls	r7, r6
 80008d6:	40b1      	lsls	r1, r6
 80008d8:	fa20 f202 	lsr.w	r2, r0, r2
 80008dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008e0:	430a      	orrs	r2, r1
 80008e2:	fbb3 f8fe 	udiv	r8, r3, lr
 80008e6:	b2bc      	uxth	r4, r7
 80008e8:	fb0e 3318 	mls	r3, lr, r8, r3
 80008ec:	0c11      	lsrs	r1, r2, #16
 80008ee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008f2:	fb08 f904 	mul.w	r9, r8, r4
 80008f6:	40b0      	lsls	r0, r6
 80008f8:	4589      	cmp	r9, r1
 80008fa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80008fe:	b280      	uxth	r0, r0
 8000900:	d93e      	bls.n	8000980 <__udivmoddi4+0x2e8>
 8000902:	1879      	adds	r1, r7, r1
 8000904:	f108 3cff 	add.w	ip, r8, #4294967295
 8000908:	d201      	bcs.n	800090e <__udivmoddi4+0x276>
 800090a:	4589      	cmp	r9, r1
 800090c:	d81f      	bhi.n	800094e <__udivmoddi4+0x2b6>
 800090e:	eba1 0109 	sub.w	r1, r1, r9
 8000912:	fbb1 f9fe 	udiv	r9, r1, lr
 8000916:	fb09 f804 	mul.w	r8, r9, r4
 800091a:	fb0e 1119 	mls	r1, lr, r9, r1
 800091e:	b292      	uxth	r2, r2
 8000920:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000924:	4542      	cmp	r2, r8
 8000926:	d229      	bcs.n	800097c <__udivmoddi4+0x2e4>
 8000928:	18ba      	adds	r2, r7, r2
 800092a:	f109 31ff 	add.w	r1, r9, #4294967295
 800092e:	d2c4      	bcs.n	80008ba <__udivmoddi4+0x222>
 8000930:	4542      	cmp	r2, r8
 8000932:	d2c2      	bcs.n	80008ba <__udivmoddi4+0x222>
 8000934:	f1a9 0102 	sub.w	r1, r9, #2
 8000938:	443a      	add	r2, r7
 800093a:	e7be      	b.n	80008ba <__udivmoddi4+0x222>
 800093c:	45f0      	cmp	r8, lr
 800093e:	d29d      	bcs.n	800087c <__udivmoddi4+0x1e4>
 8000940:	ebbe 0302 	subs.w	r3, lr, r2
 8000944:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000948:	3801      	subs	r0, #1
 800094a:	46e1      	mov	r9, ip
 800094c:	e796      	b.n	800087c <__udivmoddi4+0x1e4>
 800094e:	eba7 0909 	sub.w	r9, r7, r9
 8000952:	4449      	add	r1, r9
 8000954:	f1a8 0c02 	sub.w	ip, r8, #2
 8000958:	fbb1 f9fe 	udiv	r9, r1, lr
 800095c:	fb09 f804 	mul.w	r8, r9, r4
 8000960:	e7db      	b.n	800091a <__udivmoddi4+0x282>
 8000962:	4673      	mov	r3, lr
 8000964:	e77f      	b.n	8000866 <__udivmoddi4+0x1ce>
 8000966:	4650      	mov	r0, sl
 8000968:	e766      	b.n	8000838 <__udivmoddi4+0x1a0>
 800096a:	4608      	mov	r0, r1
 800096c:	e6fd      	b.n	800076a <__udivmoddi4+0xd2>
 800096e:	443b      	add	r3, r7
 8000970:	3a02      	subs	r2, #2
 8000972:	e733      	b.n	80007dc <__udivmoddi4+0x144>
 8000974:	f1ac 0c02 	sub.w	ip, ip, #2
 8000978:	443b      	add	r3, r7
 800097a:	e71c      	b.n	80007b6 <__udivmoddi4+0x11e>
 800097c:	4649      	mov	r1, r9
 800097e:	e79c      	b.n	80008ba <__udivmoddi4+0x222>
 8000980:	eba1 0109 	sub.w	r1, r1, r9
 8000984:	46c4      	mov	ip, r8
 8000986:	fbb1 f9fe 	udiv	r9, r1, lr
 800098a:	fb09 f804 	mul.w	r8, r9, r4
 800098e:	e7c4      	b.n	800091a <__udivmoddi4+0x282>

08000990 <__aeabi_idiv0>:
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <Set7SegDisplayValue>:
						0b00000111, //7
						0b01111111, //8
						0b01101111};//9

void Set7SegDisplayValue(int val)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	DisplayValue = val;
 800099c:	4a05      	ldr	r2, [pc, #20]	@ (80009b4 <Set7SegDisplayValue+0x20>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
	pos = 0;
 80009a2:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <Set7SegDisplayValue+0x24>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	20000088 	.word	0x20000088
 80009b8:	2000008c 	.word	0x2000008c

080009bc <Run7SegDisplay>:

void Run7SegDisplay()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
	unsigned char val;
	pos++;
 80009c2:	4b70      	ldr	r3, [pc, #448]	@ (8000b84 <Run7SegDisplay+0x1c8>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	4a6e      	ldr	r2, [pc, #440]	@ (8000b84 <Run7SegDisplay+0x1c8>)
 80009ca:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(PORT_7SEG_CONTROL0, PIN_7SEG_CONTROL0, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2104      	movs	r1, #4
 80009d0:	486d      	ldr	r0, [pc, #436]	@ (8000b88 <Run7SegDisplay+0x1cc>)
 80009d2:	f001 fcf3 	bl	80023bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2108      	movs	r1, #8
 80009da:	486b      	ldr	r0, [pc, #428]	@ (8000b88 <Run7SegDisplay+0x1cc>)
 80009dc:	f001 fcee 	bl	80023bc <HAL_GPIO_WritePin>

	if (pos & 0x1)
 80009e0:	4b68      	ldr	r3, [pc, #416]	@ (8000b84 <Run7SegDisplay+0x1c8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d010      	beq.n	8000a0e <Run7SegDisplay+0x52>
		val = Mask[DisplayValue % 10];
 80009ec:	4b67      	ldr	r3, [pc, #412]	@ (8000b8c <Run7SegDisplay+0x1d0>)
 80009ee:	6819      	ldr	r1, [r3, #0]
 80009f0:	4b67      	ldr	r3, [pc, #412]	@ (8000b90 <Run7SegDisplay+0x1d4>)
 80009f2:	fb83 2301 	smull	r2, r3, r3, r1
 80009f6:	109a      	asrs	r2, r3, #2
 80009f8:	17cb      	asrs	r3, r1, #31
 80009fa:	1ad2      	subs	r2, r2, r3
 80009fc:	4613      	mov	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	1aca      	subs	r2, r1, r3
 8000a06:	4b63      	ldr	r3, [pc, #396]	@ (8000b94 <Run7SegDisplay+0x1d8>)
 8000a08:	5c9b      	ldrb	r3, [r3, r2]
 8000a0a:	71fb      	strb	r3, [r7, #7]
 8000a0c:	e015      	b.n	8000a3a <Run7SegDisplay+0x7e>
	else
		val = Mask[(DisplayValue / 10) % 10];
 8000a0e:	4b5f      	ldr	r3, [pc, #380]	@ (8000b8c <Run7SegDisplay+0x1d0>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a5f      	ldr	r2, [pc, #380]	@ (8000b90 <Run7SegDisplay+0x1d4>)
 8000a14:	fb82 1203 	smull	r1, r2, r2, r3
 8000a18:	1092      	asrs	r2, r2, #2
 8000a1a:	17db      	asrs	r3, r3, #31
 8000a1c:	1ad1      	subs	r1, r2, r3
 8000a1e:	4b5c      	ldr	r3, [pc, #368]	@ (8000b90 <Run7SegDisplay+0x1d4>)
 8000a20:	fb83 2301 	smull	r2, r3, r3, r1
 8000a24:	109a      	asrs	r2, r3, #2
 8000a26:	17cb      	asrs	r3, r1, #31
 8000a28:	1ad2      	subs	r2, r2, r3
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4413      	add	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	1aca      	subs	r2, r1, r3
 8000a34:	4b57      	ldr	r3, [pc, #348]	@ (8000b94 <Run7SegDisplay+0x1d8>)
 8000a36:	5c9b      	ldrb	r3, [r3, r2]
 8000a38:	71fb      	strb	r3, [r7, #7]

	if (val & 0x80)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	da06      	bge.n	8000a50 <Run7SegDisplay+0x94>
		HAL_GPIO_WritePin(PORT_7SEG_P, PIN_7SEG_P, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a48:	4853      	ldr	r0, [pc, #332]	@ (8000b98 <Run7SegDisplay+0x1dc>)
 8000a4a:	f001 fcb7 	bl	80023bc <HAL_GPIO_WritePin>
 8000a4e:	e005      	b.n	8000a5c <Run7SegDisplay+0xa0>
	else
		HAL_GPIO_WritePin(PORT_7SEG_P, PIN_7SEG_P, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a56:	4850      	ldr	r0, [pc, #320]	@ (8000b98 <Run7SegDisplay+0x1dc>)
 8000a58:	f001 fcb0 	bl	80023bc <HAL_GPIO_WritePin>

	if (val & 0x40)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d006      	beq.n	8000a74 <Run7SegDisplay+0xb8>
		HAL_GPIO_WritePin(PORT_7SEG_G, PIN_7SEG_G, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a6c:	484a      	ldr	r0, [pc, #296]	@ (8000b98 <Run7SegDisplay+0x1dc>)
 8000a6e:	f001 fca5 	bl	80023bc <HAL_GPIO_WritePin>
 8000a72:	e005      	b.n	8000a80 <Run7SegDisplay+0xc4>
	else
		HAL_GPIO_WritePin(PORT_7SEG_G, PIN_7SEG_G, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a7a:	4847      	ldr	r0, [pc, #284]	@ (8000b98 <Run7SegDisplay+0x1dc>)
 8000a7c:	f001 fc9e 	bl	80023bc <HAL_GPIO_WritePin>

	if (val & 0x20)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 0320 	and.w	r3, r3, #32
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d006      	beq.n	8000a98 <Run7SegDisplay+0xdc>
		HAL_GPIO_WritePin(PORT_7SEG_F, PIN_7SEG_F, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a90:	4841      	ldr	r0, [pc, #260]	@ (8000b98 <Run7SegDisplay+0x1dc>)
 8000a92:	f001 fc93 	bl	80023bc <HAL_GPIO_WritePin>
 8000a96:	e005      	b.n	8000aa4 <Run7SegDisplay+0xe8>
	else
		HAL_GPIO_WritePin(PORT_7SEG_F, PIN_7SEG_F, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a9e:	483e      	ldr	r0, [pc, #248]	@ (8000b98 <Run7SegDisplay+0x1dc>)
 8000aa0:	f001 fc8c 	bl	80023bc <HAL_GPIO_WritePin>

	if (val & 0x10)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d006      	beq.n	8000abc <Run7SegDisplay+0x100>
		HAL_GPIO_WritePin(PORT_7SEG_E, PIN_7SEG_E, GPIO_PIN_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ab4:	4838      	ldr	r0, [pc, #224]	@ (8000b98 <Run7SegDisplay+0x1dc>)
 8000ab6:	f001 fc81 	bl	80023bc <HAL_GPIO_WritePin>
 8000aba:	e005      	b.n	8000ac8 <Run7SegDisplay+0x10c>
	else
		HAL_GPIO_WritePin(PORT_7SEG_E, PIN_7SEG_E, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ac2:	4835      	ldr	r0, [pc, #212]	@ (8000b98 <Run7SegDisplay+0x1dc>)
 8000ac4:	f001 fc7a 	bl	80023bc <HAL_GPIO_WritePin>

	if (val & 0x8)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d006      	beq.n	8000ae0 <Run7SegDisplay+0x124>
		HAL_GPIO_WritePin(PORT_7SEG_D, PIN_7SEG_D, GPIO_PIN_SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ad8:	482f      	ldr	r0, [pc, #188]	@ (8000b98 <Run7SegDisplay+0x1dc>)
 8000ada:	f001 fc6f 	bl	80023bc <HAL_GPIO_WritePin>
 8000ade:	e005      	b.n	8000aec <Run7SegDisplay+0x130>
	else
		HAL_GPIO_WritePin(PORT_7SEG_D, PIN_7SEG_D, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ae6:	482c      	ldr	r0, [pc, #176]	@ (8000b98 <Run7SegDisplay+0x1dc>)
 8000ae8:	f001 fc68 	bl	80023bc <HAL_GPIO_WritePin>

	if (val & 0x4)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d006      	beq.n	8000b04 <Run7SegDisplay+0x148>
		HAL_GPIO_WritePin(PORT_7SEG_C, PIN_7SEG_C, GPIO_PIN_SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000afc:	4826      	ldr	r0, [pc, #152]	@ (8000b98 <Run7SegDisplay+0x1dc>)
 8000afe:	f001 fc5d 	bl	80023bc <HAL_GPIO_WritePin>
 8000b02:	e005      	b.n	8000b10 <Run7SegDisplay+0x154>
	else
		HAL_GPIO_WritePin(PORT_7SEG_C, PIN_7SEG_C, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b0a:	4823      	ldr	r0, [pc, #140]	@ (8000b98 <Run7SegDisplay+0x1dc>)
 8000b0c:	f001 fc56 	bl	80023bc <HAL_GPIO_WritePin>

	if (val & 0x2)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d006      	beq.n	8000b28 <Run7SegDisplay+0x16c>
		HAL_GPIO_WritePin(PORT_7SEG_B, PIN_7SEG_B, GPIO_PIN_SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b20:	481d      	ldr	r0, [pc, #116]	@ (8000b98 <Run7SegDisplay+0x1dc>)
 8000b22:	f001 fc4b 	bl	80023bc <HAL_GPIO_WritePin>
 8000b26:	e005      	b.n	8000b34 <Run7SegDisplay+0x178>
	else
		HAL_GPIO_WritePin(PORT_7SEG_B, PIN_7SEG_B, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b2e:	481a      	ldr	r0, [pc, #104]	@ (8000b98 <Run7SegDisplay+0x1dc>)
 8000b30:	f001 fc44 	bl	80023bc <HAL_GPIO_WritePin>

	if (val & 0x1)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d006      	beq.n	8000b4c <Run7SegDisplay+0x190>
		HAL_GPIO_WritePin(PORT_7SEG_A, PIN_7SEG_A, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b44:	4814      	ldr	r0, [pc, #80]	@ (8000b98 <Run7SegDisplay+0x1dc>)
 8000b46:	f001 fc39 	bl	80023bc <HAL_GPIO_WritePin>
 8000b4a:	e005      	b.n	8000b58 <Run7SegDisplay+0x19c>
	else
		HAL_GPIO_WritePin(PORT_7SEG_A, PIN_7SEG_A, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b52:	4811      	ldr	r0, [pc, #68]	@ (8000b98 <Run7SegDisplay+0x1dc>)
 8000b54:	f001 fc32 	bl	80023bc <HAL_GPIO_WritePin>


	if (pos & 0x1)
 8000b58:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <Run7SegDisplay+0x1c8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d005      	beq.n	8000b70 <Run7SegDisplay+0x1b4>
		HAL_GPIO_WritePin(PORT_7SEG_CONTROL0, PIN_7SEG_CONTROL0, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2104      	movs	r1, #4
 8000b68:	4807      	ldr	r0, [pc, #28]	@ (8000b88 <Run7SegDisplay+0x1cc>)
 8000b6a:	f001 fc27 	bl	80023bc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_SET);
}
 8000b6e:	e004      	b.n	8000b7a <Run7SegDisplay+0x1be>
		HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2108      	movs	r1, #8
 8000b74:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <Run7SegDisplay+0x1cc>)
 8000b76:	f001 fc21 	bl	80023bc <HAL_GPIO_WritePin>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000008c 	.word	0x2000008c
 8000b88:	40021800 	.word	0x40021800
 8000b8c:	20000088 	.word	0x20000088
 8000b90:	66666667 	.word	0x66666667
 8000b94:	20000000 	.word	0x20000000
 8000b98:	40021000 	.word	0x40021000

08000b9c <hx711_init>:
 */

#include <HX711.h>

//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	@ 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	80fb      	strh	r3, [r7, #6]
  // Setup the pin connections with the STM Board
  hx711->clk_gpio = clk_gpio;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	88fa      	ldrh	r2, [r7, #6]
 8000bb6:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000bc2:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	68b8      	ldr	r0, [r7, #8]
 8000bec:	f001 fa22 	bl	8002034 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8000bfc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000bfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	6838      	ldr	r0, [r7, #0]
 8000c08:	f001 fa14 	bl	8002034 <HAL_GPIO_Init>

}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	@ 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <set_gain>:
	hx711->Ascale = Ascale;
	hx711->Bscale = Bscale;
}

//#############################################################################################
void set_gain(hx711_t *hx711, uint8_t Again, uint8_t Bgain){
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
 8000c20:	4613      	mov	r3, r2
 8000c22:	70bb      	strb	r3, [r7, #2]
  // Define A channel's gain
	switch (Again) {
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	2b40      	cmp	r3, #64	@ 0x40
 8000c28:	d005      	beq.n	8000c36 <set_gain+0x22>
 8000c2a:	2b80      	cmp	r3, #128	@ 0x80
 8000c2c:	d107      	bne.n	8000c3e <set_gain+0x2a>
			case 128:		// channel A, gain factor 128
				hx711->Again = 1;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	751a      	strb	r2, [r3, #20]
				break;
 8000c34:	e003      	b.n	8000c3e <set_gain+0x2a>
			case 64:		// channel A, gain factor 64
				hx711->Again = 3;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2203      	movs	r2, #3
 8000c3a:	751a      	strb	r2, [r3, #20]
				break;
 8000c3c:	bf00      	nop
		}
	hx711->Bgain = 2;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2202      	movs	r2, #2
 8000c42:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <set_offset>:

//#############################################################################################
void set_offset(hx711_t *hx711, long offset, uint8_t channel){
 8000c52:	b480      	push	{r7}
 8000c54:	b085      	sub	sp, #20
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	71fb      	strb	r3, [r7, #7]
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d103      	bne.n	8000c6e <set_offset+0x1c>
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
	else hx711->Boffset = offset;
}
 8000c6c:	e002      	b.n	8000c74 <set_offset+0x22>
	else hx711->Boffset = offset;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	68ba      	ldr	r2, [r7, #8]
 8000c72:	619a      	str	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <shiftIn>:

//############################################################################################
uint8_t shiftIn(hx711_t *hx711, uint8_t bitOrder) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]
    uint8_t i;

    for(i = 0; i < 8; ++i) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	73bb      	strb	r3, [r7, #14]
 8000c94:	e03e      	b.n	8000d14 <shiftIn+0x94>
    	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	891b      	ldrh	r3, [r3, #8]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f001 fb8b 	bl	80023bc <HAL_GPIO_WritePin>
        if(bitOrder == 0)
 8000ca6:	78fb      	ldrb	r3, [r7, #3]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d113      	bne.n	8000cd4 <shiftIn+0x54>
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << i;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	895b      	ldrh	r3, [r3, #10]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4610      	mov	r0, r2
 8000cb8:	f001 fb68 	bl	800238c <HAL_GPIO_ReadPin>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	7bbb      	ldrb	r3, [r7, #14]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	b25a      	sxtb	r2, r3
 8000cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	b25b      	sxtb	r3, r3
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e014      	b.n	8000cfe <shiftIn+0x7e>
        else
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << (7 - i);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	895b      	ldrh	r3, [r3, #10]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4610      	mov	r0, r2
 8000ce0:	f001 fb54 	bl	800238c <HAL_GPIO_ReadPin>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	7bbb      	ldrb	r3, [r7, #14]
 8000cea:	f1c3 0307 	rsb	r3, r3, #7
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	b25a      	sxtb	r2, r3
 8000cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6818      	ldr	r0, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	891b      	ldrh	r3, [r3, #8]
 8000d06:	2200      	movs	r2, #0
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f001 fb57 	bl	80023bc <HAL_GPIO_WritePin>
    for(i = 0; i < 8; ++i) {
 8000d0e:	7bbb      	ldrb	r3, [r7, #14]
 8000d10:	3301      	adds	r3, #1
 8000d12:	73bb      	strb	r3, [r7, #14]
 8000d14:	7bbb      	ldrb	r3, [r7, #14]
 8000d16:	2b07      	cmp	r3, #7
 8000d18:	d9bd      	bls.n	8000c96 <shiftIn+0x16>
    }
    return value;
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <is_ready>:

//############################################################################################
bool is_ready(hx711_t *hx711) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET){
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	895b      	ldrh	r3, [r3, #10]
 8000d34:	4619      	mov	r1, r3
 8000d36:	4610      	mov	r0, r2
 8000d38:	f001 fb28 	bl	800238c <HAL_GPIO_ReadPin>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <is_ready+0x22>
		return 1;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e000      	b.n	8000d48 <is_ready+0x24>
	}
	return 0;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <wait_ready>:

//############################################################################################
void wait_ready(hx711_t *hx711) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	// Wait for the chip to become ready.
	while (!is_ready(hx711)) {
 8000d58:	e002      	b.n	8000d60 <wait_ready+0x10>
		HAL_Delay(0);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f001 f834 	bl	8001dc8 <HAL_Delay>
	while (!is_ready(hx711)) {
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ffdf 	bl	8000d24 <is_ready>
 8000d66:	4603      	mov	r3, r0
 8000d68:	f083 0301 	eor.w	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f3      	bne.n	8000d5a <wait_ready+0xa>
	}
}
 8000d72:	bf00      	nop
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <read>:

//############################################################################################
long read(hx711_t *hx711, uint8_t channel){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	70fb      	strb	r3, [r7, #3]
	wait_ready(hx711);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ffe1 	bl	8000d50 <wait_ready>
	unsigned long value = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = { 0 };
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	2100      	movs	r1, #0
 8000d98:	460a      	mov	r2, r1
 8000d9a:	801a      	strh	r2, [r3, #0]
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	709a      	strb	r2, [r3, #2]
	uint8_t filler = 0x00;
 8000da0:	2300      	movs	r3, #0
 8000da2:	75fb      	strb	r3, [r7, #23]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop

	noInterrupts();

	data[2] = shiftIn(hx711, 1);
 8000da8:	2101      	movs	r1, #1
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ff68 	bl	8000c80 <shiftIn>
 8000db0:	4603      	mov	r3, r0
 8000db2:	72bb      	strb	r3, [r7, #10]
	data[1] = shiftIn(hx711, 1);
 8000db4:	2101      	movs	r1, #1
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ff62 	bl	8000c80 <shiftIn>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	727b      	strb	r3, [r7, #9]
	data[0] = shiftIn(hx711, 1);
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ff5c 	bl	8000c80 <shiftIn>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	723b      	strb	r3, [r7, #8]

	uint8_t gain = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	75bb      	strb	r3, [r7, #22]
	if(channel == 0) gain = hx711->Again;
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d103      	bne.n	8000dde <read+0x62>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7d1b      	ldrb	r3, [r3, #20]
 8000dda:	75bb      	strb	r3, [r7, #22]
 8000ddc:	e003      	b.n	8000de6 <read+0x6a>
	else gain = hx711->Bgain;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de4:	75bb      	strb	r3, [r7, #22]

	for (unsigned int i = 0; i < gain; i++) {
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	e012      	b.n	8000e12 <read+0x96>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	891b      	ldrh	r3, [r3, #8]
 8000df4:	2201      	movs	r2, #1
 8000df6:	4619      	mov	r1, r3
 8000df8:	f001 fae0 	bl	80023bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	891b      	ldrh	r3, [r3, #8]
 8000e04:	2200      	movs	r2, #0
 8000e06:	4619      	mov	r1, r3
 8000e08:	f001 fad8 	bl	80023bc <HAL_GPIO_WritePin>
	for (unsigned int i = 0; i < gain; i++) {
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	7dbb      	ldrb	r3, [r7, #22]
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d3e8      	bcc.n	8000dec <read+0x70>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e1a:	b662      	cpsie	i
}
 8000e1c:	bf00      	nop
	}

	interrupts();

	// Replicate the most significant bit to pad out a 32-bit signed integer
	if (data[2] & 0x80) {
 8000e1e:	7abb      	ldrb	r3, [r7, #10]
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	da02      	bge.n	8000e2c <read+0xb0>
		filler = 0xFF;
 8000e26:	23ff      	movs	r3, #255	@ 0xff
 8000e28:	75fb      	strb	r3, [r7, #23]
 8000e2a:	e001      	b.n	8000e30 <read+0xb4>
	} else {
		filler = 0x00;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	75fb      	strb	r3, [r7, #23]
	}

	// Construct a 32-bit signed integer
	value = ( (unsigned long)(filler) << 24
 8000e30:	7dfb      	ldrb	r3, [r7, #23]
 8000e32:	061a      	lsls	r2, r3, #24
			| (unsigned long)(data[2]) << 16
 8000e34:	7abb      	ldrb	r3, [r7, #10]
 8000e36:	041b      	lsls	r3, r3, #16
 8000e38:	431a      	orrs	r2, r3
			| (unsigned long)(data[1]) << 8
 8000e3a:	7a7b      	ldrb	r3, [r7, #9]
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	4313      	orrs	r3, r2
			| (unsigned long)(data[0]) );
 8000e40:	7a3a      	ldrb	r2, [r7, #8]
	value = ( (unsigned long)(filler) << 24
 8000e42:	4313      	orrs	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]

	return (long)(value);
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <read_average>:

//############################################################################################
long read_average(hx711_t *hx711, int8_t times, uint8_t channel) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	70bb      	strb	r3, [r7, #2]
	long sum = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
	for (int8_t i = 0; i < times; i++) {
 8000e64:	2300      	movs	r3, #0
 8000e66:	72fb      	strb	r3, [r7, #11]
 8000e68:	e011      	b.n	8000e8e <read_average+0x3e>
		sum += read(hx711, channel);
 8000e6a:	78bb      	ldrb	r3, [r7, #2]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ff84 	bl	8000d7c <read>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4413      	add	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
		HAL_Delay(0);
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f000 ffa3 	bl	8001dc8 <HAL_Delay>
	for (int8_t i = 0; i < times; i++) {
 8000e82:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	3301      	adds	r3, #1
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	72fb      	strb	r3, [r7, #11]
 8000e8e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	dbe7      	blt.n	8000e6a <read_average+0x1a>
	}
	return sum / times;
 8000e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <tare>:
	else offset = hx711->Boffset;
	return read_average(hx711, times, channel) - offset;
}

//############################################################################################
void tare(hx711_t *hx711, uint8_t times, uint8_t channel) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	70fb      	strb	r3, [r7, #3]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	70bb      	strb	r3, [r7, #2]
	read(hx711, channel); // Change channel
 8000ebc:	78bb      	ldrb	r3, [r7, #2]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff5b 	bl	8000d7c <read>
	double sum = read_average(hx711, times, channel);
 8000ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000eca:	78ba      	ldrb	r2, [r7, #2]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffbe 	bl	8000e50 <read_average>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fb34 	bl	8000544 <__aeabi_i2d>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	set_offset(hx711, sum, channel);
 8000ee4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ee8:	f7ff fb96 	bl	8000618 <__aeabi_d2iz>
 8000eec:	4601      	mov	r1, r0
 8000eee:	78bb      	ldrb	r3, [r7, #2]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fead 	bl	8000c52 <set_offset>
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <tare_all>:

//############################################################################################
void tare_all(hx711_t *hx711, uint8_t times) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	70fb      	strb	r3, [r7, #3]
	tare(hx711, times, CHANNEL_A);
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4619      	mov	r1, r3
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffca 	bl	8000eac <tare>
	tare(hx711, times, CHANNEL_B);
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffc4 	bl	8000eac <tare>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b08a      	sub	sp, #40	@ 0x28
 8000f30:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f32:	f000 fed7 	bl	8001ce4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f36:	f000 f8cb 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3a:	f000 f9cf 	bl	80012dc <MX_GPIO_Init>
  MX_SPI4_Init();
 8000f3e:	f000 f937 	bl	80011b0 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000f42:	f000 f9a1 	bl	8001288 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000f46:	f000 f969 	bl	800121c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //led 7 segment
  HAL_TIM_Base_Start_IT(&htim6);
 8000f4a:	4855      	ldr	r0, [pc, #340]	@ (80010a0 <main+0x174>)
 8000f4c:	f002 fd68 	bl	8003a20 <HAL_TIM_Base_Start_IT>

  //RFID
  TM_MFRC522_Init();
 8000f50:	f000 fbda 	bl	8001708 <TM_MFRC522_Init>
  sprintf(msg, "RC522 RFID Reader Initialized\r\n");
 8000f54:	4953      	ldr	r1, [pc, #332]	@ (80010a4 <main+0x178>)
 8000f56:	4854      	ldr	r0, [pc, #336]	@ (80010a8 <main+0x17c>)
 8000f58:	f003 fc2c 	bl	80047b4 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8000f5c:	4852      	ldr	r0, [pc, #328]	@ (80010a8 <main+0x17c>)
 8000f5e:	f7ff f947 	bl	80001f0 <strlen>
 8000f62:	4603      	mov	r3, r0
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6a:	494f      	ldr	r1, [pc, #316]	@ (80010a8 <main+0x17c>)
 8000f6c:	484f      	ldr	r0, [pc, #316]	@ (80010ac <main+0x180>)
 8000f6e:	f003 f865 	bl	800403c <HAL_UART_Transmit>

  // Khởi tạo HX711
  hx711_init(&hx711, HX711_SCK_PORT, HX711_SCK_PIN, HX711_DT_PORT, HX711_DT_PIN);
 8000f72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	4b4d      	ldr	r3, [pc, #308]	@ (80010b0 <main+0x184>)
 8000f7a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f7e:	494c      	ldr	r1, [pc, #304]	@ (80010b0 <main+0x184>)
 8000f80:	484c      	ldr	r0, [pc, #304]	@ (80010b4 <main+0x188>)
 8000f82:	f7ff fe0b 	bl	8000b9c <hx711_init>
  set_gain(&hx711, 128, 32);
 8000f86:	2220      	movs	r2, #32
 8000f88:	2180      	movs	r1, #128	@ 0x80
 8000f8a:	484a      	ldr	r0, [pc, #296]	@ (80010b4 <main+0x188>)
 8000f8c:	f7ff fe42 	bl	8000c14 <set_gain>
  tare_all(&hx711, 10);
 8000f90:	210a      	movs	r1, #10
 8000f92:	4848      	ldr	r0, [pc, #288]	@ (80010b4 <main+0x188>)
 8000f94:	f7ff ffb4 	bl	8000f00 <tare_all>
  HAL_Delay(1000);
 8000f98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f9c:	f000 ff14 	bl	8001dc8 <HAL_Delay>
  	  // Dùng offset do tare_all tính sẵn
  offset = hx711.Aoffset;
 8000fa0:	4b44      	ldr	r3, [pc, #272]	@ (80010b4 <main+0x188>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	4a44      	ldr	r2, [pc, #272]	@ (80010b8 <main+0x18c>)
 8000fa6:	6013      	str	r3, [r2, #0]
  scale_factor = -33333; //chỉnh độ nhạy cân
 8000fa8:	4b44      	ldr	r3, [pc, #272]	@ (80010bc <main+0x190>)
 8000faa:	4a45      	ldr	r2, [pc, #276]	@ (80010c0 <main+0x194>)
 8000fac:	601a      	str	r2, [r3, #0]
//  		Set7SegDisplayValue(0);  // Hiển thị 00
//
//  	HAL_Delay(500);

  	// loadcell
	long raw = read_average(&hx711, 10, CHANNEL_A);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	210a      	movs	r1, #10
 8000fb2:	4840      	ldr	r0, [pc, #256]	@ (80010b4 <main+0x188>)
 8000fb4:	f7ff ff4c 	bl	8000e50 <read_average>
 8000fb8:	6138      	str	r0, [r7, #16]
	long corrected = raw - offset;
 8000fba:	4b3f      	ldr	r3, [pc, #252]	@ (80010b8 <main+0x18c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	60fb      	str	r3, [r7, #12]
	int weight = (corrected + scale_factor/2) / scale_factor;
 8000fc4:	4b3d      	ldr	r3, [pc, #244]	@ (80010bc <main+0x190>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	0fda      	lsrs	r2, r3, #31
 8000fca:	4413      	add	r3, r2
 8000fcc:	105b      	asrs	r3, r3, #1
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	441a      	add	r2, r3
 8000fd4:	4b39      	ldr	r3, [pc, #228]	@ (80010bc <main+0x190>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fdc:	617b      	str	r3, [r7, #20]
	if (weight < 0) weight = 0;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	da01      	bge.n	8000fe8 <main+0xbc>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
	if (weight > 10) weight = 10;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2b0a      	cmp	r3, #10
 8000fec:	dd01      	ble.n	8000ff2 <main+0xc6>
 8000fee:	230a      	movs	r3, #10
 8000ff0:	617b      	str	r3, [r7, #20]
//	sprintf(msg, "Raw=%ld Offset=%ld Corr=%ld Weight=%d kg\r\n", raw, offset, corrected, weight);
//	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
//	HAL_Delay(500);

	//led7 display
	Set7SegDisplayValue(weight);
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff fcce 	bl	8000994 <Set7SegDisplayValue>

  	// Đọc RFID
  	uint8_t CardID[5];
  	HAL_Delay(100);
 8000ff8:	2064      	movs	r0, #100	@ 0x64
 8000ffa:	f000 fee5 	bl	8001dc8 <HAL_Delay>

  	if (TM_MFRC522_Check(CardID) == MI_OK) {
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fba7 	bl	8001754 <TM_MFRC522_Check>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d12c      	bne.n	8001066 <main+0x13a>
  		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001012:	482c      	ldr	r0, [pc, #176]	@ (80010c4 <main+0x198>)
 8001014:	f001 f9d2 	bl	80023bc <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101e:	4829      	ldr	r0, [pc, #164]	@ (80010c4 <main+0x198>)
 8001020:	f001 f9cc 	bl	80023bc <HAL_GPIO_WritePin>

  		sprintf(msg, "RFID: %02X%02X%02X%02X%02X Weight: %d kg\r\n",
  				CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], weight);
 8001024:	793b      	ldrb	r3, [r7, #4]
  		sprintf(msg, "RFID: %02X%02X%02X%02X%02X Weight: %d kg\r\n",
 8001026:	461c      	mov	r4, r3
  				CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], weight);
 8001028:	797b      	ldrb	r3, [r7, #5]
  		sprintf(msg, "RFID: %02X%02X%02X%02X%02X Weight: %d kg\r\n",
 800102a:	461d      	mov	r5, r3
  				CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], weight);
 800102c:	79bb      	ldrb	r3, [r7, #6]
  		sprintf(msg, "RFID: %02X%02X%02X%02X%02X Weight: %d kg\r\n",
 800102e:	461a      	mov	r2, r3
  				CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], weight);
 8001030:	79fb      	ldrb	r3, [r7, #7]
  		sprintf(msg, "RFID: %02X%02X%02X%02X%02X Weight: %d kg\r\n",
 8001032:	4619      	mov	r1, r3
  				CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], weight);
 8001034:	7a3b      	ldrb	r3, [r7, #8]
  		sprintf(msg, "RFID: %02X%02X%02X%02X%02X Weight: %d kg\r\n",
 8001036:	4618      	mov	r0, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	9303      	str	r3, [sp, #12]
 800103c:	9002      	str	r0, [sp, #8]
 800103e:	9101      	str	r1, [sp, #4]
 8001040:	9200      	str	r2, [sp, #0]
 8001042:	462b      	mov	r3, r5
 8001044:	4622      	mov	r2, r4
 8001046:	4920      	ldr	r1, [pc, #128]	@ (80010c8 <main+0x19c>)
 8001048:	4817      	ldr	r0, [pc, #92]	@ (80010a8 <main+0x17c>)
 800104a:	f003 fbb3 	bl	80047b4 <siprintf>
  		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 800104e:	4816      	ldr	r0, [pc, #88]	@ (80010a8 <main+0x17c>)
 8001050:	f7ff f8ce 	bl	80001f0 <strlen>
 8001054:	4603      	mov	r3, r0
 8001056:	b29a      	uxth	r2, r3
 8001058:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105c:	4912      	ldr	r1, [pc, #72]	@ (80010a8 <main+0x17c>)
 800105e:	4813      	ldr	r0, [pc, #76]	@ (80010ac <main+0x180>)
 8001060:	f002 ffec 	bl	800403c <HAL_UART_Transmit>
 8001064:	e7a3      	b.n	8000fae <main+0x82>
  	} else {
  		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800106c:	4815      	ldr	r0, [pc, #84]	@ (80010c4 <main+0x198>)
 800106e:	f001 f9a5 	bl	80023bc <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001078:	4812      	ldr	r0, [pc, #72]	@ (80010c4 <main+0x198>)
 800107a:	f001 f99f 	bl	80023bc <HAL_GPIO_WritePin>

  		sprintf(msg, "No Card Found! Weight: %d kg\r\n", weight);
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4912      	ldr	r1, [pc, #72]	@ (80010cc <main+0x1a0>)
 8001082:	4809      	ldr	r0, [pc, #36]	@ (80010a8 <main+0x17c>)
 8001084:	f003 fb96 	bl	80047b4 <siprintf>
  		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8001088:	4807      	ldr	r0, [pc, #28]	@ (80010a8 <main+0x17c>)
 800108a:	f7ff f8b1 	bl	80001f0 <strlen>
 800108e:	4603      	mov	r3, r0
 8001090:	b29a      	uxth	r2, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001096:	4904      	ldr	r1, [pc, #16]	@ (80010a8 <main+0x17c>)
 8001098:	4804      	ldr	r0, [pc, #16]	@ (80010ac <main+0x180>)
 800109a:	f002 ffcf 	bl	800403c <HAL_UART_Transmit>
  {
 800109e:	e786      	b.n	8000fae <main+0x82>
 80010a0:	200000e8 	.word	0x200000e8
 80010a4:	0800510c 	.word	0x0800510c
 80010a8:	200001a0 	.word	0x200001a0
 80010ac:	20000130 	.word	0x20000130
 80010b0:	40020000 	.word	0x40020000
 80010b4:	20000178 	.word	0x20000178
 80010b8:	2000019c 	.word	0x2000019c
 80010bc:	2000000c 	.word	0x2000000c
 80010c0:	ffff7dcb 	.word	0xffff7dcb
 80010c4:	40021800 	.word	0x40021800
 80010c8:	0800512c 	.word	0x0800512c
 80010cc:	08005158 	.word	0x08005158

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b094      	sub	sp, #80	@ 0x50
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 0320 	add.w	r3, r7, #32
 80010da:	2230      	movs	r2, #48	@ 0x30
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 fb8a 	bl	80047f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	4b2b      	ldr	r3, [pc, #172]	@ (80011a8 <SystemClock_Config+0xd8>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fc:	4a2a      	ldr	r2, [pc, #168]	@ (80011a8 <SystemClock_Config+0xd8>)
 80010fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001102:	6413      	str	r3, [r2, #64]	@ 0x40
 8001104:	4b28      	ldr	r3, [pc, #160]	@ (80011a8 <SystemClock_Config+0xd8>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <SystemClock_Config+0xdc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a24      	ldr	r2, [pc, #144]	@ (80011ac <SystemClock_Config+0xdc>)
 800111a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b22      	ldr	r3, [pc, #136]	@ (80011ac <SystemClock_Config+0xdc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800112c:	2301      	movs	r3, #1
 800112e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001130:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001134:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001136:	2302      	movs	r3, #2
 8001138:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800113e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001140:	2304      	movs	r3, #4
 8001142:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001144:	23b4      	movs	r3, #180	@ 0xb4
 8001146:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800114c:	2304      	movs	r3, #4
 800114e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001150:	f107 0320 	add.w	r3, r7, #32
 8001154:	4618      	mov	r0, r3
 8001156:	f001 f99b 	bl	8002490 <HAL_RCC_OscConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001160:	f000 f958 	bl	8001414 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001164:	f001 f944 	bl	80023f0 <HAL_PWREx_EnableOverDrive>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800116e:	f000 f951 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001172:	230f      	movs	r3, #15
 8001174:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001176:	2302      	movs	r3, #2
 8001178:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800117e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001182:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001184:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001188:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	2105      	movs	r1, #5
 8001190:	4618      	mov	r0, r3
 8001192:	f001 fbf5 	bl	8002980 <HAL_RCC_ClockConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800119c:	f000 f93a 	bl	8001414 <Error_Handler>
  }
}
 80011a0:	bf00      	nop
 80011a2:	3750      	adds	r7, #80	@ 0x50
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80011b4:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <MX_SPI4_Init+0x64>)
 80011b6:	4a18      	ldr	r2, [pc, #96]	@ (8001218 <MX_SPI4_Init+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80011ba:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <MX_SPI4_Init+0x64>)
 80011bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011c0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80011c2:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <MX_SPI4_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c8:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <MX_SPI4_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ce:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <MX_SPI4_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <MX_SPI4_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <MX_SPI4_Init+0x64>)
 80011dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <MX_SPI4_Init+0x64>)
 80011e4:	2218      	movs	r2, #24
 80011e6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <MX_SPI4_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <MX_SPI4_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f4:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <MX_SPI4_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <MX_SPI4_Init+0x64>)
 80011fc:	220a      	movs	r2, #10
 80011fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	@ (8001214 <MX_SPI4_Init+0x64>)
 8001202:	f001 fddd 	bl	8002dc0 <HAL_SPI_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 800120c:	f000 f902 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000090 	.word	0x20000090
 8001218:	40013400 	.word	0x40013400

0800121c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001222:	463b      	mov	r3, r7
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <MX_TIM6_Init+0x64>)
 800122c:	4a15      	ldr	r2, [pc, #84]	@ (8001284 <MX_TIM6_Init+0x68>)
 800122e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <MX_TIM6_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <MX_TIM6_Init+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800123c:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <MX_TIM6_Init+0x64>)
 800123e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001242:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001244:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_TIM6_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800124a:	480d      	ldr	r0, [pc, #52]	@ (8001280 <MX_TIM6_Init+0x64>)
 800124c:	f002 fb98 	bl	8003980 <HAL_TIM_Base_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001256:	f000 f8dd 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	4619      	mov	r1, r3
 8001266:	4806      	ldr	r0, [pc, #24]	@ (8001280 <MX_TIM6_Init+0x64>)
 8001268:	f002 fe08 	bl	8003e7c <HAL_TIMEx_MasterConfigSynchronization>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001272:	f000 f8cf 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200000e8 	.word	0x200000e8
 8001284:	40001000 	.word	0x40001000

08001288 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <MX_USART1_UART_Init+0x4c>)
 800128e:	4a12      	ldr	r2, [pc, #72]	@ (80012d8 <MX_USART1_UART_Init+0x50>)
 8001290:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <MX_USART1_UART_Init+0x4c>)
 8001294:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001298:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <MX_USART1_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <MX_USART1_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <MX_USART1_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MX_USART1_UART_Init+0x4c>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <MX_USART1_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <MX_USART1_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <MX_USART1_UART_Init+0x4c>)
 80012c0:	f002 fe6c 	bl	8003f9c <HAL_UART_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012ca:	f000 f8a3 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000130 	.word	0x20000130
 80012d8:	40011000 	.word	0x40011000

080012dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	@ 0x28
 80012e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b43      	ldr	r3, [pc, #268]	@ (8001404 <MX_GPIO_Init+0x128>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a42      	ldr	r2, [pc, #264]	@ (8001404 <MX_GPIO_Init+0x128>)
 80012fc:	f043 0310 	orr.w	r3, r3, #16
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b40      	ldr	r3, [pc, #256]	@ (8001404 <MX_GPIO_Init+0x128>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b3c      	ldr	r3, [pc, #240]	@ (8001404 <MX_GPIO_Init+0x128>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a3b      	ldr	r2, [pc, #236]	@ (8001404 <MX_GPIO_Init+0x128>)
 8001318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b39      	ldr	r3, [pc, #228]	@ (8001404 <MX_GPIO_Init+0x128>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	4b35      	ldr	r3, [pc, #212]	@ (8001404 <MX_GPIO_Init+0x128>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a34      	ldr	r2, [pc, #208]	@ (8001404 <MX_GPIO_Init+0x128>)
 8001334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b32      	ldr	r3, [pc, #200]	@ (8001404 <MX_GPIO_Init+0x128>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b2e      	ldr	r3, [pc, #184]	@ (8001404 <MX_GPIO_Init+0x128>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a2d      	ldr	r2, [pc, #180]	@ (8001404 <MX_GPIO_Init+0x128>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b2b      	ldr	r3, [pc, #172]	@ (8001404 <MX_GPIO_Init+0x128>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001362:	2200      	movs	r2, #0
 8001364:	f64f 7110 	movw	r1, #65296	@ 0xff10
 8001368:	4827      	ldr	r0, [pc, #156]	@ (8001408 <MX_GPIO_Init+0x12c>)
 800136a:	f001 f827 	bl	80023bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f246 010c 	movw	r1, #24588	@ 0x600c
 8001374:	4825      	ldr	r0, [pc, #148]	@ (800140c <MX_GPIO_Init+0x130>)
 8001376:	f001 f821 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001380:	4823      	ldr	r0, [pc, #140]	@ (8001410 <MX_GPIO_Init+0x134>)
 8001382:	f001 f81b 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001386:	f64f 7310 	movw	r3, #65296	@ 0xff10
 800138a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	481a      	ldr	r0, [pc, #104]	@ (8001408 <MX_GPIO_Init+0x12c>)
 80013a0:	f000 fe48 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_14;
 80013a4:	f246 030c 	movw	r3, #24588	@ 0x600c
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4813      	ldr	r0, [pc, #76]	@ (800140c <MX_GPIO_Init+0x130>)
 80013be:	f000 fe39 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	480e      	ldr	r0, [pc, #56]	@ (8001410 <MX_GPIO_Init+0x134>)
 80013d8:	f000 fe2c 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4806      	ldr	r0, [pc, #24]	@ (8001410 <MX_GPIO_Init+0x134>)
 80013f6:	f000 fe1d 	bl	8002034 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	@ 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40021000 	.word	0x40021000
 800140c:	40021800 	.word	0x40021800
 8001410:	40020000 	.word	0x40020000

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <Error_Handler+0x8>

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <HAL_MspInit+0x4c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	4a0f      	ldr	r2, [pc, #60]	@ (800146c <HAL_MspInit+0x4c>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001434:	6453      	str	r3, [r2, #68]	@ 0x44
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <HAL_MspInit+0x4c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	4a08      	ldr	r2, [pc, #32]	@ (800146c <HAL_MspInit+0x4c>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	@ 0x40
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800

08001470 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	@ 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a19      	ldr	r2, [pc, #100]	@ (80014f4 <HAL_SPI_MspInit+0x84>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d12b      	bne.n	80014ea <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <HAL_SPI_MspInit+0x88>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	4a17      	ldr	r2, [pc, #92]	@ (80014f8 <HAL_SPI_MspInit+0x88>)
 800149c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <HAL_SPI_MspInit+0x88>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <HAL_SPI_MspInit+0x88>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a10      	ldr	r2, [pc, #64]	@ (80014f8 <HAL_SPI_MspInit+0x88>)
 80014b8:	f043 0310 	orr.w	r3, r3, #16
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <HAL_SPI_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80014ca:	2364      	movs	r3, #100	@ 0x64
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014da:	2305      	movs	r3, #5
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	@ (80014fc <HAL_SPI_MspInit+0x8c>)
 80014e6:	f000 fda5 	bl	8002034 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	@ 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40013400 	.word	0x40013400
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40021000 	.word	0x40021000

08001500 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0e      	ldr	r2, [pc, #56]	@ (8001548 <HAL_TIM_Base_MspInit+0x48>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d115      	bne.n	800153e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <HAL_TIM_Base_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	4a0c      	ldr	r2, [pc, #48]	@ (800154c <HAL_TIM_Base_MspInit+0x4c>)
 800151c:	f043 0310 	orr.w	r3, r3, #16
 8001520:	6413      	str	r3, [r2, #64]	@ 0x40
 8001522:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <HAL_TIM_Base_MspInit+0x4c>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2036      	movs	r0, #54	@ 0x36
 8001534:	f000 fd47 	bl	8001fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001538:	2036      	movs	r0, #54	@ 0x36
 800153a:	f000 fd60 	bl	8001ffe <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40001000 	.word	0x40001000
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a19      	ldr	r2, [pc, #100]	@ (80015d4 <HAL_UART_MspInit+0x84>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d12c      	bne.n	80015cc <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <HAL_UART_MspInit+0x88>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157a:	4a17      	ldr	r2, [pc, #92]	@ (80015d8 <HAL_UART_MspInit+0x88>)
 800157c:	f043 0310 	orr.w	r3, r3, #16
 8001580:	6453      	str	r3, [r2, #68]	@ 0x44
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_UART_MspInit+0x88>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <HAL_UART_MspInit+0x88>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	4a10      	ldr	r2, [pc, #64]	@ (80015d8 <HAL_UART_MspInit+0x88>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	@ 0x30
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <HAL_UART_MspInit+0x88>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015bc:	2307      	movs	r3, #7
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	4805      	ldr	r0, [pc, #20]	@ (80015dc <HAL_UART_MspInit+0x8c>)
 80015c8:	f000 fd34 	bl	8002034 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80015cc:	bf00      	nop
 80015ce:	3728      	adds	r7, #40	@ 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40011000 	.word	0x40011000
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <NMI_Handler+0x4>

080015e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <MemManage_Handler+0x4>

080015f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <UsageFault_Handler+0x4>

08001608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001636:	f000 fba7 	bl	8001d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001644:	4802      	ldr	r0, [pc, #8]	@ (8001650 <TIM6_DAC_IRQHandler+0x10>)
 8001646:	f002 fa5b 	bl	8003b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200000e8 	.word	0x200000e8

08001654 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
extern void Run7SegDisplay();

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a04      	ldr	r2, [pc, #16]	@ (8001674 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d101      	bne.n	800166a <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        Run7SegDisplay();  // Quét LED 7 thanh định kỳ
 8001666:	f7ff f9a9 	bl	80009bc <Run7SegDisplay>
    }
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40001000 	.word	0x40001000

08001678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001680:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <_sbrk+0x5c>)
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <_sbrk+0x60>)
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <_sbrk+0x64>)
 8001696:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <_sbrk+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d207      	bcs.n	80016b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a8:	f003 f8ae 	bl	8004808 <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e009      	b.n	80016cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <_sbrk+0x64>)
 80016c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20030000 	.word	0x20030000
 80016d8:	00000400 	.word	0x00000400
 80016dc:	20000204 	.word	0x20000204
 80016e0:	20000358 	.word	0x20000358

080016e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <SystemInit+0x20>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ee:	4a05      	ldr	r2, [pc, #20]	@ (8001704 <SystemInit+0x20>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <TM_MFRC522_Init>:
 */
#include "tm_stm32f4_mfrc522.h"

extern SPI_HandleTypeDef hspi4;

void TM_MFRC522_Init(void) {
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	TM_MFRC522_InitPins();
 800170c:	f000 f83c 	bl	8001788 <TM_MFRC522_InitPins>
	//TM_SPI_Init(MFRC522_SPI, MFRC522_SPI_PINSPACK);

	TM_MFRC522_Reset();
 8001710:	f000 f921 	bl	8001956 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001714:	218d      	movs	r1, #141	@ 0x8d
 8001716:	202a      	movs	r0, #42	@ 0x2a
 8001718:	f000 f842 	bl	80017a0 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 800171c:	213e      	movs	r1, #62	@ 0x3e
 800171e:	202b      	movs	r0, #43	@ 0x2b
 8001720:	f000 f83e 	bl	80017a0 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8001724:	211e      	movs	r1, #30
 8001726:	202d      	movs	r0, #45	@ 0x2d
 8001728:	f000 f83a 	bl	80017a0 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 800172c:	2100      	movs	r1, #0
 800172e:	202c      	movs	r0, #44	@ 0x2c
 8001730:	f000 f836 	bl	80017a0 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8001734:	2170      	movs	r1, #112	@ 0x70
 8001736:	2026      	movs	r0, #38	@ 0x26
 8001738:	f000 f832 	bl	80017a0 <TM_MFRC522_WriteRegister>
	
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 800173c:	2140      	movs	r1, #64	@ 0x40
 800173e:	2015      	movs	r0, #21
 8001740:	f000 f82e 	bl	80017a0 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001744:	213d      	movs	r1, #61	@ 0x3d
 8001746:	2011      	movs	r0, #17
 8001748:	f000 f82a 	bl	80017a0 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 800174c:	f000 f8ee 	bl	800192c <TM_MFRC522_AntennaOn>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type
	status = TM_MFRC522_Request(PICC_REQIDL, id);	
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	2026      	movs	r0, #38	@ 0x26
 8001760:	f000 f901 	bl	8001966 <TM_MFRC522_Request>
 8001764:	4603      	mov	r3, r0
 8001766:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d104      	bne.n	8001778 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);	
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f9ed 	bl	8001b4e <TM_MFRC522_Anticoll>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
 8001778:	f000 fa6f 	bl	8001c5a <TM_MFRC522_Halt>

	return status;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <TM_MFRC522_InitPins>:
		}
	}
	return MI_OK;
}

void TM_MFRC522_InitPins(void) {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	//CS pin
//	GPIO_InitStruct.GPIO_Pin = MFRC522_CS_PIN;
//	GPIO_Init(MFRC522_CS_PORT, &GPIO_InitStruct);

	MFRC522_CS_HIGH;
 800178c:	2201      	movs	r2, #1
 800178e:	2110      	movs	r1, #16
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <TM_MFRC522_InitPins+0x14>)
 8001792:	f000 fe13 	bl	80023bc <HAL_GPIO_WritePin>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000

080017a0 <TM_MFRC522_WriteRegister>:

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	460a      	mov	r2, r1
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	4613      	mov	r3, r2
 80017ae:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 80017b0:	2200      	movs	r2, #0
 80017b2:	2110      	movs	r1, #16
 80017b4:	481a      	ldr	r0, [pc, #104]	@ (8001820 <TM_MFRC522_WriteRegister+0x80>)
 80017b6:	f000 fe01 	bl	80023bc <HAL_GPIO_WritePin>
	//Send address
	uint8_t buf = (addr << 1) & 0x7E;
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef ret = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 80017cc:	f107 010e 	add.w	r1, r7, #14
 80017d0:	230a      	movs	r3, #10
 80017d2:	2201      	movs	r2, #1
 80017d4:	4813      	ldr	r0, [pc, #76]	@ (8001824 <TM_MFRC522_WriteRegister+0x84>)
 80017d6:	f001 fb7c 	bl	8002ed2 <HAL_SPI_Transmit>
 80017da:	4603      	mov	r3, r0
 80017dc:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 80017de:	bf00      	nop
 80017e0:	4810      	ldr	r0, [pc, #64]	@ (8001824 <TM_MFRC522_WriteRegister+0x84>)
 80017e2:	f001 ff7c 	bl	80036de <HAL_SPI_GetState>
 80017e6:	4603      	mov	r3, r0
 80017e8:	73fb      	strb	r3, [r7, #15]
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d0f7      	beq.n	80017e0 <TM_MFRC522_WriteRegister+0x40>
	//Send data	
	HAL_SPI_Transmit(&hspi4, &val, 1, 10);
 80017f0:	1db9      	adds	r1, r7, #6
 80017f2:	230a      	movs	r3, #10
 80017f4:	2201      	movs	r2, #1
 80017f6:	480b      	ldr	r0, [pc, #44]	@ (8001824 <TM_MFRC522_WriteRegister+0x84>)
 80017f8:	f001 fb6b 	bl	8002ed2 <HAL_SPI_Transmit>
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 80017fc:	bf00      	nop
 80017fe:	4809      	ldr	r0, [pc, #36]	@ (8001824 <TM_MFRC522_WriteRegister+0x84>)
 8001800:	f001 ff6d 	bl	80036de <HAL_SPI_GetState>
 8001804:	4603      	mov	r3, r0
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d0f7      	beq.n	80017fe <TM_MFRC522_WriteRegister+0x5e>
	//CS high
	MFRC522_CS_HIGH;
 800180e:	2201      	movs	r2, #1
 8001810:	2110      	movs	r1, #16
 8001812:	4803      	ldr	r0, [pc, #12]	@ (8001820 <TM_MFRC522_WriteRegister+0x80>)
 8001814:	f000 fdd2 	bl	80023bc <HAL_GPIO_WritePin>
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	20000090 	.word	0x20000090

08001828 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8001832:	2200      	movs	r2, #0
 8001834:	2110      	movs	r1, #16
 8001836:	481f      	ldr	r0, [pc, #124]	@ (80018b4 <TM_MFRC522_ReadRegister+0x8c>)
 8001838:	f000 fdc0 	bl	80023bc <HAL_GPIO_WritePin>

	uint8_t buf = ((addr << 1) & 0x7E) | 0x80;
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	b25b      	sxtb	r3, r3
 8001844:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001848:	b25b      	sxtb	r3, r3
 800184a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800184e:	b25b      	sxtb	r3, r3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8001858:	f107 010d 	add.w	r1, r7, #13
 800185c:	230a      	movs	r3, #10
 800185e:	2201      	movs	r2, #1
 8001860:	4815      	ldr	r0, [pc, #84]	@ (80018b8 <TM_MFRC522_ReadRegister+0x90>)
 8001862:	f001 fb36 	bl	8002ed2 <HAL_SPI_Transmit>
 8001866:	4603      	mov	r3, r0
 8001868:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 800186a:	bf00      	nop
 800186c:	4812      	ldr	r0, [pc, #72]	@ (80018b8 <TM_MFRC522_ReadRegister+0x90>)
 800186e:	f001 ff36 	bl	80036de <HAL_SPI_GetState>
 8001872:	4603      	mov	r3, r0
 8001874:	73fb      	strb	r3, [r7, #15]
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d0f7      	beq.n	800186c <TM_MFRC522_ReadRegister+0x44>
	ret = HAL_SPI_Receive(&hspi4, &val, 1, 10);
 800187c:	f107 010e 	add.w	r1, r7, #14
 8001880:	230a      	movs	r3, #10
 8001882:	2201      	movs	r2, #1
 8001884:	480c      	ldr	r0, [pc, #48]	@ (80018b8 <TM_MFRC522_ReadRegister+0x90>)
 8001886:	f001 fc68 	bl	800315a <HAL_SPI_Receive>
 800188a:	4603      	mov	r3, r0
 800188c:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 800188e:	bf00      	nop
 8001890:	4809      	ldr	r0, [pc, #36]	@ (80018b8 <TM_MFRC522_ReadRegister+0x90>)
 8001892:	f001 ff24 	bl	80036de <HAL_SPI_GetState>
 8001896:	4603      	mov	r3, r0
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d0f7      	beq.n	8001890 <TM_MFRC522_ReadRegister+0x68>
	//CS high
	MFRC522_CS_HIGH;
 80018a0:	2201      	movs	r2, #1
 80018a2:	2110      	movs	r1, #16
 80018a4:	4803      	ldr	r0, [pc, #12]	@ (80018b4 <TM_MFRC522_ReadRegister+0x8c>)
 80018a6:	f000 fd89 	bl	80023bc <HAL_GPIO_WritePin>

	return val;	
 80018aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40021000 	.word	0x40021000
 80018b8:	20000090 	.word	0x20000090

080018bc <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	460a      	mov	r2, r1
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	4613      	mov	r3, r2
 80018ca:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ffaa 	bl	8001828 <TM_MFRC522_ReadRegister>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	4313      	orrs	r3, r2
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff5c 	bl	80017a0 <TM_MFRC522_WriteRegister>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	460a      	mov	r2, r1
 80018fa:	71fb      	strb	r3, [r7, #7]
 80018fc:	4613      	mov	r3, r2
 80018fe:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ff90 	bl	8001828 <TM_MFRC522_ReadRegister>
 8001908:	4603      	mov	r3, r0
 800190a:	b25a      	sxtb	r2, r3
 800190c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001910:	43db      	mvns	r3, r3
 8001912:	b25b      	sxtb	r3, r3
 8001914:	4013      	ands	r3, r2
 8001916:	b25b      	sxtb	r3, r3
 8001918:	b2da      	uxtb	r2, r3
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff3e 	bl	80017a0 <TM_MFRC522_WriteRegister>
} 
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001932:	2014      	movs	r0, #20
 8001934:	f7ff ff78 	bl	8001828 <TM_MFRC522_ReadRegister>
 8001938:	4603      	mov	r3, r0
 800193a:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d103      	bne.n	800194e <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001946:	2103      	movs	r1, #3
 8001948:	2014      	movs	r0, #20
 800194a:	f7ff ffb7 	bl	80018bc <TM_MFRC522_SetBitMask>
	}
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8001956:	b580      	push	{r7, lr}
 8001958:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800195a:	210f      	movs	r1, #15
 800195c:	2001      	movs	r0, #1
 800195e:	f7ff ff1f 	bl	80017a0 <TM_MFRC522_WriteRegister>
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}

08001966 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af02      	add	r7, sp, #8
 800196c:	4603      	mov	r3, r0
 800196e:	6039      	str	r1, [r7, #0]
 8001970:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8001972:	2107      	movs	r1, #7
 8001974:	200d      	movs	r0, #13
 8001976:	f7ff ff13 	bl	80017a0 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	79fa      	ldrb	r2, [r7, #7]
 800197e:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2201      	movs	r2, #1
 800198a:	6839      	ldr	r1, [r7, #0]
 800198c:	200c      	movs	r0, #12
 800198e:	f000 f80f 	bl	80019b0 <TM_MFRC522_ToCard>
 8001992:	4603      	mov	r3, r0
 8001994:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10)) {    
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <TM_MFRC522_Request+0x3c>
 800199c:	89bb      	ldrh	r3, [r7, #12]
 800199e:	2b10      	cmp	r3, #16
 80019a0:	d001      	beq.n	80019a6 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 80019a2:	2302      	movs	r3, #2
 80019a4:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4603      	mov	r3, r0
 80019bc:	73fb      	strb	r3, [r7, #15]
 80019be:	4613      	mov	r3, r2
 80019c0:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 80019c2:	2302      	movs	r3, #2
 80019c4:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80019c6:	2300      	movs	r3, #0
 80019c8:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80019ca:	2300      	movs	r3, #0
 80019cc:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	2b0c      	cmp	r3, #12
 80019d2:	d006      	beq.n	80019e2 <TM_MFRC522_ToCard+0x32>
 80019d4:	2b0e      	cmp	r3, #14
 80019d6:	d109      	bne.n	80019ec <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80019d8:	2312      	movs	r3, #18
 80019da:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80019dc:	2310      	movs	r3, #16
 80019de:	757b      	strb	r3, [r7, #21]
			break;
 80019e0:	e005      	b.n	80019ee <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80019e2:	2377      	movs	r3, #119	@ 0x77
 80019e4:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80019e6:	2330      	movs	r3, #48	@ 0x30
 80019e8:	757b      	strb	r3, [r7, #21]
			break;
 80019ea:	e000      	b.n	80019ee <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80019ec:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80019ee:	7dbb      	ldrb	r3, [r7, #22]
 80019f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	4619      	mov	r1, r3
 80019f8:	2002      	movs	r0, #2
 80019fa:	f7ff fed1 	bl	80017a0 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80019fe:	2180      	movs	r1, #128	@ 0x80
 8001a00:	2004      	movs	r0, #4
 8001a02:	f7ff ff75 	bl	80018f0 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001a06:	2180      	movs	r1, #128	@ 0x80
 8001a08:	200a      	movs	r0, #10
 8001a0a:	f7ff ff57 	bl	80018bc <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2001      	movs	r0, #1
 8001a12:	f7ff fec5 	bl	80017a0 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 8001a16:	2300      	movs	r3, #0
 8001a18:	827b      	strh	r3, [r7, #18]
 8001a1a:	e00a      	b.n	8001a32 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 8001a1c:	8a7b      	ldrh	r3, [r7, #18]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	4413      	add	r3, r2
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	2009      	movs	r0, #9
 8001a28:	f7ff feba 	bl	80017a0 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 8001a2c:	8a7b      	ldrh	r3, [r7, #18]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	827b      	strh	r3, [r7, #18]
 8001a32:	7bbb      	ldrb	r3, [r7, #14]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	8a7a      	ldrh	r2, [r7, #18]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d3ef      	bcc.n	8001a1c <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	2001      	movs	r0, #1
 8001a42:	f7ff fead 	bl	80017a0 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	d103      	bne.n	8001a54 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 8001a4c:	2180      	movs	r1, #128	@ 0x80
 8001a4e:	200d      	movs	r0, #13
 8001a50:	f7ff ff34 	bl	80018bc <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8001a54:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a58:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001a5a:	2004      	movs	r0, #4
 8001a5c:	f7ff fee4 	bl	8001828 <TM_MFRC522_ReadRegister>
 8001a60:	4603      	mov	r3, r0
 8001a62:	753b      	strb	r3, [r7, #20]
		i--;
 8001a64:	8a7b      	ldrh	r3, [r7, #18]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001a6a:	8a7b      	ldrh	r3, [r7, #18]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00a      	beq.n	8001a86 <TM_MFRC522_ToCard+0xd6>
 8001a70:	7d3b      	ldrb	r3, [r7, #20]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d105      	bne.n	8001a86 <TM_MFRC522_ToCard+0xd6>
 8001a7a:	7d3a      	ldrb	r2, [r7, #20]
 8001a7c:	7d7b      	ldrb	r3, [r7, #21]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0e9      	beq.n	8001a5a <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8001a86:	2180      	movs	r1, #128	@ 0x80
 8001a88:	200d      	movs	r0, #13
 8001a8a:	f7ff ff31 	bl	80018f0 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8001a8e:	8a7b      	ldrh	r3, [r7, #18]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d057      	beq.n	8001b44 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001a94:	2006      	movs	r0, #6
 8001a96:	f7ff fec7 	bl	8001828 <TM_MFRC522_ReadRegister>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f003 031b 	and.w	r3, r3, #27
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d14d      	bne.n	8001b40 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 8001aa8:	7d3a      	ldrb	r2, [r7, #20]
 8001aaa:	7dbb      	ldrb	r3, [r7, #22]
 8001aac:	4013      	ands	r3, r2
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 8001ab8:	2301      	movs	r3, #1
 8001aba:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	2b0c      	cmp	r3, #12
 8001ac0:	d140      	bne.n	8001b44 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8001ac2:	200a      	movs	r0, #10
 8001ac4:	f7ff feb0 	bl	8001828 <TM_MFRC522_ReadRegister>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001acc:	200c      	movs	r0, #12
 8001ace:	f7ff feab 	bl	8001828 <TM_MFRC522_ReadRegister>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 8001ada:	7c7b      	ldrb	r3, [r7, #17]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00b      	beq.n	8001af8 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 8001ae0:	7d3b      	ldrb	r3, [r7, #20]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	7c7b      	ldrb	r3, [r7, #17]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af4:	801a      	strh	r2, [r3, #0]
 8001af6:	e005      	b.n	8001b04 <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 8001af8:	7d3b      	ldrb	r3, [r7, #20]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b02:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 8001b04:	7d3b      	ldrb	r3, [r7, #20]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 8001b0e:	7d3b      	ldrb	r3, [r7, #20]
 8001b10:	2b10      	cmp	r3, #16
 8001b12:	d901      	bls.n	8001b18 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 8001b14:	2310      	movs	r3, #16
 8001b16:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 8001b18:	2300      	movs	r3, #0
 8001b1a:	827b      	strh	r3, [r7, #18]
 8001b1c:	e00a      	b.n	8001b34 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 8001b1e:	8a7b      	ldrh	r3, [r7, #18]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	18d4      	adds	r4, r2, r3
 8001b24:	2009      	movs	r0, #9
 8001b26:	f7ff fe7f 	bl	8001828 <TM_MFRC522_ReadRegister>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 8001b2e:	8a7b      	ldrh	r3, [r7, #18]
 8001b30:	3301      	adds	r3, #1
 8001b32:	827b      	strh	r3, [r7, #18]
 8001b34:	7d3b      	ldrb	r3, [r7, #20]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	8a7a      	ldrh	r2, [r7, #18]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d3ef      	bcc.n	8001b1e <TM_MFRC522_ToCard+0x16e>
 8001b3e:	e001      	b.n	8001b44 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 8001b40:	2302      	movs	r3, #2
 8001b42:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8001b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd90      	pop	{r4, r7, pc}

08001b4e <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af02      	add	r7, sp, #8
 8001b54:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	200d      	movs	r0, #13
 8001b5e:	f7ff fe1f 	bl	80017a0 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2293      	movs	r2, #147	@ 0x93
 8001b66:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001b70:	f107 030a 	add.w	r3, r7, #10
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	200c      	movs	r0, #12
 8001b7e:	f7ff ff17 	bl	80019b0 <TM_MFRC522_ToCard>
 8001b82:	4603      	mov	r3, r0
 8001b84:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d118      	bne.n	8001bbe <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73bb      	strb	r3, [r7, #14]
 8001b90:	e009      	b.n	8001ba6 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8001b92:	7bbb      	ldrb	r3, [r7, #14]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	4413      	add	r3, r2
 8001b98:	781a      	ldrb	r2, [r3, #0]
 8001b9a:	7b7b      	ldrb	r3, [r7, #13]
 8001b9c:	4053      	eors	r3, r2
 8001b9e:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 8001ba0:	7bbb      	ldrb	r3, [r7, #14]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	73bb      	strb	r3, [r7, #14]
 8001ba6:	7bbb      	ldrb	r3, [r7, #14]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d9f2      	bls.n	8001b92 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 8001bac:	7bbb      	ldrb	r3, [r7, #14]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	7b7a      	ldrb	r2, [r7, #13]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d001      	beq.n	8001bbe <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 8001bba:	2302      	movs	r3, #2
 8001bbc:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);				//CRCIrq = 0
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	2005      	movs	r0, #5
 8001bda:	f7ff fe89 	bl	80018f0 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8001bde:	2180      	movs	r1, #128	@ 0x80
 8001be0:	200a      	movs	r0, #10
 8001be2:	f7ff fe6b 	bl	80018bc <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {   
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]
 8001bea:	e00a      	b.n	8001c02 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));   
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	2009      	movs	r0, #9
 8001bf8:	f7ff fdd2 	bl	80017a0 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {   
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	75fb      	strb	r3, [r7, #23]
 8001c02:	7dfa      	ldrb	r2, [r7, #23]
 8001c04:	7afb      	ldrb	r3, [r7, #11]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d3f0      	bcc.n	8001bec <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001c0a:	2103      	movs	r1, #3
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f7ff fdc7 	bl	80017a0 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8001c12:	23ff      	movs	r3, #255	@ 0xff
 8001c14:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001c16:	2005      	movs	r0, #5
 8001c18:	f7ff fe06 	bl	8001828 <TM_MFRC522_ReadRegister>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	75bb      	strb	r3, [r7, #22]
		i--;
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8001c26:	7dfb      	ldrb	r3, [r7, #23]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <TM_MFRC522_CalculateCRC+0x6e>
 8001c2c:	7dbb      	ldrb	r3, [r7, #22]
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0ef      	beq.n	8001c16 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001c36:	2022      	movs	r0, #34	@ 0x22
 8001c38:	f7ff fdf6 	bl	8001828 <TM_MFRC522_ReadRegister>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1c5c      	adds	r4, r3, #1
 8001c48:	2021      	movs	r0, #33	@ 0x21
 8001c4a:	f7ff fded 	bl	8001828 <TM_MFRC522_ReadRegister>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	7023      	strb	r3, [r4, #0]
}
 8001c52:	bf00      	nop
 8001c54:	371c      	adds	r7, #28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd90      	pop	{r4, r7, pc}

08001c5a <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8001c60:	2350      	movs	r3, #80	@ 0x50
 8001c62:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001c68:	463b      	mov	r3, r7
 8001c6a:	1c9a      	adds	r2, r3, #2
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	2102      	movs	r1, #2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ffa9 	bl	8001bc8 <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001c76:	463a      	mov	r2, r7
 8001c78:	4639      	mov	r1, r7
 8001c7a:	1dbb      	adds	r3, r7, #6
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	2204      	movs	r2, #4
 8001c82:	200c      	movs	r0, #12
 8001c84:	f7ff fe94 	bl	80019b0 <TM_MFRC522_ToCard>
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c94:	f7ff fd26 	bl	80016e4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c98:	480c      	ldr	r0, [pc, #48]	@ (8001ccc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c9a:	490d      	ldr	r1, [pc, #52]	@ (8001cd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca0:	e002      	b.n	8001ca8 <LoopCopyDataInit>

08001ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca6:	3304      	adds	r3, #4

08001ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cac:	d3f9      	bcc.n	8001ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cae:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001cdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb4:	e001      	b.n	8001cba <LoopFillZerobss>

08001cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb8:	3204      	adds	r2, #4

08001cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cbc:	d3fb      	bcc.n	8001cb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001cbe:	f002 fda9 	bl	8004814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cc2:	f7ff f933 	bl	8000f2c <main>
  bx  lr    
 8001cc6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001cc8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001cd4:	080051d4 	.word	0x080051d4
  ldr r2, =_sbss
 8001cd8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001cdc:	20000354 	.word	0x20000354

08001ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce0:	e7fe      	b.n	8001ce0 <ADC_IRQHandler>
	...

08001ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <HAL_Init+0x40>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0d      	ldr	r2, [pc, #52]	@ (8001d24 <HAL_Init+0x40>)
 8001cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <HAL_Init+0x40>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <HAL_Init+0x40>)
 8001cfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d00:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <HAL_Init+0x40>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a07      	ldr	r2, [pc, #28]	@ (8001d24 <HAL_Init+0x40>)
 8001d06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d0c:	2003      	movs	r0, #3
 8001d0e:	f000 f94f 	bl	8001fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d12:	200f      	movs	r0, #15
 8001d14:	f000 f808 	bl	8001d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d18:	f7ff fb82 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023c00 	.word	0x40023c00

08001d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d30:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <HAL_InitTick+0x54>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <HAL_InitTick+0x58>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f967 	bl	800201a <HAL_SYSTICK_Config>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00e      	b.n	8001d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b0f      	cmp	r3, #15
 8001d5a:	d80a      	bhi.n	8001d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	f000 f92f 	bl	8001fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d68:	4a06      	ldr	r2, [pc, #24]	@ (8001d84 <HAL_InitTick+0x5c>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e000      	b.n	8001d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000010 	.word	0x20000010
 8001d80:	20000018 	.word	0x20000018
 8001d84:	20000014 	.word	0x20000014

08001d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <HAL_IncTick+0x20>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_IncTick+0x24>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	4a04      	ldr	r2, [pc, #16]	@ (8001dac <HAL_IncTick+0x24>)
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000018 	.word	0x20000018
 8001dac:	20000208 	.word	0x20000208

08001db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return uwTick;
 8001db4:	4b03      	ldr	r3, [pc, #12]	@ (8001dc4 <HAL_GetTick+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000208 	.word	0x20000208

08001dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd0:	f7ff ffee 	bl	8001db0 <HAL_GetTick>
 8001dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de0:	d005      	beq.n	8001dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e0c <HAL_Delay+0x44>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dee:	bf00      	nop
 8001df0:	f7ff ffde 	bl	8001db0 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d8f7      	bhi.n	8001df0 <HAL_Delay+0x28>
  {
  }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000018 	.word	0x20000018

08001e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <__NVIC_SetPriorityGrouping+0x44>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e42:	4a04      	ldr	r2, [pc, #16]	@ (8001e54 <__NVIC_SetPriorityGrouping+0x44>)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	60d3      	str	r3, [r2, #12]
}
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e5c:	4b04      	ldr	r3, [pc, #16]	@ (8001e70 <__NVIC_GetPriorityGrouping+0x18>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	f003 0307 	and.w	r3, r3, #7
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	db0b      	blt.n	8001e9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	f003 021f 	and.w	r2, r3, #31
 8001e8c:	4907      	ldr	r1, [pc, #28]	@ (8001eac <__NVIC_EnableIRQ+0x38>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	2001      	movs	r0, #1
 8001e96:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000e100 	.word	0xe000e100

08001eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db0a      	blt.n	8001eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	490c      	ldr	r1, [pc, #48]	@ (8001efc <__NVIC_SetPriority+0x4c>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	0112      	lsls	r2, r2, #4
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed8:	e00a      	b.n	8001ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4908      	ldr	r1, [pc, #32]	@ (8001f00 <__NVIC_SetPriority+0x50>)
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	3b04      	subs	r3, #4
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	440b      	add	r3, r1
 8001eee:	761a      	strb	r2, [r3, #24]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000e100 	.word	0xe000e100
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	@ 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f1c3 0307 	rsb	r3, r3, #7
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	bf28      	it	cs
 8001f22:	2304      	movcs	r3, #4
 8001f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d902      	bls.n	8001f34 <NVIC_EncodePriority+0x30>
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3b03      	subs	r3, #3
 8001f32:	e000      	b.n	8001f36 <NVIC_EncodePriority+0x32>
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43da      	mvns	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	401a      	ands	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	43d9      	mvns	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	4313      	orrs	r3, r2
         );
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3724      	adds	r7, #36	@ 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f7c:	d301      	bcc.n	8001f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e00f      	b.n	8001fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f82:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <SysTick_Config+0x40>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8a:	210f      	movs	r1, #15
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f90:	f7ff ff8e 	bl	8001eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f94:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <SysTick_Config+0x40>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9a:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <SysTick_Config+0x40>)
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	e000e010 	.word	0xe000e010

08001fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ff29 	bl	8001e10 <__NVIC_SetPriorityGrouping>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd8:	f7ff ff3e 	bl	8001e58 <__NVIC_GetPriorityGrouping>
 8001fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68b9      	ldr	r1, [r7, #8]
 8001fe2:	6978      	ldr	r0, [r7, #20]
 8001fe4:	f7ff ff8e 	bl	8001f04 <NVIC_EncodePriority>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff5d 	bl	8001eb0 <__NVIC_SetPriority>
}
 8001ff6:	bf00      	nop
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff31 	bl	8001e74 <__NVIC_EnableIRQ>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ffa2 	bl	8001f6c <SysTick_Config>
 8002028:	4603      	mov	r3, r0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	@ 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	e177      	b.n	8002340 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002050:	2201      	movs	r2, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	429a      	cmp	r2, r3
 800206a:	f040 8166 	bne.w	800233a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d005      	beq.n	8002086 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002082:	2b02      	cmp	r3, #2
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d017      	beq.n	8002124 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d123      	bne.n	8002178 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	08da      	lsrs	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3208      	adds	r2, #8
 8002138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	220f      	movs	r2, #15
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	08da      	lsrs	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3208      	adds	r2, #8
 8002172:	69b9      	ldr	r1, [r7, #24]
 8002174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2203      	movs	r2, #3
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0203 	and.w	r2, r3, #3
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80c0 	beq.w	800233a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b66      	ldr	r3, [pc, #408]	@ (8002358 <HAL_GPIO_Init+0x324>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	4a65      	ldr	r2, [pc, #404]	@ (8002358 <HAL_GPIO_Init+0x324>)
 80021c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ca:	4b63      	ldr	r3, [pc, #396]	@ (8002358 <HAL_GPIO_Init+0x324>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021d6:	4a61      	ldr	r2, [pc, #388]	@ (800235c <HAL_GPIO_Init+0x328>)
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	3302      	adds	r3, #2
 80021de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	220f      	movs	r2, #15
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a58      	ldr	r2, [pc, #352]	@ (8002360 <HAL_GPIO_Init+0x32c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d037      	beq.n	8002272 <HAL_GPIO_Init+0x23e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a57      	ldr	r2, [pc, #348]	@ (8002364 <HAL_GPIO_Init+0x330>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d031      	beq.n	800226e <HAL_GPIO_Init+0x23a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a56      	ldr	r2, [pc, #344]	@ (8002368 <HAL_GPIO_Init+0x334>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d02b      	beq.n	800226a <HAL_GPIO_Init+0x236>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a55      	ldr	r2, [pc, #340]	@ (800236c <HAL_GPIO_Init+0x338>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d025      	beq.n	8002266 <HAL_GPIO_Init+0x232>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a54      	ldr	r2, [pc, #336]	@ (8002370 <HAL_GPIO_Init+0x33c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d01f      	beq.n	8002262 <HAL_GPIO_Init+0x22e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a53      	ldr	r2, [pc, #332]	@ (8002374 <HAL_GPIO_Init+0x340>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d019      	beq.n	800225e <HAL_GPIO_Init+0x22a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a52      	ldr	r2, [pc, #328]	@ (8002378 <HAL_GPIO_Init+0x344>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d013      	beq.n	800225a <HAL_GPIO_Init+0x226>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a51      	ldr	r2, [pc, #324]	@ (800237c <HAL_GPIO_Init+0x348>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00d      	beq.n	8002256 <HAL_GPIO_Init+0x222>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a50      	ldr	r2, [pc, #320]	@ (8002380 <HAL_GPIO_Init+0x34c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d007      	beq.n	8002252 <HAL_GPIO_Init+0x21e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4f      	ldr	r2, [pc, #316]	@ (8002384 <HAL_GPIO_Init+0x350>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_GPIO_Init+0x21a>
 800224a:	2309      	movs	r3, #9
 800224c:	e012      	b.n	8002274 <HAL_GPIO_Init+0x240>
 800224e:	230a      	movs	r3, #10
 8002250:	e010      	b.n	8002274 <HAL_GPIO_Init+0x240>
 8002252:	2308      	movs	r3, #8
 8002254:	e00e      	b.n	8002274 <HAL_GPIO_Init+0x240>
 8002256:	2307      	movs	r3, #7
 8002258:	e00c      	b.n	8002274 <HAL_GPIO_Init+0x240>
 800225a:	2306      	movs	r3, #6
 800225c:	e00a      	b.n	8002274 <HAL_GPIO_Init+0x240>
 800225e:	2305      	movs	r3, #5
 8002260:	e008      	b.n	8002274 <HAL_GPIO_Init+0x240>
 8002262:	2304      	movs	r3, #4
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x240>
 8002266:	2303      	movs	r3, #3
 8002268:	e004      	b.n	8002274 <HAL_GPIO_Init+0x240>
 800226a:	2302      	movs	r3, #2
 800226c:	e002      	b.n	8002274 <HAL_GPIO_Init+0x240>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_GPIO_Init+0x240>
 8002272:	2300      	movs	r3, #0
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	f002 0203 	and.w	r2, r2, #3
 800227a:	0092      	lsls	r2, r2, #2
 800227c:	4093      	lsls	r3, r2
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002284:	4935      	ldr	r1, [pc, #212]	@ (800235c <HAL_GPIO_Init+0x328>)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002292:	4b3d      	ldr	r3, [pc, #244]	@ (8002388 <HAL_GPIO_Init+0x354>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022b6:	4a34      	ldr	r2, [pc, #208]	@ (8002388 <HAL_GPIO_Init+0x354>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022bc:	4b32      	ldr	r3, [pc, #200]	@ (8002388 <HAL_GPIO_Init+0x354>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e0:	4a29      	ldr	r2, [pc, #164]	@ (8002388 <HAL_GPIO_Init+0x354>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022e6:	4b28      	ldr	r3, [pc, #160]	@ (8002388 <HAL_GPIO_Init+0x354>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230a:	4a1f      	ldr	r2, [pc, #124]	@ (8002388 <HAL_GPIO_Init+0x354>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002310:	4b1d      	ldr	r3, [pc, #116]	@ (8002388 <HAL_GPIO_Init+0x354>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002334:	4a14      	ldr	r2, [pc, #80]	@ (8002388 <HAL_GPIO_Init+0x354>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3301      	adds	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	f67f ae84 	bls.w	8002050 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3724      	adds	r7, #36	@ 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	40013800 	.word	0x40013800
 8002360:	40020000 	.word	0x40020000
 8002364:	40020400 	.word	0x40020400
 8002368:	40020800 	.word	0x40020800
 800236c:	40020c00 	.word	0x40020c00
 8002370:	40021000 	.word	0x40021000
 8002374:	40021400 	.word	0x40021400
 8002378:	40021800 	.word	0x40021800
 800237c:	40021c00 	.word	0x40021c00
 8002380:	40022000 	.word	0x40022000
 8002384:	40022400 	.word	0x40022400
 8002388:	40013c00 	.word	0x40013c00

0800238c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	887b      	ldrh	r3, [r7, #2]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e001      	b.n	80023ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
 80023c8:	4613      	mov	r3, r2
 80023ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023cc:	787b      	ldrb	r3, [r7, #1]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d8:	e003      	b.n	80023e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	041a      	lsls	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	619a      	str	r2, [r3, #24]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	603b      	str	r3, [r7, #0]
 80023fe:	4b20      	ldr	r3, [pc, #128]	@ (8002480 <HAL_PWREx_EnableOverDrive+0x90>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	4a1f      	ldr	r2, [pc, #124]	@ (8002480 <HAL_PWREx_EnableOverDrive+0x90>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002408:	6413      	str	r3, [r2, #64]	@ 0x40
 800240a:	4b1d      	ldr	r3, [pc, #116]	@ (8002480 <HAL_PWREx_EnableOverDrive+0x90>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002416:	4b1b      	ldr	r3, [pc, #108]	@ (8002484 <HAL_PWREx_EnableOverDrive+0x94>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800241c:	f7ff fcc8 	bl	8001db0 <HAL_GetTick>
 8002420:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002422:	e009      	b.n	8002438 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002424:	f7ff fcc4 	bl	8001db0 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002432:	d901      	bls.n	8002438 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e01f      	b.n	8002478 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002438:	4b13      	ldr	r3, [pc, #76]	@ (8002488 <HAL_PWREx_EnableOverDrive+0x98>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002444:	d1ee      	bne.n	8002424 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002446:	4b11      	ldr	r3, [pc, #68]	@ (800248c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800244c:	f7ff fcb0 	bl	8001db0 <HAL_GetTick>
 8002450:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002452:	e009      	b.n	8002468 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002454:	f7ff fcac 	bl	8001db0 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002462:	d901      	bls.n	8002468 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e007      	b.n	8002478 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002468:	4b07      	ldr	r3, [pc, #28]	@ (8002488 <HAL_PWREx_EnableOverDrive+0x98>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002470:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002474:	d1ee      	bne.n	8002454 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	420e0040 	.word	0x420e0040
 8002488:	40007000 	.word	0x40007000
 800248c:	420e0044 	.word	0x420e0044

08002490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e267      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d075      	beq.n	800259a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024ae:	4b88      	ldr	r3, [pc, #544]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d00c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ba:	4b85      	ldr	r3, [pc, #532]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d112      	bne.n	80024ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c6:	4b82      	ldr	r3, [pc, #520]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024d2:	d10b      	bne.n	80024ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d4:	4b7e      	ldr	r3, [pc, #504]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d05b      	beq.n	8002598 <HAL_RCC_OscConfig+0x108>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d157      	bne.n	8002598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e242      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024f4:	d106      	bne.n	8002504 <HAL_RCC_OscConfig+0x74>
 80024f6:	4b76      	ldr	r3, [pc, #472]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a75      	ldr	r2, [pc, #468]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e01d      	b.n	8002540 <HAL_RCC_OscConfig+0xb0>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x98>
 800250e:	4b70      	ldr	r3, [pc, #448]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6f      	ldr	r2, [pc, #444]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b6d      	ldr	r3, [pc, #436]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a6c      	ldr	r2, [pc, #432]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0xb0>
 8002528:	4b69      	ldr	r3, [pc, #420]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a68      	ldr	r2, [pc, #416]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 800252e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b66      	ldr	r3, [pc, #408]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a65      	ldr	r2, [pc, #404]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 800253a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800253e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d013      	beq.n	8002570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7ff fc32 	bl	8001db0 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002550:	f7ff fc2e 	bl	8001db0 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	@ 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e207      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b5b      	ldr	r3, [pc, #364]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0xc0>
 800256e:	e014      	b.n	800259a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7ff fc1e 	bl	8001db0 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002578:	f7ff fc1a 	bl	8001db0 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	@ 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e1f3      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	4b51      	ldr	r3, [pc, #324]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0xe8>
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d063      	beq.n	800266e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025a6:	4b4a      	ldr	r3, [pc, #296]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b2:	4b47      	ldr	r3, [pc, #284]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d11c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025be:	4b44      	ldr	r3, [pc, #272]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d116      	bne.n	80025f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	4b41      	ldr	r3, [pc, #260]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_RCC_OscConfig+0x152>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e1c7      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e2:	4b3b      	ldr	r3, [pc, #236]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4937      	ldr	r1, [pc, #220]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	e03a      	b.n	800266e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002600:	4b34      	ldr	r3, [pc, #208]	@ (80026d4 <HAL_RCC_OscConfig+0x244>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7ff fbd3 	bl	8001db0 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800260e:	f7ff fbcf 	bl	8001db0 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e1a8      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	4b2b      	ldr	r3, [pc, #172]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4b28      	ldr	r3, [pc, #160]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4925      	ldr	r1, [pc, #148]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]
 8002640:	e015      	b.n	800266e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002642:	4b24      	ldr	r3, [pc, #144]	@ (80026d4 <HAL_RCC_OscConfig+0x244>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7ff fbb2 	bl	8001db0 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002650:	f7ff fbae 	bl	8001db0 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e187      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002662:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d036      	beq.n	80026e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d016      	beq.n	80026b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002682:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <HAL_RCC_OscConfig+0x248>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7ff fb92 	bl	8001db0 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002690:	f7ff fb8e 	bl	8001db0 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e167      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a2:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <HAL_RCC_OscConfig+0x240>)
 80026a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x200>
 80026ae:	e01b      	b.n	80026e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b0:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <HAL_RCC_OscConfig+0x248>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b6:	f7ff fb7b 	bl	8001db0 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	e00e      	b.n	80026dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026be:	f7ff fb77 	bl	8001db0 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d907      	bls.n	80026dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e150      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
 80026d0:	40023800 	.word	0x40023800
 80026d4:	42470000 	.word	0x42470000
 80026d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026dc:	4b88      	ldr	r3, [pc, #544]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 80026de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ea      	bne.n	80026be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 8097 	beq.w	8002824 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fa:	4b81      	ldr	r3, [pc, #516]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	4b7d      	ldr	r3, [pc, #500]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	4a7c      	ldr	r2, [pc, #496]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002714:	6413      	str	r3, [r2, #64]	@ 0x40
 8002716:	4b7a      	ldr	r3, [pc, #488]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002726:	4b77      	ldr	r3, [pc, #476]	@ (8002904 <HAL_RCC_OscConfig+0x474>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d118      	bne.n	8002764 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002732:	4b74      	ldr	r3, [pc, #464]	@ (8002904 <HAL_RCC_OscConfig+0x474>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a73      	ldr	r2, [pc, #460]	@ (8002904 <HAL_RCC_OscConfig+0x474>)
 8002738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800273c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273e:	f7ff fb37 	bl	8001db0 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002746:	f7ff fb33 	bl	8001db0 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e10c      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	4b6a      	ldr	r3, [pc, #424]	@ (8002904 <HAL_RCC_OscConfig+0x474>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d106      	bne.n	800277a <HAL_RCC_OscConfig+0x2ea>
 800276c:	4b64      	ldr	r3, [pc, #400]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002770:	4a63      	ldr	r2, [pc, #396]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6713      	str	r3, [r2, #112]	@ 0x70
 8002778:	e01c      	b.n	80027b4 <HAL_RCC_OscConfig+0x324>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b05      	cmp	r3, #5
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0x30c>
 8002782:	4b5f      	ldr	r3, [pc, #380]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002786:	4a5e      	ldr	r2, [pc, #376]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002788:	f043 0304 	orr.w	r3, r3, #4
 800278c:	6713      	str	r3, [r2, #112]	@ 0x70
 800278e:	4b5c      	ldr	r3, [pc, #368]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002792:	4a5b      	ldr	r2, [pc, #364]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6713      	str	r3, [r2, #112]	@ 0x70
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0x324>
 800279c:	4b58      	ldr	r3, [pc, #352]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a0:	4a57      	ldr	r2, [pc, #348]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a8:	4b55      	ldr	r3, [pc, #340]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ac:	4a54      	ldr	r2, [pc, #336]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 80027ae:	f023 0304 	bic.w	r3, r3, #4
 80027b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d015      	beq.n	80027e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7ff faf8 	bl	8001db0 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c2:	e00a      	b.n	80027da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c4:	f7ff faf4 	bl	8001db0 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e0cb      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	4b49      	ldr	r3, [pc, #292]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0ee      	beq.n	80027c4 <HAL_RCC_OscConfig+0x334>
 80027e6:	e014      	b.n	8002812 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e8:	f7ff fae2 	bl	8001db0 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f0:	f7ff fade 	bl	8001db0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e0b5      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002806:	4b3e      	ldr	r3, [pc, #248]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ee      	bne.n	80027f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002812:	7dfb      	ldrb	r3, [r7, #23]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d105      	bne.n	8002824 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002818:	4b39      	ldr	r3, [pc, #228]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	4a38      	ldr	r2, [pc, #224]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 800281e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002822:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80a1 	beq.w	8002970 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800282e:	4b34      	ldr	r3, [pc, #208]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b08      	cmp	r3, #8
 8002838:	d05c      	beq.n	80028f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d141      	bne.n	80028c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002842:	4b31      	ldr	r3, [pc, #196]	@ (8002908 <HAL_RCC_OscConfig+0x478>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7ff fab2 	bl	8001db0 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002850:	f7ff faae 	bl	8001db0 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e087      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	4b27      	ldr	r3, [pc, #156]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	019b      	lsls	r3, r3, #6
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	3b01      	subs	r3, #1
 8002888:	041b      	lsls	r3, r3, #16
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	491b      	ldr	r1, [pc, #108]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002898:	4b1b      	ldr	r3, [pc, #108]	@ (8002908 <HAL_RCC_OscConfig+0x478>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7ff fa87 	bl	8001db0 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a6:	f7ff fa83 	bl	8001db0 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e05c      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b8:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x416>
 80028c4:	e054      	b.n	8002970 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <HAL_RCC_OscConfig+0x478>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7ff fa70 	bl	8001db0 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d4:	f7ff fa6c 	bl	8001db0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e045      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <HAL_RCC_OscConfig+0x470>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x444>
 80028f2:	e03d      	b.n	8002970 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d107      	bne.n	800290c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e038      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
 8002900:	40023800 	.word	0x40023800
 8002904:	40007000 	.word	0x40007000
 8002908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800290c:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <HAL_RCC_OscConfig+0x4ec>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d028      	beq.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d121      	bne.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d11a      	bne.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800293c:	4013      	ands	r3, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002944:	4293      	cmp	r3, r2
 8002946:	d111      	bne.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	3b01      	subs	r3, #1
 8002956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d107      	bne.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800

08002980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0cc      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002994:	4b68      	ldr	r3, [pc, #416]	@ (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d90c      	bls.n	80029bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b65      	ldr	r3, [pc, #404]	@ (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b63      	ldr	r3, [pc, #396]	@ (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0b8      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d020      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d4:	4b59      	ldr	r3, [pc, #356]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4a58      	ldr	r2, [pc, #352]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ec:	4b53      	ldr	r3, [pc, #332]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4a52      	ldr	r2, [pc, #328]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f8:	4b50      	ldr	r3, [pc, #320]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	494d      	ldr	r1, [pc, #308]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d044      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b47      	ldr	r3, [pc, #284]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d119      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e07f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d003      	beq.n	8002a3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e06f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e067      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5e:	4b37      	ldr	r3, [pc, #220]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f023 0203 	bic.w	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4934      	ldr	r1, [pc, #208]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a70:	f7ff f99e 	bl	8001db0 <HAL_GetTick>
 8002a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a78:	f7ff f99a 	bl	8001db0 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e04f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 020c 	and.w	r2, r3, #12
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d1eb      	bne.n	8002a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b25      	ldr	r3, [pc, #148]	@ (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d20c      	bcs.n	8002ac8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b22      	ldr	r3, [pc, #136]	@ (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b20      	ldr	r3, [pc, #128]	@ (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e032      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad4:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4916      	ldr	r1, [pc, #88]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af2:	4b12      	ldr	r3, [pc, #72]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	490e      	ldr	r1, [pc, #56]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b06:	f000 f821 	bl	8002b4c <HAL_RCC_GetSysClockFreq>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	490a      	ldr	r1, [pc, #40]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	5ccb      	ldrb	r3, [r1, r3]
 8002b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1e:	4a09      	ldr	r2, [pc, #36]	@ (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b22:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff f8fe 	bl	8001d28 <HAL_InitTick>

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40023c00 	.word	0x40023c00
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	08005178 	.word	0x08005178
 8002b44:	20000010 	.word	0x20000010
 8002b48:	20000014 	.word	0x20000014

08002b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b50:	b094      	sub	sp, #80	@ 0x50
 8002b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b64:	4b79      	ldr	r3, [pc, #484]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d00d      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x40>
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	f200 80e1 	bhi.w	8002d38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x34>
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b7e:	e0db      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4b73      	ldr	r3, [pc, #460]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b84:	e0db      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b86:	4b73      	ldr	r3, [pc, #460]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b8a:	e0d8      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b94:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b96:	4b6d      	ldr	r3, [pc, #436]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d063      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	2200      	movs	r2, #0
 8002baa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bbe:	4622      	mov	r2, r4
 8002bc0:	462b      	mov	r3, r5
 8002bc2:	f04f 0000 	mov.w	r0, #0
 8002bc6:	f04f 0100 	mov.w	r1, #0
 8002bca:	0159      	lsls	r1, r3, #5
 8002bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd0:	0150      	lsls	r0, r2, #5
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	1a51      	subs	r1, r2, r1
 8002bda:	6139      	str	r1, [r7, #16]
 8002bdc:	4629      	mov	r1, r5
 8002bde:	eb63 0301 	sbc.w	r3, r3, r1
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bf0:	4659      	mov	r1, fp
 8002bf2:	018b      	lsls	r3, r1, #6
 8002bf4:	4651      	mov	r1, sl
 8002bf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bfa:	4651      	mov	r1, sl
 8002bfc:	018a      	lsls	r2, r1, #6
 8002bfe:	4651      	mov	r1, sl
 8002c00:	ebb2 0801 	subs.w	r8, r2, r1
 8002c04:	4659      	mov	r1, fp
 8002c06:	eb63 0901 	sbc.w	r9, r3, r1
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c1e:	4690      	mov	r8, r2
 8002c20:	4699      	mov	r9, r3
 8002c22:	4623      	mov	r3, r4
 8002c24:	eb18 0303 	adds.w	r3, r8, r3
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	462b      	mov	r3, r5
 8002c2c:	eb49 0303 	adc.w	r3, r9, r3
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c3e:	4629      	mov	r1, r5
 8002c40:	024b      	lsls	r3, r1, #9
 8002c42:	4621      	mov	r1, r4
 8002c44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c48:	4621      	mov	r1, r4
 8002c4a:	024a      	lsls	r2, r1, #9
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c52:	2200      	movs	r2, #0
 8002c54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c5c:	f7fd fd04 	bl	8000668 <__aeabi_uldivmod>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4613      	mov	r3, r2
 8002c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c68:	e058      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6a:	4b38      	ldr	r3, [pc, #224]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	099b      	lsrs	r3, r3, #6
 8002c70:	2200      	movs	r2, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	4611      	mov	r1, r2
 8002c76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c7a:	623b      	str	r3, [r7, #32]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c84:	4642      	mov	r2, r8
 8002c86:	464b      	mov	r3, r9
 8002c88:	f04f 0000 	mov.w	r0, #0
 8002c8c:	f04f 0100 	mov.w	r1, #0
 8002c90:	0159      	lsls	r1, r3, #5
 8002c92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c96:	0150      	lsls	r0, r2, #5
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4641      	mov	r1, r8
 8002c9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cbc:	ebb2 040a 	subs.w	r4, r2, sl
 8002cc0:	eb63 050b 	sbc.w	r5, r3, fp
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	00eb      	lsls	r3, r5, #3
 8002cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cd2:	00e2      	lsls	r2, r4, #3
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	461d      	mov	r5, r3
 8002cd8:	4643      	mov	r3, r8
 8002cda:	18e3      	adds	r3, r4, r3
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	464b      	mov	r3, r9
 8002ce0:	eb45 0303 	adc.w	r3, r5, r3
 8002ce4:	607b      	str	r3, [r7, #4]
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	028b      	lsls	r3, r1, #10
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	028a      	lsls	r2, r1, #10
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d06:	2200      	movs	r2, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	61fa      	str	r2, [r7, #28]
 8002d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d10:	f7fd fcaa 	bl	8000668 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4613      	mov	r3, r2
 8002d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	0c1b      	lsrs	r3, r3, #16
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	3301      	adds	r3, #1
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d36:	e002      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3750      	adds	r7, #80	@ 0x50
 8002d44:	46bd      	mov	sp, r7
 8002d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	00f42400 	.word	0x00f42400
 8002d54:	007a1200 	.word	0x007a1200

08002d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	@ (8002d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000010 	.word	0x20000010

08002d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d74:	f7ff fff0 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	0a9b      	lsrs	r3, r3, #10
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	4903      	ldr	r1, [pc, #12]	@ (8002d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40023800 	.word	0x40023800
 8002d94:	08005188 	.word	0x08005188

08002d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d9c:	f7ff ffdc 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002da0:	4602      	mov	r2, r0
 8002da2:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	0b5b      	lsrs	r3, r3, #13
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	4903      	ldr	r1, [pc, #12]	@ (8002dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dae:	5ccb      	ldrb	r3, [r1, r3]
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	08005188 	.word	0x08005188

08002dc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e07b      	b.n	8002eca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002de2:	d009      	beq.n	8002df8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	61da      	str	r2, [r3, #28]
 8002dea:	e005      	b.n	8002df8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe fb2c 	bl	8001470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e7c:	ea42 0103 	orr.w	r1, r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e84:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	f003 0104 	and.w	r1, r3, #4
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	f003 0210 	and.w	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69da      	ldr	r2, [r3, #28]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b088      	sub	sp, #32
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	603b      	str	r3, [r7, #0]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ee2:	f7fe ff65 	bl	8001db0 <HAL_GetTick>
 8002ee6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d001      	beq.n	8002efc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e12a      	b.n	8003152 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <HAL_SPI_Transmit+0x36>
 8002f02:	88fb      	ldrh	r3, [r7, #6]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e122      	b.n	8003152 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_SPI_Transmit+0x48>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e11b      	b.n	8003152 <HAL_SPI_Transmit+0x280>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2203      	movs	r2, #3
 8002f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	88fa      	ldrh	r2, [r7, #6]
 8002f40:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f68:	d10f      	bne.n	8002f8a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f94:	2b40      	cmp	r3, #64	@ 0x40
 8002f96:	d007      	beq.n	8002fa8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fb0:	d152      	bne.n	8003058 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_SPI_Transmit+0xee>
 8002fba:	8b7b      	ldrh	r3, [r7, #26]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d145      	bne.n	800304c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc4:	881a      	ldrh	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd0:	1c9a      	adds	r2, r3, #2
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fe4:	e032      	b.n	800304c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d112      	bne.n	800301a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff8:	881a      	ldrh	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	1c9a      	adds	r2, r3, #2
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003018:	e018      	b.n	800304c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800301a:	f7fe fec9 	bl	8001db0 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d803      	bhi.n	8003032 <HAL_SPI_Transmit+0x160>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003030:	d102      	bne.n	8003038 <HAL_SPI_Transmit+0x166>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d109      	bne.n	800304c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e082      	b.n	8003152 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1c7      	bne.n	8002fe6 <HAL_SPI_Transmit+0x114>
 8003056:	e053      	b.n	8003100 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <HAL_SPI_Transmit+0x194>
 8003060:	8b7b      	ldrh	r3, [r7, #26]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d147      	bne.n	80030f6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	330c      	adds	r3, #12
 8003070:	7812      	ldrb	r2, [r2, #0]
 8003072:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800308c:	e033      	b.n	80030f6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b02      	cmp	r3, #2
 800309a:	d113      	bne.n	80030c4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	7812      	ldrb	r2, [r2, #0]
 80030a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80030c2:	e018      	b.n	80030f6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030c4:	f7fe fe74 	bl	8001db0 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d803      	bhi.n	80030dc <HAL_SPI_Transmit+0x20a>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030da:	d102      	bne.n	80030e2 <HAL_SPI_Transmit+0x210>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e02d      	b.n	8003152 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1c6      	bne.n	800308e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	6839      	ldr	r1, [r7, #0]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fbe7 	bl	80038d8 <SPI_EndRxTxTransaction>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10a      	bne.n	8003134 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003150:	2300      	movs	r3, #0
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b088      	sub	sp, #32
 800315e:	af02      	add	r7, sp, #8
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d001      	beq.n	800317a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
 8003178:	e104      	b.n	8003384 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_SPI_Receive+0x2c>
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0fc      	b.n	8003384 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003192:	d112      	bne.n	80031ba <HAL_SPI_Receive+0x60>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10e      	bne.n	80031ba <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2204      	movs	r2, #4
 80031a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80031a4:	88fa      	ldrh	r2, [r7, #6]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	4613      	mov	r3, r2
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f8eb 	bl	800338c <HAL_SPI_TransmitReceive>
 80031b6:	4603      	mov	r3, r0
 80031b8:	e0e4      	b.n	8003384 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ba:	f7fe fdf9 	bl	8001db0 <HAL_GetTick>
 80031be:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_SPI_Receive+0x74>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e0da      	b.n	8003384 <HAL_SPI_Receive+0x22a>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2204      	movs	r2, #4
 80031da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	88fa      	ldrh	r2, [r7, #6]
 80031ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	88fa      	ldrh	r2, [r7, #6]
 80031f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800321c:	d10f      	bne.n	800323e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800322c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800323c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003248:	2b40      	cmp	r3, #64	@ 0x40
 800324a:	d007      	beq.n	800325c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800325a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d170      	bne.n	8003346 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003264:	e035      	b.n	80032d2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b01      	cmp	r3, #1
 8003272:	d115      	bne.n	80032a0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f103 020c 	add.w	r2, r3, #12
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003280:	7812      	ldrb	r2, [r2, #0]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800329e:	e018      	b.n	80032d2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032a0:	f7fe fd86 	bl	8001db0 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d803      	bhi.n	80032b8 <HAL_SPI_Receive+0x15e>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b6:	d102      	bne.n	80032be <HAL_SPI_Receive+0x164>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e058      	b.n	8003384 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1c4      	bne.n	8003266 <HAL_SPI_Receive+0x10c>
 80032dc:	e038      	b.n	8003350 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d113      	bne.n	8003314 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f6:	b292      	uxth	r2, r2
 80032f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fe:	1c9a      	adds	r2, r3, #2
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003312:	e018      	b.n	8003346 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003314:	f7fe fd4c 	bl	8001db0 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d803      	bhi.n	800332c <HAL_SPI_Receive+0x1d2>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332a:	d102      	bne.n	8003332 <HAL_SPI_Receive+0x1d8>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e01e      	b.n	8003384 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1c6      	bne.n	80032de <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	6839      	ldr	r1, [r7, #0]
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 fa59 	bl	800380c <SPI_EndRxTransaction>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003382:	2300      	movs	r3, #0
  }
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08a      	sub	sp, #40	@ 0x28
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800339a:	2301      	movs	r3, #1
 800339c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800339e:	f7fe fd07 	bl	8001db0 <HAL_GetTick>
 80033a2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033aa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80033b2:	887b      	ldrh	r3, [r7, #2]
 80033b4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033b6:	7ffb      	ldrb	r3, [r7, #31]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d00c      	beq.n	80033d6 <HAL_SPI_TransmitReceive+0x4a>
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033c2:	d106      	bne.n	80033d2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d102      	bne.n	80033d2 <HAL_SPI_TransmitReceive+0x46>
 80033cc:	7ffb      	ldrb	r3, [r7, #31]
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d001      	beq.n	80033d6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
 80033d4:	e17f      	b.n	80036d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_SPI_TransmitReceive+0x5c>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_SPI_TransmitReceive+0x5c>
 80033e2:	887b      	ldrh	r3, [r7, #2]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e174      	b.n	80036d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_SPI_TransmitReceive+0x6e>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e16d      	b.n	80036d6 <HAL_SPI_TransmitReceive+0x34a>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b04      	cmp	r3, #4
 800340c:	d003      	beq.n	8003416 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2205      	movs	r2, #5
 8003412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	887a      	ldrh	r2, [r7, #2]
 8003426:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	887a      	ldrh	r2, [r7, #2]
 800342c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	887a      	ldrh	r2, [r7, #2]
 8003438:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	887a      	ldrh	r2, [r7, #2]
 800343e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003456:	2b40      	cmp	r3, #64	@ 0x40
 8003458:	d007      	beq.n	800346a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003468:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003472:	d17e      	bne.n	8003572 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <HAL_SPI_TransmitReceive+0xf6>
 800347c:	8afb      	ldrh	r3, [r7, #22]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d16c      	bne.n	800355c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003486:	881a      	ldrh	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	1c9a      	adds	r2, r3, #2
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a6:	e059      	b.n	800355c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d11b      	bne.n	80034ee <HAL_SPI_TransmitReceive+0x162>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d016      	beq.n	80034ee <HAL_SPI_TransmitReceive+0x162>
 80034c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d113      	bne.n	80034ee <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	881a      	ldrh	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	1c9a      	adds	r2, r3, #2
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d119      	bne.n	8003530 <HAL_SPI_TransmitReceive+0x1a4>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d014      	beq.n	8003530 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003510:	b292      	uxth	r2, r2
 8003512:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003518:	1c9a      	adds	r2, r3, #2
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800352c:	2301      	movs	r3, #1
 800352e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003530:	f7fe fc3e 	bl	8001db0 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800353c:	429a      	cmp	r2, r3
 800353e:	d80d      	bhi.n	800355c <HAL_SPI_TransmitReceive+0x1d0>
 8003540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d009      	beq.n	800355c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e0bc      	b.n	80036d6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1a0      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x11c>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d19b      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x11c>
 8003570:	e082      	b.n	8003678 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <HAL_SPI_TransmitReceive+0x1f4>
 800357a:	8afb      	ldrh	r3, [r7, #22]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d171      	bne.n	8003664 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	330c      	adds	r3, #12
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a6:	e05d      	b.n	8003664 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d11c      	bne.n	80035f0 <HAL_SPI_TransmitReceive+0x264>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d017      	beq.n	80035f0 <HAL_SPI_TransmitReceive+0x264>
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d114      	bne.n	80035f0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	330c      	adds	r3, #12
 80035d0:	7812      	ldrb	r2, [r2, #0]
 80035d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d119      	bne.n	8003632 <HAL_SPI_TransmitReceive+0x2a6>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d014      	beq.n	8003632 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800362e:	2301      	movs	r3, #1
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003632:	f7fe fbbd 	bl	8001db0 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800363e:	429a      	cmp	r2, r3
 8003640:	d803      	bhi.n	800364a <HAL_SPI_TransmitReceive+0x2be>
 8003642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d102      	bne.n	8003650 <HAL_SPI_TransmitReceive+0x2c4>
 800364a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364c:	2b00      	cmp	r3, #0
 800364e:	d109      	bne.n	8003664 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e038      	b.n	80036d6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d19c      	bne.n	80035a8 <HAL_SPI_TransmitReceive+0x21c>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d197      	bne.n	80035a8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003678:	6a3a      	ldr	r2, [r7, #32]
 800367a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f92b 	bl	80038d8 <SPI_EndRxTxTransaction>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e01d      	b.n	80036d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80036d4:	2300      	movs	r3, #0
  }
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3728      	adds	r7, #40	@ 0x28
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036ec:	b2db      	uxtb	r3, r3
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	4613      	mov	r3, r2
 800370a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800370c:	f7fe fb50 	bl	8001db0 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	4413      	add	r3, r2
 800371a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800371c:	f7fe fb48 	bl	8001db0 <HAL_GetTick>
 8003720:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003722:	4b39      	ldr	r3, [pc, #228]	@ (8003808 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	015b      	lsls	r3, r3, #5
 8003728:	0d1b      	lsrs	r3, r3, #20
 800372a:	69fa      	ldr	r2, [r7, #28]
 800372c:	fb02 f303 	mul.w	r3, r2, r3
 8003730:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003732:	e055      	b.n	80037e0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d051      	beq.n	80037e0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800373c:	f7fe fb38 	bl	8001db0 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	429a      	cmp	r2, r3
 800374a:	d902      	bls.n	8003752 <SPI_WaitFlagStateUntilTimeout+0x56>
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d13d      	bne.n	80037ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003760:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800376a:	d111      	bne.n	8003790 <SPI_WaitFlagStateUntilTimeout+0x94>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003774:	d004      	beq.n	8003780 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800377e:	d107      	bne.n	8003790 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800378e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003798:	d10f      	bne.n	80037ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e018      	b.n	8003800 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d102      	bne.n	80037da <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	e002      	b.n	80037e0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	3b01      	subs	r3, #1
 80037de:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	4013      	ands	r3, r2
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	bf0c      	ite	eq
 80037f0:	2301      	moveq	r3, #1
 80037f2:	2300      	movne	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d19a      	bne.n	8003734 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	20000010 	.word	0x20000010

0800380c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003820:	d111      	bne.n	8003846 <SPI_EndRxTransaction+0x3a>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800382a:	d004      	beq.n	8003836 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003834:	d107      	bne.n	8003846 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003844:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800384e:	d12a      	bne.n	80038a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003858:	d012      	beq.n	8003880 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2200      	movs	r2, #0
 8003862:	2180      	movs	r1, #128	@ 0x80
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f7ff ff49 	bl	80036fc <SPI_WaitFlagStateUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d02d      	beq.n	80038cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e026      	b.n	80038ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2200      	movs	r2, #0
 8003888:	2101      	movs	r1, #1
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f7ff ff36 	bl	80036fc <SPI_WaitFlagStateUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d01a      	beq.n	80038cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389a:	f043 0220 	orr.w	r2, r3, #32
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e013      	b.n	80038ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2200      	movs	r2, #0
 80038ae:	2101      	movs	r1, #1
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f7ff ff23 	bl	80036fc <SPI_WaitFlagStateUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d007      	beq.n	80038cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e000      	b.n	80038ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2201      	movs	r2, #1
 80038ec:	2102      	movs	r1, #2
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f7ff ff04 	bl	80036fc <SPI_WaitFlagStateUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fe:	f043 0220 	orr.w	r2, r3, #32
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e032      	b.n	8003970 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800390a:	4b1b      	ldr	r3, [pc, #108]	@ (8003978 <SPI_EndRxTxTransaction+0xa0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1b      	ldr	r2, [pc, #108]	@ (800397c <SPI_EndRxTxTransaction+0xa4>)
 8003910:	fba2 2303 	umull	r2, r3, r2, r3
 8003914:	0d5b      	lsrs	r3, r3, #21
 8003916:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800391a:	fb02 f303 	mul.w	r3, r2, r3
 800391e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003928:	d112      	bne.n	8003950 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2200      	movs	r2, #0
 8003932:	2180      	movs	r1, #128	@ 0x80
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff fee1 	bl	80036fc <SPI_WaitFlagStateUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d016      	beq.n	800396e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003944:	f043 0220 	orr.w	r2, r3, #32
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e00f      	b.n	8003970 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	3b01      	subs	r3, #1
 800395a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003966:	2b80      	cmp	r3, #128	@ 0x80
 8003968:	d0f2      	beq.n	8003950 <SPI_EndRxTxTransaction+0x78>
 800396a:	e000      	b.n	800396e <SPI_EndRxTxTransaction+0x96>
        break;
 800396c:	bf00      	nop
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000010 	.word	0x20000010
 800397c:	165e9f81 	.word	0x165e9f81

08003980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e041      	b.n	8003a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd fdaa 	bl	8001500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f000 f9b6 	bl	8003d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d001      	beq.n	8003a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e04e      	b.n	8003ad6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a23      	ldr	r2, [pc, #140]	@ (8003ae4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d022      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x80>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a62:	d01d      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x80>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d018      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x80>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1e      	ldr	r2, [pc, #120]	@ (8003aec <HAL_TIM_Base_Start_IT+0xcc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d013      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x80>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003af0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00e      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x80>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1b      	ldr	r2, [pc, #108]	@ (8003af4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d009      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x80>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a19      	ldr	r2, [pc, #100]	@ (8003af8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d004      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x80>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a18      	ldr	r2, [pc, #96]	@ (8003afc <HAL_TIM_Base_Start_IT+0xdc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d111      	bne.n	8003ac4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b06      	cmp	r3, #6
 8003ab0:	d010      	beq.n	8003ad4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0201 	orr.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac2:	e007      	b.n	8003ad4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40000800 	.word	0x40000800
 8003af0:	40000c00 	.word	0x40000c00
 8003af4:	40010400 	.word	0x40010400
 8003af8:	40014000 	.word	0x40014000
 8003afc:	40001800 	.word	0x40001800

08003b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d020      	beq.n	8003b64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01b      	beq.n	8003b64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0202 	mvn.w	r2, #2
 8003b34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f8d2 	bl	8003cf4 <HAL_TIM_IC_CaptureCallback>
 8003b50:	e005      	b.n	8003b5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f8c4 	bl	8003ce0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f8d5 	bl	8003d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d020      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01b      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0204 	mvn.w	r2, #4
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2202      	movs	r2, #2
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f8ac 	bl	8003cf4 <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f89e 	bl	8003ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f8af 	bl	8003d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d020      	beq.n	8003bfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01b      	beq.n	8003bfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0208 	mvn.w	r2, #8
 8003bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f886 	bl	8003cf4 <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f878 	bl	8003ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f889 	bl	8003d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d020      	beq.n	8003c48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01b      	beq.n	8003c48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0210 	mvn.w	r2, #16
 8003c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f860 	bl	8003cf4 <HAL_TIM_IC_CaptureCallback>
 8003c34:	e005      	b.n	8003c42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f852 	bl	8003ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f863 	bl	8003d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00c      	beq.n	8003c6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0201 	mvn.w	r2, #1
 8003c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fd fcf4 	bl	8001654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00c      	beq.n	8003c90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f97c 	bl	8003f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00c      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f834 	bl	8003d1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00c      	beq.n	8003cd8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0220 	mvn.w	r2, #32
 8003cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f94e 	bl	8003f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a43      	ldr	r2, [pc, #268]	@ (8003e50 <TIM_Base_SetConfig+0x120>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d013      	beq.n	8003d70 <TIM_Base_SetConfig+0x40>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d4e:	d00f      	beq.n	8003d70 <TIM_Base_SetConfig+0x40>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a40      	ldr	r2, [pc, #256]	@ (8003e54 <TIM_Base_SetConfig+0x124>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00b      	beq.n	8003d70 <TIM_Base_SetConfig+0x40>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8003e58 <TIM_Base_SetConfig+0x128>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <TIM_Base_SetConfig+0x40>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a3e      	ldr	r2, [pc, #248]	@ (8003e5c <TIM_Base_SetConfig+0x12c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_Base_SetConfig+0x40>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a3d      	ldr	r2, [pc, #244]	@ (8003e60 <TIM_Base_SetConfig+0x130>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d108      	bne.n	8003d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a32      	ldr	r2, [pc, #200]	@ (8003e50 <TIM_Base_SetConfig+0x120>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d02b      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d90:	d027      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a2f      	ldr	r2, [pc, #188]	@ (8003e54 <TIM_Base_SetConfig+0x124>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d023      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8003e58 <TIM_Base_SetConfig+0x128>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d01f      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a2d      	ldr	r2, [pc, #180]	@ (8003e5c <TIM_Base_SetConfig+0x12c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01b      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a2c      	ldr	r2, [pc, #176]	@ (8003e60 <TIM_Base_SetConfig+0x130>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d017      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a2b      	ldr	r2, [pc, #172]	@ (8003e64 <TIM_Base_SetConfig+0x134>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8003e68 <TIM_Base_SetConfig+0x138>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00f      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a29      	ldr	r2, [pc, #164]	@ (8003e6c <TIM_Base_SetConfig+0x13c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00b      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a28      	ldr	r2, [pc, #160]	@ (8003e70 <TIM_Base_SetConfig+0x140>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d007      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a27      	ldr	r2, [pc, #156]	@ (8003e74 <TIM_Base_SetConfig+0x144>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d003      	beq.n	8003de2 <TIM_Base_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a26      	ldr	r2, [pc, #152]	@ (8003e78 <TIM_Base_SetConfig+0x148>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d108      	bne.n	8003df4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a0e      	ldr	r2, [pc, #56]	@ (8003e50 <TIM_Base_SetConfig+0x120>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d003      	beq.n	8003e22 <TIM_Base_SetConfig+0xf2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a10      	ldr	r2, [pc, #64]	@ (8003e60 <TIM_Base_SetConfig+0x130>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d103      	bne.n	8003e2a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f043 0204 	orr.w	r2, r3, #4
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	601a      	str	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40010000 	.word	0x40010000
 8003e54:	40000400 	.word	0x40000400
 8003e58:	40000800 	.word	0x40000800
 8003e5c:	40000c00 	.word	0x40000c00
 8003e60:	40010400 	.word	0x40010400
 8003e64:	40014000 	.word	0x40014000
 8003e68:	40014400 	.word	0x40014400
 8003e6c:	40014800 	.word	0x40014800
 8003e70:	40001800 	.word	0x40001800
 8003e74:	40001c00 	.word	0x40001c00
 8003e78:	40002000 	.word	0x40002000

08003e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e05a      	b.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a21      	ldr	r2, [pc, #132]	@ (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d022      	beq.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee0:	d01d      	beq.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d018      	beq.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1a      	ldr	r2, [pc, #104]	@ (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00e      	beq.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a18      	ldr	r2, [pc, #96]	@ (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d009      	beq.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a17      	ldr	r2, [pc, #92]	@ (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d004      	beq.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a15      	ldr	r2, [pc, #84]	@ (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d10c      	bne.n	8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40010000 	.word	0x40010000
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40000800 	.word	0x40000800
 8003f64:	40000c00 	.word	0x40000c00
 8003f68:	40010400 	.word	0x40010400
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40001800 	.word	0x40001800

08003f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e042      	b.n	8004034 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d106      	bne.n	8003fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fd fac4 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2224      	movs	r2, #36	@ 0x24
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f973 	bl	80042cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	@ 0x28
 8004040:	af02      	add	r7, sp, #8
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	4613      	mov	r3, r2
 800404a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b20      	cmp	r3, #32
 800405a:	d175      	bne.n	8004148 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_UART_Transmit+0x2c>
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e06e      	b.n	800414a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2221      	movs	r2, #33	@ 0x21
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800407a:	f7fd fe99 	bl	8001db0 <HAL_GetTick>
 800407e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	88fa      	ldrh	r2, [r7, #6]
 8004084:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	88fa      	ldrh	r2, [r7, #6]
 800408a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004094:	d108      	bne.n	80040a8 <HAL_UART_Transmit+0x6c>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d104      	bne.n	80040a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	e003      	b.n	80040b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040b0:	e02e      	b.n	8004110 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2200      	movs	r2, #0
 80040ba:	2180      	movs	r1, #128	@ 0x80
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f848 	bl	8004152 <UART_WaitOnFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e03a      	b.n	800414a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10b      	bne.n	80040f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	3302      	adds	r3, #2
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	e007      	b.n	8004102 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	781a      	ldrb	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	3301      	adds	r3, #1
 8004100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1cb      	bne.n	80040b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2200      	movs	r2, #0
 8004122:	2140      	movs	r1, #64	@ 0x40
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f814 	bl	8004152 <UART_WaitOnFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e006      	b.n	800414a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	e000      	b.n	800414a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
  }
}
 800414a:	4618      	mov	r0, r3
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b086      	sub	sp, #24
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	603b      	str	r3, [r7, #0]
 800415e:	4613      	mov	r3, r2
 8004160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004162:	e03b      	b.n	80041dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d037      	beq.n	80041dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416c:	f7fd fe20 	bl	8001db0 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	6a3a      	ldr	r2, [r7, #32]
 8004178:	429a      	cmp	r2, r3
 800417a:	d302      	bcc.n	8004182 <UART_WaitOnFlagUntilTimeout+0x30>
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e03a      	b.n	80041fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d023      	beq.n	80041dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b80      	cmp	r3, #128	@ 0x80
 8004198:	d020      	beq.n	80041dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b40      	cmp	r3, #64	@ 0x40
 800419e:	d01d      	beq.n	80041dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d116      	bne.n	80041dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f81d 	bl	8004204 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2208      	movs	r2, #8
 80041ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e00f      	b.n	80041fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	4013      	ands	r3, r2
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	bf0c      	ite	eq
 80041ec:	2301      	moveq	r3, #1
 80041ee:	2300      	movne	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	461a      	mov	r2, r3
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d0b4      	beq.n	8004164 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b095      	sub	sp, #84	@ 0x54
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800421c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800422c:	643a      	str	r2, [r7, #64]	@ 0x40
 800422e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004232:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800423a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e5      	bne.n	800420c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3314      	adds	r3, #20
 8004246:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3314      	adds	r3, #20
 800425e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004260:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004262:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e5      	bne.n	8004240 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004278:	2b01      	cmp	r3, #1
 800427a:	d119      	bne.n	80042b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	60bb      	str	r3, [r7, #8]
   return(result);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f023 0310 	bic.w	r3, r3, #16
 8004292:	647b      	str	r3, [r7, #68]	@ 0x44
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	330c      	adds	r3, #12
 800429a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800429c:	61ba      	str	r2, [r7, #24]
 800429e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6979      	ldr	r1, [r7, #20]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	613b      	str	r3, [r7, #16]
   return(result);
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e5      	bne.n	800427c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042be:	bf00      	nop
 80042c0:	3754      	adds	r7, #84	@ 0x54
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d0:	b0c0      	sub	sp, #256	@ 0x100
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e8:	68d9      	ldr	r1, [r3, #12]
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	ea40 0301 	orr.w	r3, r0, r1
 80042f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	431a      	orrs	r2, r3
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	431a      	orrs	r2, r3
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004324:	f021 010c 	bic.w	r1, r1, #12
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004332:	430b      	orrs	r3, r1
 8004334:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004346:	6999      	ldr	r1, [r3, #24]
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	ea40 0301 	orr.w	r3, r0, r1
 8004352:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4b8f      	ldr	r3, [pc, #572]	@ (8004598 <UART_SetConfig+0x2cc>)
 800435c:	429a      	cmp	r2, r3
 800435e:	d005      	beq.n	800436c <UART_SetConfig+0xa0>
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4b8d      	ldr	r3, [pc, #564]	@ (800459c <UART_SetConfig+0x2d0>)
 8004368:	429a      	cmp	r2, r3
 800436a:	d104      	bne.n	8004376 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800436c:	f7fe fd14 	bl	8002d98 <HAL_RCC_GetPCLK2Freq>
 8004370:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004374:	e003      	b.n	800437e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004376:	f7fe fcfb 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 800437a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004388:	f040 810c 	bne.w	80045a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800438c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004390:	2200      	movs	r2, #0
 8004392:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004396:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800439a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800439e:	4622      	mov	r2, r4
 80043a0:	462b      	mov	r3, r5
 80043a2:	1891      	adds	r1, r2, r2
 80043a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043a6:	415b      	adcs	r3, r3
 80043a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043ae:	4621      	mov	r1, r4
 80043b0:	eb12 0801 	adds.w	r8, r2, r1
 80043b4:	4629      	mov	r1, r5
 80043b6:	eb43 0901 	adc.w	r9, r3, r1
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ce:	4690      	mov	r8, r2
 80043d0:	4699      	mov	r9, r3
 80043d2:	4623      	mov	r3, r4
 80043d4:	eb18 0303 	adds.w	r3, r8, r3
 80043d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043dc:	462b      	mov	r3, r5
 80043de:	eb49 0303 	adc.w	r3, r9, r3
 80043e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043fa:	460b      	mov	r3, r1
 80043fc:	18db      	adds	r3, r3, r3
 80043fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004400:	4613      	mov	r3, r2
 8004402:	eb42 0303 	adc.w	r3, r2, r3
 8004406:	657b      	str	r3, [r7, #84]	@ 0x54
 8004408:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800440c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004410:	f7fc f92a 	bl	8000668 <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4b61      	ldr	r3, [pc, #388]	@ (80045a0 <UART_SetConfig+0x2d4>)
 800441a:	fba3 2302 	umull	r2, r3, r3, r2
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	011c      	lsls	r4, r3, #4
 8004422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004426:	2200      	movs	r2, #0
 8004428:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800442c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004430:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004434:	4642      	mov	r2, r8
 8004436:	464b      	mov	r3, r9
 8004438:	1891      	adds	r1, r2, r2
 800443a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800443c:	415b      	adcs	r3, r3
 800443e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004440:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004444:	4641      	mov	r1, r8
 8004446:	eb12 0a01 	adds.w	sl, r2, r1
 800444a:	4649      	mov	r1, r9
 800444c:	eb43 0b01 	adc.w	fp, r3, r1
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800445c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004460:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004464:	4692      	mov	sl, r2
 8004466:	469b      	mov	fp, r3
 8004468:	4643      	mov	r3, r8
 800446a:	eb1a 0303 	adds.w	r3, sl, r3
 800446e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004472:	464b      	mov	r3, r9
 8004474:	eb4b 0303 	adc.w	r3, fp, r3
 8004478:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004488:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800448c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004490:	460b      	mov	r3, r1
 8004492:	18db      	adds	r3, r3, r3
 8004494:	643b      	str	r3, [r7, #64]	@ 0x40
 8004496:	4613      	mov	r3, r2
 8004498:	eb42 0303 	adc.w	r3, r2, r3
 800449c:	647b      	str	r3, [r7, #68]	@ 0x44
 800449e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044a6:	f7fc f8df 	bl	8000668 <__aeabi_uldivmod>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	4b3b      	ldr	r3, [pc, #236]	@ (80045a0 <UART_SetConfig+0x2d4>)
 80044b2:	fba3 2301 	umull	r2, r3, r3, r1
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	2264      	movs	r2, #100	@ 0x64
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
 80044be:	1acb      	subs	r3, r1, r3
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044c6:	4b36      	ldr	r3, [pc, #216]	@ (80045a0 <UART_SetConfig+0x2d4>)
 80044c8:	fba3 2302 	umull	r2, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044d4:	441c      	add	r4, r3
 80044d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044da:	2200      	movs	r2, #0
 80044dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044e8:	4642      	mov	r2, r8
 80044ea:	464b      	mov	r3, r9
 80044ec:	1891      	adds	r1, r2, r2
 80044ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044f0:	415b      	adcs	r3, r3
 80044f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044f8:	4641      	mov	r1, r8
 80044fa:	1851      	adds	r1, r2, r1
 80044fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80044fe:	4649      	mov	r1, r9
 8004500:	414b      	adcs	r3, r1
 8004502:	637b      	str	r3, [r7, #52]	@ 0x34
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004510:	4659      	mov	r1, fp
 8004512:	00cb      	lsls	r3, r1, #3
 8004514:	4651      	mov	r1, sl
 8004516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800451a:	4651      	mov	r1, sl
 800451c:	00ca      	lsls	r2, r1, #3
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	4603      	mov	r3, r0
 8004524:	4642      	mov	r2, r8
 8004526:	189b      	adds	r3, r3, r2
 8004528:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800452c:	464b      	mov	r3, r9
 800452e:	460a      	mov	r2, r1
 8004530:	eb42 0303 	adc.w	r3, r2, r3
 8004534:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004544:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004548:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800454c:	460b      	mov	r3, r1
 800454e:	18db      	adds	r3, r3, r3
 8004550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004552:	4613      	mov	r3, r2
 8004554:	eb42 0303 	adc.w	r3, r2, r3
 8004558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800455a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800455e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004562:	f7fc f881 	bl	8000668 <__aeabi_uldivmod>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4b0d      	ldr	r3, [pc, #52]	@ (80045a0 <UART_SetConfig+0x2d4>)
 800456c:	fba3 1302 	umull	r1, r3, r3, r2
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	2164      	movs	r1, #100	@ 0x64
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	3332      	adds	r3, #50	@ 0x32
 800457e:	4a08      	ldr	r2, [pc, #32]	@ (80045a0 <UART_SetConfig+0x2d4>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	f003 0207 	and.w	r2, r3, #7
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4422      	add	r2, r4
 8004592:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004594:	e106      	b.n	80047a4 <UART_SetConfig+0x4d8>
 8004596:	bf00      	nop
 8004598:	40011000 	.word	0x40011000
 800459c:	40011400 	.word	0x40011400
 80045a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045b6:	4642      	mov	r2, r8
 80045b8:	464b      	mov	r3, r9
 80045ba:	1891      	adds	r1, r2, r2
 80045bc:	6239      	str	r1, [r7, #32]
 80045be:	415b      	adcs	r3, r3
 80045c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045c6:	4641      	mov	r1, r8
 80045c8:	1854      	adds	r4, r2, r1
 80045ca:	4649      	mov	r1, r9
 80045cc:	eb43 0501 	adc.w	r5, r3, r1
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	00eb      	lsls	r3, r5, #3
 80045da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045de:	00e2      	lsls	r2, r4, #3
 80045e0:	4614      	mov	r4, r2
 80045e2:	461d      	mov	r5, r3
 80045e4:	4643      	mov	r3, r8
 80045e6:	18e3      	adds	r3, r4, r3
 80045e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045ec:	464b      	mov	r3, r9
 80045ee:	eb45 0303 	adc.w	r3, r5, r3
 80045f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004602:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004612:	4629      	mov	r1, r5
 8004614:	008b      	lsls	r3, r1, #2
 8004616:	4621      	mov	r1, r4
 8004618:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800461c:	4621      	mov	r1, r4
 800461e:	008a      	lsls	r2, r1, #2
 8004620:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004624:	f7fc f820 	bl	8000668 <__aeabi_uldivmod>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4b60      	ldr	r3, [pc, #384]	@ (80047b0 <UART_SetConfig+0x4e4>)
 800462e:	fba3 2302 	umull	r2, r3, r3, r2
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	011c      	lsls	r4, r3, #4
 8004636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800463a:	2200      	movs	r2, #0
 800463c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004640:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004644:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004648:	4642      	mov	r2, r8
 800464a:	464b      	mov	r3, r9
 800464c:	1891      	adds	r1, r2, r2
 800464e:	61b9      	str	r1, [r7, #24]
 8004650:	415b      	adcs	r3, r3
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004658:	4641      	mov	r1, r8
 800465a:	1851      	adds	r1, r2, r1
 800465c:	6139      	str	r1, [r7, #16]
 800465e:	4649      	mov	r1, r9
 8004660:	414b      	adcs	r3, r1
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004670:	4659      	mov	r1, fp
 8004672:	00cb      	lsls	r3, r1, #3
 8004674:	4651      	mov	r1, sl
 8004676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800467a:	4651      	mov	r1, sl
 800467c:	00ca      	lsls	r2, r1, #3
 800467e:	4610      	mov	r0, r2
 8004680:	4619      	mov	r1, r3
 8004682:	4603      	mov	r3, r0
 8004684:	4642      	mov	r2, r8
 8004686:	189b      	adds	r3, r3, r2
 8004688:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800468c:	464b      	mov	r3, r9
 800468e:	460a      	mov	r2, r1
 8004690:	eb42 0303 	adc.w	r3, r2, r3
 8004694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046b0:	4649      	mov	r1, r9
 80046b2:	008b      	lsls	r3, r1, #2
 80046b4:	4641      	mov	r1, r8
 80046b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ba:	4641      	mov	r1, r8
 80046bc:	008a      	lsls	r2, r1, #2
 80046be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046c2:	f7fb ffd1 	bl	8000668 <__aeabi_uldivmod>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	4611      	mov	r1, r2
 80046cc:	4b38      	ldr	r3, [pc, #224]	@ (80047b0 <UART_SetConfig+0x4e4>)
 80046ce:	fba3 2301 	umull	r2, r3, r3, r1
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	2264      	movs	r2, #100	@ 0x64
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	1acb      	subs	r3, r1, r3
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	3332      	adds	r3, #50	@ 0x32
 80046e0:	4a33      	ldr	r2, [pc, #204]	@ (80047b0 <UART_SetConfig+0x4e4>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046ec:	441c      	add	r4, r3
 80046ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046f2:	2200      	movs	r2, #0
 80046f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80046f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80046f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046fc:	4642      	mov	r2, r8
 80046fe:	464b      	mov	r3, r9
 8004700:	1891      	adds	r1, r2, r2
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	415b      	adcs	r3, r3
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800470c:	4641      	mov	r1, r8
 800470e:	1851      	adds	r1, r2, r1
 8004710:	6039      	str	r1, [r7, #0]
 8004712:	4649      	mov	r1, r9
 8004714:	414b      	adcs	r3, r1
 8004716:	607b      	str	r3, [r7, #4]
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004724:	4659      	mov	r1, fp
 8004726:	00cb      	lsls	r3, r1, #3
 8004728:	4651      	mov	r1, sl
 800472a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800472e:	4651      	mov	r1, sl
 8004730:	00ca      	lsls	r2, r1, #3
 8004732:	4610      	mov	r0, r2
 8004734:	4619      	mov	r1, r3
 8004736:	4603      	mov	r3, r0
 8004738:	4642      	mov	r2, r8
 800473a:	189b      	adds	r3, r3, r2
 800473c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800473e:	464b      	mov	r3, r9
 8004740:	460a      	mov	r2, r1
 8004742:	eb42 0303 	adc.w	r3, r2, r3
 8004746:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	663b      	str	r3, [r7, #96]	@ 0x60
 8004752:	667a      	str	r2, [r7, #100]	@ 0x64
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004760:	4649      	mov	r1, r9
 8004762:	008b      	lsls	r3, r1, #2
 8004764:	4641      	mov	r1, r8
 8004766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800476a:	4641      	mov	r1, r8
 800476c:	008a      	lsls	r2, r1, #2
 800476e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004772:	f7fb ff79 	bl	8000668 <__aeabi_uldivmod>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4b0d      	ldr	r3, [pc, #52]	@ (80047b0 <UART_SetConfig+0x4e4>)
 800477c:	fba3 1302 	umull	r1, r3, r3, r2
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	2164      	movs	r1, #100	@ 0x64
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	3332      	adds	r3, #50	@ 0x32
 800478e:	4a08      	ldr	r2, [pc, #32]	@ (80047b0 <UART_SetConfig+0x4e4>)
 8004790:	fba2 2303 	umull	r2, r3, r2, r3
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	f003 020f 	and.w	r2, r3, #15
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4422      	add	r2, r4
 80047a2:	609a      	str	r2, [r3, #8]
}
 80047a4:	bf00      	nop
 80047a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047aa:	46bd      	mov	sp, r7
 80047ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b0:	51eb851f 	.word	0x51eb851f

080047b4 <siprintf>:
 80047b4:	b40e      	push	{r1, r2, r3}
 80047b6:	b510      	push	{r4, lr}
 80047b8:	b09d      	sub	sp, #116	@ 0x74
 80047ba:	ab1f      	add	r3, sp, #124	@ 0x7c
 80047bc:	9002      	str	r0, [sp, #8]
 80047be:	9006      	str	r0, [sp, #24]
 80047c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80047c4:	480a      	ldr	r0, [pc, #40]	@ (80047f0 <siprintf+0x3c>)
 80047c6:	9107      	str	r1, [sp, #28]
 80047c8:	9104      	str	r1, [sp, #16]
 80047ca:	490a      	ldr	r1, [pc, #40]	@ (80047f4 <siprintf+0x40>)
 80047cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80047d0:	9105      	str	r1, [sp, #20]
 80047d2:	2400      	movs	r4, #0
 80047d4:	a902      	add	r1, sp, #8
 80047d6:	6800      	ldr	r0, [r0, #0]
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	941b      	str	r4, [sp, #108]	@ 0x6c
 80047dc:	f000 f994 	bl	8004b08 <_svfiprintf_r>
 80047e0:	9b02      	ldr	r3, [sp, #8]
 80047e2:	701c      	strb	r4, [r3, #0]
 80047e4:	b01d      	add	sp, #116	@ 0x74
 80047e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ea:	b003      	add	sp, #12
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	2000001c 	.word	0x2000001c
 80047f4:	ffff0208 	.word	0xffff0208

080047f8 <memset>:
 80047f8:	4402      	add	r2, r0
 80047fa:	4603      	mov	r3, r0
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d100      	bne.n	8004802 <memset+0xa>
 8004800:	4770      	bx	lr
 8004802:	f803 1b01 	strb.w	r1, [r3], #1
 8004806:	e7f9      	b.n	80047fc <memset+0x4>

08004808 <__errno>:
 8004808:	4b01      	ldr	r3, [pc, #4]	@ (8004810 <__errno+0x8>)
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	2000001c 	.word	0x2000001c

08004814 <__libc_init_array>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	4d0d      	ldr	r5, [pc, #52]	@ (800484c <__libc_init_array+0x38>)
 8004818:	4c0d      	ldr	r4, [pc, #52]	@ (8004850 <__libc_init_array+0x3c>)
 800481a:	1b64      	subs	r4, r4, r5
 800481c:	10a4      	asrs	r4, r4, #2
 800481e:	2600      	movs	r6, #0
 8004820:	42a6      	cmp	r6, r4
 8004822:	d109      	bne.n	8004838 <__libc_init_array+0x24>
 8004824:	4d0b      	ldr	r5, [pc, #44]	@ (8004854 <__libc_init_array+0x40>)
 8004826:	4c0c      	ldr	r4, [pc, #48]	@ (8004858 <__libc_init_array+0x44>)
 8004828:	f000 fc64 	bl	80050f4 <_init>
 800482c:	1b64      	subs	r4, r4, r5
 800482e:	10a4      	asrs	r4, r4, #2
 8004830:	2600      	movs	r6, #0
 8004832:	42a6      	cmp	r6, r4
 8004834:	d105      	bne.n	8004842 <__libc_init_array+0x2e>
 8004836:	bd70      	pop	{r4, r5, r6, pc}
 8004838:	f855 3b04 	ldr.w	r3, [r5], #4
 800483c:	4798      	blx	r3
 800483e:	3601      	adds	r6, #1
 8004840:	e7ee      	b.n	8004820 <__libc_init_array+0xc>
 8004842:	f855 3b04 	ldr.w	r3, [r5], #4
 8004846:	4798      	blx	r3
 8004848:	3601      	adds	r6, #1
 800484a:	e7f2      	b.n	8004832 <__libc_init_array+0x1e>
 800484c:	080051cc 	.word	0x080051cc
 8004850:	080051cc 	.word	0x080051cc
 8004854:	080051cc 	.word	0x080051cc
 8004858:	080051d0 	.word	0x080051d0

0800485c <__retarget_lock_acquire_recursive>:
 800485c:	4770      	bx	lr

0800485e <__retarget_lock_release_recursive>:
 800485e:	4770      	bx	lr

08004860 <_free_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4605      	mov	r5, r0
 8004864:	2900      	cmp	r1, #0
 8004866:	d041      	beq.n	80048ec <_free_r+0x8c>
 8004868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800486c:	1f0c      	subs	r4, r1, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	bfb8      	it	lt
 8004872:	18e4      	addlt	r4, r4, r3
 8004874:	f000 f8e0 	bl	8004a38 <__malloc_lock>
 8004878:	4a1d      	ldr	r2, [pc, #116]	@ (80048f0 <_free_r+0x90>)
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	b933      	cbnz	r3, 800488c <_free_r+0x2c>
 800487e:	6063      	str	r3, [r4, #4]
 8004880:	6014      	str	r4, [r2, #0]
 8004882:	4628      	mov	r0, r5
 8004884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004888:	f000 b8dc 	b.w	8004a44 <__malloc_unlock>
 800488c:	42a3      	cmp	r3, r4
 800488e:	d908      	bls.n	80048a2 <_free_r+0x42>
 8004890:	6820      	ldr	r0, [r4, #0]
 8004892:	1821      	adds	r1, r4, r0
 8004894:	428b      	cmp	r3, r1
 8004896:	bf01      	itttt	eq
 8004898:	6819      	ldreq	r1, [r3, #0]
 800489a:	685b      	ldreq	r3, [r3, #4]
 800489c:	1809      	addeq	r1, r1, r0
 800489e:	6021      	streq	r1, [r4, #0]
 80048a0:	e7ed      	b.n	800487e <_free_r+0x1e>
 80048a2:	461a      	mov	r2, r3
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	b10b      	cbz	r3, 80048ac <_free_r+0x4c>
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	d9fa      	bls.n	80048a2 <_free_r+0x42>
 80048ac:	6811      	ldr	r1, [r2, #0]
 80048ae:	1850      	adds	r0, r2, r1
 80048b0:	42a0      	cmp	r0, r4
 80048b2:	d10b      	bne.n	80048cc <_free_r+0x6c>
 80048b4:	6820      	ldr	r0, [r4, #0]
 80048b6:	4401      	add	r1, r0
 80048b8:	1850      	adds	r0, r2, r1
 80048ba:	4283      	cmp	r3, r0
 80048bc:	6011      	str	r1, [r2, #0]
 80048be:	d1e0      	bne.n	8004882 <_free_r+0x22>
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	6053      	str	r3, [r2, #4]
 80048c6:	4408      	add	r0, r1
 80048c8:	6010      	str	r0, [r2, #0]
 80048ca:	e7da      	b.n	8004882 <_free_r+0x22>
 80048cc:	d902      	bls.n	80048d4 <_free_r+0x74>
 80048ce:	230c      	movs	r3, #12
 80048d0:	602b      	str	r3, [r5, #0]
 80048d2:	e7d6      	b.n	8004882 <_free_r+0x22>
 80048d4:	6820      	ldr	r0, [r4, #0]
 80048d6:	1821      	adds	r1, r4, r0
 80048d8:	428b      	cmp	r3, r1
 80048da:	bf04      	itt	eq
 80048dc:	6819      	ldreq	r1, [r3, #0]
 80048de:	685b      	ldreq	r3, [r3, #4]
 80048e0:	6063      	str	r3, [r4, #4]
 80048e2:	bf04      	itt	eq
 80048e4:	1809      	addeq	r1, r1, r0
 80048e6:	6021      	streq	r1, [r4, #0]
 80048e8:	6054      	str	r4, [r2, #4]
 80048ea:	e7ca      	b.n	8004882 <_free_r+0x22>
 80048ec:	bd38      	pop	{r3, r4, r5, pc}
 80048ee:	bf00      	nop
 80048f0:	20000350 	.word	0x20000350

080048f4 <sbrk_aligned>:
 80048f4:	b570      	push	{r4, r5, r6, lr}
 80048f6:	4e0f      	ldr	r6, [pc, #60]	@ (8004934 <sbrk_aligned+0x40>)
 80048f8:	460c      	mov	r4, r1
 80048fa:	6831      	ldr	r1, [r6, #0]
 80048fc:	4605      	mov	r5, r0
 80048fe:	b911      	cbnz	r1, 8004906 <sbrk_aligned+0x12>
 8004900:	f000 fba4 	bl	800504c <_sbrk_r>
 8004904:	6030      	str	r0, [r6, #0]
 8004906:	4621      	mov	r1, r4
 8004908:	4628      	mov	r0, r5
 800490a:	f000 fb9f 	bl	800504c <_sbrk_r>
 800490e:	1c43      	adds	r3, r0, #1
 8004910:	d103      	bne.n	800491a <sbrk_aligned+0x26>
 8004912:	f04f 34ff 	mov.w	r4, #4294967295
 8004916:	4620      	mov	r0, r4
 8004918:	bd70      	pop	{r4, r5, r6, pc}
 800491a:	1cc4      	adds	r4, r0, #3
 800491c:	f024 0403 	bic.w	r4, r4, #3
 8004920:	42a0      	cmp	r0, r4
 8004922:	d0f8      	beq.n	8004916 <sbrk_aligned+0x22>
 8004924:	1a21      	subs	r1, r4, r0
 8004926:	4628      	mov	r0, r5
 8004928:	f000 fb90 	bl	800504c <_sbrk_r>
 800492c:	3001      	adds	r0, #1
 800492e:	d1f2      	bne.n	8004916 <sbrk_aligned+0x22>
 8004930:	e7ef      	b.n	8004912 <sbrk_aligned+0x1e>
 8004932:	bf00      	nop
 8004934:	2000034c 	.word	0x2000034c

08004938 <_malloc_r>:
 8004938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800493c:	1ccd      	adds	r5, r1, #3
 800493e:	f025 0503 	bic.w	r5, r5, #3
 8004942:	3508      	adds	r5, #8
 8004944:	2d0c      	cmp	r5, #12
 8004946:	bf38      	it	cc
 8004948:	250c      	movcc	r5, #12
 800494a:	2d00      	cmp	r5, #0
 800494c:	4606      	mov	r6, r0
 800494e:	db01      	blt.n	8004954 <_malloc_r+0x1c>
 8004950:	42a9      	cmp	r1, r5
 8004952:	d904      	bls.n	800495e <_malloc_r+0x26>
 8004954:	230c      	movs	r3, #12
 8004956:	6033      	str	r3, [r6, #0]
 8004958:	2000      	movs	r0, #0
 800495a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800495e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a34 <_malloc_r+0xfc>
 8004962:	f000 f869 	bl	8004a38 <__malloc_lock>
 8004966:	f8d8 3000 	ldr.w	r3, [r8]
 800496a:	461c      	mov	r4, r3
 800496c:	bb44      	cbnz	r4, 80049c0 <_malloc_r+0x88>
 800496e:	4629      	mov	r1, r5
 8004970:	4630      	mov	r0, r6
 8004972:	f7ff ffbf 	bl	80048f4 <sbrk_aligned>
 8004976:	1c43      	adds	r3, r0, #1
 8004978:	4604      	mov	r4, r0
 800497a:	d158      	bne.n	8004a2e <_malloc_r+0xf6>
 800497c:	f8d8 4000 	ldr.w	r4, [r8]
 8004980:	4627      	mov	r7, r4
 8004982:	2f00      	cmp	r7, #0
 8004984:	d143      	bne.n	8004a0e <_malloc_r+0xd6>
 8004986:	2c00      	cmp	r4, #0
 8004988:	d04b      	beq.n	8004a22 <_malloc_r+0xea>
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	4639      	mov	r1, r7
 800498e:	4630      	mov	r0, r6
 8004990:	eb04 0903 	add.w	r9, r4, r3
 8004994:	f000 fb5a 	bl	800504c <_sbrk_r>
 8004998:	4581      	cmp	r9, r0
 800499a:	d142      	bne.n	8004a22 <_malloc_r+0xea>
 800499c:	6821      	ldr	r1, [r4, #0]
 800499e:	1a6d      	subs	r5, r5, r1
 80049a0:	4629      	mov	r1, r5
 80049a2:	4630      	mov	r0, r6
 80049a4:	f7ff ffa6 	bl	80048f4 <sbrk_aligned>
 80049a8:	3001      	adds	r0, #1
 80049aa:	d03a      	beq.n	8004a22 <_malloc_r+0xea>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	442b      	add	r3, r5
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	f8d8 3000 	ldr.w	r3, [r8]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	bb62      	cbnz	r2, 8004a14 <_malloc_r+0xdc>
 80049ba:	f8c8 7000 	str.w	r7, [r8]
 80049be:	e00f      	b.n	80049e0 <_malloc_r+0xa8>
 80049c0:	6822      	ldr	r2, [r4, #0]
 80049c2:	1b52      	subs	r2, r2, r5
 80049c4:	d420      	bmi.n	8004a08 <_malloc_r+0xd0>
 80049c6:	2a0b      	cmp	r2, #11
 80049c8:	d917      	bls.n	80049fa <_malloc_r+0xc2>
 80049ca:	1961      	adds	r1, r4, r5
 80049cc:	42a3      	cmp	r3, r4
 80049ce:	6025      	str	r5, [r4, #0]
 80049d0:	bf18      	it	ne
 80049d2:	6059      	strne	r1, [r3, #4]
 80049d4:	6863      	ldr	r3, [r4, #4]
 80049d6:	bf08      	it	eq
 80049d8:	f8c8 1000 	streq.w	r1, [r8]
 80049dc:	5162      	str	r2, [r4, r5]
 80049de:	604b      	str	r3, [r1, #4]
 80049e0:	4630      	mov	r0, r6
 80049e2:	f000 f82f 	bl	8004a44 <__malloc_unlock>
 80049e6:	f104 000b 	add.w	r0, r4, #11
 80049ea:	1d23      	adds	r3, r4, #4
 80049ec:	f020 0007 	bic.w	r0, r0, #7
 80049f0:	1ac2      	subs	r2, r0, r3
 80049f2:	bf1c      	itt	ne
 80049f4:	1a1b      	subne	r3, r3, r0
 80049f6:	50a3      	strne	r3, [r4, r2]
 80049f8:	e7af      	b.n	800495a <_malloc_r+0x22>
 80049fa:	6862      	ldr	r2, [r4, #4]
 80049fc:	42a3      	cmp	r3, r4
 80049fe:	bf0c      	ite	eq
 8004a00:	f8c8 2000 	streq.w	r2, [r8]
 8004a04:	605a      	strne	r2, [r3, #4]
 8004a06:	e7eb      	b.n	80049e0 <_malloc_r+0xa8>
 8004a08:	4623      	mov	r3, r4
 8004a0a:	6864      	ldr	r4, [r4, #4]
 8004a0c:	e7ae      	b.n	800496c <_malloc_r+0x34>
 8004a0e:	463c      	mov	r4, r7
 8004a10:	687f      	ldr	r7, [r7, #4]
 8004a12:	e7b6      	b.n	8004982 <_malloc_r+0x4a>
 8004a14:	461a      	mov	r2, r3
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	42a3      	cmp	r3, r4
 8004a1a:	d1fb      	bne.n	8004a14 <_malloc_r+0xdc>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	6053      	str	r3, [r2, #4]
 8004a20:	e7de      	b.n	80049e0 <_malloc_r+0xa8>
 8004a22:	230c      	movs	r3, #12
 8004a24:	6033      	str	r3, [r6, #0]
 8004a26:	4630      	mov	r0, r6
 8004a28:	f000 f80c 	bl	8004a44 <__malloc_unlock>
 8004a2c:	e794      	b.n	8004958 <_malloc_r+0x20>
 8004a2e:	6005      	str	r5, [r0, #0]
 8004a30:	e7d6      	b.n	80049e0 <_malloc_r+0xa8>
 8004a32:	bf00      	nop
 8004a34:	20000350 	.word	0x20000350

08004a38 <__malloc_lock>:
 8004a38:	4801      	ldr	r0, [pc, #4]	@ (8004a40 <__malloc_lock+0x8>)
 8004a3a:	f7ff bf0f 	b.w	800485c <__retarget_lock_acquire_recursive>
 8004a3e:	bf00      	nop
 8004a40:	20000348 	.word	0x20000348

08004a44 <__malloc_unlock>:
 8004a44:	4801      	ldr	r0, [pc, #4]	@ (8004a4c <__malloc_unlock+0x8>)
 8004a46:	f7ff bf0a 	b.w	800485e <__retarget_lock_release_recursive>
 8004a4a:	bf00      	nop
 8004a4c:	20000348 	.word	0x20000348

08004a50 <__ssputs_r>:
 8004a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a54:	688e      	ldr	r6, [r1, #8]
 8004a56:	461f      	mov	r7, r3
 8004a58:	42be      	cmp	r6, r7
 8004a5a:	680b      	ldr	r3, [r1, #0]
 8004a5c:	4682      	mov	sl, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	4690      	mov	r8, r2
 8004a62:	d82d      	bhi.n	8004ac0 <__ssputs_r+0x70>
 8004a64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004a6c:	d026      	beq.n	8004abc <__ssputs_r+0x6c>
 8004a6e:	6965      	ldr	r5, [r4, #20]
 8004a70:	6909      	ldr	r1, [r1, #16]
 8004a72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a76:	eba3 0901 	sub.w	r9, r3, r1
 8004a7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a7e:	1c7b      	adds	r3, r7, #1
 8004a80:	444b      	add	r3, r9
 8004a82:	106d      	asrs	r5, r5, #1
 8004a84:	429d      	cmp	r5, r3
 8004a86:	bf38      	it	cc
 8004a88:	461d      	movcc	r5, r3
 8004a8a:	0553      	lsls	r3, r2, #21
 8004a8c:	d527      	bpl.n	8004ade <__ssputs_r+0x8e>
 8004a8e:	4629      	mov	r1, r5
 8004a90:	f7ff ff52 	bl	8004938 <_malloc_r>
 8004a94:	4606      	mov	r6, r0
 8004a96:	b360      	cbz	r0, 8004af2 <__ssputs_r+0xa2>
 8004a98:	6921      	ldr	r1, [r4, #16]
 8004a9a:	464a      	mov	r2, r9
 8004a9c:	f000 fae6 	bl	800506c <memcpy>
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aaa:	81a3      	strh	r3, [r4, #12]
 8004aac:	6126      	str	r6, [r4, #16]
 8004aae:	6165      	str	r5, [r4, #20]
 8004ab0:	444e      	add	r6, r9
 8004ab2:	eba5 0509 	sub.w	r5, r5, r9
 8004ab6:	6026      	str	r6, [r4, #0]
 8004ab8:	60a5      	str	r5, [r4, #8]
 8004aba:	463e      	mov	r6, r7
 8004abc:	42be      	cmp	r6, r7
 8004abe:	d900      	bls.n	8004ac2 <__ssputs_r+0x72>
 8004ac0:	463e      	mov	r6, r7
 8004ac2:	6820      	ldr	r0, [r4, #0]
 8004ac4:	4632      	mov	r2, r6
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	f000 faa6 	bl	8005018 <memmove>
 8004acc:	68a3      	ldr	r3, [r4, #8]
 8004ace:	1b9b      	subs	r3, r3, r6
 8004ad0:	60a3      	str	r3, [r4, #8]
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	4433      	add	r3, r6
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	2000      	movs	r0, #0
 8004ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ade:	462a      	mov	r2, r5
 8004ae0:	f000 fad2 	bl	8005088 <_realloc_r>
 8004ae4:	4606      	mov	r6, r0
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d1e0      	bne.n	8004aac <__ssputs_r+0x5c>
 8004aea:	6921      	ldr	r1, [r4, #16]
 8004aec:	4650      	mov	r0, sl
 8004aee:	f7ff feb7 	bl	8004860 <_free_r>
 8004af2:	230c      	movs	r3, #12
 8004af4:	f8ca 3000 	str.w	r3, [sl]
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004afe:	81a3      	strh	r3, [r4, #12]
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295
 8004b04:	e7e9      	b.n	8004ada <__ssputs_r+0x8a>
	...

08004b08 <_svfiprintf_r>:
 8004b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0c:	4698      	mov	r8, r3
 8004b0e:	898b      	ldrh	r3, [r1, #12]
 8004b10:	061b      	lsls	r3, r3, #24
 8004b12:	b09d      	sub	sp, #116	@ 0x74
 8004b14:	4607      	mov	r7, r0
 8004b16:	460d      	mov	r5, r1
 8004b18:	4614      	mov	r4, r2
 8004b1a:	d510      	bpl.n	8004b3e <_svfiprintf_r+0x36>
 8004b1c:	690b      	ldr	r3, [r1, #16]
 8004b1e:	b973      	cbnz	r3, 8004b3e <_svfiprintf_r+0x36>
 8004b20:	2140      	movs	r1, #64	@ 0x40
 8004b22:	f7ff ff09 	bl	8004938 <_malloc_r>
 8004b26:	6028      	str	r0, [r5, #0]
 8004b28:	6128      	str	r0, [r5, #16]
 8004b2a:	b930      	cbnz	r0, 8004b3a <_svfiprintf_r+0x32>
 8004b2c:	230c      	movs	r3, #12
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	f04f 30ff 	mov.w	r0, #4294967295
 8004b34:	b01d      	add	sp, #116	@ 0x74
 8004b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b3a:	2340      	movs	r3, #64	@ 0x40
 8004b3c:	616b      	str	r3, [r5, #20]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b42:	2320      	movs	r3, #32
 8004b44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b4c:	2330      	movs	r3, #48	@ 0x30
 8004b4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004cec <_svfiprintf_r+0x1e4>
 8004b52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b56:	f04f 0901 	mov.w	r9, #1
 8004b5a:	4623      	mov	r3, r4
 8004b5c:	469a      	mov	sl, r3
 8004b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b62:	b10a      	cbz	r2, 8004b68 <_svfiprintf_r+0x60>
 8004b64:	2a25      	cmp	r2, #37	@ 0x25
 8004b66:	d1f9      	bne.n	8004b5c <_svfiprintf_r+0x54>
 8004b68:	ebba 0b04 	subs.w	fp, sl, r4
 8004b6c:	d00b      	beq.n	8004b86 <_svfiprintf_r+0x7e>
 8004b6e:	465b      	mov	r3, fp
 8004b70:	4622      	mov	r2, r4
 8004b72:	4629      	mov	r1, r5
 8004b74:	4638      	mov	r0, r7
 8004b76:	f7ff ff6b 	bl	8004a50 <__ssputs_r>
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	f000 80a7 	beq.w	8004cce <_svfiprintf_r+0x1c6>
 8004b80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b82:	445a      	add	r2, fp
 8004b84:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b86:	f89a 3000 	ldrb.w	r3, [sl]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 809f 	beq.w	8004cce <_svfiprintf_r+0x1c6>
 8004b90:	2300      	movs	r3, #0
 8004b92:	f04f 32ff 	mov.w	r2, #4294967295
 8004b96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b9a:	f10a 0a01 	add.w	sl, sl, #1
 8004b9e:	9304      	str	r3, [sp, #16]
 8004ba0:	9307      	str	r3, [sp, #28]
 8004ba2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ba6:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ba8:	4654      	mov	r4, sl
 8004baa:	2205      	movs	r2, #5
 8004bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bb0:	484e      	ldr	r0, [pc, #312]	@ (8004cec <_svfiprintf_r+0x1e4>)
 8004bb2:	f7fb fb25 	bl	8000200 <memchr>
 8004bb6:	9a04      	ldr	r2, [sp, #16]
 8004bb8:	b9d8      	cbnz	r0, 8004bf2 <_svfiprintf_r+0xea>
 8004bba:	06d0      	lsls	r0, r2, #27
 8004bbc:	bf44      	itt	mi
 8004bbe:	2320      	movmi	r3, #32
 8004bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bc4:	0711      	lsls	r1, r2, #28
 8004bc6:	bf44      	itt	mi
 8004bc8:	232b      	movmi	r3, #43	@ 0x2b
 8004bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bce:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bd4:	d015      	beq.n	8004c02 <_svfiprintf_r+0xfa>
 8004bd6:	9a07      	ldr	r2, [sp, #28]
 8004bd8:	4654      	mov	r4, sl
 8004bda:	2000      	movs	r0, #0
 8004bdc:	f04f 0c0a 	mov.w	ip, #10
 8004be0:	4621      	mov	r1, r4
 8004be2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004be6:	3b30      	subs	r3, #48	@ 0x30
 8004be8:	2b09      	cmp	r3, #9
 8004bea:	d94b      	bls.n	8004c84 <_svfiprintf_r+0x17c>
 8004bec:	b1b0      	cbz	r0, 8004c1c <_svfiprintf_r+0x114>
 8004bee:	9207      	str	r2, [sp, #28]
 8004bf0:	e014      	b.n	8004c1c <_svfiprintf_r+0x114>
 8004bf2:	eba0 0308 	sub.w	r3, r0, r8
 8004bf6:	fa09 f303 	lsl.w	r3, r9, r3
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	9304      	str	r3, [sp, #16]
 8004bfe:	46a2      	mov	sl, r4
 8004c00:	e7d2      	b.n	8004ba8 <_svfiprintf_r+0xa0>
 8004c02:	9b03      	ldr	r3, [sp, #12]
 8004c04:	1d19      	adds	r1, r3, #4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	9103      	str	r1, [sp, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bfbb      	ittet	lt
 8004c0e:	425b      	neglt	r3, r3
 8004c10:	f042 0202 	orrlt.w	r2, r2, #2
 8004c14:	9307      	strge	r3, [sp, #28]
 8004c16:	9307      	strlt	r3, [sp, #28]
 8004c18:	bfb8      	it	lt
 8004c1a:	9204      	strlt	r2, [sp, #16]
 8004c1c:	7823      	ldrb	r3, [r4, #0]
 8004c1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c20:	d10a      	bne.n	8004c38 <_svfiprintf_r+0x130>
 8004c22:	7863      	ldrb	r3, [r4, #1]
 8004c24:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c26:	d132      	bne.n	8004c8e <_svfiprintf_r+0x186>
 8004c28:	9b03      	ldr	r3, [sp, #12]
 8004c2a:	1d1a      	adds	r2, r3, #4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	9203      	str	r2, [sp, #12]
 8004c30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c34:	3402      	adds	r4, #2
 8004c36:	9305      	str	r3, [sp, #20]
 8004c38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004cfc <_svfiprintf_r+0x1f4>
 8004c3c:	7821      	ldrb	r1, [r4, #0]
 8004c3e:	2203      	movs	r2, #3
 8004c40:	4650      	mov	r0, sl
 8004c42:	f7fb fadd 	bl	8000200 <memchr>
 8004c46:	b138      	cbz	r0, 8004c58 <_svfiprintf_r+0x150>
 8004c48:	9b04      	ldr	r3, [sp, #16]
 8004c4a:	eba0 000a 	sub.w	r0, r0, sl
 8004c4e:	2240      	movs	r2, #64	@ 0x40
 8004c50:	4082      	lsls	r2, r0
 8004c52:	4313      	orrs	r3, r2
 8004c54:	3401      	adds	r4, #1
 8004c56:	9304      	str	r3, [sp, #16]
 8004c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c5c:	4824      	ldr	r0, [pc, #144]	@ (8004cf0 <_svfiprintf_r+0x1e8>)
 8004c5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c62:	2206      	movs	r2, #6
 8004c64:	f7fb facc 	bl	8000200 <memchr>
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	d036      	beq.n	8004cda <_svfiprintf_r+0x1d2>
 8004c6c:	4b21      	ldr	r3, [pc, #132]	@ (8004cf4 <_svfiprintf_r+0x1ec>)
 8004c6e:	bb1b      	cbnz	r3, 8004cb8 <_svfiprintf_r+0x1b0>
 8004c70:	9b03      	ldr	r3, [sp, #12]
 8004c72:	3307      	adds	r3, #7
 8004c74:	f023 0307 	bic.w	r3, r3, #7
 8004c78:	3308      	adds	r3, #8
 8004c7a:	9303      	str	r3, [sp, #12]
 8004c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c7e:	4433      	add	r3, r6
 8004c80:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c82:	e76a      	b.n	8004b5a <_svfiprintf_r+0x52>
 8004c84:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c88:	460c      	mov	r4, r1
 8004c8a:	2001      	movs	r0, #1
 8004c8c:	e7a8      	b.n	8004be0 <_svfiprintf_r+0xd8>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	3401      	adds	r4, #1
 8004c92:	9305      	str	r3, [sp, #20]
 8004c94:	4619      	mov	r1, r3
 8004c96:	f04f 0c0a 	mov.w	ip, #10
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ca0:	3a30      	subs	r2, #48	@ 0x30
 8004ca2:	2a09      	cmp	r2, #9
 8004ca4:	d903      	bls.n	8004cae <_svfiprintf_r+0x1a6>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0c6      	beq.n	8004c38 <_svfiprintf_r+0x130>
 8004caa:	9105      	str	r1, [sp, #20]
 8004cac:	e7c4      	b.n	8004c38 <_svfiprintf_r+0x130>
 8004cae:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e7f0      	b.n	8004c9a <_svfiprintf_r+0x192>
 8004cb8:	ab03      	add	r3, sp, #12
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	462a      	mov	r2, r5
 8004cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf8 <_svfiprintf_r+0x1f0>)
 8004cc0:	a904      	add	r1, sp, #16
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	f3af 8000 	nop.w
 8004cc8:	1c42      	adds	r2, r0, #1
 8004cca:	4606      	mov	r6, r0
 8004ccc:	d1d6      	bne.n	8004c7c <_svfiprintf_r+0x174>
 8004cce:	89ab      	ldrh	r3, [r5, #12]
 8004cd0:	065b      	lsls	r3, r3, #25
 8004cd2:	f53f af2d 	bmi.w	8004b30 <_svfiprintf_r+0x28>
 8004cd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cd8:	e72c      	b.n	8004b34 <_svfiprintf_r+0x2c>
 8004cda:	ab03      	add	r3, sp, #12
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	462a      	mov	r2, r5
 8004ce0:	4b05      	ldr	r3, [pc, #20]	@ (8004cf8 <_svfiprintf_r+0x1f0>)
 8004ce2:	a904      	add	r1, sp, #16
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	f000 f879 	bl	8004ddc <_printf_i>
 8004cea:	e7ed      	b.n	8004cc8 <_svfiprintf_r+0x1c0>
 8004cec:	08005190 	.word	0x08005190
 8004cf0:	0800519a 	.word	0x0800519a
 8004cf4:	00000000 	.word	0x00000000
 8004cf8:	08004a51 	.word	0x08004a51
 8004cfc:	08005196 	.word	0x08005196

08004d00 <_printf_common>:
 8004d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d04:	4616      	mov	r6, r2
 8004d06:	4698      	mov	r8, r3
 8004d08:	688a      	ldr	r2, [r1, #8]
 8004d0a:	690b      	ldr	r3, [r1, #16]
 8004d0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d10:	4293      	cmp	r3, r2
 8004d12:	bfb8      	it	lt
 8004d14:	4613      	movlt	r3, r2
 8004d16:	6033      	str	r3, [r6, #0]
 8004d18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d1c:	4607      	mov	r7, r0
 8004d1e:	460c      	mov	r4, r1
 8004d20:	b10a      	cbz	r2, 8004d26 <_printf_common+0x26>
 8004d22:	3301      	adds	r3, #1
 8004d24:	6033      	str	r3, [r6, #0]
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	0699      	lsls	r1, r3, #26
 8004d2a:	bf42      	ittt	mi
 8004d2c:	6833      	ldrmi	r3, [r6, #0]
 8004d2e:	3302      	addmi	r3, #2
 8004d30:	6033      	strmi	r3, [r6, #0]
 8004d32:	6825      	ldr	r5, [r4, #0]
 8004d34:	f015 0506 	ands.w	r5, r5, #6
 8004d38:	d106      	bne.n	8004d48 <_printf_common+0x48>
 8004d3a:	f104 0a19 	add.w	sl, r4, #25
 8004d3e:	68e3      	ldr	r3, [r4, #12]
 8004d40:	6832      	ldr	r2, [r6, #0]
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	42ab      	cmp	r3, r5
 8004d46:	dc26      	bgt.n	8004d96 <_printf_common+0x96>
 8004d48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d4c:	6822      	ldr	r2, [r4, #0]
 8004d4e:	3b00      	subs	r3, #0
 8004d50:	bf18      	it	ne
 8004d52:	2301      	movne	r3, #1
 8004d54:	0692      	lsls	r2, r2, #26
 8004d56:	d42b      	bmi.n	8004db0 <_printf_common+0xb0>
 8004d58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d5c:	4641      	mov	r1, r8
 8004d5e:	4638      	mov	r0, r7
 8004d60:	47c8      	blx	r9
 8004d62:	3001      	adds	r0, #1
 8004d64:	d01e      	beq.n	8004da4 <_printf_common+0xa4>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	6922      	ldr	r2, [r4, #16]
 8004d6a:	f003 0306 	and.w	r3, r3, #6
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	bf02      	ittt	eq
 8004d72:	68e5      	ldreq	r5, [r4, #12]
 8004d74:	6833      	ldreq	r3, [r6, #0]
 8004d76:	1aed      	subeq	r5, r5, r3
 8004d78:	68a3      	ldr	r3, [r4, #8]
 8004d7a:	bf0c      	ite	eq
 8004d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d80:	2500      	movne	r5, #0
 8004d82:	4293      	cmp	r3, r2
 8004d84:	bfc4      	itt	gt
 8004d86:	1a9b      	subgt	r3, r3, r2
 8004d88:	18ed      	addgt	r5, r5, r3
 8004d8a:	2600      	movs	r6, #0
 8004d8c:	341a      	adds	r4, #26
 8004d8e:	42b5      	cmp	r5, r6
 8004d90:	d11a      	bne.n	8004dc8 <_printf_common+0xc8>
 8004d92:	2000      	movs	r0, #0
 8004d94:	e008      	b.n	8004da8 <_printf_common+0xa8>
 8004d96:	2301      	movs	r3, #1
 8004d98:	4652      	mov	r2, sl
 8004d9a:	4641      	mov	r1, r8
 8004d9c:	4638      	mov	r0, r7
 8004d9e:	47c8      	blx	r9
 8004da0:	3001      	adds	r0, #1
 8004da2:	d103      	bne.n	8004dac <_printf_common+0xac>
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dac:	3501      	adds	r5, #1
 8004dae:	e7c6      	b.n	8004d3e <_printf_common+0x3e>
 8004db0:	18e1      	adds	r1, r4, r3
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	2030      	movs	r0, #48	@ 0x30
 8004db6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dba:	4422      	add	r2, r4
 8004dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004dc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004dc4:	3302      	adds	r3, #2
 8004dc6:	e7c7      	b.n	8004d58 <_printf_common+0x58>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	4622      	mov	r2, r4
 8004dcc:	4641      	mov	r1, r8
 8004dce:	4638      	mov	r0, r7
 8004dd0:	47c8      	blx	r9
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d0e6      	beq.n	8004da4 <_printf_common+0xa4>
 8004dd6:	3601      	adds	r6, #1
 8004dd8:	e7d9      	b.n	8004d8e <_printf_common+0x8e>
	...

08004ddc <_printf_i>:
 8004ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004de0:	7e0f      	ldrb	r7, [r1, #24]
 8004de2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004de4:	2f78      	cmp	r7, #120	@ 0x78
 8004de6:	4691      	mov	r9, r2
 8004de8:	4680      	mov	r8, r0
 8004dea:	460c      	mov	r4, r1
 8004dec:	469a      	mov	sl, r3
 8004dee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004df2:	d807      	bhi.n	8004e04 <_printf_i+0x28>
 8004df4:	2f62      	cmp	r7, #98	@ 0x62
 8004df6:	d80a      	bhi.n	8004e0e <_printf_i+0x32>
 8004df8:	2f00      	cmp	r7, #0
 8004dfa:	f000 80d1 	beq.w	8004fa0 <_printf_i+0x1c4>
 8004dfe:	2f58      	cmp	r7, #88	@ 0x58
 8004e00:	f000 80b8 	beq.w	8004f74 <_printf_i+0x198>
 8004e04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e0c:	e03a      	b.n	8004e84 <_printf_i+0xa8>
 8004e0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e12:	2b15      	cmp	r3, #21
 8004e14:	d8f6      	bhi.n	8004e04 <_printf_i+0x28>
 8004e16:	a101      	add	r1, pc, #4	@ (adr r1, 8004e1c <_printf_i+0x40>)
 8004e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e1c:	08004e75 	.word	0x08004e75
 8004e20:	08004e89 	.word	0x08004e89
 8004e24:	08004e05 	.word	0x08004e05
 8004e28:	08004e05 	.word	0x08004e05
 8004e2c:	08004e05 	.word	0x08004e05
 8004e30:	08004e05 	.word	0x08004e05
 8004e34:	08004e89 	.word	0x08004e89
 8004e38:	08004e05 	.word	0x08004e05
 8004e3c:	08004e05 	.word	0x08004e05
 8004e40:	08004e05 	.word	0x08004e05
 8004e44:	08004e05 	.word	0x08004e05
 8004e48:	08004f87 	.word	0x08004f87
 8004e4c:	08004eb3 	.word	0x08004eb3
 8004e50:	08004f41 	.word	0x08004f41
 8004e54:	08004e05 	.word	0x08004e05
 8004e58:	08004e05 	.word	0x08004e05
 8004e5c:	08004fa9 	.word	0x08004fa9
 8004e60:	08004e05 	.word	0x08004e05
 8004e64:	08004eb3 	.word	0x08004eb3
 8004e68:	08004e05 	.word	0x08004e05
 8004e6c:	08004e05 	.word	0x08004e05
 8004e70:	08004f49 	.word	0x08004f49
 8004e74:	6833      	ldr	r3, [r6, #0]
 8004e76:	1d1a      	adds	r2, r3, #4
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6032      	str	r2, [r6, #0]
 8004e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e84:	2301      	movs	r3, #1
 8004e86:	e09c      	b.n	8004fc2 <_printf_i+0x1e6>
 8004e88:	6833      	ldr	r3, [r6, #0]
 8004e8a:	6820      	ldr	r0, [r4, #0]
 8004e8c:	1d19      	adds	r1, r3, #4
 8004e8e:	6031      	str	r1, [r6, #0]
 8004e90:	0606      	lsls	r6, r0, #24
 8004e92:	d501      	bpl.n	8004e98 <_printf_i+0xbc>
 8004e94:	681d      	ldr	r5, [r3, #0]
 8004e96:	e003      	b.n	8004ea0 <_printf_i+0xc4>
 8004e98:	0645      	lsls	r5, r0, #25
 8004e9a:	d5fb      	bpl.n	8004e94 <_printf_i+0xb8>
 8004e9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ea0:	2d00      	cmp	r5, #0
 8004ea2:	da03      	bge.n	8004eac <_printf_i+0xd0>
 8004ea4:	232d      	movs	r3, #45	@ 0x2d
 8004ea6:	426d      	negs	r5, r5
 8004ea8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004eac:	4858      	ldr	r0, [pc, #352]	@ (8005010 <_printf_i+0x234>)
 8004eae:	230a      	movs	r3, #10
 8004eb0:	e011      	b.n	8004ed6 <_printf_i+0xfa>
 8004eb2:	6821      	ldr	r1, [r4, #0]
 8004eb4:	6833      	ldr	r3, [r6, #0]
 8004eb6:	0608      	lsls	r0, r1, #24
 8004eb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ebc:	d402      	bmi.n	8004ec4 <_printf_i+0xe8>
 8004ebe:	0649      	lsls	r1, r1, #25
 8004ec0:	bf48      	it	mi
 8004ec2:	b2ad      	uxthmi	r5, r5
 8004ec4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ec6:	4852      	ldr	r0, [pc, #328]	@ (8005010 <_printf_i+0x234>)
 8004ec8:	6033      	str	r3, [r6, #0]
 8004eca:	bf14      	ite	ne
 8004ecc:	230a      	movne	r3, #10
 8004ece:	2308      	moveq	r3, #8
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ed6:	6866      	ldr	r6, [r4, #4]
 8004ed8:	60a6      	str	r6, [r4, #8]
 8004eda:	2e00      	cmp	r6, #0
 8004edc:	db05      	blt.n	8004eea <_printf_i+0x10e>
 8004ede:	6821      	ldr	r1, [r4, #0]
 8004ee0:	432e      	orrs	r6, r5
 8004ee2:	f021 0104 	bic.w	r1, r1, #4
 8004ee6:	6021      	str	r1, [r4, #0]
 8004ee8:	d04b      	beq.n	8004f82 <_printf_i+0x1a6>
 8004eea:	4616      	mov	r6, r2
 8004eec:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ef0:	fb03 5711 	mls	r7, r3, r1, r5
 8004ef4:	5dc7      	ldrb	r7, [r0, r7]
 8004ef6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004efa:	462f      	mov	r7, r5
 8004efc:	42bb      	cmp	r3, r7
 8004efe:	460d      	mov	r5, r1
 8004f00:	d9f4      	bls.n	8004eec <_printf_i+0x110>
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d10b      	bne.n	8004f1e <_printf_i+0x142>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	07df      	lsls	r7, r3, #31
 8004f0a:	d508      	bpl.n	8004f1e <_printf_i+0x142>
 8004f0c:	6923      	ldr	r3, [r4, #16]
 8004f0e:	6861      	ldr	r1, [r4, #4]
 8004f10:	4299      	cmp	r1, r3
 8004f12:	bfde      	ittt	le
 8004f14:	2330      	movle	r3, #48	@ 0x30
 8004f16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f1e:	1b92      	subs	r2, r2, r6
 8004f20:	6122      	str	r2, [r4, #16]
 8004f22:	f8cd a000 	str.w	sl, [sp]
 8004f26:	464b      	mov	r3, r9
 8004f28:	aa03      	add	r2, sp, #12
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	4640      	mov	r0, r8
 8004f2e:	f7ff fee7 	bl	8004d00 <_printf_common>
 8004f32:	3001      	adds	r0, #1
 8004f34:	d14a      	bne.n	8004fcc <_printf_i+0x1f0>
 8004f36:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3a:	b004      	add	sp, #16
 8004f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	f043 0320 	orr.w	r3, r3, #32
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	4832      	ldr	r0, [pc, #200]	@ (8005014 <_printf_i+0x238>)
 8004f4a:	2778      	movs	r7, #120	@ 0x78
 8004f4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	6831      	ldr	r1, [r6, #0]
 8004f54:	061f      	lsls	r7, r3, #24
 8004f56:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f5a:	d402      	bmi.n	8004f62 <_printf_i+0x186>
 8004f5c:	065f      	lsls	r7, r3, #25
 8004f5e:	bf48      	it	mi
 8004f60:	b2ad      	uxthmi	r5, r5
 8004f62:	6031      	str	r1, [r6, #0]
 8004f64:	07d9      	lsls	r1, r3, #31
 8004f66:	bf44      	itt	mi
 8004f68:	f043 0320 	orrmi.w	r3, r3, #32
 8004f6c:	6023      	strmi	r3, [r4, #0]
 8004f6e:	b11d      	cbz	r5, 8004f78 <_printf_i+0x19c>
 8004f70:	2310      	movs	r3, #16
 8004f72:	e7ad      	b.n	8004ed0 <_printf_i+0xf4>
 8004f74:	4826      	ldr	r0, [pc, #152]	@ (8005010 <_printf_i+0x234>)
 8004f76:	e7e9      	b.n	8004f4c <_printf_i+0x170>
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	f023 0320 	bic.w	r3, r3, #32
 8004f7e:	6023      	str	r3, [r4, #0]
 8004f80:	e7f6      	b.n	8004f70 <_printf_i+0x194>
 8004f82:	4616      	mov	r6, r2
 8004f84:	e7bd      	b.n	8004f02 <_printf_i+0x126>
 8004f86:	6833      	ldr	r3, [r6, #0]
 8004f88:	6825      	ldr	r5, [r4, #0]
 8004f8a:	6961      	ldr	r1, [r4, #20]
 8004f8c:	1d18      	adds	r0, r3, #4
 8004f8e:	6030      	str	r0, [r6, #0]
 8004f90:	062e      	lsls	r6, r5, #24
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	d501      	bpl.n	8004f9a <_printf_i+0x1be>
 8004f96:	6019      	str	r1, [r3, #0]
 8004f98:	e002      	b.n	8004fa0 <_printf_i+0x1c4>
 8004f9a:	0668      	lsls	r0, r5, #25
 8004f9c:	d5fb      	bpl.n	8004f96 <_printf_i+0x1ba>
 8004f9e:	8019      	strh	r1, [r3, #0]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	6123      	str	r3, [r4, #16]
 8004fa4:	4616      	mov	r6, r2
 8004fa6:	e7bc      	b.n	8004f22 <_printf_i+0x146>
 8004fa8:	6833      	ldr	r3, [r6, #0]
 8004faa:	1d1a      	adds	r2, r3, #4
 8004fac:	6032      	str	r2, [r6, #0]
 8004fae:	681e      	ldr	r6, [r3, #0]
 8004fb0:	6862      	ldr	r2, [r4, #4]
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	f7fb f923 	bl	8000200 <memchr>
 8004fba:	b108      	cbz	r0, 8004fc0 <_printf_i+0x1e4>
 8004fbc:	1b80      	subs	r0, r0, r6
 8004fbe:	6060      	str	r0, [r4, #4]
 8004fc0:	6863      	ldr	r3, [r4, #4]
 8004fc2:	6123      	str	r3, [r4, #16]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fca:	e7aa      	b.n	8004f22 <_printf_i+0x146>
 8004fcc:	6923      	ldr	r3, [r4, #16]
 8004fce:	4632      	mov	r2, r6
 8004fd0:	4649      	mov	r1, r9
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	47d0      	blx	sl
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	d0ad      	beq.n	8004f36 <_printf_i+0x15a>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	079b      	lsls	r3, r3, #30
 8004fde:	d413      	bmi.n	8005008 <_printf_i+0x22c>
 8004fe0:	68e0      	ldr	r0, [r4, #12]
 8004fe2:	9b03      	ldr	r3, [sp, #12]
 8004fe4:	4298      	cmp	r0, r3
 8004fe6:	bfb8      	it	lt
 8004fe8:	4618      	movlt	r0, r3
 8004fea:	e7a6      	b.n	8004f3a <_printf_i+0x15e>
 8004fec:	2301      	movs	r3, #1
 8004fee:	4632      	mov	r2, r6
 8004ff0:	4649      	mov	r1, r9
 8004ff2:	4640      	mov	r0, r8
 8004ff4:	47d0      	blx	sl
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	d09d      	beq.n	8004f36 <_printf_i+0x15a>
 8004ffa:	3501      	adds	r5, #1
 8004ffc:	68e3      	ldr	r3, [r4, #12]
 8004ffe:	9903      	ldr	r1, [sp, #12]
 8005000:	1a5b      	subs	r3, r3, r1
 8005002:	42ab      	cmp	r3, r5
 8005004:	dcf2      	bgt.n	8004fec <_printf_i+0x210>
 8005006:	e7eb      	b.n	8004fe0 <_printf_i+0x204>
 8005008:	2500      	movs	r5, #0
 800500a:	f104 0619 	add.w	r6, r4, #25
 800500e:	e7f5      	b.n	8004ffc <_printf_i+0x220>
 8005010:	080051a1 	.word	0x080051a1
 8005014:	080051b2 	.word	0x080051b2

08005018 <memmove>:
 8005018:	4288      	cmp	r0, r1
 800501a:	b510      	push	{r4, lr}
 800501c:	eb01 0402 	add.w	r4, r1, r2
 8005020:	d902      	bls.n	8005028 <memmove+0x10>
 8005022:	4284      	cmp	r4, r0
 8005024:	4623      	mov	r3, r4
 8005026:	d807      	bhi.n	8005038 <memmove+0x20>
 8005028:	1e43      	subs	r3, r0, #1
 800502a:	42a1      	cmp	r1, r4
 800502c:	d008      	beq.n	8005040 <memmove+0x28>
 800502e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005032:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005036:	e7f8      	b.n	800502a <memmove+0x12>
 8005038:	4402      	add	r2, r0
 800503a:	4601      	mov	r1, r0
 800503c:	428a      	cmp	r2, r1
 800503e:	d100      	bne.n	8005042 <memmove+0x2a>
 8005040:	bd10      	pop	{r4, pc}
 8005042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005046:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800504a:	e7f7      	b.n	800503c <memmove+0x24>

0800504c <_sbrk_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4d06      	ldr	r5, [pc, #24]	@ (8005068 <_sbrk_r+0x1c>)
 8005050:	2300      	movs	r3, #0
 8005052:	4604      	mov	r4, r0
 8005054:	4608      	mov	r0, r1
 8005056:	602b      	str	r3, [r5, #0]
 8005058:	f7fc fb0e 	bl	8001678 <_sbrk>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_sbrk_r+0x1a>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	b103      	cbz	r3, 8005066 <_sbrk_r+0x1a>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	20000344 	.word	0x20000344

0800506c <memcpy>:
 800506c:	440a      	add	r2, r1
 800506e:	4291      	cmp	r1, r2
 8005070:	f100 33ff 	add.w	r3, r0, #4294967295
 8005074:	d100      	bne.n	8005078 <memcpy+0xc>
 8005076:	4770      	bx	lr
 8005078:	b510      	push	{r4, lr}
 800507a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800507e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005082:	4291      	cmp	r1, r2
 8005084:	d1f9      	bne.n	800507a <memcpy+0xe>
 8005086:	bd10      	pop	{r4, pc}

08005088 <_realloc_r>:
 8005088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800508c:	4607      	mov	r7, r0
 800508e:	4614      	mov	r4, r2
 8005090:	460d      	mov	r5, r1
 8005092:	b921      	cbnz	r1, 800509e <_realloc_r+0x16>
 8005094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005098:	4611      	mov	r1, r2
 800509a:	f7ff bc4d 	b.w	8004938 <_malloc_r>
 800509e:	b92a      	cbnz	r2, 80050ac <_realloc_r+0x24>
 80050a0:	f7ff fbde 	bl	8004860 <_free_r>
 80050a4:	4625      	mov	r5, r4
 80050a6:	4628      	mov	r0, r5
 80050a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050ac:	f000 f81a 	bl	80050e4 <_malloc_usable_size_r>
 80050b0:	4284      	cmp	r4, r0
 80050b2:	4606      	mov	r6, r0
 80050b4:	d802      	bhi.n	80050bc <_realloc_r+0x34>
 80050b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050ba:	d8f4      	bhi.n	80050a6 <_realloc_r+0x1e>
 80050bc:	4621      	mov	r1, r4
 80050be:	4638      	mov	r0, r7
 80050c0:	f7ff fc3a 	bl	8004938 <_malloc_r>
 80050c4:	4680      	mov	r8, r0
 80050c6:	b908      	cbnz	r0, 80050cc <_realloc_r+0x44>
 80050c8:	4645      	mov	r5, r8
 80050ca:	e7ec      	b.n	80050a6 <_realloc_r+0x1e>
 80050cc:	42b4      	cmp	r4, r6
 80050ce:	4622      	mov	r2, r4
 80050d0:	4629      	mov	r1, r5
 80050d2:	bf28      	it	cs
 80050d4:	4632      	movcs	r2, r6
 80050d6:	f7ff ffc9 	bl	800506c <memcpy>
 80050da:	4629      	mov	r1, r5
 80050dc:	4638      	mov	r0, r7
 80050de:	f7ff fbbf 	bl	8004860 <_free_r>
 80050e2:	e7f1      	b.n	80050c8 <_realloc_r+0x40>

080050e4 <_malloc_usable_size_r>:
 80050e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050e8:	1f18      	subs	r0, r3, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	bfbc      	itt	lt
 80050ee:	580b      	ldrlt	r3, [r1, r0]
 80050f0:	18c0      	addlt	r0, r0, r3
 80050f2:	4770      	bx	lr

080050f4 <_init>:
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	bf00      	nop
 80050f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fa:	bc08      	pop	{r3}
 80050fc:	469e      	mov	lr, r3
 80050fe:	4770      	bx	lr

08005100 <_fini>:
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	bf00      	nop
 8005104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005106:	bc08      	pop	{r3}
 8005108:	469e      	mov	lr, r3
 800510a:	4770      	bx	lr
