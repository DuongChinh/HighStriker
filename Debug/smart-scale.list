
smart-scale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009854  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  08009a08  08009a08  0000aa08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f64  08009f64  0000b1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009f64  08009f64  0000af64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f6c  08009f6c  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f6c  08009f6c  0000af6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f70  08009f70  0000af70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08009f74  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1e0  2**0
                  CONTENTS
 10 .bss          00000324  200001e0  200001e0  0000b1e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000504  20000504  0000b1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001078c  00000000  00000000  0000b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002704  00000000  00000000  0001b99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  0001e0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cce  00000000  00000000  0001f118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025671  00000000  00000000  0001fde6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012456  00000000  00000000  00045457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df6bf  00000000  00000000  000578ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00136f6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a98  00000000  00000000  00136fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  0013ca48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080099ec 	.word	0x080099ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	080099ec 	.word	0x080099ec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <Run7SegDisplay>:
    pos = 0;
    ShowDecimalPoint = show_decimal;
}

void Run7SegDisplay()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
    unsigned char val;
    int show_decimal_now = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]

    pos++;
 800104a:	4b73      	ldr	r3, [pc, #460]	@ (8001218 <Run7SegDisplay+0x1d8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	4a71      	ldr	r2, [pc, #452]	@ (8001218 <Run7SegDisplay+0x1d8>)
 8001052:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(PORT_7SEG_CONTROL0, PIN_7SEG_CONTROL0, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2104      	movs	r1, #4
 8001058:	4870      	ldr	r0, [pc, #448]	@ (800121c <Run7SegDisplay+0x1dc>)
 800105a:	f001 ffa7 	bl	8002fac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2108      	movs	r1, #8
 8001062:	486e      	ldr	r0, [pc, #440]	@ (800121c <Run7SegDisplay+0x1dc>)
 8001064:	f001 ffa2 	bl	8002fac <HAL_GPIO_WritePin>

    if (pos & 0x1) {
 8001068:	4b6b      	ldr	r3, [pc, #428]	@ (8001218 <Run7SegDisplay+0x1d8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b00      	cmp	r3, #0
 8001072:	d012      	beq.n	800109a <Run7SegDisplay+0x5a>
        // Digit đầu tiên (bên phải) - hàng đơn vị
        val = Mask[DisplayValue % 10];
 8001074:	4b6a      	ldr	r3, [pc, #424]	@ (8001220 <Run7SegDisplay+0x1e0>)
 8001076:	6819      	ldr	r1, [r3, #0]
 8001078:	4b6a      	ldr	r3, [pc, #424]	@ (8001224 <Run7SegDisplay+0x1e4>)
 800107a:	fb83 2301 	smull	r2, r3, r3, r1
 800107e:	109a      	asrs	r2, r3, #2
 8001080:	17cb      	asrs	r3, r1, #31
 8001082:	1ad2      	subs	r2, r2, r3
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	1aca      	subs	r2, r1, r3
 800108e:	4b66      	ldr	r3, [pc, #408]	@ (8001228 <Run7SegDisplay+0x1e8>)
 8001090:	5c9b      	ldrb	r3, [r3, r2]
 8001092:	71fb      	strb	r3, [r7, #7]
        show_decimal_now = 0; // Không hiển thị dấu thập phân ở digit này
 8001094:	2300      	movs	r3, #0
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	e01b      	b.n	80010d2 <Run7SegDisplay+0x92>
    } else {
        // Digit thứ hai (bên trái) - hàng chục
        val = Mask[(DisplayValue / 10) % 10];
 800109a:	4b61      	ldr	r3, [pc, #388]	@ (8001220 <Run7SegDisplay+0x1e0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a61      	ldr	r2, [pc, #388]	@ (8001224 <Run7SegDisplay+0x1e4>)
 80010a0:	fb82 1203 	smull	r1, r2, r2, r3
 80010a4:	1092      	asrs	r2, r2, #2
 80010a6:	17db      	asrs	r3, r3, #31
 80010a8:	1ad1      	subs	r1, r2, r3
 80010aa:	4b5e      	ldr	r3, [pc, #376]	@ (8001224 <Run7SegDisplay+0x1e4>)
 80010ac:	fb83 2301 	smull	r2, r3, r3, r1
 80010b0:	109a      	asrs	r2, r3, #2
 80010b2:	17cb      	asrs	r3, r1, #31
 80010b4:	1ad2      	subs	r2, r2, r3
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	1aca      	subs	r2, r1, r3
 80010c0:	4b59      	ldr	r3, [pc, #356]	@ (8001228 <Run7SegDisplay+0x1e8>)
 80010c2:	5c9b      	ldrb	r3, [r3, r2]
 80010c4:	71fb      	strb	r3, [r7, #7]
        // Hiển thị dấu thập phân ở digit này nếu cần (sau số hàng chục)
        if(ShowDecimalPoint) {
 80010c6:	4b59      	ldr	r3, [pc, #356]	@ (800122c <Run7SegDisplay+0x1ec>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <Run7SegDisplay+0x92>
            show_decimal_now = 1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	603b      	str	r3, [r7, #0]
        }
    }

    // Thiết lập segment P (decimal point)
    if (show_decimal_now)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d006      	beq.n	80010e6 <Run7SegDisplay+0xa6>
        HAL_GPIO_WritePin(PORT_7SEG_P, PIN_7SEG_P, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010de:	4854      	ldr	r0, [pc, #336]	@ (8001230 <Run7SegDisplay+0x1f0>)
 80010e0:	f001 ff64 	bl	8002fac <HAL_GPIO_WritePin>
 80010e4:	e005      	b.n	80010f2 <Run7SegDisplay+0xb2>
    else
        HAL_GPIO_WritePin(PORT_7SEG_P, PIN_7SEG_P, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ec:	4850      	ldr	r0, [pc, #320]	@ (8001230 <Run7SegDisplay+0x1f0>)
 80010ee:	f001 ff5d 	bl	8002fac <HAL_GPIO_WritePin>

    // Thiết lập các segment khác (G, F, E, D, C, B, A)
    if (val & 0x40)
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <Run7SegDisplay+0xca>
        HAL_GPIO_WritePin(PORT_7SEG_G, PIN_7SEG_G, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001102:	484b      	ldr	r0, [pc, #300]	@ (8001230 <Run7SegDisplay+0x1f0>)
 8001104:	f001 ff52 	bl	8002fac <HAL_GPIO_WritePin>
 8001108:	e005      	b.n	8001116 <Run7SegDisplay+0xd6>
    else
        HAL_GPIO_WritePin(PORT_7SEG_G, PIN_7SEG_G, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001110:	4847      	ldr	r0, [pc, #284]	@ (8001230 <Run7SegDisplay+0x1f0>)
 8001112:	f001 ff4b 	bl	8002fac <HAL_GPIO_WritePin>

    if (val & 0x20)
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	f003 0320 	and.w	r3, r3, #32
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <Run7SegDisplay+0xee>
        HAL_GPIO_WritePin(PORT_7SEG_F, PIN_7SEG_F, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001126:	4842      	ldr	r0, [pc, #264]	@ (8001230 <Run7SegDisplay+0x1f0>)
 8001128:	f001 ff40 	bl	8002fac <HAL_GPIO_WritePin>
 800112c:	e005      	b.n	800113a <Run7SegDisplay+0xfa>
    else
        HAL_GPIO_WritePin(PORT_7SEG_F, PIN_7SEG_F, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001134:	483e      	ldr	r0, [pc, #248]	@ (8001230 <Run7SegDisplay+0x1f0>)
 8001136:	f001 ff39 	bl	8002fac <HAL_GPIO_WritePin>

    if (val & 0x10)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 0310 	and.w	r3, r3, #16
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <Run7SegDisplay+0x112>
        HAL_GPIO_WritePin(PORT_7SEG_E, PIN_7SEG_E, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800114a:	4839      	ldr	r0, [pc, #228]	@ (8001230 <Run7SegDisplay+0x1f0>)
 800114c:	f001 ff2e 	bl	8002fac <HAL_GPIO_WritePin>
 8001150:	e005      	b.n	800115e <Run7SegDisplay+0x11e>
    else
        HAL_GPIO_WritePin(PORT_7SEG_E, PIN_7SEG_E, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001158:	4835      	ldr	r0, [pc, #212]	@ (8001230 <Run7SegDisplay+0x1f0>)
 800115a:	f001 ff27 	bl	8002fac <HAL_GPIO_WritePin>

    if (val & 0x8)
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	2b00      	cmp	r3, #0
 8001166:	d006      	beq.n	8001176 <Run7SegDisplay+0x136>
        HAL_GPIO_WritePin(PORT_7SEG_D, PIN_7SEG_D, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800116e:	4830      	ldr	r0, [pc, #192]	@ (8001230 <Run7SegDisplay+0x1f0>)
 8001170:	f001 ff1c 	bl	8002fac <HAL_GPIO_WritePin>
 8001174:	e005      	b.n	8001182 <Run7SegDisplay+0x142>
    else
        HAL_GPIO_WritePin(PORT_7SEG_D, PIN_7SEG_D, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800117c:	482c      	ldr	r0, [pc, #176]	@ (8001230 <Run7SegDisplay+0x1f0>)
 800117e:	f001 ff15 	bl	8002fac <HAL_GPIO_WritePin>

    if (val & 0x4)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <Run7SegDisplay+0x15a>
        HAL_GPIO_WritePin(PORT_7SEG_C, PIN_7SEG_C, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001192:	4827      	ldr	r0, [pc, #156]	@ (8001230 <Run7SegDisplay+0x1f0>)
 8001194:	f001 ff0a 	bl	8002fac <HAL_GPIO_WritePin>
 8001198:	e005      	b.n	80011a6 <Run7SegDisplay+0x166>
    else
        HAL_GPIO_WritePin(PORT_7SEG_C, PIN_7SEG_C, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011a0:	4823      	ldr	r0, [pc, #140]	@ (8001230 <Run7SegDisplay+0x1f0>)
 80011a2:	f001 ff03 	bl	8002fac <HAL_GPIO_WritePin>

    if (val & 0x2)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <Run7SegDisplay+0x17e>
        HAL_GPIO_WritePin(PORT_7SEG_B, PIN_7SEG_B, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011b6:	481e      	ldr	r0, [pc, #120]	@ (8001230 <Run7SegDisplay+0x1f0>)
 80011b8:	f001 fef8 	bl	8002fac <HAL_GPIO_WritePin>
 80011bc:	e005      	b.n	80011ca <Run7SegDisplay+0x18a>
    else
        HAL_GPIO_WritePin(PORT_7SEG_B, PIN_7SEG_B, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c4:	481a      	ldr	r0, [pc, #104]	@ (8001230 <Run7SegDisplay+0x1f0>)
 80011c6:	f001 fef1 	bl	8002fac <HAL_GPIO_WritePin>

    if (val & 0x1)
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <Run7SegDisplay+0x1a2>
        HAL_GPIO_WritePin(PORT_7SEG_A, PIN_7SEG_A, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011da:	4815      	ldr	r0, [pc, #84]	@ (8001230 <Run7SegDisplay+0x1f0>)
 80011dc:	f001 fee6 	bl	8002fac <HAL_GPIO_WritePin>
 80011e0:	e005      	b.n	80011ee <Run7SegDisplay+0x1ae>
    else
        HAL_GPIO_WritePin(PORT_7SEG_A, PIN_7SEG_A, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011e8:	4811      	ldr	r0, [pc, #68]	@ (8001230 <Run7SegDisplay+0x1f0>)
 80011ea:	f001 fedf 	bl	8002fac <HAL_GPIO_WritePin>

    // Kích hoạt digit tương ứng
    if (pos & 0x1)
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <Run7SegDisplay+0x1d8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <Run7SegDisplay+0x1c6>
        HAL_GPIO_WritePin(PORT_7SEG_CONTROL0, PIN_7SEG_CONTROL0, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2104      	movs	r1, #4
 80011fe:	4807      	ldr	r0, [pc, #28]	@ (800121c <Run7SegDisplay+0x1dc>)
 8001200:	f001 fed4 	bl	8002fac <HAL_GPIO_WritePin>
    else
        HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_SET);
}
 8001204:	e004      	b.n	8001210 <Run7SegDisplay+0x1d0>
        HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	2108      	movs	r1, #8
 800120a:	4804      	ldr	r0, [pc, #16]	@ (800121c <Run7SegDisplay+0x1dc>)
 800120c:	f001 fece 	bl	8002fac <HAL_GPIO_WritePin>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000200 	.word	0x20000200
 800121c:	40021800 	.word	0x40021800
 8001220:	200001fc 	.word	0x200001fc
 8001224:	66666667 	.word	0x66666667
 8001228:	20000000 	.word	0x20000000
 800122c:	20000204 	.word	0x20000204
 8001230:	40021000 	.word	0x40021000

08001234 <hx711_init>:
 */

#include <HX711.h>

//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	@ 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	4613      	mov	r3, r2
 8001242:	80fb      	strh	r3, [r7, #6]
  // Setup the pin connections with the STM Board
  hx711->clk_gpio = clk_gpio;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	88fa      	ldrh	r2, [r7, #6]
 800124e:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800125a:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	68b8      	ldr	r0, [r7, #8]
 8001284:	f001 fcce 	bl	8002c24 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 800128c:	2301      	movs	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001290:	2302      	movs	r3, #2
 8001292:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8001294:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001296:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	6838      	ldr	r0, [r7, #0]
 80012a0:	f001 fcc0 	bl	8002c24 <HAL_GPIO_Init>

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	@ 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <set_scale>:

//#############################################################################################
void set_scale(hx711_t *hx711, float Ascale, float Bscale){
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80012b8:	edc7 0a01 	vstr	s1, [r7, #4]
  // Set the scale. To calibrate the cell, run the program with a scale of 1, call the tare function and then the get_units function. 
  // Divide the obtained weight by the real weight. The result is the parameter to pass to scale
	hx711->Ascale = Ascale;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	611a      	str	r2, [r3, #16]
	hx711->Bscale = Bscale;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	61da      	str	r2, [r3, #28]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <set_gain>:

//#############################################################################################
void set_gain(hx711_t *hx711, uint8_t Again, uint8_t Bgain){
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	70fb      	strb	r3, [r7, #3]
 80012e0:	4613      	mov	r3, r2
 80012e2:	70bb      	strb	r3, [r7, #2]
  // Define A channel's gain
	switch (Again) {
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	2b40      	cmp	r3, #64	@ 0x40
 80012e8:	d005      	beq.n	80012f6 <set_gain+0x22>
 80012ea:	2b80      	cmp	r3, #128	@ 0x80
 80012ec:	d107      	bne.n	80012fe <set_gain+0x2a>
			case 128:		// channel A, gain factor 128
				hx711->Again = 1;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	751a      	strb	r2, [r3, #20]
				break;
 80012f4:	e003      	b.n	80012fe <set_gain+0x2a>
			case 64:		// channel A, gain factor 64
				hx711->Again = 3;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2203      	movs	r2, #3
 80012fa:	751a      	strb	r2, [r3, #20]
				break;
 80012fc:	bf00      	nop
		}
	hx711->Bgain = 2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2202      	movs	r2, #2
 8001302:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <set_offset>:

//#############################################################################################
void set_offset(hx711_t *hx711, long offset, uint8_t channel){
 8001312:	b480      	push	{r7}
 8001314:	b085      	sub	sp, #20
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	4613      	mov	r3, r2
 800131e:	71fb      	strb	r3, [r7, #7]
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d103      	bne.n	800132e <set_offset+0x1c>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	60da      	str	r2, [r3, #12]
	else hx711->Boffset = offset;
}
 800132c:	e002      	b.n	8001334 <set_offset+0x22>
	else hx711->Boffset = offset;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	619a      	str	r2, [r3, #24]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <shiftIn>:

//############################################################################################
uint8_t shiftIn(hx711_t *hx711, uint8_t bitOrder) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
    uint8_t i;

    for(i = 0; i < 8; ++i) {
 8001350:	2300      	movs	r3, #0
 8001352:	73bb      	strb	r3, [r7, #14]
 8001354:	e03e      	b.n	80013d4 <shiftIn+0x94>
    	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	891b      	ldrh	r3, [r3, #8]
 800135e:	2201      	movs	r2, #1
 8001360:	4619      	mov	r1, r3
 8001362:	f001 fe23 	bl	8002fac <HAL_GPIO_WritePin>
        if(bitOrder == 0)
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d113      	bne.n	8001394 <shiftIn+0x54>
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << i;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	895b      	ldrh	r3, [r3, #10]
 8001374:	4619      	mov	r1, r3
 8001376:	4610      	mov	r0, r2
 8001378:	f001 fe00 	bl	8002f7c <HAL_GPIO_ReadPin>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	7bbb      	ldrb	r3, [r7, #14]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	b25a      	sxtb	r2, r3
 8001388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138c:	4313      	orrs	r3, r2
 800138e:	b25b      	sxtb	r3, r3
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	e014      	b.n	80013be <shiftIn+0x7e>
        else
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << (7 - i);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	895b      	ldrh	r3, [r3, #10]
 800139c:	4619      	mov	r1, r3
 800139e:	4610      	mov	r0, r2
 80013a0:	f001 fdec 	bl	8002f7c <HAL_GPIO_ReadPin>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	7bbb      	ldrb	r3, [r7, #14]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	b25a      	sxtb	r2, r3
 80013b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	891b      	ldrh	r3, [r3, #8]
 80013c6:	2200      	movs	r2, #0
 80013c8:	4619      	mov	r1, r3
 80013ca:	f001 fdef 	bl	8002fac <HAL_GPIO_WritePin>
    for(i = 0; i < 8; ++i) {
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	3301      	adds	r3, #1
 80013d2:	73bb      	strb	r3, [r7, #14]
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	2b07      	cmp	r3, #7
 80013d8:	d9bd      	bls.n	8001356 <shiftIn+0x16>
    }
    return value;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <is_ready>:

//############################################################################################
bool is_ready(hx711_t *hx711) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET){
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	895b      	ldrh	r3, [r3, #10]
 80013f4:	4619      	mov	r1, r3
 80013f6:	4610      	mov	r0, r2
 80013f8:	f001 fdc0 	bl	8002f7c <HAL_GPIO_ReadPin>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <is_ready+0x22>
		return 1;
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <is_ready+0x24>
	}
	return 0;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <wait_ready>:

//############################################################################################
void wait_ready(hx711_t *hx711) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	// Wait for the chip to become ready.
	while (!is_ready(hx711)) {
 8001418:	e002      	b.n	8001420 <wait_ready+0x10>
		HAL_Delay(0);
 800141a:	2000      	movs	r0, #0
 800141c:	f001 facc 	bl	80029b8 <HAL_Delay>
	while (!is_ready(hx711)) {
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ffdf 	bl	80013e4 <is_ready>
 8001426:	4603      	mov	r3, r0
 8001428:	f083 0301 	eor.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f3      	bne.n	800141a <wait_ready+0xa>
	}
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <read>:

//############################################################################################
long read(hx711_t *hx711, uint8_t channel){
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	70fb      	strb	r3, [r7, #3]
	wait_ready(hx711);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ffe1 	bl	8001410 <wait_ready>
	unsigned long value = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = { 0 };
 8001452:	f107 0308 	add.w	r3, r7, #8
 8001456:	2100      	movs	r1, #0
 8001458:	460a      	mov	r2, r1
 800145a:	801a      	strh	r2, [r3, #0]
 800145c:	460a      	mov	r2, r1
 800145e:	709a      	strb	r2, [r3, #2]
	uint8_t filler = 0x00;
 8001460:	2300      	movs	r3, #0
 8001462:	75fb      	strb	r3, [r7, #23]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop

	noInterrupts();

	data[2] = shiftIn(hx711, 1);
 8001468:	2101      	movs	r1, #1
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff68 	bl	8001340 <shiftIn>
 8001470:	4603      	mov	r3, r0
 8001472:	72bb      	strb	r3, [r7, #10]
	data[1] = shiftIn(hx711, 1);
 8001474:	2101      	movs	r1, #1
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ff62 	bl	8001340 <shiftIn>
 800147c:	4603      	mov	r3, r0
 800147e:	727b      	strb	r3, [r7, #9]
	data[0] = shiftIn(hx711, 1);
 8001480:	2101      	movs	r1, #1
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ff5c 	bl	8001340 <shiftIn>
 8001488:	4603      	mov	r3, r0
 800148a:	723b      	strb	r3, [r7, #8]

	uint8_t gain = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	75bb      	strb	r3, [r7, #22]
	if(channel == 0) gain = hx711->Again;
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d103      	bne.n	800149e <read+0x62>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7d1b      	ldrb	r3, [r3, #20]
 800149a:	75bb      	strb	r3, [r7, #22]
 800149c:	e003      	b.n	80014a6 <read+0x6a>
	else gain = hx711->Bgain;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a4:	75bb      	strb	r3, [r7, #22]

	for (unsigned int i = 0; i < gain; i++) {
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	e012      	b.n	80014d2 <read+0x96>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	891b      	ldrh	r3, [r3, #8]
 80014b4:	2201      	movs	r2, #1
 80014b6:	4619      	mov	r1, r3
 80014b8:	f001 fd78 	bl	8002fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	891b      	ldrh	r3, [r3, #8]
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	f001 fd70 	bl	8002fac <HAL_GPIO_WritePin>
	for (unsigned int i = 0; i < gain; i++) {
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	3301      	adds	r3, #1
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	7dbb      	ldrb	r3, [r7, #22]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3e8      	bcc.n	80014ac <read+0x70>
  __ASM volatile ("cpsie i" : : : "memory");
 80014da:	b662      	cpsie	i
}
 80014dc:	bf00      	nop
	}

	interrupts();

	// Replicate the most significant bit to pad out a 32-bit signed integer
	if (data[2] & 0x80) {
 80014de:	7abb      	ldrb	r3, [r7, #10]
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	da02      	bge.n	80014ec <read+0xb0>
		filler = 0xFF;
 80014e6:	23ff      	movs	r3, #255	@ 0xff
 80014e8:	75fb      	strb	r3, [r7, #23]
 80014ea:	e001      	b.n	80014f0 <read+0xb4>
	} else {
		filler = 0x00;
 80014ec:	2300      	movs	r3, #0
 80014ee:	75fb      	strb	r3, [r7, #23]
	}

	// Construct a 32-bit signed integer
	value = ( (unsigned long)(filler) << 24
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	061a      	lsls	r2, r3, #24
			| (unsigned long)(data[2]) << 16
 80014f4:	7abb      	ldrb	r3, [r7, #10]
 80014f6:	041b      	lsls	r3, r3, #16
 80014f8:	431a      	orrs	r2, r3
			| (unsigned long)(data[1]) << 8
 80014fa:	7a7b      	ldrb	r3, [r7, #9]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	4313      	orrs	r3, r2
			| (unsigned long)(data[0]) );
 8001500:	7a3a      	ldrb	r2, [r7, #8]
	value = ( (unsigned long)(filler) << 24
 8001502:	4313      	orrs	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]

	return (long)(value);
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <read_average>:

//############################################################################################
long read_average(hx711_t *hx711, int8_t times, uint8_t channel) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
 800151c:	4613      	mov	r3, r2
 800151e:	70bb      	strb	r3, [r7, #2]
	long sum = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
	for (int8_t i = 0; i < times; i++) {
 8001524:	2300      	movs	r3, #0
 8001526:	72fb      	strb	r3, [r7, #11]
 8001528:	e011      	b.n	800154e <read_average+0x3e>
		sum += read(hx711, channel);
 800152a:	78bb      	ldrb	r3, [r7, #2]
 800152c:	4619      	mov	r1, r3
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ff84 	bl	800143c <read>
 8001534:	4602      	mov	r2, r0
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4413      	add	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
		HAL_Delay(0);
 800153c:	2000      	movs	r0, #0
 800153e:	f001 fa3b 	bl	80029b8 <HAL_Delay>
	for (int8_t i = 0; i < times; i++) {
 8001542:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	3301      	adds	r3, #1
 800154a:	b2db      	uxtb	r3, r3
 800154c:	72fb      	strb	r3, [r7, #11]
 800154e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8001552:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001556:	429a      	cmp	r2, r3
 8001558:	dbe7      	blt.n	800152a <read_average+0x1a>
	}
	return sum / times;
 800155a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <get_value>:

//############################################################################################
double get_value(hx711_t *hx711, int8_t times, uint8_t channel) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
 8001578:	4613      	mov	r3, r2
 800157a:	70bb      	strb	r3, [r7, #2]
	long offset = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) offset = hx711->Aoffset;
 8001580:	78bb      	ldrb	r3, [r7, #2]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d103      	bne.n	800158e <get_value+0x22>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	e002      	b.n	8001594 <get_value+0x28>
	else offset = hx711->Boffset;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	60fb      	str	r3, [r7, #12]
	return read_average(hx711, times, channel) - offset;
 8001594:	78ba      	ldrb	r2, [r7, #2]
 8001596:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800159a:	4619      	mov	r1, r3
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ffb7 	bl	8001510 <read_average>
 80015a2:	4602      	mov	r2, r0
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ffcb 	bl	8000544 <__aeabi_i2d>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80015b6:	eeb0 0a47 	vmov.f32	s0, s14
 80015ba:	eef0 0a67 	vmov.f32	s1, s15
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <tare>:

//############################################################################################
void tare(hx711_t *hx711, uint8_t times, uint8_t channel) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	70fb      	strb	r3, [r7, #3]
 80015d0:	4613      	mov	r3, r2
 80015d2:	70bb      	strb	r3, [r7, #2]
	read(hx711, channel); // Change channel
 80015d4:	78bb      	ldrb	r3, [r7, #2]
 80015d6:	4619      	mov	r1, r3
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ff2f 	bl	800143c <read>
	double sum = read_average(hx711, times, channel);
 80015de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015e2:	78ba      	ldrb	r2, [r7, #2]
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ff92 	bl	8001510 <read_average>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ffa8 	bl	8000544 <__aeabi_i2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	set_offset(hx711, sum, channel);
 80015fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001600:	f7ff faba 	bl	8000b78 <__aeabi_d2iz>
 8001604:	4601      	mov	r1, r0
 8001606:	78bb      	ldrb	r3, [r7, #2]
 8001608:	461a      	mov	r2, r3
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fe81 	bl	8001312 <set_offset>
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <tare_all>:

//############################################################################################
void tare_all(hx711_t *hx711, uint8_t times) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
	tare(hx711, times, CHANNEL_A);
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	2200      	movs	r2, #0
 8001628:	4619      	mov	r1, r3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ffca 	bl	80015c4 <tare>
	tare(hx711, times, CHANNEL_B);
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	2201      	movs	r2, #1
 8001634:	4619      	mov	r1, r3
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffc4 	bl	80015c4 <tare>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <get_weight>:

//############################################################################################
float get_weight(hx711_t *hx711, int8_t times, uint8_t channel) {
 8001644:	b5b0      	push	{r4, r5, r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	70fb      	strb	r3, [r7, #3]
 8001650:	4613      	mov	r3, r2
 8001652:	70bb      	strb	r3, [r7, #2]
  // Read load cell
	read(hx711, channel);
 8001654:	78bb      	ldrb	r3, [r7, #2]
 8001656:	4619      	mov	r1, r3
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff feef 	bl	800143c <read>
	float scale = 0;
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) scale = hx711->Ascale;
 8001664:	78bb      	ldrb	r3, [r7, #2]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d103      	bne.n	8001672 <get_weight+0x2e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e002      	b.n	8001678 <get_weight+0x34>
	else scale = hx711->Bscale;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	60fb      	str	r3, [r7, #12]
	return get_value(hx711, times, channel) / scale;
 8001678:	78ba      	ldrb	r2, [r7, #2]
 800167a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800167e:	4619      	mov	r1, r3
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff73 	bl	800156c <get_value>
 8001686:	ec55 4b10 	vmov	r4, r5, d0
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f7fe ff6c 	bl	8000568 <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4620      	mov	r0, r4
 8001696:	4629      	mov	r1, r5
 8001698:	f7ff f8e8 	bl	800086c <__aeabi_ddiv>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff fab0 	bl	8000c08 <__aeabi_d2f>
 80016a8:	4603      	mov	r3, r0
 80016aa:	ee07 3a90 	vmov	s15, r3
}
 80016ae:	eeb0 0a67 	vmov.f32	s0, s15
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bdb0      	pop	{r4, r5, r7, pc}

080016b8 <DisplayNumber>:
                         LED_Pins[led_num-1].pin,
                         (state) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}

void DisplayNumber(uint8_t num) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
    if (num > 6) num = 6; // Giới hạn tối đa 6 LED
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b06      	cmp	r3, #6
 80016c6:	d901      	bls.n	80016cc <DisplayNumber+0x14>
 80016c8:	2306      	movs	r3, #6
 80016ca:	71fb      	strb	r3, [r7, #7]

    for (int i = 0; i < 6; i++) {
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e015      	b.n	80016fe <DisplayNumber+0x46>
        HAL_GPIO_WritePin(LED_Pins[i].port, LED_Pins[i].pin,
 80016d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001710 <DisplayNumber+0x58>)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80016da:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <DisplayNumber+0x58>)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4413      	add	r3, r2
 80016e2:	8899      	ldrh	r1, [r3, #4]
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	bfb4      	ite	lt
 80016ec:	2301      	movlt	r3, #1
 80016ee:	2300      	movge	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	f001 fc5a 	bl	8002fac <HAL_GPIO_WritePin>
    for (int i = 0; i < 6; i++) {
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3301      	adds	r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b05      	cmp	r3, #5
 8001702:	dde6      	ble.n	80016d2 <DisplayNumber+0x1a>
                         (i < num) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	08009af4 	.word	0x08009af4

08001714 <BlinkLEDs>:

void BlinkLEDs(uint8_t times, uint16_t delay_ms) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	460a      	mov	r2, r1
 800171e:	71fb      	strb	r3, [r7, #7]
 8001720:	4613      	mov	r3, r2
 8001722:	80bb      	strh	r3, [r7, #4]
    for (uint8_t i = 0; i < times; i++) {
 8001724:	2300      	movs	r3, #0
 8001726:	75fb      	strb	r3, [r7, #23]
 8001728:	e036      	b.n	8001798 <BlinkLEDs+0x84>
        // Bật tất cả LED
        for (int j = 0; j < 6; j++) {
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	e00f      	b.n	8001750 <BlinkLEDs+0x3c>
            HAL_GPIO_WritePin(LED_Pins[j].port, LED_Pins[j].pin, GPIO_PIN_SET);
 8001730:	4a1e      	ldr	r2, [pc, #120]	@ (80017ac <BlinkLEDs+0x98>)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001738:	4a1c      	ldr	r2, [pc, #112]	@ (80017ac <BlinkLEDs+0x98>)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4413      	add	r3, r2
 8001740:	889b      	ldrh	r3, [r3, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	4619      	mov	r1, r3
 8001746:	f001 fc31 	bl	8002fac <HAL_GPIO_WritePin>
        for (int j = 0; j < 6; j++) {
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	3301      	adds	r3, #1
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	2b05      	cmp	r3, #5
 8001754:	ddec      	ble.n	8001730 <BlinkLEDs+0x1c>
        }
        HAL_Delay(delay_ms);
 8001756:	88bb      	ldrh	r3, [r7, #4]
 8001758:	4618      	mov	r0, r3
 800175a:	f001 f92d 	bl	80029b8 <HAL_Delay>

        // Tắt tất cả LED
        for (int j = 0; j < 6; j++) {
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	e00f      	b.n	8001784 <BlinkLEDs+0x70>
            HAL_GPIO_WritePin(LED_Pins[j].port, LED_Pins[j].pin, GPIO_PIN_RESET);
 8001764:	4a11      	ldr	r2, [pc, #68]	@ (80017ac <BlinkLEDs+0x98>)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800176c:	4a0f      	ldr	r2, [pc, #60]	@ (80017ac <BlinkLEDs+0x98>)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4413      	add	r3, r2
 8001774:	889b      	ldrh	r3, [r3, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	4619      	mov	r1, r3
 800177a:	f001 fc17 	bl	8002fac <HAL_GPIO_WritePin>
        for (int j = 0; j < 6; j++) {
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3301      	adds	r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b05      	cmp	r3, #5
 8001788:	ddec      	ble.n	8001764 <BlinkLEDs+0x50>
        }
        HAL_Delay(delay_ms);
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	4618      	mov	r0, r3
 800178e:	f001 f913 	bl	80029b8 <HAL_Delay>
    for (uint8_t i = 0; i < times; i++) {
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	3301      	adds	r3, #1
 8001796:	75fb      	strb	r3, [r7, #23]
 8001798:	7dfa      	ldrb	r2, [r7, #23]
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	429a      	cmp	r2, r3
 800179e:	d3c4      	bcc.n	800172a <BlinkLEDs+0x16>
    }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	08009af4 	.word	0x08009af4

080017b0 <scale_init>:

void scale_init(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af02      	add	r7, sp, #8
    scale_send_uart_data("Initializing HX711 load cell...\r\n");
 80017b6:	481e      	ldr	r0, [pc, #120]	@ (8001830 <scale_init+0x80>)
 80017b8:	f000 f9a2 	bl	8001b00 <scale_send_uart_data>
    hx711_init(&hx711, HX711_SCK_PORT, HX711_SCK_PIN, HX711_DT_PORT, HX711_DT_PIN);
 80017bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <scale_init+0x84>)
 80017c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017c8:	491a      	ldr	r1, [pc, #104]	@ (8001834 <scale_init+0x84>)
 80017ca:	481b      	ldr	r0, [pc, #108]	@ (8001838 <scale_init+0x88>)
 80017cc:	f7ff fd32 	bl	8001234 <hx711_init>
    set_gain(&hx711, 128, 32);
 80017d0:	2220      	movs	r2, #32
 80017d2:	2180      	movs	r1, #128	@ 0x80
 80017d4:	4818      	ldr	r0, [pc, #96]	@ (8001838 <scale_init+0x88>)
 80017d6:	f7ff fd7d 	bl	80012d4 <set_gain>

    if (is_ready(&hx711)) {
 80017da:	4817      	ldr	r0, [pc, #92]	@ (8001838 <scale_init+0x88>)
 80017dc:	f7ff fe02 	bl	80013e4 <is_ready>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <scale_init+0x3e>
        scale_send_uart_data("HX711 ready!\r\n");
 80017e6:	4815      	ldr	r0, [pc, #84]	@ (800183c <scale_init+0x8c>)
 80017e8:	f000 f98a 	bl	8001b00 <scale_send_uart_data>
 80017ec:	e002      	b.n	80017f4 <scale_init+0x44>
    } else {
        scale_send_uart_data("HX711 not ready!\r\n");
 80017ee:	4814      	ldr	r0, [pc, #80]	@ (8001840 <scale_init+0x90>)
 80017f0:	f000 f986 	bl	8001b00 <scale_send_uart_data>
    }

    set_scale(&hx711, SCALE_FACTOR, SCALE_FACTOR);
 80017f4:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001844 <scale_init+0x94>
 80017f8:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8001844 <scale_init+0x94>
 80017fc:	480e      	ldr	r0, [pc, #56]	@ (8001838 <scale_init+0x88>)
 80017fe:	f7ff fd55 	bl	80012ac <set_scale>
    scale_calibrate();
 8001802:	f000 f825 	bl	8001850 <scale_calibrate>

    scale_state.current_weight = 0.0f;
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <scale_init+0x98>)
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
    scale_state.previous_weight = 0.0f;
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <scale_init+0x98>)
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	605a      	str	r2, [r3, #4]
    scale_state.weight_stable_count = 0;
 8001816:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <scale_init+0x98>)
 8001818:	2200      	movs	r2, #0
 800181a:	721a      	strb	r2, [r3, #8]
    scale_state.weight_threshold = WEIGHT_STABILITY_THRESHOLD;
 800181c:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <scale_init+0x98>)
 800181e:	4a0b      	ldr	r2, [pc, #44]	@ (800184c <scale_init+0x9c>)
 8001820:	615a      	str	r2, [r3, #20]
    scale_state.system_ready = 0;
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <scale_init+0x98>)
 8001824:	2200      	movs	r2, #0
 8001826:	725a      	strb	r2, [r3, #9]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	08009a08 	.word	0x08009a08
 8001834:	40020000 	.word	0x40020000
 8001838:	20000308 	.word	0x20000308
 800183c:	08009a2c 	.word	0x08009a2c
 8001840:	08009a3c 	.word	0x08009a3c
 8001844:	469c4000 	.word	0x469c4000
 8001848:	200002f0 	.word	0x200002f0
 800184c:	3c23d70a 	.word	0x3c23d70a

08001850 <scale_calibrate>:

void scale_calibrate(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
    scale_send_uart_data("Calibrating...\r\n");
 8001854:	4807      	ldr	r0, [pc, #28]	@ (8001874 <scale_calibrate+0x24>)
 8001856:	f000 f953 	bl	8001b00 <scale_send_uart_data>
    HAL_Delay(2000);
 800185a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800185e:	f001 f8ab 	bl	80029b8 <HAL_Delay>
    tare_all(&hx711, 10);
 8001862:	210a      	movs	r1, #10
 8001864:	4804      	ldr	r0, [pc, #16]	@ (8001878 <scale_calibrate+0x28>)
 8001866:	f7ff fed7 	bl	8001618 <tare_all>
    scale_send_uart_data("Calibration complete\r\n");
 800186a:	4804      	ldr	r0, [pc, #16]	@ (800187c <scale_calibrate+0x2c>)
 800186c:	f000 f948 	bl	8001b00 <scale_send_uart_data>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	08009a50 	.word	0x08009a50
 8001878:	20000308 	.word	0x20000308
 800187c:	08009a64 	.word	0x08009a64

08001880 <scale_read_weight>:

float scale_read_weight(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
    if (!is_ready(&hx711)) return 0.0f;
 8001886:	4812      	ldr	r0, [pc, #72]	@ (80018d0 <scale_read_weight+0x50>)
 8001888:	f7ff fdac 	bl	80013e4 <is_ready>
 800188c:	4603      	mov	r3, r0
 800188e:	f083 0301 	eor.w	r3, r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <scale_read_weight+0x1e>
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e011      	b.n	80018c2 <scale_read_weight+0x42>

    float weight = get_weight(&hx711, 1, CHANNEL_A);
 800189e:	2200      	movs	r2, #0
 80018a0:	2101      	movs	r1, #1
 80018a2:	480b      	ldr	r0, [pc, #44]	@ (80018d0 <scale_read_weight+0x50>)
 80018a4:	f7ff fece 	bl	8001644 <get_weight>
 80018a8:	ed87 0a01 	vstr	s0, [r7, #4]
    return (weight < 0.0f) ? 0.0f : weight;
 80018ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	d502      	bpl.n	80018c0 <scale_read_weight+0x40>
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	e000      	b.n	80018c2 <scale_read_weight+0x42>
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000308 	.word	0x20000308

080018d4 <scale_filter_weight>:

float scale_filter_weight(float raw_weight) {
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	ed87 0a01 	vstr	s0, [r7, #4]
    static float filtered_weight = 0.0f;
    static uint8_t first_reading = 1;

    if (first_reading) {
 80018de:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <scale_filter_weight+0x5c>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d006      	beq.n	80018f4 <scale_filter_weight+0x20>
        filtered_weight = raw_weight;
 80018e6:	4a13      	ldr	r2, [pc, #76]	@ (8001934 <scale_filter_weight+0x60>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6013      	str	r3, [r2, #0]
        first_reading = 0;
 80018ec:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <scale_filter_weight+0x5c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e011      	b.n	8001918 <scale_filter_weight+0x44>
    } else {
        filtered_weight = WEIGHT_FILTER_ALPHA * raw_weight + (1.0f - WEIGHT_FILTER_ALPHA) * filtered_weight;
 80018f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80018f8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001938 <scale_filter_weight+0x64>
 80018fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001900:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <scale_filter_weight+0x60>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800193c <scale_filter_weight+0x68>
 800190a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800190e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001912:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <scale_filter_weight+0x60>)
 8001914:	edc3 7a00 	vstr	s15, [r3]
    }
    return filtered_weight;
 8001918:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <scale_filter_weight+0x60>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	ee07 3a90 	vmov	s15, r3
}
 8001920:	eeb0 0a67 	vmov.f32	s0, s15
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	2000000a 	.word	0x2000000a
 8001934:	200003ac 	.word	0x200003ac
 8001938:	3f4ccccd 	.word	0x3f4ccccd
 800193c:	3e4ccccc 	.word	0x3e4ccccc

08001940 <scale_is_weight_stable>:

uint8_t scale_is_weight_stable(float weight) {
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	ed87 0a01 	vstr	s0, [r7, #4]
    float weight_diff = fabsf(weight - scale_state.previous_weight);
 800194a:	4b1a      	ldr	r3, [pc, #104]	@ (80019b4 <scale_is_weight_stable+0x74>)
 800194c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001950:	ed97 7a01 	vldr	s14, [r7, #4]
 8001954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001958:	eef0 7ae7 	vabs.f32	s15, s15
 800195c:	edc7 7a03 	vstr	s15, [r7, #12]

    if (weight_diff < scale_state.weight_threshold) {
 8001960:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <scale_is_weight_stable+0x74>)
 8001962:	edd3 7a05 	vldr	s15, [r3, #20]
 8001966:	ed97 7a03 	vldr	s14, [r7, #12]
 800196a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001972:	d511      	bpl.n	8001998 <scale_is_weight_stable+0x58>
        scale_state.weight_stable_count++;
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <scale_is_weight_stable+0x74>)
 8001976:	7a1b      	ldrb	r3, [r3, #8]
 8001978:	3301      	adds	r3, #1
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b0d      	ldr	r3, [pc, #52]	@ (80019b4 <scale_is_weight_stable+0x74>)
 800197e:	721a      	strb	r2, [r3, #8]
        if (scale_state.weight_stable_count >= WEIGHT_STABILITY_COUNT) {
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <scale_is_weight_stable+0x74>)
 8001982:	7a1b      	ldrb	r3, [r3, #8]
 8001984:	2b04      	cmp	r3, #4
 8001986:	d90d      	bls.n	80019a4 <scale_is_weight_stable+0x64>
            scale_state.weight_stable_count = WEIGHT_STABILITY_COUNT;
 8001988:	4b0a      	ldr	r3, [pc, #40]	@ (80019b4 <scale_is_weight_stable+0x74>)
 800198a:	2205      	movs	r2, #5
 800198c:	721a      	strb	r2, [r3, #8]
            scale_state.previous_weight = weight;
 800198e:	4a09      	ldr	r2, [pc, #36]	@ (80019b4 <scale_is_weight_stable+0x74>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6053      	str	r3, [r2, #4]
            return 1;
 8001994:	2301      	movs	r3, #1
 8001996:	e006      	b.n	80019a6 <scale_is_weight_stable+0x66>
        }
    } else {
        scale_state.weight_stable_count = 0;
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <scale_is_weight_stable+0x74>)
 800199a:	2200      	movs	r2, #0
 800199c:	721a      	strb	r2, [r3, #8]
        scale_state.previous_weight = weight;
 800199e:	4a05      	ldr	r2, [pc, #20]	@ (80019b4 <scale_is_weight_stable+0x74>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6053      	str	r3, [r2, #4]
    }
    return 0;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	200002f0 	.word	0x200002f0

080019b8 <scale_display_weight>:

void scale_display_weight(float weight) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af02      	add	r7, sp, #8
 80019be:	ed87 0a01 	vstr	s0, [r7, #4]
    if (weight < 0.0f) weight = 0.0f;
 80019c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ce:	d502      	bpl.n	80019d6 <scale_display_weight+0x1e>
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]

    // Giảm ngưỡng và thêm deadzone
    if (weight < 0.02f) {  // Ngưỡng thấp hơn để tránh nhiễu
 80019d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019da:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001a58 <scale_display_weight+0xa0>
 80019de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e6:	d506      	bpl.n	80019f6 <scale_display_weight+0x3e>
        DisplayNumber(0);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff fe65 	bl	80016b8 <DisplayNumber>
        scale_send_uart_data("Weight: 0.00 kg (LEDs: 0)\r\n");
 80019ee:	481b      	ldr	r0, [pc, #108]	@ (8001a5c <scale_display_weight+0xa4>)
 80019f0:	f000 f886 	bl	8001b00 <scale_send_uart_data>
        return;
 80019f4:	e02c      	b.n	8001a50 <scale_display_weight+0x98>
    }

    if (weight > 9.9f) weight = 9.9f;
 80019f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019fa:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001a60 <scale_display_weight+0xa8>
 80019fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	dd01      	ble.n	8001a0c <scale_display_weight+0x54>
 8001a08:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <scale_display_weight+0xac>)
 8001a0a:	607b      	str	r3, [r7, #4]

    // Tính số LED cần sáng (0-6)
    uint8_t leds_to_light = (uint8_t)((weight / 9.9f) * 6 + 0.5f);
 8001a0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a10:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001a60 <scale_display_weight+0xa8>
 8001a14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a18:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8001a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a20:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001a24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a2c:	edc7 7a00 	vstr	s15, [r7]
 8001a30:	783b      	ldrb	r3, [r7, #0]
 8001a32:	73fb      	strb	r3, [r7, #15]
    DisplayNumber(leds_to_light);
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fe3e 	bl	80016b8 <DisplayNumber>
    scale_send_uart_data("Weight: %.2f kg (LEDs: %d)\r\n", weight, leds_to_light);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7fe fd93 	bl	8000568 <__aeabi_f2d>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	7bf9      	ldrb	r1, [r7, #15]
 8001a48:	9100      	str	r1, [sp, #0]
 8001a4a:	4807      	ldr	r0, [pc, #28]	@ (8001a68 <scale_display_weight+0xb0>)
 8001a4c:	f000 f858 	bl	8001b00 <scale_send_uart_data>
}
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	3ca3d70a 	.word	0x3ca3d70a
 8001a5c:	08009a7c 	.word	0x08009a7c
 8001a60:	411e6666 	.word	0x411e6666
 8001a64:	411e6666 	.word	0x411e6666
 8001a68:	08009a98 	.word	0x08009a98

08001a6c <scale_process_rfid>:
void scale_process_rfid(float weight) {
 8001a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a70:	b089      	sub	sp, #36	@ 0x24
 8001a72:	af04      	add	r7, sp, #16
 8001a74:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t CardID[5];

    if (TM_MFRC522_Check(CardID) == MI_OK) {
 8001a78:	f107 0308 	add.w	r3, r7, #8
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 fc61 	bl	8002344 <TM_MFRC522_Check>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d125      	bne.n	8001ad4 <scale_process_rfid+0x68>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a8e:	481a      	ldr	r0, [pc, #104]	@ (8001af8 <scale_process_rfid+0x8c>)
 8001a90:	f001 fa8c 	bl	8002fac <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a9a:	4817      	ldr	r0, [pc, #92]	@ (8001af8 <scale_process_rfid+0x8c>)
 8001a9c:	f001 fa86 	bl	8002fac <HAL_GPIO_WritePin>
        scale_send_uart_data("RFID: %02X%02X%02X%02X%02X | Weight: %.3f kg\r\n",
                           CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], weight);
 8001aa0:	7a3b      	ldrb	r3, [r7, #8]
        scale_send_uart_data("RFID: %02X%02X%02X%02X%02X | Weight: %.3f kg\r\n",
 8001aa2:	461e      	mov	r6, r3
                           CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], weight);
 8001aa4:	7a7b      	ldrb	r3, [r7, #9]
        scale_send_uart_data("RFID: %02X%02X%02X%02X%02X | Weight: %.3f kg\r\n",
 8001aa6:	4698      	mov	r8, r3
                           CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], weight);
 8001aa8:	7abb      	ldrb	r3, [r7, #10]
        scale_send_uart_data("RFID: %02X%02X%02X%02X%02X | Weight: %.3f kg\r\n",
 8001aaa:	4699      	mov	r9, r3
                           CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], weight);
 8001aac:	7afb      	ldrb	r3, [r7, #11]
        scale_send_uart_data("RFID: %02X%02X%02X%02X%02X | Weight: %.3f kg\r\n",
 8001aae:	461c      	mov	r4, r3
                           CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], weight);
 8001ab0:	7b3b      	ldrb	r3, [r7, #12]
        scale_send_uart_data("RFID: %02X%02X%02X%02X%02X | Weight: %.3f kg\r\n",
 8001ab2:	461d      	mov	r5, r3
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7fe fd57 	bl	8000568 <__aeabi_f2d>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ac2:	9501      	str	r5, [sp, #4]
 8001ac4:	9400      	str	r4, [sp, #0]
 8001ac6:	464b      	mov	r3, r9
 8001ac8:	4642      	mov	r2, r8
 8001aca:	4631      	mov	r1, r6
 8001acc:	480b      	ldr	r0, [pc, #44]	@ (8001afc <scale_process_rfid+0x90>)
 8001ace:	f000 f817 	bl	8001b00 <scale_send_uart_data>
    } else {
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
    }
}
 8001ad2:	e00b      	b.n	8001aec <scale_process_rfid+0x80>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ada:	4807      	ldr	r0, [pc, #28]	@ (8001af8 <scale_process_rfid+0x8c>)
 8001adc:	f001 fa66 	bl	8002fac <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ae6:	4804      	ldr	r0, [pc, #16]	@ (8001af8 <scale_process_rfid+0x8c>)
 8001ae8:	f001 fa60 	bl	8002fac <HAL_GPIO_WritePin>
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001af6:	bf00      	nop
 8001af8:	40021800 	.word	0x40021800
 8001afc:	08009ab8 	.word	0x08009ab8

08001b00 <scale_send_uart_data>:

void scale_send_uart_data(const char* format, ...) {
 8001b00:	b40f      	push	{r0, r1, r2, r3}
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(uart_buffer, sizeof(uart_buffer), format, args);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	2180      	movs	r1, #128	@ 0x80
 8001b14:	480c      	ldr	r0, [pc, #48]	@ (8001b48 <scale_send_uart_data+0x48>)
 8001b16:	f004 fb83 	bl	8006220 <vsniprintf>
 8001b1a:	6078      	str	r0, [r7, #4]
    va_end(args);

    if (len > 0 && len < sizeof(uart_buffer)) {
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	dd0a      	ble.n	8001b38 <scale_send_uart_data+0x38>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b26:	d807      	bhi.n	8001b38 <scale_send_uart_data+0x38>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, len, 1000);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b30:	4905      	ldr	r1, [pc, #20]	@ (8001b48 <scale_send_uart_data+0x48>)
 8001b32:	4806      	ldr	r0, [pc, #24]	@ (8001b4c <scale_send_uart_data+0x4c>)
 8001b34:	f002 fffe 	bl	8004b34 <HAL_UART_Transmit>
    }
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b42:	b004      	add	sp, #16
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	2000032c 	.word	0x2000032c
 8001b4c:	200002a8 	.word	0x200002a8

08001b50 <main>:
        HAL_Delay(200);
    }
}
/* USER CODE END 0 */

int main(void) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
    HAL_Init();
 8001b56:	f000 febd 	bl	80028d4 <HAL_Init>
    SystemClock_Config();
 8001b5a:	f000 f875 	bl	8001c48 <SystemClock_Config>
    MX_GPIO_Init();
 8001b5e:	f000 f8d5 	bl	8001d0c <MX_GPIO_Init>
    MX_SPI4_Init();
 8001b62:	f000 f953 	bl	8001e0c <MX_SPI4_Init>
    MX_USART1_UART_Init();
 8001b66:	f000 f99f 	bl	8001ea8 <MX_USART1_UART_Init>
    MX_TIM6_Init();
 8001b6a:	f000 f981 	bl	8001e70 <MX_TIM6_Init>

    /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim6);
 8001b6e:	4834      	ldr	r0, [pc, #208]	@ (8001c40 <main+0xf0>)
 8001b70:	f002 fd4e 	bl	8004610 <HAL_TIM_Base_Start_IT>
    TM_MFRC522_Init();
 8001b74:	f000 fbc0 	bl	80022f8 <TM_MFRC522_Init>
    scale_init();
 8001b78:	f7ff fe1a 	bl	80017b0 <scale_init>
    BlinkLEDs(3, 200); // Nhấp nháy LED 3 lần khi khởi động
 8001b7c:	21c8      	movs	r1, #200	@ 0xc8
 8001b7e:	2003      	movs	r0, #3
 8001b80:	f7ff fdc8 	bl	8001714 <BlinkLEDs>
    DisplayNumber(0);
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff fd97 	bl	80016b8 <DisplayNumber>

    scale_state.system_ready = 1;
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c44 <main+0xf4>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	725a      	strb	r2, [r3, #9]
    scale_state.last_measurement_time = HAL_GetTick();
 8001b90:	f000 ff06 	bl	80029a0 <HAL_GetTick>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a2b      	ldr	r2, [pc, #172]	@ (8001c44 <main+0xf4>)
 8001b98:	60d3      	str	r3, [r2, #12]
    scale_state.last_display_time = HAL_GetTick();
 8001b9a:	f000 ff01 	bl	80029a0 <HAL_GetTick>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4a28      	ldr	r2, [pc, #160]	@ (8001c44 <main+0xf4>)
 8001ba2:	6113      	str	r3, [r2, #16]
    /* USER CODE END 2 */

    while (1) {
        uint32_t current_time = HAL_GetTick();
 8001ba4:	f000 fefc 	bl	80029a0 <HAL_GetTick>
 8001ba8:	60f8      	str	r0, [r7, #12]

        if (current_time - scale_state.last_measurement_time >= MEASUREMENT_INTERVAL) {
 8001baa:	4b26      	ldr	r3, [pc, #152]	@ (8001c44 <main+0xf4>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b63      	cmp	r3, #99	@ 0x63
 8001bb4:	d93f      	bls.n	8001c36 <main+0xe6>
            scale_state.last_measurement_time = current_time;
 8001bb6:	4a23      	ldr	r2, [pc, #140]	@ (8001c44 <main+0xf4>)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	60d3      	str	r3, [r2, #12]
            float raw_weight = scale_read_weight();
 8001bbc:	f7ff fe60 	bl	8001880 <scale_read_weight>
 8001bc0:	ed87 0a02 	vstr	s0, [r7, #8]
            float filtered_weight = scale_filter_weight(raw_weight);
 8001bc4:	ed97 0a02 	vldr	s0, [r7, #8]
 8001bc8:	f7ff fe84 	bl	80018d4 <scale_filter_weight>
 8001bcc:	ed87 0a01 	vstr	s0, [r7, #4]
            scale_state.current_weight = filtered_weight;
 8001bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c44 <main+0xf4>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6013      	str	r3, [r2, #0]

            if (scale_is_weight_stable(filtered_weight)) {
 8001bd6:	ed97 0a01 	vldr	s0, [r7, #4]
 8001bda:	f7ff feb1 	bl	8001940 <scale_is_weight_stable>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d018      	beq.n	8001c16 <main+0xc6>
                if (current_time - scale_state.last_display_time >= DISPLAY_UPDATE_INTERVAL) {
 8001be4:	4b17      	ldr	r3, [pc, #92]	@ (8001c44 <main+0xf4>)
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001bf0:	d321      	bcc.n	8001c36 <main+0xe6>
                    scale_state.last_display_time = current_time;
 8001bf2:	4a14      	ldr	r2, [pc, #80]	@ (8001c44 <main+0xf4>)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6113      	str	r3, [r2, #16]
                    scale_display_weight(scale_state.current_weight);
 8001bf8:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <main+0xf4>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001c02:	f7ff fed9 	bl	80019b8 <scale_display_weight>
                    scale_process_rfid(scale_state.current_weight);
 8001c06:	4b0f      	ldr	r3, [pc, #60]	@ (8001c44 <main+0xf4>)
 8001c08:	edd3 7a00 	vldr	s15, [r3]
 8001c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c10:	f7ff ff2c 	bl	8001a6c <scale_process_rfid>
 8001c14:	e00f      	b.n	8001c36 <main+0xe6>
                }
            } else {
                if (current_time - scale_state.last_display_time >= (DISPLAY_UPDATE_INTERVAL / 2)) {
 8001c16:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <main+0xf4>)
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2bf9      	cmp	r3, #249	@ 0xf9
 8001c20:	d909      	bls.n	8001c36 <main+0xe6>
                    scale_state.last_display_time = current_time;
 8001c22:	4a08      	ldr	r2, [pc, #32]	@ (8001c44 <main+0xf4>)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6113      	str	r3, [r2, #16]
                    scale_display_weight(scale_state.current_weight);
 8001c28:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <main+0xf4>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c32:	f7ff fec1 	bl	80019b8 <scale_display_weight>
                }
            }
        }
        HAL_Delay(10);
 8001c36:	200a      	movs	r0, #10
 8001c38:	f000 febe 	bl	80029b8 <HAL_Delay>
    while (1) {
 8001c3c:	e7b2      	b.n	8001ba4 <main+0x54>
 8001c3e:	bf00      	nop
 8001c40:	20000260 	.word	0x20000260
 8001c44:	200002f0 	.word	0x200002f0

08001c48 <SystemClock_Config>:
    }
}

void SystemClock_Config(void) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b094      	sub	sp, #80	@ 0x50
 8001c4c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4e:	f107 0320 	add.w	r3, r7, #32
 8001c52:	2230      	movs	r2, #48	@ 0x30
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f004 faf0 	bl	800623c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <SystemClock_Config+0xbc>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	4a23      	ldr	r2, [pc, #140]	@ (8001d04 <SystemClock_Config+0xbc>)
 8001c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7c:	4b21      	ldr	r3, [pc, #132]	@ (8001d04 <SystemClock_Config+0xbc>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c88:	2300      	movs	r3, #0
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d08 <SystemClock_Config+0xc0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1d      	ldr	r2, [pc, #116]	@ (8001d08 <SystemClock_Config+0xc0>)
 8001c92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <SystemClock_Config+0xc0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ca8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8001cb8:	2304      	movs	r3, #4
 8001cba:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 180;
 8001cbc:	23b4      	movs	r3, #180	@ 0xb4
 8001cbe:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001cc8:	f107 0320 	add.w	r3, r7, #32
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f001 f9d7 	bl	8003080 <HAL_RCC_OscConfig>

    HAL_PWREx_EnableOverDrive();
 8001cd2:	f001 f985 	bl	8002fe0 <HAL_PWREx_EnableOverDrive>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd6:	230f      	movs	r3, #15
 8001cd8:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ce2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ce6:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001ce8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001cec:	61fb      	str	r3, [r7, #28]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	2105      	movs	r1, #5
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 fc3b 	bl	8003570 <HAL_RCC_ClockConfig>
}
 8001cfa:	bf00      	nop
 8001cfc:	3750      	adds	r7, #80	@ 0x50
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40007000 	.word	0x40007000

08001d0c <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	@ 0x28
 8001d10:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	4b36      	ldr	r3, [pc, #216]	@ (8001e00 <MX_GPIO_Init+0xf4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	4a35      	ldr	r2, [pc, #212]	@ (8001e00 <MX_GPIO_Init+0xf4>)
 8001d2c:	f043 0310 	orr.w	r3, r3, #16
 8001d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d32:	4b33      	ldr	r3, [pc, #204]	@ (8001e00 <MX_GPIO_Init+0xf4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b2f      	ldr	r3, [pc, #188]	@ (8001e00 <MX_GPIO_Init+0xf4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	4a2e      	ldr	r2, [pc, #184]	@ (8001e00 <MX_GPIO_Init+0xf4>)
 8001d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e00 <MX_GPIO_Init+0xf4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	4b28      	ldr	r3, [pc, #160]	@ (8001e00 <MX_GPIO_Init+0xf4>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	4a27      	ldr	r2, [pc, #156]	@ (8001e00 <MX_GPIO_Init+0xf4>)
 8001d64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6a:	4b25      	ldr	r3, [pc, #148]	@ (8001e00 <MX_GPIO_Init+0xf4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	4b21      	ldr	r3, [pc, #132]	@ (8001e00 <MX_GPIO_Init+0xf4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	4a20      	ldr	r2, [pc, #128]	@ (8001e00 <MX_GPIO_Init+0xf4>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d86:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <MX_GPIO_Init+0xf4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <MX_GPIO_Init+0xf4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a19      	ldr	r2, [pc, #100]	@ (8001e00 <MX_GPIO_Init+0xf4>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b17      	ldr	r3, [pc, #92]	@ (8001e00 <MX_GPIO_Init+0xf4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001dae:	2200      	movs	r2, #0
 8001db0:	f44f 517c 	mov.w	r1, #16128	@ 0x3f00
 8001db4:	4813      	ldr	r0, [pc, #76]	@ (8001e04 <MX_GPIO_Init+0xf8>)
 8001db6:	f001 f8f9 	bl	8002fac <HAL_GPIO_WritePin>
                            |GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001dc0:	4811      	ldr	r0, [pc, #68]	@ (8001e08 <MX_GPIO_Init+0xfc>)
 8001dc2:	f001 f8f3 	bl	8002fac <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PE8 PE9 PE10 PE11 PE12 PE13 */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001dc6:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8001dca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4809      	ldr	r0, [pc, #36]	@ (8001e04 <MX_GPIO_Init+0xf8>)
 8001de0:	f000 ff20 	bl	8002c24 <HAL_GPIO_Init>

    /*Configure GPIO pins : PG13 PG14 */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001de4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001de8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <MX_GPIO_Init+0xfc>)
 8001df2:	f000 ff17 	bl	8002c24 <HAL_GPIO_Init>
}
 8001df6:	bf00      	nop
 8001df8:	3728      	adds	r7, #40	@ 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40021800 	.word	0x40021800

08001e0c <MX_SPI4_Init>:

static void MX_SPI4_Init(void) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
    hspi4.Instance = SPI4;
 8001e10:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <MX_SPI4_Init+0x5c>)
 8001e12:	4a16      	ldr	r2, [pc, #88]	@ (8001e6c <MX_SPI4_Init+0x60>)
 8001e14:	601a      	str	r2, [r3, #0]
    hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e16:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <MX_SPI4_Init+0x5c>)
 8001e18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e1c:	605a      	str	r2, [r3, #4]
    hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001e1e:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <MX_SPI4_Init+0x5c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
    hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e24:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <MX_SPI4_Init+0x5c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
    hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <MX_SPI4_Init+0x5c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
    hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e30:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <MX_SPI4_Init+0x5c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	615a      	str	r2, [r3, #20]
    hspi4.Init.NSS = SPI_NSS_SOFT;
 8001e36:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <MX_SPI4_Init+0x5c>)
 8001e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e3c:	619a      	str	r2, [r3, #24]
    hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <MX_SPI4_Init+0x5c>)
 8001e40:	2218      	movs	r2, #24
 8001e42:	61da      	str	r2, [r3, #28]
    hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e44:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <MX_SPI4_Init+0x5c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	621a      	str	r2, [r3, #32]
    hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e4a:	4b07      	ldr	r3, [pc, #28]	@ (8001e68 <MX_SPI4_Init+0x5c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e50:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <MX_SPI4_Init+0x5c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi4.Init.CRCPolynomial = 10;
 8001e56:	4b04      	ldr	r3, [pc, #16]	@ (8001e68 <MX_SPI4_Init+0x5c>)
 8001e58:	220a      	movs	r2, #10
 8001e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    HAL_SPI_Init(&hspi4);
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <MX_SPI4_Init+0x5c>)
 8001e5e:	f001 fda7 	bl	80039b0 <HAL_SPI_Init>
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000208 	.word	0x20000208
 8001e6c:	40013400 	.word	0x40013400

08001e70 <MX_TIM6_Init>:

static void MX_TIM6_Init(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
    htim6.Instance = TIM6;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <MX_TIM6_Init+0x30>)
 8001e76:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea4 <MX_TIM6_Init+0x34>)
 8001e78:	601a      	str	r2, [r3, #0]
    htim6.Init.Prescaler = 0;
 8001e7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <MX_TIM6_Init+0x30>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	605a      	str	r2, [r3, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e80:	4b07      	ldr	r3, [pc, #28]	@ (8001ea0 <MX_TIM6_Init+0x30>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
    htim6.Init.Period = 65535;
 8001e86:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <MX_TIM6_Init+0x30>)
 8001e88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e8c:	60da      	str	r2, [r3, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ea0 <MX_TIM6_Init+0x30>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htim6);
 8001e94:	4802      	ldr	r0, [pc, #8]	@ (8001ea0 <MX_TIM6_Init+0x30>)
 8001e96:	f002 fb6b 	bl	8004570 <HAL_TIM_Base_Init>
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000260 	.word	0x20000260
 8001ea4:	40001000 	.word	0x40001000

08001ea8 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8001eac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <MX_USART1_UART_Init+0x40>)
 8001eae:	4a0f      	ldr	r2, [pc, #60]	@ (8001eec <MX_USART1_UART_Init+0x44>)
 8001eb0:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee8 <MX_USART1_UART_Init+0x40>)
 8001eb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001eb8:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <MX_USART1_UART_Init+0x40>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <MX_USART1_UART_Init+0x40>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <MX_USART1_UART_Init+0x40>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <MX_USART1_UART_Init+0x40>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <MX_USART1_UART_Init+0x40>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	@ (8001ee8 <MX_USART1_UART_Init+0x40>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart1);
 8001ede:	4802      	ldr	r0, [pc, #8]	@ (8001ee8 <MX_USART1_UART_Init+0x40>)
 8001ee0:	f002 fdd8 	bl	8004a94 <HAL_UART_Init>
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200002a8 	.word	0x200002a8
 8001eec:	40011000 	.word	0x40011000

08001ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <HAL_MspInit+0x4c>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	4a0f      	ldr	r2, [pc, #60]	@ (8001f3c <HAL_MspInit+0x4c>)
 8001f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f06:	4b0d      	ldr	r3, [pc, #52]	@ (8001f3c <HAL_MspInit+0x4c>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	603b      	str	r3, [r7, #0]
 8001f16:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <HAL_MspInit+0x4c>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	4a08      	ldr	r2, [pc, #32]	@ (8001f3c <HAL_MspInit+0x4c>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_MspInit+0x4c>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800

08001f40 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	@ 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	@ (8001fc4 <HAL_SPI_MspInit+0x84>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d12b      	bne.n	8001fba <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b18      	ldr	r3, [pc, #96]	@ (8001fc8 <HAL_SPI_MspInit+0x88>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6a:	4a17      	ldr	r2, [pc, #92]	@ (8001fc8 <HAL_SPI_MspInit+0x88>)
 8001f6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f72:	4b15      	ldr	r3, [pc, #84]	@ (8001fc8 <HAL_SPI_MspInit+0x88>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <HAL_SPI_MspInit+0x88>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	4a10      	ldr	r2, [pc, #64]	@ (8001fc8 <HAL_SPI_MspInit+0x88>)
 8001f88:	f043 0310 	orr.w	r3, r3, #16
 8001f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <HAL_SPI_MspInit+0x88>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001f9a:	2364      	movs	r3, #100	@ 0x64
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001faa:	2305      	movs	r3, #5
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4805      	ldr	r0, [pc, #20]	@ (8001fcc <HAL_SPI_MspInit+0x8c>)
 8001fb6:	f000 fe35 	bl	8002c24 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	@ 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40013400 	.word	0x40013400
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0e      	ldr	r2, [pc, #56]	@ (8002018 <HAL_TIM_Base_MspInit+0x48>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d115      	bne.n	800200e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <HAL_TIM_Base_MspInit+0x4c>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	4a0c      	ldr	r2, [pc, #48]	@ (800201c <HAL_TIM_Base_MspInit+0x4c>)
 8001fec:	f043 0310 	orr.w	r3, r3, #16
 8001ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <HAL_TIM_Base_MspInit+0x4c>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	2036      	movs	r0, #54	@ 0x36
 8002004:	f000 fdd7 	bl	8002bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002008:	2036      	movs	r0, #54	@ 0x36
 800200a:	f000 fdf0 	bl	8002bee <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40001000 	.word	0x40001000
 800201c:	40023800 	.word	0x40023800

08002020 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	@ 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a19      	ldr	r2, [pc, #100]	@ (80020a4 <HAL_UART_MspInit+0x84>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d12c      	bne.n	800209c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	4b18      	ldr	r3, [pc, #96]	@ (80020a8 <HAL_UART_MspInit+0x88>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204a:	4a17      	ldr	r2, [pc, #92]	@ (80020a8 <HAL_UART_MspInit+0x88>)
 800204c:	f043 0310 	orr.w	r3, r3, #16
 8002050:	6453      	str	r3, [r2, #68]	@ 0x44
 8002052:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <HAL_UART_MspInit+0x88>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <HAL_UART_MspInit+0x88>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	4a10      	ldr	r2, [pc, #64]	@ (80020a8 <HAL_UART_MspInit+0x88>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6313      	str	r3, [r2, #48]	@ 0x30
 800206e:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <HAL_UART_MspInit+0x88>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800207a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800207e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800208c:	2307      	movs	r3, #7
 800208e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4619      	mov	r1, r3
 8002096:	4805      	ldr	r0, [pc, #20]	@ (80020ac <HAL_UART_MspInit+0x8c>)
 8002098:	f000 fdc4 	bl	8002c24 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800209c:	bf00      	nop
 800209e:	3728      	adds	r7, #40	@ 0x28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40011000 	.word	0x40011000
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40020000 	.word	0x40020000

080020b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <NMI_Handler+0x4>

080020b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <HardFault_Handler+0x4>

080020c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <MemManage_Handler+0x4>

080020c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <BusFault_Handler+0x4>

080020d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <UsageFault_Handler+0x4>

080020d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002106:	f000 fc37 	bl	8002978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002114:	4802      	ldr	r0, [pc, #8]	@ (8002120 <TIM6_DAC_IRQHandler+0x10>)
 8002116:	f002 faeb 	bl	80046f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000260 	.word	0x20000260

08002124 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
extern void Run7SegDisplay();

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a04      	ldr	r2, [pc, #16]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d101      	bne.n	800213a <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        Run7SegDisplay();  // Quét LED 7 thanh định kỳ
 8002136:	f7fe ff83 	bl	8001040 <Run7SegDisplay>
    }
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40001000 	.word	0x40001000

08002148 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return 1;
 800214c:	2301      	movs	r3, #1
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <_kill>:

int _kill(int pid, int sig)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002162:	f004 f8bd 	bl	80062e0 <__errno>
 8002166:	4603      	mov	r3, r0
 8002168:	2216      	movs	r2, #22
 800216a:	601a      	str	r2, [r3, #0]
  return -1;
 800216c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <_exit>:

void _exit (int status)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002180:	f04f 31ff 	mov.w	r1, #4294967295
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ffe7 	bl	8002158 <_kill>
  while (1) {}    /* Make sure we hang here */
 800218a:	bf00      	nop
 800218c:	e7fd      	b.n	800218a <_exit+0x12>

0800218e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e00a      	b.n	80021b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021a0:	f3af 8000 	nop.w
 80021a4:	4601      	mov	r1, r0
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	60ba      	str	r2, [r7, #8]
 80021ac:	b2ca      	uxtb	r2, r1
 80021ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	3301      	adds	r3, #1
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	dbf0      	blt.n	80021a0 <_read+0x12>
  }

  return len;
 80021be:	687b      	ldr	r3, [r7, #4]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	e009      	b.n	80021ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	60ba      	str	r2, [r7, #8]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	3301      	adds	r3, #1
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	dbf1      	blt.n	80021da <_write+0x12>
  }
  return len;
 80021f6:	687b      	ldr	r3, [r7, #4]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_close>:

int _close(int file)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002208:	f04f 33ff 	mov.w	r3, #4294967295
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002228:	605a      	str	r2, [r3, #4]
  return 0;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <_isatty>:

int _isatty(int file)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002240:	2301      	movs	r3, #1
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800224e:	b480      	push	{r7}
 8002250:	b085      	sub	sp, #20
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002270:	4a14      	ldr	r2, [pc, #80]	@ (80022c4 <_sbrk+0x5c>)
 8002272:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <_sbrk+0x60>)
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800227c:	4b13      	ldr	r3, [pc, #76]	@ (80022cc <_sbrk+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002284:	4b11      	ldr	r3, [pc, #68]	@ (80022cc <_sbrk+0x64>)
 8002286:	4a12      	ldr	r2, [pc, #72]	@ (80022d0 <_sbrk+0x68>)
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800228a:	4b10      	ldr	r3, [pc, #64]	@ (80022cc <_sbrk+0x64>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	429a      	cmp	r2, r3
 8002296:	d207      	bcs.n	80022a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002298:	f004 f822 	bl	80062e0 <__errno>
 800229c:	4603      	mov	r3, r0
 800229e:	220c      	movs	r2, #12
 80022a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295
 80022a6:	e009      	b.n	80022bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a8:	4b08      	ldr	r3, [pc, #32]	@ (80022cc <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ae:	4b07      	ldr	r3, [pc, #28]	@ (80022cc <_sbrk+0x64>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	4a05      	ldr	r2, [pc, #20]	@ (80022cc <_sbrk+0x64>)
 80022b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ba:	68fb      	ldr	r3, [r7, #12]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20030000 	.word	0x20030000
 80022c8:	00000400 	.word	0x00000400
 80022cc:	200003b0 	.word	0x200003b0
 80022d0:	20000508 	.word	0x20000508

080022d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022d8:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <SystemInit+0x20>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022de:	4a05      	ldr	r2, [pc, #20]	@ (80022f4 <SystemInit+0x20>)
 80022e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <TM_MFRC522_Init>:
 */
#include "tm_stm32f4_mfrc522.h"

extern SPI_HandleTypeDef hspi4;

void TM_MFRC522_Init(void) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	TM_MFRC522_InitPins();
 80022fc:	f000 f83c 	bl	8002378 <TM_MFRC522_InitPins>
	//TM_SPI_Init(MFRC522_SPI, MFRC522_SPI_PINSPACK);

	TM_MFRC522_Reset();
 8002300:	f000 f921 	bl	8002546 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8002304:	218d      	movs	r1, #141	@ 0x8d
 8002306:	202a      	movs	r0, #42	@ 0x2a
 8002308:	f000 f842 	bl	8002390 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 800230c:	213e      	movs	r1, #62	@ 0x3e
 800230e:	202b      	movs	r0, #43	@ 0x2b
 8002310:	f000 f83e 	bl	8002390 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8002314:	211e      	movs	r1, #30
 8002316:	202d      	movs	r0, #45	@ 0x2d
 8002318:	f000 f83a 	bl	8002390 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 800231c:	2100      	movs	r1, #0
 800231e:	202c      	movs	r0, #44	@ 0x2c
 8002320:	f000 f836 	bl	8002390 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8002324:	2170      	movs	r1, #112	@ 0x70
 8002326:	2026      	movs	r0, #38	@ 0x26
 8002328:	f000 f832 	bl	8002390 <TM_MFRC522_WriteRegister>
	
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 800232c:	2140      	movs	r1, #64	@ 0x40
 800232e:	2015      	movs	r0, #21
 8002330:	f000 f82e 	bl	8002390 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8002334:	213d      	movs	r1, #61	@ 0x3d
 8002336:	2011      	movs	r0, #17
 8002338:	f000 f82a 	bl	8002390 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 800233c:	f000 f8ee 	bl	800251c <TM_MFRC522_AntennaOn>
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}

08002344 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type
	status = TM_MFRC522_Request(PICC_REQIDL, id);	
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	2026      	movs	r0, #38	@ 0x26
 8002350:	f000 f901 	bl	8002556 <TM_MFRC522_Request>
 8002354:	4603      	mov	r3, r0
 8002356:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d104      	bne.n	8002368 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);	
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f9ed 	bl	800273e <TM_MFRC522_Anticoll>
 8002364:	4603      	mov	r3, r0
 8002366:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
 8002368:	f000 fa6f 	bl	800284a <TM_MFRC522_Halt>

	return status;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <TM_MFRC522_InitPins>:
		}
	}
	return MI_OK;
}

void TM_MFRC522_InitPins(void) {
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	//CS pin
//	GPIO_InitStruct.GPIO_Pin = MFRC522_CS_PIN;
//	GPIO_Init(MFRC522_CS_PORT, &GPIO_InitStruct);

	MFRC522_CS_HIGH;
 800237c:	2201      	movs	r2, #1
 800237e:	2110      	movs	r1, #16
 8002380:	4802      	ldr	r0, [pc, #8]	@ (800238c <TM_MFRC522_InitPins+0x14>)
 8002382:	f000 fe13 	bl	8002fac <HAL_GPIO_WritePin>
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000

08002390 <TM_MFRC522_WriteRegister>:

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	460a      	mov	r2, r1
 800239a:	71fb      	strb	r3, [r7, #7]
 800239c:	4613      	mov	r3, r2
 800239e:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 80023a0:	2200      	movs	r2, #0
 80023a2:	2110      	movs	r1, #16
 80023a4:	481a      	ldr	r0, [pc, #104]	@ (8002410 <TM_MFRC522_WriteRegister+0x80>)
 80023a6:	f000 fe01 	bl	8002fac <HAL_GPIO_WritePin>
	//Send address
	uint8_t buf = (addr << 1) & 0x7E;
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef ret = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 80023bc:	f107 010e 	add.w	r1, r7, #14
 80023c0:	230a      	movs	r3, #10
 80023c2:	2201      	movs	r2, #1
 80023c4:	4813      	ldr	r0, [pc, #76]	@ (8002414 <TM_MFRC522_WriteRegister+0x84>)
 80023c6:	f001 fb7c 	bl	8003ac2 <HAL_SPI_Transmit>
 80023ca:	4603      	mov	r3, r0
 80023cc:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 80023ce:	bf00      	nop
 80023d0:	4810      	ldr	r0, [pc, #64]	@ (8002414 <TM_MFRC522_WriteRegister+0x84>)
 80023d2:	f001 ff7c 	bl	80042ce <HAL_SPI_GetState>
 80023d6:	4603      	mov	r3, r0
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d0f7      	beq.n	80023d0 <TM_MFRC522_WriteRegister+0x40>
	//Send data	
	HAL_SPI_Transmit(&hspi4, &val, 1, 10);
 80023e0:	1db9      	adds	r1, r7, #6
 80023e2:	230a      	movs	r3, #10
 80023e4:	2201      	movs	r2, #1
 80023e6:	480b      	ldr	r0, [pc, #44]	@ (8002414 <TM_MFRC522_WriteRegister+0x84>)
 80023e8:	f001 fb6b 	bl	8003ac2 <HAL_SPI_Transmit>
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 80023ec:	bf00      	nop
 80023ee:	4809      	ldr	r0, [pc, #36]	@ (8002414 <TM_MFRC522_WriteRegister+0x84>)
 80023f0:	f001 ff6d 	bl	80042ce <HAL_SPI_GetState>
 80023f4:	4603      	mov	r3, r0
 80023f6:	73fb      	strb	r3, [r7, #15]
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d0f7      	beq.n	80023ee <TM_MFRC522_WriteRegister+0x5e>
	//CS high
	MFRC522_CS_HIGH;
 80023fe:	2201      	movs	r2, #1
 8002400:	2110      	movs	r1, #16
 8002402:	4803      	ldr	r0, [pc, #12]	@ (8002410 <TM_MFRC522_WriteRegister+0x80>)
 8002404:	f000 fdd2 	bl	8002fac <HAL_GPIO_WritePin>
}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	20000208 	.word	0x20000208

08002418 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8002422:	2200      	movs	r2, #0
 8002424:	2110      	movs	r1, #16
 8002426:	481f      	ldr	r0, [pc, #124]	@ (80024a4 <TM_MFRC522_ReadRegister+0x8c>)
 8002428:	f000 fdc0 	bl	8002fac <HAL_GPIO_WritePin>

	uint8_t buf = ((addr << 1) & 0x7E) | 0x80;
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	b25b      	sxtb	r3, r3
 8002434:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002438:	b25b      	sxtb	r3, r3
 800243a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800243e:	b25b      	sxtb	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8002448:	f107 010d 	add.w	r1, r7, #13
 800244c:	230a      	movs	r3, #10
 800244e:	2201      	movs	r2, #1
 8002450:	4815      	ldr	r0, [pc, #84]	@ (80024a8 <TM_MFRC522_ReadRegister+0x90>)
 8002452:	f001 fb36 	bl	8003ac2 <HAL_SPI_Transmit>
 8002456:	4603      	mov	r3, r0
 8002458:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 800245a:	bf00      	nop
 800245c:	4812      	ldr	r0, [pc, #72]	@ (80024a8 <TM_MFRC522_ReadRegister+0x90>)
 800245e:	f001 ff36 	bl	80042ce <HAL_SPI_GetState>
 8002462:	4603      	mov	r3, r0
 8002464:	73fb      	strb	r3, [r7, #15]
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d0f7      	beq.n	800245c <TM_MFRC522_ReadRegister+0x44>
	ret = HAL_SPI_Receive(&hspi4, &val, 1, 10);
 800246c:	f107 010e 	add.w	r1, r7, #14
 8002470:	230a      	movs	r3, #10
 8002472:	2201      	movs	r2, #1
 8002474:	480c      	ldr	r0, [pc, #48]	@ (80024a8 <TM_MFRC522_ReadRegister+0x90>)
 8002476:	f001 fc68 	bl	8003d4a <HAL_SPI_Receive>
 800247a:	4603      	mov	r3, r0
 800247c:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 800247e:	bf00      	nop
 8002480:	4809      	ldr	r0, [pc, #36]	@ (80024a8 <TM_MFRC522_ReadRegister+0x90>)
 8002482:	f001 ff24 	bl	80042ce <HAL_SPI_GetState>
 8002486:	4603      	mov	r3, r0
 8002488:	73fb      	strb	r3, [r7, #15]
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d0f7      	beq.n	8002480 <TM_MFRC522_ReadRegister+0x68>
	//CS high
	MFRC522_CS_HIGH;
 8002490:	2201      	movs	r2, #1
 8002492:	2110      	movs	r1, #16
 8002494:	4803      	ldr	r0, [pc, #12]	@ (80024a4 <TM_MFRC522_ReadRegister+0x8c>)
 8002496:	f000 fd89 	bl	8002fac <HAL_GPIO_WritePin>

	return val;	
 800249a:	7bbb      	ldrb	r3, [r7, #14]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000
 80024a8:	20000208 	.word	0x20000208

080024ac <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	460a      	mov	r2, r1
 80024b6:	71fb      	strb	r3, [r7, #7]
 80024b8:	4613      	mov	r3, r2
 80024ba:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ffaa 	bl	8002418 <TM_MFRC522_ReadRegister>
 80024c4:	4603      	mov	r3, r0
 80024c6:	461a      	mov	r2, r3
 80024c8:	79bb      	ldrb	r3, [r7, #6]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ff5c 	bl	8002390 <TM_MFRC522_WriteRegister>
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	460a      	mov	r2, r1
 80024ea:	71fb      	strb	r3, [r7, #7]
 80024ec:	4613      	mov	r3, r2
 80024ee:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff90 	bl	8002418 <TM_MFRC522_ReadRegister>
 80024f8:	4603      	mov	r3, r0
 80024fa:	b25a      	sxtb	r2, r3
 80024fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002500:	43db      	mvns	r3, r3
 8002502:	b25b      	sxtb	r3, r3
 8002504:	4013      	ands	r3, r2
 8002506:	b25b      	sxtb	r3, r3
 8002508:	b2da      	uxtb	r2, r3
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ff3e 	bl	8002390 <TM_MFRC522_WriteRegister>
} 
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8002522:	2014      	movs	r0, #20
 8002524:	f7ff ff78 	bl	8002418 <TM_MFRC522_ReadRegister>
 8002528:	4603      	mov	r3, r0
 800252a:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d103      	bne.n	800253e <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8002536:	2103      	movs	r1, #3
 8002538:	2014      	movs	r0, #20
 800253a:	f7ff ffb7 	bl	80024ac <TM_MFRC522_SetBitMask>
	}
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8002546:	b580      	push	{r7, lr}
 8002548:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800254a:	210f      	movs	r1, #15
 800254c:	2001      	movs	r0, #1
 800254e:	f7ff ff1f 	bl	8002390 <TM_MFRC522_WriteRegister>
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}

08002556 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af02      	add	r7, sp, #8
 800255c:	4603      	mov	r3, r0
 800255e:	6039      	str	r1, [r7, #0]
 8002560:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8002562:	2107      	movs	r1, #7
 8002564:	200d      	movs	r0, #13
 8002566:	f7ff ff13 	bl	8002390 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	79fa      	ldrb	r2, [r7, #7]
 800256e:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002570:	f107 030c 	add.w	r3, r7, #12
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2201      	movs	r2, #1
 800257a:	6839      	ldr	r1, [r7, #0]
 800257c:	200c      	movs	r0, #12
 800257e:	f000 f80f 	bl	80025a0 <TM_MFRC522_ToCard>
 8002582:	4603      	mov	r3, r0
 8002584:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10)) {    
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <TM_MFRC522_Request+0x3c>
 800258c:	89bb      	ldrh	r3, [r7, #12]
 800258e:	2b10      	cmp	r3, #16
 8002590:	d001      	beq.n	8002596 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8002592:	2302      	movs	r3, #2
 8002594:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002596:	7bfb      	ldrb	r3, [r7, #15]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	4603      	mov	r3, r0
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	4613      	mov	r3, r2
 80025b0:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 80025b2:	2302      	movs	r3, #2
 80025b4:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80025b6:	2300      	movs	r3, #0
 80025b8:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80025ba:	2300      	movs	r3, #0
 80025bc:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	2b0c      	cmp	r3, #12
 80025c2:	d006      	beq.n	80025d2 <TM_MFRC522_ToCard+0x32>
 80025c4:	2b0e      	cmp	r3, #14
 80025c6:	d109      	bne.n	80025dc <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80025c8:	2312      	movs	r3, #18
 80025ca:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80025cc:	2310      	movs	r3, #16
 80025ce:	757b      	strb	r3, [r7, #21]
			break;
 80025d0:	e005      	b.n	80025de <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80025d2:	2377      	movs	r3, #119	@ 0x77
 80025d4:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80025d6:	2330      	movs	r3, #48	@ 0x30
 80025d8:	757b      	strb	r3, [r7, #21]
			break;
 80025da:	e000      	b.n	80025de <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80025dc:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80025de:	7dbb      	ldrb	r3, [r7, #22]
 80025e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	4619      	mov	r1, r3
 80025e8:	2002      	movs	r0, #2
 80025ea:	f7ff fed1 	bl	8002390 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80025ee:	2180      	movs	r1, #128	@ 0x80
 80025f0:	2004      	movs	r0, #4
 80025f2:	f7ff ff75 	bl	80024e0 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80025f6:	2180      	movs	r1, #128	@ 0x80
 80025f8:	200a      	movs	r0, #10
 80025fa:	f7ff ff57 	bl	80024ac <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 80025fe:	2100      	movs	r1, #0
 8002600:	2001      	movs	r0, #1
 8002602:	f7ff fec5 	bl	8002390 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 8002606:	2300      	movs	r3, #0
 8002608:	827b      	strh	r3, [r7, #18]
 800260a:	e00a      	b.n	8002622 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 800260c:	8a7b      	ldrh	r3, [r7, #18]
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	4413      	add	r3, r2
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	4619      	mov	r1, r3
 8002616:	2009      	movs	r0, #9
 8002618:	f7ff feba 	bl	8002390 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 800261c:	8a7b      	ldrh	r3, [r7, #18]
 800261e:	3301      	adds	r3, #1
 8002620:	827b      	strh	r3, [r7, #18]
 8002622:	7bbb      	ldrb	r3, [r7, #14]
 8002624:	b29b      	uxth	r3, r3
 8002626:	8a7a      	ldrh	r2, [r7, #18]
 8002628:	429a      	cmp	r2, r3
 800262a:	d3ef      	bcc.n	800260c <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	4619      	mov	r1, r3
 8002630:	2001      	movs	r0, #1
 8002632:	f7ff fead 	bl	8002390 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	2b0c      	cmp	r3, #12
 800263a:	d103      	bne.n	8002644 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 800263c:	2180      	movs	r1, #128	@ 0x80
 800263e:	200d      	movs	r0, #13
 8002640:	f7ff ff34 	bl	80024ac <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8002644:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002648:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800264a:	2004      	movs	r0, #4
 800264c:	f7ff fee4 	bl	8002418 <TM_MFRC522_ReadRegister>
 8002650:	4603      	mov	r3, r0
 8002652:	753b      	strb	r3, [r7, #20]
		i--;
 8002654:	8a7b      	ldrh	r3, [r7, #18]
 8002656:	3b01      	subs	r3, #1
 8002658:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800265a:	8a7b      	ldrh	r3, [r7, #18]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00a      	beq.n	8002676 <TM_MFRC522_ToCard+0xd6>
 8002660:	7d3b      	ldrb	r3, [r7, #20]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d105      	bne.n	8002676 <TM_MFRC522_ToCard+0xd6>
 800266a:	7d3a      	ldrb	r2, [r7, #20]
 800266c:	7d7b      	ldrb	r3, [r7, #21]
 800266e:	4013      	ands	r3, r2
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0e9      	beq.n	800264a <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8002676:	2180      	movs	r1, #128	@ 0x80
 8002678:	200d      	movs	r0, #13
 800267a:	f7ff ff31 	bl	80024e0 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 800267e:	8a7b      	ldrh	r3, [r7, #18]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d057      	beq.n	8002734 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8002684:	2006      	movs	r0, #6
 8002686:	f7ff fec7 	bl	8002418 <TM_MFRC522_ReadRegister>
 800268a:	4603      	mov	r3, r0
 800268c:	f003 031b 	and.w	r3, r3, #27
 8002690:	2b00      	cmp	r3, #0
 8002692:	d14d      	bne.n	8002730 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 8002698:	7d3a      	ldrb	r2, [r7, #20]
 800269a:	7dbb      	ldrb	r3, [r7, #22]
 800269c:	4013      	ands	r3, r2
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 80026a8:	2301      	movs	r3, #1
 80026aa:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d140      	bne.n	8002734 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 80026b2:	200a      	movs	r0, #10
 80026b4:	f7ff feb0 	bl	8002418 <TM_MFRC522_ReadRegister>
 80026b8:	4603      	mov	r3, r0
 80026ba:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80026bc:	200c      	movs	r0, #12
 80026be:	f7ff feab 	bl	8002418 <TM_MFRC522_ReadRegister>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 80026ca:	7c7b      	ldrb	r3, [r7, #17]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00b      	beq.n	80026e8 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 80026d0:	7d3b      	ldrb	r3, [r7, #20]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	b29a      	uxth	r2, r3
 80026da:	7c7b      	ldrb	r3, [r7, #17]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	4413      	add	r3, r2
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e4:	801a      	strh	r2, [r3, #0]
 80026e6:	e005      	b.n	80026f4 <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 80026e8:	7d3b      	ldrb	r3, [r7, #20]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f2:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 80026f4:	7d3b      	ldrb	r3, [r7, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 80026fa:	2301      	movs	r3, #1
 80026fc:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 80026fe:	7d3b      	ldrb	r3, [r7, #20]
 8002700:	2b10      	cmp	r3, #16
 8002702:	d901      	bls.n	8002708 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 8002704:	2310      	movs	r3, #16
 8002706:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 8002708:	2300      	movs	r3, #0
 800270a:	827b      	strh	r3, [r7, #18]
 800270c:	e00a      	b.n	8002724 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 800270e:	8a7b      	ldrh	r3, [r7, #18]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	18d4      	adds	r4, r2, r3
 8002714:	2009      	movs	r0, #9
 8002716:	f7ff fe7f 	bl	8002418 <TM_MFRC522_ReadRegister>
 800271a:	4603      	mov	r3, r0
 800271c:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 800271e:	8a7b      	ldrh	r3, [r7, #18]
 8002720:	3301      	adds	r3, #1
 8002722:	827b      	strh	r3, [r7, #18]
 8002724:	7d3b      	ldrb	r3, [r7, #20]
 8002726:	b29b      	uxth	r3, r3
 8002728:	8a7a      	ldrh	r2, [r7, #18]
 800272a:	429a      	cmp	r2, r3
 800272c:	d3ef      	bcc.n	800270e <TM_MFRC522_ToCard+0x16e>
 800272e:	e001      	b.n	8002734 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 8002730:	2302      	movs	r3, #2
 8002732:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8002734:	7dfb      	ldrb	r3, [r7, #23]
}
 8002736:	4618      	mov	r0, r3
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	bd90      	pop	{r4, r7, pc}

0800273e <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af02      	add	r7, sp, #8
 8002744:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800274a:	2100      	movs	r1, #0
 800274c:	200d      	movs	r0, #13
 800274e:	f7ff fe1f 	bl	8002390 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2293      	movs	r2, #147	@ 0x93
 8002756:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3301      	adds	r3, #1
 800275c:	2220      	movs	r2, #32
 800275e:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8002760:	f107 030a 	add.w	r3, r7, #10
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2202      	movs	r2, #2
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	200c      	movs	r0, #12
 800276e:	f7ff ff17 	bl	80025a0 <TM_MFRC522_ToCard>
 8002772:	4603      	mov	r3, r0
 8002774:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d118      	bne.n	80027ae <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 800277c:	2300      	movs	r3, #0
 800277e:	73bb      	strb	r3, [r7, #14]
 8002780:	e009      	b.n	8002796 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8002782:	7bbb      	ldrb	r3, [r7, #14]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	4413      	add	r3, r2
 8002788:	781a      	ldrb	r2, [r3, #0]
 800278a:	7b7b      	ldrb	r3, [r7, #13]
 800278c:	4053      	eors	r3, r2
 800278e:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 8002790:	7bbb      	ldrb	r3, [r7, #14]
 8002792:	3301      	adds	r3, #1
 8002794:	73bb      	strb	r3, [r7, #14]
 8002796:	7bbb      	ldrb	r3, [r7, #14]
 8002798:	2b03      	cmp	r3, #3
 800279a:	d9f2      	bls.n	8002782 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 800279c:	7bbb      	ldrb	r3, [r7, #14]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	7b7a      	ldrb	r2, [r7, #13]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d001      	beq.n	80027ae <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 80027aa:	2302      	movs	r3, #2
 80027ac:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
} 
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	460b      	mov	r3, r1
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);				//CRCIrq = 0
 80027c6:	2104      	movs	r1, #4
 80027c8:	2005      	movs	r0, #5
 80027ca:	f7ff fe89 	bl	80024e0 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 80027ce:	2180      	movs	r1, #128	@ 0x80
 80027d0:	200a      	movs	r0, #10
 80027d2:	f7ff fe6b 	bl	80024ac <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {   
 80027d6:	2300      	movs	r3, #0
 80027d8:	75fb      	strb	r3, [r7, #23]
 80027da:	e00a      	b.n	80027f2 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));   
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4413      	add	r3, r2
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	4619      	mov	r1, r3
 80027e6:	2009      	movs	r0, #9
 80027e8:	f7ff fdd2 	bl	8002390 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {   
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
 80027ee:	3301      	adds	r3, #1
 80027f0:	75fb      	strb	r3, [r7, #23]
 80027f2:	7dfa      	ldrb	r2, [r7, #23]
 80027f4:	7afb      	ldrb	r3, [r7, #11]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d3f0      	bcc.n	80027dc <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80027fa:	2103      	movs	r1, #3
 80027fc:	2001      	movs	r0, #1
 80027fe:	f7ff fdc7 	bl	8002390 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8002802:	23ff      	movs	r3, #255	@ 0xff
 8002804:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8002806:	2005      	movs	r0, #5
 8002808:	f7ff fe06 	bl	8002418 <TM_MFRC522_ReadRegister>
 800280c:	4603      	mov	r3, r0
 800280e:	75bb      	strb	r3, [r7, #22]
		i--;
 8002810:	7dfb      	ldrb	r3, [r7, #23]
 8002812:	3b01      	subs	r3, #1
 8002814:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d004      	beq.n	8002826 <TM_MFRC522_CalculateCRC+0x6e>
 800281c:	7dbb      	ldrb	r3, [r7, #22]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0ef      	beq.n	8002806 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8002826:	2022      	movs	r0, #34	@ 0x22
 8002828:	f7ff fdf6 	bl	8002418 <TM_MFRC522_ReadRegister>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	1c5c      	adds	r4, r3, #1
 8002838:	2021      	movs	r0, #33	@ 0x21
 800283a:	f7ff fded 	bl	8002418 <TM_MFRC522_ReadRegister>
 800283e:	4603      	mov	r3, r0
 8002840:	7023      	strb	r3, [r4, #0]
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd90      	pop	{r4, r7, pc}

0800284a <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8002850:	2350      	movs	r3, #80	@ 0x50
 8002852:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8002858:	463b      	mov	r3, r7
 800285a:	1c9a      	adds	r2, r3, #2
 800285c:	463b      	mov	r3, r7
 800285e:	2102      	movs	r1, #2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ffa9 	bl	80027b8 <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8002866:	463a      	mov	r2, r7
 8002868:	4639      	mov	r1, r7
 800286a:	1dbb      	adds	r3, r7, #6
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	4613      	mov	r3, r2
 8002870:	2204      	movs	r2, #4
 8002872:	200c      	movs	r0, #12
 8002874:	f7ff fe94 	bl	80025a0 <TM_MFRC522_ToCard>
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002880:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002884:	f7ff fd26 	bl	80022d4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002888:	480c      	ldr	r0, [pc, #48]	@ (80028bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800288a:	490d      	ldr	r1, [pc, #52]	@ (80028c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800288c:	4a0d      	ldr	r2, [pc, #52]	@ (80028c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800288e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002890:	e002      	b.n	8002898 <LoopCopyDataInit>

08002892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002896:	3304      	adds	r3, #4

08002898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800289a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800289c:	d3f9      	bcc.n	8002892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800289e:	4a0a      	ldr	r2, [pc, #40]	@ (80028c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028a0:	4c0a      	ldr	r4, [pc, #40]	@ (80028cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80028a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028a4:	e001      	b.n	80028aa <LoopFillZerobss>

080028a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a8:	3204      	adds	r2, #4

080028aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028ac:	d3fb      	bcc.n	80028a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80028ae:	f003 fd1d 	bl	80062ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028b2:	f7ff f94d 	bl	8001b50 <main>
  bx  lr    
 80028b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80028b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80028bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028c0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80028c4:	08009f74 	.word	0x08009f74
  ldr r2, =_sbss
 80028c8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80028cc:	20000504 	.word	0x20000504

080028d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028d0:	e7fe      	b.n	80028d0 <ADC_IRQHandler>
	...

080028d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002914 <HAL_Init+0x40>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002914 <HAL_Init+0x40>)
 80028de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_Init+0x40>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002914 <HAL_Init+0x40>)
 80028ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028f0:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <HAL_Init+0x40>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a07      	ldr	r2, [pc, #28]	@ (8002914 <HAL_Init+0x40>)
 80028f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028fc:	2003      	movs	r0, #3
 80028fe:	f000 f94f 	bl	8002ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002902:	200f      	movs	r0, #15
 8002904:	f000 f808 	bl	8002918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002908:	f7ff faf2 	bl	8001ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023c00 	.word	0x40023c00

08002918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002920:	4b12      	ldr	r3, [pc, #72]	@ (800296c <HAL_InitTick+0x54>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <HAL_InitTick+0x58>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4619      	mov	r1, r3
 800292a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800292e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f967 	bl	8002c0a <HAL_SYSTICK_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e00e      	b.n	8002964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b0f      	cmp	r3, #15
 800294a:	d80a      	bhi.n	8002962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800294c:	2200      	movs	r2, #0
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	f000 f92f 	bl	8002bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002958:	4a06      	ldr	r2, [pc, #24]	@ (8002974 <HAL_InitTick+0x5c>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	e000      	b.n	8002964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	2000000c 	.word	0x2000000c
 8002970:	20000014 	.word	0x20000014
 8002974:	20000010 	.word	0x20000010

08002978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800297c:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <HAL_IncTick+0x20>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	4b06      	ldr	r3, [pc, #24]	@ (800299c <HAL_IncTick+0x24>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4413      	add	r3, r2
 8002988:	4a04      	ldr	r2, [pc, #16]	@ (800299c <HAL_IncTick+0x24>)
 800298a:	6013      	str	r3, [r2, #0]
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000014 	.word	0x20000014
 800299c:	200003b4 	.word	0x200003b4

080029a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return uwTick;
 80029a4:	4b03      	ldr	r3, [pc, #12]	@ (80029b4 <HAL_GetTick+0x14>)
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	200003b4 	.word	0x200003b4

080029b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029c0:	f7ff ffee 	bl	80029a0 <HAL_GetTick>
 80029c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d005      	beq.n	80029de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029d2:	4b0a      	ldr	r3, [pc, #40]	@ (80029fc <HAL_Delay+0x44>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4413      	add	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029de:	bf00      	nop
 80029e0:	f7ff ffde 	bl	80029a0 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d8f7      	bhi.n	80029e0 <HAL_Delay+0x28>
  {
  }
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000014 	.word	0x20000014

08002a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a10:	4b0c      	ldr	r3, [pc, #48]	@ (8002a44 <__NVIC_SetPriorityGrouping+0x44>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a32:	4a04      	ldr	r2, [pc, #16]	@ (8002a44 <__NVIC_SetPriorityGrouping+0x44>)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	60d3      	str	r3, [r2, #12]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a4c:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <__NVIC_GetPriorityGrouping+0x18>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	f003 0307 	and.w	r3, r3, #7
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	db0b      	blt.n	8002a8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	f003 021f 	and.w	r2, r3, #31
 8002a7c:	4907      	ldr	r1, [pc, #28]	@ (8002a9c <__NVIC_EnableIRQ+0x38>)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2001      	movs	r0, #1
 8002a86:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000e100 	.word	0xe000e100

08002aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	db0a      	blt.n	8002aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	490c      	ldr	r1, [pc, #48]	@ (8002aec <__NVIC_SetPriority+0x4c>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	0112      	lsls	r2, r2, #4
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac8:	e00a      	b.n	8002ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4908      	ldr	r1, [pc, #32]	@ (8002af0 <__NVIC_SetPriority+0x50>)
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	3b04      	subs	r3, #4
 8002ad8:	0112      	lsls	r2, r2, #4
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	440b      	add	r3, r1
 8002ade:	761a      	strb	r2, [r3, #24]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000e100 	.word	0xe000e100
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	@ 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f1c3 0307 	rsb	r3, r3, #7
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	bf28      	it	cs
 8002b12:	2304      	movcs	r3, #4
 8002b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d902      	bls.n	8002b24 <NVIC_EncodePriority+0x30>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3b03      	subs	r3, #3
 8002b22:	e000      	b.n	8002b26 <NVIC_EncodePriority+0x32>
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	401a      	ands	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	43d9      	mvns	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	4313      	orrs	r3, r2
         );
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3724      	adds	r7, #36	@ 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b6c:	d301      	bcc.n	8002b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e00f      	b.n	8002b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b72:	4a0a      	ldr	r2, [pc, #40]	@ (8002b9c <SysTick_Config+0x40>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b7a:	210f      	movs	r1, #15
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b80:	f7ff ff8e 	bl	8002aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b84:	4b05      	ldr	r3, [pc, #20]	@ (8002b9c <SysTick_Config+0x40>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8a:	4b04      	ldr	r3, [pc, #16]	@ (8002b9c <SysTick_Config+0x40>)
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	e000e010 	.word	0xe000e010

08002ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff ff29 	bl	8002a00 <__NVIC_SetPriorityGrouping>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc8:	f7ff ff3e 	bl	8002a48 <__NVIC_GetPriorityGrouping>
 8002bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	6978      	ldr	r0, [r7, #20]
 8002bd4:	f7ff ff8e 	bl	8002af4 <NVIC_EncodePriority>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff5d 	bl	8002aa0 <__NVIC_SetPriority>
}
 8002be6:	bf00      	nop
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff31 	bl	8002a64 <__NVIC_EnableIRQ>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ffa2 	bl	8002b5c <SysTick_Config>
 8002c18:	4603      	mov	r3, r0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	@ 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	e177      	b.n	8002f30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c40:	2201      	movs	r2, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	f040 8166 	bne.w	8002f2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d005      	beq.n	8002c76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d130      	bne.n	8002cd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	2203      	movs	r2, #3
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cac:	2201      	movs	r2, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 0201 	and.w	r2, r3, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d017      	beq.n	8002d14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d123      	bne.n	8002d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	08da      	lsrs	r2, r3, #3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3208      	adds	r2, #8
 8002d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	220f      	movs	r2, #15
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	08da      	lsrs	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3208      	adds	r2, #8
 8002d62:	69b9      	ldr	r1, [r7, #24]
 8002d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2203      	movs	r2, #3
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0203 	and.w	r2, r3, #3
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80c0 	beq.w	8002f2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b66      	ldr	r3, [pc, #408]	@ (8002f48 <HAL_GPIO_Init+0x324>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	4a65      	ldr	r2, [pc, #404]	@ (8002f48 <HAL_GPIO_Init+0x324>)
 8002db4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dba:	4b63      	ldr	r3, [pc, #396]	@ (8002f48 <HAL_GPIO_Init+0x324>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dc6:	4a61      	ldr	r2, [pc, #388]	@ (8002f4c <HAL_GPIO_Init+0x328>)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	3302      	adds	r3, #2
 8002dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	220f      	movs	r2, #15
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a58      	ldr	r2, [pc, #352]	@ (8002f50 <HAL_GPIO_Init+0x32c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d037      	beq.n	8002e62 <HAL_GPIO_Init+0x23e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a57      	ldr	r2, [pc, #348]	@ (8002f54 <HAL_GPIO_Init+0x330>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d031      	beq.n	8002e5e <HAL_GPIO_Init+0x23a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a56      	ldr	r2, [pc, #344]	@ (8002f58 <HAL_GPIO_Init+0x334>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d02b      	beq.n	8002e5a <HAL_GPIO_Init+0x236>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a55      	ldr	r2, [pc, #340]	@ (8002f5c <HAL_GPIO_Init+0x338>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d025      	beq.n	8002e56 <HAL_GPIO_Init+0x232>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a54      	ldr	r2, [pc, #336]	@ (8002f60 <HAL_GPIO_Init+0x33c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01f      	beq.n	8002e52 <HAL_GPIO_Init+0x22e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a53      	ldr	r2, [pc, #332]	@ (8002f64 <HAL_GPIO_Init+0x340>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d019      	beq.n	8002e4e <HAL_GPIO_Init+0x22a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a52      	ldr	r2, [pc, #328]	@ (8002f68 <HAL_GPIO_Init+0x344>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <HAL_GPIO_Init+0x226>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a51      	ldr	r2, [pc, #324]	@ (8002f6c <HAL_GPIO_Init+0x348>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00d      	beq.n	8002e46 <HAL_GPIO_Init+0x222>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a50      	ldr	r2, [pc, #320]	@ (8002f70 <HAL_GPIO_Init+0x34c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d007      	beq.n	8002e42 <HAL_GPIO_Init+0x21e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4f      	ldr	r2, [pc, #316]	@ (8002f74 <HAL_GPIO_Init+0x350>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_GPIO_Init+0x21a>
 8002e3a:	2309      	movs	r3, #9
 8002e3c:	e012      	b.n	8002e64 <HAL_GPIO_Init+0x240>
 8002e3e:	230a      	movs	r3, #10
 8002e40:	e010      	b.n	8002e64 <HAL_GPIO_Init+0x240>
 8002e42:	2308      	movs	r3, #8
 8002e44:	e00e      	b.n	8002e64 <HAL_GPIO_Init+0x240>
 8002e46:	2307      	movs	r3, #7
 8002e48:	e00c      	b.n	8002e64 <HAL_GPIO_Init+0x240>
 8002e4a:	2306      	movs	r3, #6
 8002e4c:	e00a      	b.n	8002e64 <HAL_GPIO_Init+0x240>
 8002e4e:	2305      	movs	r3, #5
 8002e50:	e008      	b.n	8002e64 <HAL_GPIO_Init+0x240>
 8002e52:	2304      	movs	r3, #4
 8002e54:	e006      	b.n	8002e64 <HAL_GPIO_Init+0x240>
 8002e56:	2303      	movs	r3, #3
 8002e58:	e004      	b.n	8002e64 <HAL_GPIO_Init+0x240>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e002      	b.n	8002e64 <HAL_GPIO_Init+0x240>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_GPIO_Init+0x240>
 8002e62:	2300      	movs	r3, #0
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	f002 0203 	and.w	r2, r2, #3
 8002e6a:	0092      	lsls	r2, r2, #2
 8002e6c:	4093      	lsls	r3, r2
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e74:	4935      	ldr	r1, [pc, #212]	@ (8002f4c <HAL_GPIO_Init+0x328>)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	089b      	lsrs	r3, r3, #2
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e82:	4b3d      	ldr	r3, [pc, #244]	@ (8002f78 <HAL_GPIO_Init+0x354>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ea6:	4a34      	ldr	r2, [pc, #208]	@ (8002f78 <HAL_GPIO_Init+0x354>)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eac:	4b32      	ldr	r3, [pc, #200]	@ (8002f78 <HAL_GPIO_Init+0x354>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ed0:	4a29      	ldr	r2, [pc, #164]	@ (8002f78 <HAL_GPIO_Init+0x354>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ed6:	4b28      	ldr	r3, [pc, #160]	@ (8002f78 <HAL_GPIO_Init+0x354>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002efa:	4a1f      	ldr	r2, [pc, #124]	@ (8002f78 <HAL_GPIO_Init+0x354>)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f00:	4b1d      	ldr	r3, [pc, #116]	@ (8002f78 <HAL_GPIO_Init+0x354>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f24:	4a14      	ldr	r2, [pc, #80]	@ (8002f78 <HAL_GPIO_Init+0x354>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b0f      	cmp	r3, #15
 8002f34:	f67f ae84 	bls.w	8002c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	3724      	adds	r7, #36	@ 0x24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40013800 	.word	0x40013800
 8002f50:	40020000 	.word	0x40020000
 8002f54:	40020400 	.word	0x40020400
 8002f58:	40020800 	.word	0x40020800
 8002f5c:	40020c00 	.word	0x40020c00
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40021400 	.word	0x40021400
 8002f68:	40021800 	.word	0x40021800
 8002f6c:	40021c00 	.word	0x40021c00
 8002f70:	40022000 	.word	0x40022000
 8002f74:	40022400 	.word	0x40022400
 8002f78:	40013c00 	.word	0x40013c00

08002f7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	887b      	ldrh	r3, [r7, #2]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	e001      	b.n	8002f9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fbc:	787b      	ldrb	r3, [r7, #1]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fc8:	e003      	b.n	8002fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	041a      	lsls	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	619a      	str	r2, [r3, #24]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	4b20      	ldr	r3, [pc, #128]	@ (8003070 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8003070 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8003070 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003006:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <HAL_PWREx_EnableOverDrive+0x94>)
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800300c:	f7ff fcc8 	bl	80029a0 <HAL_GetTick>
 8003010:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003012:	e009      	b.n	8003028 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003014:	f7ff fcc4 	bl	80029a0 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003022:	d901      	bls.n	8003028 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e01f      	b.n	8003068 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003028:	4b13      	ldr	r3, [pc, #76]	@ (8003078 <HAL_PWREx_EnableOverDrive+0x98>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003034:	d1ee      	bne.n	8003014 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003036:	4b11      	ldr	r3, [pc, #68]	@ (800307c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003038:	2201      	movs	r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800303c:	f7ff fcb0 	bl	80029a0 <HAL_GetTick>
 8003040:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003042:	e009      	b.n	8003058 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003044:	f7ff fcac 	bl	80029a0 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003052:	d901      	bls.n	8003058 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e007      	b.n	8003068 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003058:	4b07      	ldr	r3, [pc, #28]	@ (8003078 <HAL_PWREx_EnableOverDrive+0x98>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003060:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003064:	d1ee      	bne.n	8003044 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40023800 	.word	0x40023800
 8003074:	420e0040 	.word	0x420e0040
 8003078:	40007000 	.word	0x40007000
 800307c:	420e0044 	.word	0x420e0044

08003080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e267      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d075      	beq.n	800318a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800309e:	4b88      	ldr	r3, [pc, #544]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d00c      	beq.n	80030c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030aa:	4b85      	ldr	r3, [pc, #532]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d112      	bne.n	80030dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b6:	4b82      	ldr	r3, [pc, #520]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030c2:	d10b      	bne.n	80030dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	4b7e      	ldr	r3, [pc, #504]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d05b      	beq.n	8003188 <HAL_RCC_OscConfig+0x108>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d157      	bne.n	8003188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e242      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e4:	d106      	bne.n	80030f4 <HAL_RCC_OscConfig+0x74>
 80030e6:	4b76      	ldr	r3, [pc, #472]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a75      	ldr	r2, [pc, #468]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e01d      	b.n	8003130 <HAL_RCC_OscConfig+0xb0>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0x98>
 80030fe:	4b70      	ldr	r3, [pc, #448]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a6f      	ldr	r2, [pc, #444]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b6d      	ldr	r3, [pc, #436]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6c      	ldr	r2, [pc, #432]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e00b      	b.n	8003130 <HAL_RCC_OscConfig+0xb0>
 8003118:	4b69      	ldr	r3, [pc, #420]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a68      	ldr	r2, [pc, #416]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 800311e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b66      	ldr	r3, [pc, #408]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a65      	ldr	r2, [pc, #404]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 800312a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800312e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d013      	beq.n	8003160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7ff fc32 	bl	80029a0 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7ff fc2e 	bl	80029a0 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	@ 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e207      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b5b      	ldr	r3, [pc, #364]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0xc0>
 800315e:	e014      	b.n	800318a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7ff fc1e 	bl	80029a0 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003168:	f7ff fc1a 	bl	80029a0 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	@ 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e1f3      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	4b51      	ldr	r3, [pc, #324]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0xe8>
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d063      	beq.n	800325e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003196:	4b4a      	ldr	r3, [pc, #296]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00b      	beq.n	80031ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031a2:	4b47      	ldr	r3, [pc, #284]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d11c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ae:	4b44      	ldr	r3, [pc, #272]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d116      	bne.n	80031e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ba:	4b41      	ldr	r3, [pc, #260]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_RCC_OscConfig+0x152>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d001      	beq.n	80031d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e1c7      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d2:	4b3b      	ldr	r3, [pc, #236]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4937      	ldr	r1, [pc, #220]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e6:	e03a      	b.n	800325e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d020      	beq.n	8003232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f0:	4b34      	ldr	r3, [pc, #208]	@ (80032c4 <HAL_RCC_OscConfig+0x244>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f6:	f7ff fbd3 	bl	80029a0 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fe:	f7ff fbcf 	bl	80029a0 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e1a8      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003210:	4b2b      	ldr	r3, [pc, #172]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321c:	4b28      	ldr	r3, [pc, #160]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4925      	ldr	r1, [pc, #148]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]
 8003230:	e015      	b.n	800325e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003232:	4b24      	ldr	r3, [pc, #144]	@ (80032c4 <HAL_RCC_OscConfig+0x244>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7ff fbb2 	bl	80029a0 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003240:	f7ff fbae 	bl	80029a0 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e187      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003252:	4b1b      	ldr	r3, [pc, #108]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d036      	beq.n	80032d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d016      	beq.n	80032a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003272:	4b15      	ldr	r3, [pc, #84]	@ (80032c8 <HAL_RCC_OscConfig+0x248>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003278:	f7ff fb92 	bl	80029a0 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003280:	f7ff fb8e 	bl	80029a0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e167      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003292:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <HAL_RCC_OscConfig+0x240>)
 8003294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x200>
 800329e:	e01b      	b.n	80032d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a0:	4b09      	ldr	r3, [pc, #36]	@ (80032c8 <HAL_RCC_OscConfig+0x248>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a6:	f7ff fb7b 	bl	80029a0 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ac:	e00e      	b.n	80032cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ae:	f7ff fb77 	bl	80029a0 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d907      	bls.n	80032cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e150      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
 80032c0:	40023800 	.word	0x40023800
 80032c4:	42470000 	.word	0x42470000
 80032c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032cc:	4b88      	ldr	r3, [pc, #544]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 80032ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1ea      	bne.n	80032ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8097 	beq.w	8003414 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e6:	2300      	movs	r3, #0
 80032e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ea:	4b81      	ldr	r3, [pc, #516]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10f      	bne.n	8003316 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	4b7d      	ldr	r3, [pc, #500]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	4a7c      	ldr	r2, [pc, #496]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003304:	6413      	str	r3, [r2, #64]	@ 0x40
 8003306:	4b7a      	ldr	r3, [pc, #488]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003316:	4b77      	ldr	r3, [pc, #476]	@ (80034f4 <HAL_RCC_OscConfig+0x474>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d118      	bne.n	8003354 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003322:	4b74      	ldr	r3, [pc, #464]	@ (80034f4 <HAL_RCC_OscConfig+0x474>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a73      	ldr	r2, [pc, #460]	@ (80034f4 <HAL_RCC_OscConfig+0x474>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800332c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332e:	f7ff fb37 	bl	80029a0 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003336:	f7ff fb33 	bl	80029a0 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e10c      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	4b6a      	ldr	r3, [pc, #424]	@ (80034f4 <HAL_RCC_OscConfig+0x474>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x2ea>
 800335c:	4b64      	ldr	r3, [pc, #400]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003360:	4a63      	ldr	r2, [pc, #396]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6713      	str	r3, [r2, #112]	@ 0x70
 8003368:	e01c      	b.n	80033a4 <HAL_RCC_OscConfig+0x324>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b05      	cmp	r3, #5
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x30c>
 8003372:	4b5f      	ldr	r3, [pc, #380]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003376:	4a5e      	ldr	r2, [pc, #376]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	6713      	str	r3, [r2, #112]	@ 0x70
 800337e:	4b5c      	ldr	r3, [pc, #368]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003382:	4a5b      	ldr	r2, [pc, #364]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6713      	str	r3, [r2, #112]	@ 0x70
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0x324>
 800338c:	4b58      	ldr	r3, [pc, #352]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003390:	4a57      	ldr	r2, [pc, #348]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	6713      	str	r3, [r2, #112]	@ 0x70
 8003398:	4b55      	ldr	r3, [pc, #340]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339c:	4a54      	ldr	r2, [pc, #336]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 800339e:	f023 0304 	bic.w	r3, r3, #4
 80033a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d015      	beq.n	80033d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7ff faf8 	bl	80029a0 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b2:	e00a      	b.n	80033ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b4:	f7ff faf4 	bl	80029a0 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e0cb      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	4b49      	ldr	r3, [pc, #292]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0ee      	beq.n	80033b4 <HAL_RCC_OscConfig+0x334>
 80033d6:	e014      	b.n	8003402 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d8:	f7ff fae2 	bl	80029a0 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e0:	f7ff fade 	bl	80029a0 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e0b5      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f6:	4b3e      	ldr	r3, [pc, #248]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1ee      	bne.n	80033e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003402:	7dfb      	ldrb	r3, [r7, #23]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d105      	bne.n	8003414 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003408:	4b39      	ldr	r3, [pc, #228]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	4a38      	ldr	r2, [pc, #224]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 800340e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003412:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80a1 	beq.w	8003560 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800341e:	4b34      	ldr	r3, [pc, #208]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b08      	cmp	r3, #8
 8003428:	d05c      	beq.n	80034e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d141      	bne.n	80034b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003432:	4b31      	ldr	r3, [pc, #196]	@ (80034f8 <HAL_RCC_OscConfig+0x478>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7ff fab2 	bl	80029a0 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003440:	f7ff faae 	bl	80029a0 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e087      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	4b27      	ldr	r3, [pc, #156]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69da      	ldr	r2, [r3, #28]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	019b      	lsls	r3, r3, #6
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	3b01      	subs	r3, #1
 8003478:	041b      	lsls	r3, r3, #16
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	491b      	ldr	r1, [pc, #108]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003488:	4b1b      	ldr	r3, [pc, #108]	@ (80034f8 <HAL_RCC_OscConfig+0x478>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348e:	f7ff fa87 	bl	80029a0 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003496:	f7ff fa83 	bl	80029a0 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e05c      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a8:	4b11      	ldr	r3, [pc, #68]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x416>
 80034b4:	e054      	b.n	8003560 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b6:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <HAL_RCC_OscConfig+0x478>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7ff fa70 	bl	80029a0 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c4:	f7ff fa6c 	bl	80029a0 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e045      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d6:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <HAL_RCC_OscConfig+0x470>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x444>
 80034e2:	e03d      	b.n	8003560 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e038      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40007000 	.word	0x40007000
 80034f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034fc:	4b1b      	ldr	r3, [pc, #108]	@ (800356c <HAL_RCC_OscConfig+0x4ec>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d028      	beq.n	800355c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003514:	429a      	cmp	r2, r3
 8003516:	d121      	bne.n	800355c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d11a      	bne.n	800355c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800352c:	4013      	ands	r3, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003534:	4293      	cmp	r3, r2
 8003536:	d111      	bne.n	800355c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003542:	085b      	lsrs	r3, r3, #1
 8003544:	3b01      	subs	r3, #1
 8003546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d107      	bne.n	800355c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d001      	beq.n	8003560 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40023800 	.word	0x40023800

08003570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0cc      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003584:	4b68      	ldr	r3, [pc, #416]	@ (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d90c      	bls.n	80035ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b65      	ldr	r3, [pc, #404]	@ (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b63      	ldr	r3, [pc, #396]	@ (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0b8      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d020      	beq.n	80035fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035c4:	4b59      	ldr	r3, [pc, #356]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4a58      	ldr	r2, [pc, #352]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035dc:	4b53      	ldr	r3, [pc, #332]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4a52      	ldr	r2, [pc, #328]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e8:	4b50      	ldr	r3, [pc, #320]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	494d      	ldr	r1, [pc, #308]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d044      	beq.n	8003690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	4b47      	ldr	r3, [pc, #284]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d119      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e07f      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d003      	beq.n	800362e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800362a:	2b03      	cmp	r3, #3
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362e:	4b3f      	ldr	r3, [pc, #252]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e06f      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363e:	4b3b      	ldr	r3, [pc, #236]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e067      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800364e:	4b37      	ldr	r3, [pc, #220]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f023 0203 	bic.w	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	4934      	ldr	r1, [pc, #208]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	4313      	orrs	r3, r2
 800365e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003660:	f7ff f99e 	bl	80029a0 <HAL_GetTick>
 8003664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	e00a      	b.n	800367e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003668:	f7ff f99a 	bl	80029a0 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e04f      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	4b2b      	ldr	r3, [pc, #172]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 020c 	and.w	r2, r3, #12
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	429a      	cmp	r2, r3
 800368e:	d1eb      	bne.n	8003668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003690:	4b25      	ldr	r3, [pc, #148]	@ (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d20c      	bcs.n	80036b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b22      	ldr	r3, [pc, #136]	@ (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b20      	ldr	r3, [pc, #128]	@ (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e032      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c4:	4b19      	ldr	r3, [pc, #100]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4916      	ldr	r1, [pc, #88]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e2:	4b12      	ldr	r3, [pc, #72]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	490e      	ldr	r1, [pc, #56]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036f6:	f000 f821 	bl	800373c <HAL_RCC_GetSysClockFreq>
 80036fa:	4602      	mov	r2, r0
 80036fc:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	490a      	ldr	r1, [pc, #40]	@ (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 8003708:	5ccb      	ldrb	r3, [r1, r3]
 800370a:	fa22 f303 	lsr.w	r3, r2, r3
 800370e:	4a09      	ldr	r2, [pc, #36]	@ (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003712:	4b09      	ldr	r3, [pc, #36]	@ (8003738 <HAL_RCC_ClockConfig+0x1c8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff f8fe 	bl	8002918 <HAL_InitTick>

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40023c00 	.word	0x40023c00
 800372c:	40023800 	.word	0x40023800
 8003730:	08009b24 	.word	0x08009b24
 8003734:	2000000c 	.word	0x2000000c
 8003738:	20000010 	.word	0x20000010

0800373c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800373c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003740:	b094      	sub	sp, #80	@ 0x50
 8003742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003754:	4b79      	ldr	r3, [pc, #484]	@ (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b08      	cmp	r3, #8
 800375e:	d00d      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x40>
 8003760:	2b08      	cmp	r3, #8
 8003762:	f200 80e1 	bhi.w	8003928 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0x34>
 800376a:	2b04      	cmp	r3, #4
 800376c:	d003      	beq.n	8003776 <HAL_RCC_GetSysClockFreq+0x3a>
 800376e:	e0db      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003770:	4b73      	ldr	r3, [pc, #460]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x204>)
 8003772:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003774:	e0db      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003776:	4b73      	ldr	r3, [pc, #460]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x208>)
 8003778:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800377a:	e0d8      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800377c:	4b6f      	ldr	r3, [pc, #444]	@ (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003784:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003786:	4b6d      	ldr	r3, [pc, #436]	@ (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d063      	beq.n	800385a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003792:	4b6a      	ldr	r3, [pc, #424]	@ (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	099b      	lsrs	r3, r3, #6
 8003798:	2200      	movs	r2, #0
 800379a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800379c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800379e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037a6:	2300      	movs	r3, #0
 80037a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037ae:	4622      	mov	r2, r4
 80037b0:	462b      	mov	r3, r5
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f04f 0100 	mov.w	r1, #0
 80037ba:	0159      	lsls	r1, r3, #5
 80037bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037c0:	0150      	lsls	r0, r2, #5
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4621      	mov	r1, r4
 80037c8:	1a51      	subs	r1, r2, r1
 80037ca:	6139      	str	r1, [r7, #16]
 80037cc:	4629      	mov	r1, r5
 80037ce:	eb63 0301 	sbc.w	r3, r3, r1
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037e0:	4659      	mov	r1, fp
 80037e2:	018b      	lsls	r3, r1, #6
 80037e4:	4651      	mov	r1, sl
 80037e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ea:	4651      	mov	r1, sl
 80037ec:	018a      	lsls	r2, r1, #6
 80037ee:	4651      	mov	r1, sl
 80037f0:	ebb2 0801 	subs.w	r8, r2, r1
 80037f4:	4659      	mov	r1, fp
 80037f6:	eb63 0901 	sbc.w	r9, r3, r1
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800380a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800380e:	4690      	mov	r8, r2
 8003810:	4699      	mov	r9, r3
 8003812:	4623      	mov	r3, r4
 8003814:	eb18 0303 	adds.w	r3, r8, r3
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	462b      	mov	r3, r5
 800381c:	eb49 0303 	adc.w	r3, r9, r3
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800382e:	4629      	mov	r1, r5
 8003830:	024b      	lsls	r3, r1, #9
 8003832:	4621      	mov	r1, r4
 8003834:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003838:	4621      	mov	r1, r4
 800383a:	024a      	lsls	r2, r1, #9
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003842:	2200      	movs	r2, #0
 8003844:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003846:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800384c:	f7fd fa2c 	bl	8000ca8 <__aeabi_uldivmod>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4613      	mov	r3, r2
 8003856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003858:	e058      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800385a:	4b38      	ldr	r3, [pc, #224]	@ (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	099b      	lsrs	r3, r3, #6
 8003860:	2200      	movs	r2, #0
 8003862:	4618      	mov	r0, r3
 8003864:	4611      	mov	r1, r2
 8003866:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800386a:	623b      	str	r3, [r7, #32]
 800386c:	2300      	movs	r3, #0
 800386e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003870:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003874:	4642      	mov	r2, r8
 8003876:	464b      	mov	r3, r9
 8003878:	f04f 0000 	mov.w	r0, #0
 800387c:	f04f 0100 	mov.w	r1, #0
 8003880:	0159      	lsls	r1, r3, #5
 8003882:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003886:	0150      	lsls	r0, r2, #5
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4641      	mov	r1, r8
 800388e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003892:	4649      	mov	r1, r9
 8003894:	eb63 0b01 	sbc.w	fp, r3, r1
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038ac:	ebb2 040a 	subs.w	r4, r2, sl
 80038b0:	eb63 050b 	sbc.w	r5, r3, fp
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	00eb      	lsls	r3, r5, #3
 80038be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038c2:	00e2      	lsls	r2, r4, #3
 80038c4:	4614      	mov	r4, r2
 80038c6:	461d      	mov	r5, r3
 80038c8:	4643      	mov	r3, r8
 80038ca:	18e3      	adds	r3, r4, r3
 80038cc:	603b      	str	r3, [r7, #0]
 80038ce:	464b      	mov	r3, r9
 80038d0:	eb45 0303 	adc.w	r3, r5, r3
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038e2:	4629      	mov	r1, r5
 80038e4:	028b      	lsls	r3, r1, #10
 80038e6:	4621      	mov	r1, r4
 80038e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038ec:	4621      	mov	r1, r4
 80038ee:	028a      	lsls	r2, r1, #10
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038f6:	2200      	movs	r2, #0
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	61fa      	str	r2, [r7, #28]
 80038fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003900:	f7fd f9d2 	bl	8000ca8 <__aeabi_uldivmod>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4613      	mov	r3, r2
 800390a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800390c:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <HAL_RCC_GetSysClockFreq+0x200>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	0c1b      	lsrs	r3, r3, #16
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	3301      	adds	r3, #1
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800391c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800391e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003926:	e002      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003928:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x204>)
 800392a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800392c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800392e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003930:	4618      	mov	r0, r3
 8003932:	3750      	adds	r7, #80	@ 0x50
 8003934:	46bd      	mov	sp, r7
 8003936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
 8003940:	00f42400 	.word	0x00f42400
 8003944:	007a1200 	.word	0x007a1200

08003948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800394c:	4b03      	ldr	r3, [pc, #12]	@ (800395c <HAL_RCC_GetHCLKFreq+0x14>)
 800394e:	681b      	ldr	r3, [r3, #0]
}
 8003950:	4618      	mov	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	2000000c 	.word	0x2000000c

08003960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003964:	f7ff fff0 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	0a9b      	lsrs	r3, r3, #10
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4903      	ldr	r1, [pc, #12]	@ (8003984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40023800 	.word	0x40023800
 8003984:	08009b34 	.word	0x08009b34

08003988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800398c:	f7ff ffdc 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	0b5b      	lsrs	r3, r3, #13
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4903      	ldr	r1, [pc, #12]	@ (80039ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40023800 	.word	0x40023800
 80039ac:	08009b34 	.word	0x08009b34

080039b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e07b      	b.n	8003aba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d108      	bne.n	80039dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039d2:	d009      	beq.n	80039e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	61da      	str	r2, [r3, #28]
 80039da:	e005      	b.n	80039e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fe fa9c 	bl	8001f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6c:	ea42 0103 	orr.w	r1, r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	f003 0104 	and.w	r1, r3, #4
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	f003 0210 	and.w	r2, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aa8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b088      	sub	sp, #32
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	603b      	str	r3, [r7, #0]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ad2:	f7fe ff65 	bl	80029a0 <HAL_GetTick>
 8003ad6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d001      	beq.n	8003aec <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e12a      	b.n	8003d42 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_SPI_Transmit+0x36>
 8003af2:	88fb      	ldrh	r3, [r7, #6]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e122      	b.n	8003d42 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <HAL_SPI_Transmit+0x48>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e11b      	b.n	8003d42 <HAL_SPI_Transmit+0x280>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2203      	movs	r2, #3
 8003b16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	88fa      	ldrh	r2, [r7, #6]
 8003b2a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	88fa      	ldrh	r2, [r7, #6]
 8003b30:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b58:	d10f      	bne.n	8003b7a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b84:	2b40      	cmp	r3, #64	@ 0x40
 8003b86:	d007      	beq.n	8003b98 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ba0:	d152      	bne.n	8003c48 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_SPI_Transmit+0xee>
 8003baa:	8b7b      	ldrh	r3, [r7, #26]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d145      	bne.n	8003c3c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb4:	881a      	ldrh	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc0:	1c9a      	adds	r2, r3, #2
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bd4:	e032      	b.n	8003c3c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d112      	bne.n	8003c0a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	881a      	ldrh	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf4:	1c9a      	adds	r2, r3, #2
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c08:	e018      	b.n	8003c3c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c0a:	f7fe fec9 	bl	80029a0 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d803      	bhi.n	8003c22 <HAL_SPI_Transmit+0x160>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d102      	bne.n	8003c28 <HAL_SPI_Transmit+0x166>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d109      	bne.n	8003c3c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e082      	b.n	8003d42 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1c7      	bne.n	8003bd6 <HAL_SPI_Transmit+0x114>
 8003c46:	e053      	b.n	8003cf0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <HAL_SPI_Transmit+0x194>
 8003c50:	8b7b      	ldrh	r3, [r7, #26]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d147      	bne.n	8003ce6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	7812      	ldrb	r2, [r2, #0]
 8003c62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c7c:	e033      	b.n	8003ce6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d113      	bne.n	8003cb4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	330c      	adds	r3, #12
 8003c96:	7812      	ldrb	r2, [r2, #0]
 8003c98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003cb2:	e018      	b.n	8003ce6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cb4:	f7fe fe74 	bl	80029a0 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d803      	bhi.n	8003ccc <HAL_SPI_Transmit+0x20a>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cca:	d102      	bne.n	8003cd2 <HAL_SPI_Transmit+0x210>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e02d      	b.n	8003d42 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1c6      	bne.n	8003c7e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	6839      	ldr	r1, [r7, #0]
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fbe7 	bl	80044c8 <SPI_EndRxTxTransaction>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003d40:	2300      	movs	r3, #0
  }
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3720      	adds	r7, #32
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b088      	sub	sp, #32
 8003d4e:	af02      	add	r7, sp, #8
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	4613      	mov	r3, r2
 8003d58:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d001      	beq.n	8003d6a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003d66:	2302      	movs	r3, #2
 8003d68:	e104      	b.n	8003f74 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_SPI_Receive+0x2c>
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e0fc      	b.n	8003f74 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d82:	d112      	bne.n	8003daa <HAL_SPI_Receive+0x60>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10e      	bne.n	8003daa <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2204      	movs	r2, #4
 8003d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d94:	88fa      	ldrh	r2, [r7, #6]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f8eb 	bl	8003f7c <HAL_SPI_TransmitReceive>
 8003da6:	4603      	mov	r3, r0
 8003da8:	e0e4      	b.n	8003f74 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003daa:	f7fe fdf9 	bl	80029a0 <HAL_GetTick>
 8003dae:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_SPI_Receive+0x74>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e0da      	b.n	8003f74 <HAL_SPI_Receive+0x22a>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2204      	movs	r2, #4
 8003dca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	88fa      	ldrh	r2, [r7, #6]
 8003dde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e0c:	d10f      	bne.n	8003e2e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e38:	2b40      	cmp	r3, #64	@ 0x40
 8003e3a:	d007      	beq.n	8003e4c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d170      	bne.n	8003f36 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e54:	e035      	b.n	8003ec2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d115      	bne.n	8003e90 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f103 020c 	add.w	r2, r3, #12
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e70:	7812      	ldrb	r2, [r2, #0]
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e8e:	e018      	b.n	8003ec2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e90:	f7fe fd86 	bl	80029a0 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d803      	bhi.n	8003ea8 <HAL_SPI_Receive+0x15e>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea6:	d102      	bne.n	8003eae <HAL_SPI_Receive+0x164>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d109      	bne.n	8003ec2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e058      	b.n	8003f74 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1c4      	bne.n	8003e56 <HAL_SPI_Receive+0x10c>
 8003ecc:	e038      	b.n	8003f40 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d113      	bne.n	8003f04 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee6:	b292      	uxth	r2, r2
 8003ee8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eee:	1c9a      	adds	r2, r3, #2
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f02:	e018      	b.n	8003f36 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f04:	f7fe fd4c 	bl	80029a0 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d803      	bhi.n	8003f1c <HAL_SPI_Receive+0x1d2>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1a:	d102      	bne.n	8003f22 <HAL_SPI_Receive+0x1d8>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e01e      	b.n	8003f74 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1c6      	bne.n	8003ece <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	6839      	ldr	r1, [r7, #0]
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 fa59 	bl	80043fc <SPI_EndRxTransaction>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003f72:	2300      	movs	r3, #0
  }
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	@ 0x28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f8e:	f7fe fd07 	bl	80029a0 <HAL_GetTick>
 8003f92:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f9a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003fa2:	887b      	ldrh	r3, [r7, #2]
 8003fa4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fa6:	7ffb      	ldrb	r3, [r7, #31]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d00c      	beq.n	8003fc6 <HAL_SPI_TransmitReceive+0x4a>
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fb2:	d106      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d102      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x46>
 8003fbc:	7ffb      	ldrb	r3, [r7, #31]
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d001      	beq.n	8003fc6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e17f      	b.n	80042c6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_SPI_TransmitReceive+0x5c>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_SPI_TransmitReceive+0x5c>
 8003fd2:	887b      	ldrh	r3, [r7, #2]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e174      	b.n	80042c6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_SPI_TransmitReceive+0x6e>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e16d      	b.n	80042c6 <HAL_SPI_TransmitReceive+0x34a>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d003      	beq.n	8004006 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2205      	movs	r2, #5
 8004002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	887a      	ldrh	r2, [r7, #2]
 8004016:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	887a      	ldrh	r2, [r7, #2]
 8004028:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	887a      	ldrh	r2, [r7, #2]
 800402e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004046:	2b40      	cmp	r3, #64	@ 0x40
 8004048:	d007      	beq.n	800405a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004058:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004062:	d17e      	bne.n	8004162 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_SPI_TransmitReceive+0xf6>
 800406c:	8afb      	ldrh	r3, [r7, #22]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d16c      	bne.n	800414c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004076:	881a      	ldrh	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	1c9a      	adds	r2, r3, #2
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004096:	e059      	b.n	800414c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d11b      	bne.n	80040de <HAL_SPI_TransmitReceive+0x162>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d016      	beq.n	80040de <HAL_SPI_TransmitReceive+0x162>
 80040b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d113      	bne.n	80040de <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ba:	881a      	ldrh	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	1c9a      	adds	r2, r3, #2
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d119      	bne.n	8004120 <HAL_SPI_TransmitReceive+0x1a4>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d014      	beq.n	8004120 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004100:	b292      	uxth	r2, r2
 8004102:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004108:	1c9a      	adds	r2, r3, #2
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800411c:	2301      	movs	r3, #1
 800411e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004120:	f7fe fc3e 	bl	80029a0 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800412c:	429a      	cmp	r2, r3
 800412e:	d80d      	bhi.n	800414c <HAL_SPI_TransmitReceive+0x1d0>
 8004130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004136:	d009      	beq.n	800414c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e0bc      	b.n	80042c6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1a0      	bne.n	8004098 <HAL_SPI_TransmitReceive+0x11c>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d19b      	bne.n	8004098 <HAL_SPI_TransmitReceive+0x11c>
 8004160:	e082      	b.n	8004268 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_SPI_TransmitReceive+0x1f4>
 800416a:	8afb      	ldrh	r3, [r7, #22]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d171      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	7812      	ldrb	r2, [r2, #0]
 800417c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004196:	e05d      	b.n	8004254 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d11c      	bne.n	80041e0 <HAL_SPI_TransmitReceive+0x264>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d017      	beq.n	80041e0 <HAL_SPI_TransmitReceive+0x264>
 80041b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d114      	bne.n	80041e0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	330c      	adds	r3, #12
 80041c0:	7812      	ldrb	r2, [r2, #0]
 80041c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d119      	bne.n	8004222 <HAL_SPI_TransmitReceive+0x2a6>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d014      	beq.n	8004222 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800421e:	2301      	movs	r3, #1
 8004220:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004222:	f7fe fbbd 	bl	80029a0 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800422e:	429a      	cmp	r2, r3
 8004230:	d803      	bhi.n	800423a <HAL_SPI_TransmitReceive+0x2be>
 8004232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d102      	bne.n	8004240 <HAL_SPI_TransmitReceive+0x2c4>
 800423a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423c:	2b00      	cmp	r3, #0
 800423e:	d109      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e038      	b.n	80042c6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d19c      	bne.n	8004198 <HAL_SPI_TransmitReceive+0x21c>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d197      	bne.n	8004198 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004268:	6a3a      	ldr	r2, [r7, #32]
 800426a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f92b 	bl	80044c8 <SPI_EndRxTxTransaction>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d008      	beq.n	800428a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e01d      	b.n	80042c6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80042c4:	2300      	movs	r3, #0
  }
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3728      	adds	r7, #40	@ 0x28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042dc:	b2db      	uxtb	r3, r3
}
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042fc:	f7fe fb50 	bl	80029a0 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	4413      	add	r3, r2
 800430a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800430c:	f7fe fb48 	bl	80029a0 <HAL_GetTick>
 8004310:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004312:	4b39      	ldr	r3, [pc, #228]	@ (80043f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	015b      	lsls	r3, r3, #5
 8004318:	0d1b      	lsrs	r3, r3, #20
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	fb02 f303 	mul.w	r3, r2, r3
 8004320:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004322:	e055      	b.n	80043d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432a:	d051      	beq.n	80043d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800432c:	f7fe fb38 	bl	80029a0 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	429a      	cmp	r2, r3
 800433a:	d902      	bls.n	8004342 <SPI_WaitFlagStateUntilTimeout+0x56>
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d13d      	bne.n	80043be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004350:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800435a:	d111      	bne.n	8004380 <SPI_WaitFlagStateUntilTimeout+0x94>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004364:	d004      	beq.n	8004370 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800436e:	d107      	bne.n	8004380 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800437e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004388:	d10f      	bne.n	80043aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e018      	b.n	80043f0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d102      	bne.n	80043ca <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	e002      	b.n	80043d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4013      	ands	r3, r2
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	429a      	cmp	r2, r3
 80043de:	bf0c      	ite	eq
 80043e0:	2301      	moveq	r3, #1
 80043e2:	2300      	movne	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d19a      	bne.n	8004324 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3720      	adds	r7, #32
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	2000000c 	.word	0x2000000c

080043fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004410:	d111      	bne.n	8004436 <SPI_EndRxTransaction+0x3a>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800441a:	d004      	beq.n	8004426 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004424:	d107      	bne.n	8004436 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004434:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800443e:	d12a      	bne.n	8004496 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004448:	d012      	beq.n	8004470 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2200      	movs	r2, #0
 8004452:	2180      	movs	r1, #128	@ 0x80
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7ff ff49 	bl	80042ec <SPI_WaitFlagStateUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d02d      	beq.n	80044bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004464:	f043 0220 	orr.w	r2, r3, #32
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e026      	b.n	80044be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2200      	movs	r2, #0
 8004478:	2101      	movs	r1, #1
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f7ff ff36 	bl	80042ec <SPI_WaitFlagStateUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01a      	beq.n	80044bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800448a:	f043 0220 	orr.w	r2, r3, #32
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e013      	b.n	80044be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2200      	movs	r2, #0
 800449e:	2101      	movs	r1, #1
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f7ff ff23 	bl	80042ec <SPI_WaitFlagStateUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d007      	beq.n	80044bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b0:	f043 0220 	orr.w	r2, r3, #32
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e000      	b.n	80044be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2201      	movs	r2, #1
 80044dc:	2102      	movs	r1, #2
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f7ff ff04 	bl	80042ec <SPI_WaitFlagStateUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ee:	f043 0220 	orr.w	r2, r3, #32
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e032      	b.n	8004560 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004568 <SPI_EndRxTxTransaction+0xa0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1b      	ldr	r2, [pc, #108]	@ (800456c <SPI_EndRxTxTransaction+0xa4>)
 8004500:	fba2 2303 	umull	r2, r3, r2, r3
 8004504:	0d5b      	lsrs	r3, r3, #21
 8004506:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800450a:	fb02 f303 	mul.w	r3, r2, r3
 800450e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004518:	d112      	bne.n	8004540 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2200      	movs	r2, #0
 8004522:	2180      	movs	r1, #128	@ 0x80
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f7ff fee1 	bl	80042ec <SPI_WaitFlagStateUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d016      	beq.n	800455e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004534:	f043 0220 	orr.w	r2, r3, #32
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e00f      	b.n	8004560 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	3b01      	subs	r3, #1
 800454a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004556:	2b80      	cmp	r3, #128	@ 0x80
 8004558:	d0f2      	beq.n	8004540 <SPI_EndRxTxTransaction+0x78>
 800455a:	e000      	b.n	800455e <SPI_EndRxTxTransaction+0x96>
        break;
 800455c:	bf00      	nop
  }

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	2000000c 	.word	0x2000000c
 800456c:	165e9f81 	.word	0x165e9f81

08004570 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e041      	b.n	8004606 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fd fd1a 	bl	8001fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3304      	adds	r3, #4
 80045ac:	4619      	mov	r1, r3
 80045ae:	4610      	mov	r0, r2
 80045b0:	f000 f9b6 	bl	8004920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b01      	cmp	r3, #1
 8004622:	d001      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e04e      	b.n	80046c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a23      	ldr	r2, [pc, #140]	@ (80046d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d022      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x80>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004652:	d01d      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x80>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a1f      	ldr	r2, [pc, #124]	@ (80046d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d018      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x80>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1e      	ldr	r2, [pc, #120]	@ (80046dc <HAL_TIM_Base_Start_IT+0xcc>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d013      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x80>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a1c      	ldr	r2, [pc, #112]	@ (80046e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00e      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x80>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a1b      	ldr	r2, [pc, #108]	@ (80046e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d009      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x80>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a19      	ldr	r2, [pc, #100]	@ (80046e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x80>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a18      	ldr	r2, [pc, #96]	@ (80046ec <HAL_TIM_Base_Start_IT+0xdc>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d111      	bne.n	80046b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b06      	cmp	r3, #6
 80046a0:	d010      	beq.n	80046c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0201 	orr.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b2:	e007      	b.n	80046c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40010000 	.word	0x40010000
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40000800 	.word	0x40000800
 80046e0:	40000c00 	.word	0x40000c00
 80046e4:	40010400 	.word	0x40010400
 80046e8:	40014000 	.word	0x40014000
 80046ec:	40001800 	.word	0x40001800

080046f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d020      	beq.n	8004754 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01b      	beq.n	8004754 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0202 	mvn.w	r2, #2
 8004724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8d2 	bl	80048e4 <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f8c4 	bl	80048d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f8d5 	bl	80048f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	d020      	beq.n	80047a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01b      	beq.n	80047a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0204 	mvn.w	r2, #4
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2202      	movs	r2, #2
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f8ac 	bl	80048e4 <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f89e 	bl	80048d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f8af 	bl	80048f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d020      	beq.n	80047ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01b      	beq.n	80047ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0208 	mvn.w	r2, #8
 80047bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2204      	movs	r2, #4
 80047c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f886 	bl	80048e4 <HAL_TIM_IC_CaptureCallback>
 80047d8:	e005      	b.n	80047e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f878 	bl	80048d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f889 	bl	80048f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d020      	beq.n	8004838 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01b      	beq.n	8004838 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0210 	mvn.w	r2, #16
 8004808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2208      	movs	r2, #8
 800480e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f860 	bl	80048e4 <HAL_TIM_IC_CaptureCallback>
 8004824:	e005      	b.n	8004832 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f852 	bl	80048d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f863 	bl	80048f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00c      	beq.n	800485c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0201 	mvn.w	r2, #1
 8004854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fd fc64 	bl	8002124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00c      	beq.n	8004880 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f900 	bl	8004a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00c      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004890:	2b00      	cmp	r3, #0
 8004892:	d007      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800489c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f834 	bl	800490c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00c      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d007      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0220 	mvn.w	r2, #32
 80048c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f8d2 	bl	8004a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a43      	ldr	r2, [pc, #268]	@ (8004a40 <TIM_Base_SetConfig+0x120>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d013      	beq.n	8004960 <TIM_Base_SetConfig+0x40>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800493e:	d00f      	beq.n	8004960 <TIM_Base_SetConfig+0x40>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a40      	ldr	r2, [pc, #256]	@ (8004a44 <TIM_Base_SetConfig+0x124>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00b      	beq.n	8004960 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a3f      	ldr	r2, [pc, #252]	@ (8004a48 <TIM_Base_SetConfig+0x128>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d007      	beq.n	8004960 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a3e      	ldr	r2, [pc, #248]	@ (8004a4c <TIM_Base_SetConfig+0x12c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d003      	beq.n	8004960 <TIM_Base_SetConfig+0x40>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a3d      	ldr	r2, [pc, #244]	@ (8004a50 <TIM_Base_SetConfig+0x130>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d108      	bne.n	8004972 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a32      	ldr	r2, [pc, #200]	@ (8004a40 <TIM_Base_SetConfig+0x120>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d02b      	beq.n	80049d2 <TIM_Base_SetConfig+0xb2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004980:	d027      	beq.n	80049d2 <TIM_Base_SetConfig+0xb2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2f      	ldr	r2, [pc, #188]	@ (8004a44 <TIM_Base_SetConfig+0x124>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d023      	beq.n	80049d2 <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a2e      	ldr	r2, [pc, #184]	@ (8004a48 <TIM_Base_SetConfig+0x128>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d01f      	beq.n	80049d2 <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a2d      	ldr	r2, [pc, #180]	@ (8004a4c <TIM_Base_SetConfig+0x12c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01b      	beq.n	80049d2 <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a50 <TIM_Base_SetConfig+0x130>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d017      	beq.n	80049d2 <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004a54 <TIM_Base_SetConfig+0x134>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d013      	beq.n	80049d2 <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004a58 <TIM_Base_SetConfig+0x138>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00f      	beq.n	80049d2 <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a29      	ldr	r2, [pc, #164]	@ (8004a5c <TIM_Base_SetConfig+0x13c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00b      	beq.n	80049d2 <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a28      	ldr	r2, [pc, #160]	@ (8004a60 <TIM_Base_SetConfig+0x140>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d007      	beq.n	80049d2 <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a27      	ldr	r2, [pc, #156]	@ (8004a64 <TIM_Base_SetConfig+0x144>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d003      	beq.n	80049d2 <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a26      	ldr	r2, [pc, #152]	@ (8004a68 <TIM_Base_SetConfig+0x148>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d108      	bne.n	80049e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a0e      	ldr	r2, [pc, #56]	@ (8004a40 <TIM_Base_SetConfig+0x120>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d003      	beq.n	8004a12 <TIM_Base_SetConfig+0xf2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a10      	ldr	r2, [pc, #64]	@ (8004a50 <TIM_Base_SetConfig+0x130>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d103      	bne.n	8004a1a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f043 0204 	orr.w	r2, r3, #4
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	601a      	str	r2, [r3, #0]
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40010000 	.word	0x40010000
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40010400 	.word	0x40010400
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40014400 	.word	0x40014400
 8004a5c:	40014800 	.word	0x40014800
 8004a60:	40001800 	.word	0x40001800
 8004a64:	40001c00 	.word	0x40001c00
 8004a68:	40002000 	.word	0x40002000

08004a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e042      	b.n	8004b2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fd fab0 	bl	8002020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2224      	movs	r2, #36	@ 0x24
 8004ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f973 	bl	8004dc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695a      	ldr	r2, [r3, #20]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08a      	sub	sp, #40	@ 0x28
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	4613      	mov	r3, r2
 8004b42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d175      	bne.n	8004c40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_UART_Transmit+0x2c>
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e06e      	b.n	8004c42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2221      	movs	r2, #33	@ 0x21
 8004b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b72:	f7fd ff15 	bl	80029a0 <HAL_GetTick>
 8004b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	88fa      	ldrh	r2, [r7, #6]
 8004b7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	88fa      	ldrh	r2, [r7, #6]
 8004b82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b8c:	d108      	bne.n	8004ba0 <HAL_UART_Transmit+0x6c>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d104      	bne.n	8004ba0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	61bb      	str	r3, [r7, #24]
 8004b9e:	e003      	b.n	8004ba8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ba8:	e02e      	b.n	8004c08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2180      	movs	r1, #128	@ 0x80
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f848 	bl	8004c4a <UART_WaitOnFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e03a      	b.n	8004c42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10b      	bne.n	8004bea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	3302      	adds	r3, #2
 8004be6:	61bb      	str	r3, [r7, #24]
 8004be8:	e007      	b.n	8004bfa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	781a      	ldrb	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1cb      	bne.n	8004baa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2140      	movs	r1, #64	@ 0x40
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f814 	bl	8004c4a <UART_WaitOnFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e006      	b.n	8004c42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e000      	b.n	8004c42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c40:	2302      	movs	r3, #2
  }
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3720      	adds	r7, #32
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b086      	sub	sp, #24
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	4613      	mov	r3, r2
 8004c58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c5a:	e03b      	b.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c62:	d037      	beq.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c64:	f7fd fe9c 	bl	80029a0 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	6a3a      	ldr	r2, [r7, #32]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d302      	bcc.n	8004c7a <UART_WaitOnFlagUntilTimeout+0x30>
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e03a      	b.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d023      	beq.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b80      	cmp	r3, #128	@ 0x80
 8004c90:	d020      	beq.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b40      	cmp	r3, #64	@ 0x40
 8004c96:	d01d      	beq.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d116      	bne.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f81d 	bl	8004cfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e00f      	b.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	bf0c      	ite	eq
 8004ce4:	2301      	moveq	r3, #1
 8004ce6:	2300      	movne	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	461a      	mov	r2, r3
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d0b4      	beq.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b095      	sub	sp, #84	@ 0x54
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	330c      	adds	r3, #12
 8004d0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d24:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e5      	bne.n	8004d04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3314      	adds	r3, #20
 8004d3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	f023 0301 	bic.w	r3, r3, #1
 8004d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3314      	adds	r3, #20
 8004d56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e5      	bne.n	8004d38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d119      	bne.n	8004da8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	e853 3f00 	ldrex	r3, [r3]
 8004d82:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f023 0310 	bic.w	r3, r3, #16
 8004d8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	330c      	adds	r3, #12
 8004d92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d94:	61ba      	str	r2, [r7, #24]
 8004d96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d98:	6979      	ldr	r1, [r7, #20]
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	e841 2300 	strex	r3, r2, [r1]
 8004da0:	613b      	str	r3, [r7, #16]
   return(result);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e5      	bne.n	8004d74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004db6:	bf00      	nop
 8004db8:	3754      	adds	r7, #84	@ 0x54
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
	...

08004dc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc8:	b0c0      	sub	sp, #256	@ 0x100
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de0:	68d9      	ldr	r1, [r3, #12]
 8004de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	ea40 0301 	orr.w	r3, r0, r1
 8004dec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e1c:	f021 010c 	bic.w	r1, r1, #12
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3e:	6999      	ldr	r1, [r3, #24]
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	ea40 0301 	orr.w	r3, r0, r1
 8004e4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	4b8f      	ldr	r3, [pc, #572]	@ (8005090 <UART_SetConfig+0x2cc>)
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d005      	beq.n	8004e64 <UART_SetConfig+0xa0>
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4b8d      	ldr	r3, [pc, #564]	@ (8005094 <UART_SetConfig+0x2d0>)
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d104      	bne.n	8004e6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e64:	f7fe fd90 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 8004e68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e6c:	e003      	b.n	8004e76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e6e:	f7fe fd77 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 8004e72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e80:	f040 810c 	bne.w	800509c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e96:	4622      	mov	r2, r4
 8004e98:	462b      	mov	r3, r5
 8004e9a:	1891      	adds	r1, r2, r2
 8004e9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e9e:	415b      	adcs	r3, r3
 8004ea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ea2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	eb12 0801 	adds.w	r8, r2, r1
 8004eac:	4629      	mov	r1, r5
 8004eae:	eb43 0901 	adc.w	r9, r3, r1
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ebe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ec2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ec6:	4690      	mov	r8, r2
 8004ec8:	4699      	mov	r9, r3
 8004eca:	4623      	mov	r3, r4
 8004ecc:	eb18 0303 	adds.w	r3, r8, r3
 8004ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ed4:	462b      	mov	r3, r5
 8004ed6:	eb49 0303 	adc.w	r3, r9, r3
 8004eda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004eea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004eee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	18db      	adds	r3, r3, r3
 8004ef6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ef8:	4613      	mov	r3, r2
 8004efa:	eb42 0303 	adc.w	r3, r2, r3
 8004efe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f08:	f7fb fece 	bl	8000ca8 <__aeabi_uldivmod>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4b61      	ldr	r3, [pc, #388]	@ (8005098 <UART_SetConfig+0x2d4>)
 8004f12:	fba3 2302 	umull	r2, r3, r3, r2
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	011c      	lsls	r4, r3, #4
 8004f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f2c:	4642      	mov	r2, r8
 8004f2e:	464b      	mov	r3, r9
 8004f30:	1891      	adds	r1, r2, r2
 8004f32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f34:	415b      	adcs	r3, r3
 8004f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f3c:	4641      	mov	r1, r8
 8004f3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f42:	4649      	mov	r1, r9
 8004f44:	eb43 0b01 	adc.w	fp, r3, r1
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f5c:	4692      	mov	sl, r2
 8004f5e:	469b      	mov	fp, r3
 8004f60:	4643      	mov	r3, r8
 8004f62:	eb1a 0303 	adds.w	r3, sl, r3
 8004f66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004f70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	18db      	adds	r3, r3, r3
 8004f8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f8e:	4613      	mov	r3, r2
 8004f90:	eb42 0303 	adc.w	r3, r2, r3
 8004f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f9e:	f7fb fe83 	bl	8000ca8 <__aeabi_uldivmod>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8005098 <UART_SetConfig+0x2d4>)
 8004faa:	fba3 2301 	umull	r2, r3, r3, r1
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	2264      	movs	r2, #100	@ 0x64
 8004fb2:	fb02 f303 	mul.w	r3, r2, r3
 8004fb6:	1acb      	subs	r3, r1, r3
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fbe:	4b36      	ldr	r3, [pc, #216]	@ (8005098 <UART_SetConfig+0x2d4>)
 8004fc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fcc:	441c      	add	r4, r3
 8004fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fd8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	1891      	adds	r1, r2, r2
 8004fe6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fe8:	415b      	adcs	r3, r3
 8004fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	1851      	adds	r1, r2, r1
 8004ff4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	414b      	adcs	r3, r1
 8004ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005008:	4659      	mov	r1, fp
 800500a:	00cb      	lsls	r3, r1, #3
 800500c:	4651      	mov	r1, sl
 800500e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005012:	4651      	mov	r1, sl
 8005014:	00ca      	lsls	r2, r1, #3
 8005016:	4610      	mov	r0, r2
 8005018:	4619      	mov	r1, r3
 800501a:	4603      	mov	r3, r0
 800501c:	4642      	mov	r2, r8
 800501e:	189b      	adds	r3, r3, r2
 8005020:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005024:	464b      	mov	r3, r9
 8005026:	460a      	mov	r2, r1
 8005028:	eb42 0303 	adc.w	r3, r2, r3
 800502c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800503c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005040:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005044:	460b      	mov	r3, r1
 8005046:	18db      	adds	r3, r3, r3
 8005048:	62bb      	str	r3, [r7, #40]	@ 0x28
 800504a:	4613      	mov	r3, r2
 800504c:	eb42 0303 	adc.w	r3, r2, r3
 8005050:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005052:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005056:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800505a:	f7fb fe25 	bl	8000ca8 <__aeabi_uldivmod>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4b0d      	ldr	r3, [pc, #52]	@ (8005098 <UART_SetConfig+0x2d4>)
 8005064:	fba3 1302 	umull	r1, r3, r3, r2
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	2164      	movs	r1, #100	@ 0x64
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	3332      	adds	r3, #50	@ 0x32
 8005076:	4a08      	ldr	r2, [pc, #32]	@ (8005098 <UART_SetConfig+0x2d4>)
 8005078:	fba2 2303 	umull	r2, r3, r2, r3
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	f003 0207 	and.w	r2, r3, #7
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4422      	add	r2, r4
 800508a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800508c:	e106      	b.n	800529c <UART_SetConfig+0x4d8>
 800508e:	bf00      	nop
 8005090:	40011000 	.word	0x40011000
 8005094:	40011400 	.word	0x40011400
 8005098:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800509c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80050ae:	4642      	mov	r2, r8
 80050b0:	464b      	mov	r3, r9
 80050b2:	1891      	adds	r1, r2, r2
 80050b4:	6239      	str	r1, [r7, #32]
 80050b6:	415b      	adcs	r3, r3
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050be:	4641      	mov	r1, r8
 80050c0:	1854      	adds	r4, r2, r1
 80050c2:	4649      	mov	r1, r9
 80050c4:	eb43 0501 	adc.w	r5, r3, r1
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	00eb      	lsls	r3, r5, #3
 80050d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050d6:	00e2      	lsls	r2, r4, #3
 80050d8:	4614      	mov	r4, r2
 80050da:	461d      	mov	r5, r3
 80050dc:	4643      	mov	r3, r8
 80050de:	18e3      	adds	r3, r4, r3
 80050e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050e4:	464b      	mov	r3, r9
 80050e6:	eb45 0303 	adc.w	r3, r5, r3
 80050ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800510a:	4629      	mov	r1, r5
 800510c:	008b      	lsls	r3, r1, #2
 800510e:	4621      	mov	r1, r4
 8005110:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005114:	4621      	mov	r1, r4
 8005116:	008a      	lsls	r2, r1, #2
 8005118:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800511c:	f7fb fdc4 	bl	8000ca8 <__aeabi_uldivmod>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4b60      	ldr	r3, [pc, #384]	@ (80052a8 <UART_SetConfig+0x4e4>)
 8005126:	fba3 2302 	umull	r2, r3, r3, r2
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	011c      	lsls	r4, r3, #4
 800512e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005132:	2200      	movs	r2, #0
 8005134:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005138:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800513c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005140:	4642      	mov	r2, r8
 8005142:	464b      	mov	r3, r9
 8005144:	1891      	adds	r1, r2, r2
 8005146:	61b9      	str	r1, [r7, #24]
 8005148:	415b      	adcs	r3, r3
 800514a:	61fb      	str	r3, [r7, #28]
 800514c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005150:	4641      	mov	r1, r8
 8005152:	1851      	adds	r1, r2, r1
 8005154:	6139      	str	r1, [r7, #16]
 8005156:	4649      	mov	r1, r9
 8005158:	414b      	adcs	r3, r1
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005168:	4659      	mov	r1, fp
 800516a:	00cb      	lsls	r3, r1, #3
 800516c:	4651      	mov	r1, sl
 800516e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005172:	4651      	mov	r1, sl
 8005174:	00ca      	lsls	r2, r1, #3
 8005176:	4610      	mov	r0, r2
 8005178:	4619      	mov	r1, r3
 800517a:	4603      	mov	r3, r0
 800517c:	4642      	mov	r2, r8
 800517e:	189b      	adds	r3, r3, r2
 8005180:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005184:	464b      	mov	r3, r9
 8005186:	460a      	mov	r2, r1
 8005188:	eb42 0303 	adc.w	r3, r2, r3
 800518c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	67bb      	str	r3, [r7, #120]	@ 0x78
 800519a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051a8:	4649      	mov	r1, r9
 80051aa:	008b      	lsls	r3, r1, #2
 80051ac:	4641      	mov	r1, r8
 80051ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051b2:	4641      	mov	r1, r8
 80051b4:	008a      	lsls	r2, r1, #2
 80051b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051ba:	f7fb fd75 	bl	8000ca8 <__aeabi_uldivmod>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4611      	mov	r1, r2
 80051c4:	4b38      	ldr	r3, [pc, #224]	@ (80052a8 <UART_SetConfig+0x4e4>)
 80051c6:	fba3 2301 	umull	r2, r3, r3, r1
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	2264      	movs	r2, #100	@ 0x64
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
 80051d2:	1acb      	subs	r3, r1, r3
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	3332      	adds	r3, #50	@ 0x32
 80051d8:	4a33      	ldr	r2, [pc, #204]	@ (80052a8 <UART_SetConfig+0x4e4>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051e4:	441c      	add	r4, r3
 80051e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ea:	2200      	movs	r2, #0
 80051ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80051ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80051f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051f4:	4642      	mov	r2, r8
 80051f6:	464b      	mov	r3, r9
 80051f8:	1891      	adds	r1, r2, r2
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	415b      	adcs	r3, r3
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005204:	4641      	mov	r1, r8
 8005206:	1851      	adds	r1, r2, r1
 8005208:	6039      	str	r1, [r7, #0]
 800520a:	4649      	mov	r1, r9
 800520c:	414b      	adcs	r3, r1
 800520e:	607b      	str	r3, [r7, #4]
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800521c:	4659      	mov	r1, fp
 800521e:	00cb      	lsls	r3, r1, #3
 8005220:	4651      	mov	r1, sl
 8005222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005226:	4651      	mov	r1, sl
 8005228:	00ca      	lsls	r2, r1, #3
 800522a:	4610      	mov	r0, r2
 800522c:	4619      	mov	r1, r3
 800522e:	4603      	mov	r3, r0
 8005230:	4642      	mov	r2, r8
 8005232:	189b      	adds	r3, r3, r2
 8005234:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005236:	464b      	mov	r3, r9
 8005238:	460a      	mov	r2, r1
 800523a:	eb42 0303 	adc.w	r3, r2, r3
 800523e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	663b      	str	r3, [r7, #96]	@ 0x60
 800524a:	667a      	str	r2, [r7, #100]	@ 0x64
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005258:	4649      	mov	r1, r9
 800525a:	008b      	lsls	r3, r1, #2
 800525c:	4641      	mov	r1, r8
 800525e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005262:	4641      	mov	r1, r8
 8005264:	008a      	lsls	r2, r1, #2
 8005266:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800526a:	f7fb fd1d 	bl	8000ca8 <__aeabi_uldivmod>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4b0d      	ldr	r3, [pc, #52]	@ (80052a8 <UART_SetConfig+0x4e4>)
 8005274:	fba3 1302 	umull	r1, r3, r3, r2
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	2164      	movs	r1, #100	@ 0x64
 800527c:	fb01 f303 	mul.w	r3, r1, r3
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	3332      	adds	r3, #50	@ 0x32
 8005286:	4a08      	ldr	r2, [pc, #32]	@ (80052a8 <UART_SetConfig+0x4e4>)
 8005288:	fba2 2303 	umull	r2, r3, r2, r3
 800528c:	095b      	lsrs	r3, r3, #5
 800528e:	f003 020f 	and.w	r2, r3, #15
 8005292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4422      	add	r2, r4
 800529a:	609a      	str	r2, [r3, #8]
}
 800529c:	bf00      	nop
 800529e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052a2:	46bd      	mov	sp, r7
 80052a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052a8:	51eb851f 	.word	0x51eb851f

080052ac <__cvt>:
 80052ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052b0:	ec57 6b10 	vmov	r6, r7, d0
 80052b4:	2f00      	cmp	r7, #0
 80052b6:	460c      	mov	r4, r1
 80052b8:	4619      	mov	r1, r3
 80052ba:	463b      	mov	r3, r7
 80052bc:	bfbb      	ittet	lt
 80052be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80052c2:	461f      	movlt	r7, r3
 80052c4:	2300      	movge	r3, #0
 80052c6:	232d      	movlt	r3, #45	@ 0x2d
 80052c8:	700b      	strb	r3, [r1, #0]
 80052ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80052d0:	4691      	mov	r9, r2
 80052d2:	f023 0820 	bic.w	r8, r3, #32
 80052d6:	bfbc      	itt	lt
 80052d8:	4632      	movlt	r2, r6
 80052da:	4616      	movlt	r6, r2
 80052dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052e0:	d005      	beq.n	80052ee <__cvt+0x42>
 80052e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80052e6:	d100      	bne.n	80052ea <__cvt+0x3e>
 80052e8:	3401      	adds	r4, #1
 80052ea:	2102      	movs	r1, #2
 80052ec:	e000      	b.n	80052f0 <__cvt+0x44>
 80052ee:	2103      	movs	r1, #3
 80052f0:	ab03      	add	r3, sp, #12
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	ab02      	add	r3, sp, #8
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	ec47 6b10 	vmov	d0, r6, r7
 80052fc:	4653      	mov	r3, sl
 80052fe:	4622      	mov	r2, r4
 8005300:	f001 f8aa 	bl	8006458 <_dtoa_r>
 8005304:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005308:	4605      	mov	r5, r0
 800530a:	d119      	bne.n	8005340 <__cvt+0x94>
 800530c:	f019 0f01 	tst.w	r9, #1
 8005310:	d00e      	beq.n	8005330 <__cvt+0x84>
 8005312:	eb00 0904 	add.w	r9, r0, r4
 8005316:	2200      	movs	r2, #0
 8005318:	2300      	movs	r3, #0
 800531a:	4630      	mov	r0, r6
 800531c:	4639      	mov	r1, r7
 800531e:	f7fb fbe3 	bl	8000ae8 <__aeabi_dcmpeq>
 8005322:	b108      	cbz	r0, 8005328 <__cvt+0x7c>
 8005324:	f8cd 900c 	str.w	r9, [sp, #12]
 8005328:	2230      	movs	r2, #48	@ 0x30
 800532a:	9b03      	ldr	r3, [sp, #12]
 800532c:	454b      	cmp	r3, r9
 800532e:	d31e      	bcc.n	800536e <__cvt+0xc2>
 8005330:	9b03      	ldr	r3, [sp, #12]
 8005332:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005334:	1b5b      	subs	r3, r3, r5
 8005336:	4628      	mov	r0, r5
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	b004      	add	sp, #16
 800533c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005340:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005344:	eb00 0904 	add.w	r9, r0, r4
 8005348:	d1e5      	bne.n	8005316 <__cvt+0x6a>
 800534a:	7803      	ldrb	r3, [r0, #0]
 800534c:	2b30      	cmp	r3, #48	@ 0x30
 800534e:	d10a      	bne.n	8005366 <__cvt+0xba>
 8005350:	2200      	movs	r2, #0
 8005352:	2300      	movs	r3, #0
 8005354:	4630      	mov	r0, r6
 8005356:	4639      	mov	r1, r7
 8005358:	f7fb fbc6 	bl	8000ae8 <__aeabi_dcmpeq>
 800535c:	b918      	cbnz	r0, 8005366 <__cvt+0xba>
 800535e:	f1c4 0401 	rsb	r4, r4, #1
 8005362:	f8ca 4000 	str.w	r4, [sl]
 8005366:	f8da 3000 	ldr.w	r3, [sl]
 800536a:	4499      	add	r9, r3
 800536c:	e7d3      	b.n	8005316 <__cvt+0x6a>
 800536e:	1c59      	adds	r1, r3, #1
 8005370:	9103      	str	r1, [sp, #12]
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	e7d9      	b.n	800532a <__cvt+0x7e>

08005376 <__exponent>:
 8005376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005378:	2900      	cmp	r1, #0
 800537a:	bfba      	itte	lt
 800537c:	4249      	neglt	r1, r1
 800537e:	232d      	movlt	r3, #45	@ 0x2d
 8005380:	232b      	movge	r3, #43	@ 0x2b
 8005382:	2909      	cmp	r1, #9
 8005384:	7002      	strb	r2, [r0, #0]
 8005386:	7043      	strb	r3, [r0, #1]
 8005388:	dd29      	ble.n	80053de <__exponent+0x68>
 800538a:	f10d 0307 	add.w	r3, sp, #7
 800538e:	461d      	mov	r5, r3
 8005390:	270a      	movs	r7, #10
 8005392:	461a      	mov	r2, r3
 8005394:	fbb1 f6f7 	udiv	r6, r1, r7
 8005398:	fb07 1416 	mls	r4, r7, r6, r1
 800539c:	3430      	adds	r4, #48	@ 0x30
 800539e:	f802 4c01 	strb.w	r4, [r2, #-1]
 80053a2:	460c      	mov	r4, r1
 80053a4:	2c63      	cmp	r4, #99	@ 0x63
 80053a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80053aa:	4631      	mov	r1, r6
 80053ac:	dcf1      	bgt.n	8005392 <__exponent+0x1c>
 80053ae:	3130      	adds	r1, #48	@ 0x30
 80053b0:	1e94      	subs	r4, r2, #2
 80053b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80053b6:	1c41      	adds	r1, r0, #1
 80053b8:	4623      	mov	r3, r4
 80053ba:	42ab      	cmp	r3, r5
 80053bc:	d30a      	bcc.n	80053d4 <__exponent+0x5e>
 80053be:	f10d 0309 	add.w	r3, sp, #9
 80053c2:	1a9b      	subs	r3, r3, r2
 80053c4:	42ac      	cmp	r4, r5
 80053c6:	bf88      	it	hi
 80053c8:	2300      	movhi	r3, #0
 80053ca:	3302      	adds	r3, #2
 80053cc:	4403      	add	r3, r0
 80053ce:	1a18      	subs	r0, r3, r0
 80053d0:	b003      	add	sp, #12
 80053d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80053d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80053dc:	e7ed      	b.n	80053ba <__exponent+0x44>
 80053de:	2330      	movs	r3, #48	@ 0x30
 80053e0:	3130      	adds	r1, #48	@ 0x30
 80053e2:	7083      	strb	r3, [r0, #2]
 80053e4:	70c1      	strb	r1, [r0, #3]
 80053e6:	1d03      	adds	r3, r0, #4
 80053e8:	e7f1      	b.n	80053ce <__exponent+0x58>
	...

080053ec <_printf_float>:
 80053ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f0:	b08d      	sub	sp, #52	@ 0x34
 80053f2:	460c      	mov	r4, r1
 80053f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80053f8:	4616      	mov	r6, r2
 80053fa:	461f      	mov	r7, r3
 80053fc:	4605      	mov	r5, r0
 80053fe:	f000 ff25 	bl	800624c <_localeconv_r>
 8005402:	6803      	ldr	r3, [r0, #0]
 8005404:	9304      	str	r3, [sp, #16]
 8005406:	4618      	mov	r0, r3
 8005408:	f7fa ff42 	bl	8000290 <strlen>
 800540c:	2300      	movs	r3, #0
 800540e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005410:	f8d8 3000 	ldr.w	r3, [r8]
 8005414:	9005      	str	r0, [sp, #20]
 8005416:	3307      	adds	r3, #7
 8005418:	f023 0307 	bic.w	r3, r3, #7
 800541c:	f103 0208 	add.w	r2, r3, #8
 8005420:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005424:	f8d4 b000 	ldr.w	fp, [r4]
 8005428:	f8c8 2000 	str.w	r2, [r8]
 800542c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005430:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005434:	9307      	str	r3, [sp, #28]
 8005436:	f8cd 8018 	str.w	r8, [sp, #24]
 800543a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800543e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005442:	4b9c      	ldr	r3, [pc, #624]	@ (80056b4 <_printf_float+0x2c8>)
 8005444:	f04f 32ff 	mov.w	r2, #4294967295
 8005448:	f7fb fb80 	bl	8000b4c <__aeabi_dcmpun>
 800544c:	bb70      	cbnz	r0, 80054ac <_printf_float+0xc0>
 800544e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005452:	4b98      	ldr	r3, [pc, #608]	@ (80056b4 <_printf_float+0x2c8>)
 8005454:	f04f 32ff 	mov.w	r2, #4294967295
 8005458:	f7fb fb5a 	bl	8000b10 <__aeabi_dcmple>
 800545c:	bb30      	cbnz	r0, 80054ac <_printf_float+0xc0>
 800545e:	2200      	movs	r2, #0
 8005460:	2300      	movs	r3, #0
 8005462:	4640      	mov	r0, r8
 8005464:	4649      	mov	r1, r9
 8005466:	f7fb fb49 	bl	8000afc <__aeabi_dcmplt>
 800546a:	b110      	cbz	r0, 8005472 <_printf_float+0x86>
 800546c:	232d      	movs	r3, #45	@ 0x2d
 800546e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005472:	4a91      	ldr	r2, [pc, #580]	@ (80056b8 <_printf_float+0x2cc>)
 8005474:	4b91      	ldr	r3, [pc, #580]	@ (80056bc <_printf_float+0x2d0>)
 8005476:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800547a:	bf8c      	ite	hi
 800547c:	4690      	movhi	r8, r2
 800547e:	4698      	movls	r8, r3
 8005480:	2303      	movs	r3, #3
 8005482:	6123      	str	r3, [r4, #16]
 8005484:	f02b 0304 	bic.w	r3, fp, #4
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	f04f 0900 	mov.w	r9, #0
 800548e:	9700      	str	r7, [sp, #0]
 8005490:	4633      	mov	r3, r6
 8005492:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005494:	4621      	mov	r1, r4
 8005496:	4628      	mov	r0, r5
 8005498:	f000 f9d2 	bl	8005840 <_printf_common>
 800549c:	3001      	adds	r0, #1
 800549e:	f040 808d 	bne.w	80055bc <_printf_float+0x1d0>
 80054a2:	f04f 30ff 	mov.w	r0, #4294967295
 80054a6:	b00d      	add	sp, #52	@ 0x34
 80054a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ac:	4642      	mov	r2, r8
 80054ae:	464b      	mov	r3, r9
 80054b0:	4640      	mov	r0, r8
 80054b2:	4649      	mov	r1, r9
 80054b4:	f7fb fb4a 	bl	8000b4c <__aeabi_dcmpun>
 80054b8:	b140      	cbz	r0, 80054cc <_printf_float+0xe0>
 80054ba:	464b      	mov	r3, r9
 80054bc:	2b00      	cmp	r3, #0
 80054be:	bfbc      	itt	lt
 80054c0:	232d      	movlt	r3, #45	@ 0x2d
 80054c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80054c6:	4a7e      	ldr	r2, [pc, #504]	@ (80056c0 <_printf_float+0x2d4>)
 80054c8:	4b7e      	ldr	r3, [pc, #504]	@ (80056c4 <_printf_float+0x2d8>)
 80054ca:	e7d4      	b.n	8005476 <_printf_float+0x8a>
 80054cc:	6863      	ldr	r3, [r4, #4]
 80054ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80054d2:	9206      	str	r2, [sp, #24]
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	d13b      	bne.n	8005550 <_printf_float+0x164>
 80054d8:	2306      	movs	r3, #6
 80054da:	6063      	str	r3, [r4, #4]
 80054dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80054e0:	2300      	movs	r3, #0
 80054e2:	6022      	str	r2, [r4, #0]
 80054e4:	9303      	str	r3, [sp, #12]
 80054e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80054e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80054ec:	ab09      	add	r3, sp, #36	@ 0x24
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	6861      	ldr	r1, [r4, #4]
 80054f2:	ec49 8b10 	vmov	d0, r8, r9
 80054f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80054fa:	4628      	mov	r0, r5
 80054fc:	f7ff fed6 	bl	80052ac <__cvt>
 8005500:	9b06      	ldr	r3, [sp, #24]
 8005502:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005504:	2b47      	cmp	r3, #71	@ 0x47
 8005506:	4680      	mov	r8, r0
 8005508:	d129      	bne.n	800555e <_printf_float+0x172>
 800550a:	1cc8      	adds	r0, r1, #3
 800550c:	db02      	blt.n	8005514 <_printf_float+0x128>
 800550e:	6863      	ldr	r3, [r4, #4]
 8005510:	4299      	cmp	r1, r3
 8005512:	dd41      	ble.n	8005598 <_printf_float+0x1ac>
 8005514:	f1aa 0a02 	sub.w	sl, sl, #2
 8005518:	fa5f fa8a 	uxtb.w	sl, sl
 800551c:	3901      	subs	r1, #1
 800551e:	4652      	mov	r2, sl
 8005520:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005524:	9109      	str	r1, [sp, #36]	@ 0x24
 8005526:	f7ff ff26 	bl	8005376 <__exponent>
 800552a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800552c:	1813      	adds	r3, r2, r0
 800552e:	2a01      	cmp	r2, #1
 8005530:	4681      	mov	r9, r0
 8005532:	6123      	str	r3, [r4, #16]
 8005534:	dc02      	bgt.n	800553c <_printf_float+0x150>
 8005536:	6822      	ldr	r2, [r4, #0]
 8005538:	07d2      	lsls	r2, r2, #31
 800553a:	d501      	bpl.n	8005540 <_printf_float+0x154>
 800553c:	3301      	adds	r3, #1
 800553e:	6123      	str	r3, [r4, #16]
 8005540:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0a2      	beq.n	800548e <_printf_float+0xa2>
 8005548:	232d      	movs	r3, #45	@ 0x2d
 800554a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800554e:	e79e      	b.n	800548e <_printf_float+0xa2>
 8005550:	9a06      	ldr	r2, [sp, #24]
 8005552:	2a47      	cmp	r2, #71	@ 0x47
 8005554:	d1c2      	bne.n	80054dc <_printf_float+0xf0>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1c0      	bne.n	80054dc <_printf_float+0xf0>
 800555a:	2301      	movs	r3, #1
 800555c:	e7bd      	b.n	80054da <_printf_float+0xee>
 800555e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005562:	d9db      	bls.n	800551c <_printf_float+0x130>
 8005564:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005568:	d118      	bne.n	800559c <_printf_float+0x1b0>
 800556a:	2900      	cmp	r1, #0
 800556c:	6863      	ldr	r3, [r4, #4]
 800556e:	dd0b      	ble.n	8005588 <_printf_float+0x19c>
 8005570:	6121      	str	r1, [r4, #16]
 8005572:	b913      	cbnz	r3, 800557a <_printf_float+0x18e>
 8005574:	6822      	ldr	r2, [r4, #0]
 8005576:	07d0      	lsls	r0, r2, #31
 8005578:	d502      	bpl.n	8005580 <_printf_float+0x194>
 800557a:	3301      	adds	r3, #1
 800557c:	440b      	add	r3, r1
 800557e:	6123      	str	r3, [r4, #16]
 8005580:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005582:	f04f 0900 	mov.w	r9, #0
 8005586:	e7db      	b.n	8005540 <_printf_float+0x154>
 8005588:	b913      	cbnz	r3, 8005590 <_printf_float+0x1a4>
 800558a:	6822      	ldr	r2, [r4, #0]
 800558c:	07d2      	lsls	r2, r2, #31
 800558e:	d501      	bpl.n	8005594 <_printf_float+0x1a8>
 8005590:	3302      	adds	r3, #2
 8005592:	e7f4      	b.n	800557e <_printf_float+0x192>
 8005594:	2301      	movs	r3, #1
 8005596:	e7f2      	b.n	800557e <_printf_float+0x192>
 8005598:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800559c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800559e:	4299      	cmp	r1, r3
 80055a0:	db05      	blt.n	80055ae <_printf_float+0x1c2>
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	6121      	str	r1, [r4, #16]
 80055a6:	07d8      	lsls	r0, r3, #31
 80055a8:	d5ea      	bpl.n	8005580 <_printf_float+0x194>
 80055aa:	1c4b      	adds	r3, r1, #1
 80055ac:	e7e7      	b.n	800557e <_printf_float+0x192>
 80055ae:	2900      	cmp	r1, #0
 80055b0:	bfd4      	ite	le
 80055b2:	f1c1 0202 	rsble	r2, r1, #2
 80055b6:	2201      	movgt	r2, #1
 80055b8:	4413      	add	r3, r2
 80055ba:	e7e0      	b.n	800557e <_printf_float+0x192>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	055a      	lsls	r2, r3, #21
 80055c0:	d407      	bmi.n	80055d2 <_printf_float+0x1e6>
 80055c2:	6923      	ldr	r3, [r4, #16]
 80055c4:	4642      	mov	r2, r8
 80055c6:	4631      	mov	r1, r6
 80055c8:	4628      	mov	r0, r5
 80055ca:	47b8      	blx	r7
 80055cc:	3001      	adds	r0, #1
 80055ce:	d12b      	bne.n	8005628 <_printf_float+0x23c>
 80055d0:	e767      	b.n	80054a2 <_printf_float+0xb6>
 80055d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055d6:	f240 80dd 	bls.w	8005794 <_printf_float+0x3a8>
 80055da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055de:	2200      	movs	r2, #0
 80055e0:	2300      	movs	r3, #0
 80055e2:	f7fb fa81 	bl	8000ae8 <__aeabi_dcmpeq>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d033      	beq.n	8005652 <_printf_float+0x266>
 80055ea:	4a37      	ldr	r2, [pc, #220]	@ (80056c8 <_printf_float+0x2dc>)
 80055ec:	2301      	movs	r3, #1
 80055ee:	4631      	mov	r1, r6
 80055f0:	4628      	mov	r0, r5
 80055f2:	47b8      	blx	r7
 80055f4:	3001      	adds	r0, #1
 80055f6:	f43f af54 	beq.w	80054a2 <_printf_float+0xb6>
 80055fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80055fe:	4543      	cmp	r3, r8
 8005600:	db02      	blt.n	8005608 <_printf_float+0x21c>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	07d8      	lsls	r0, r3, #31
 8005606:	d50f      	bpl.n	8005628 <_printf_float+0x23c>
 8005608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800560c:	4631      	mov	r1, r6
 800560e:	4628      	mov	r0, r5
 8005610:	47b8      	blx	r7
 8005612:	3001      	adds	r0, #1
 8005614:	f43f af45 	beq.w	80054a2 <_printf_float+0xb6>
 8005618:	f04f 0900 	mov.w	r9, #0
 800561c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005620:	f104 0a1a 	add.w	sl, r4, #26
 8005624:	45c8      	cmp	r8, r9
 8005626:	dc09      	bgt.n	800563c <_printf_float+0x250>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	079b      	lsls	r3, r3, #30
 800562c:	f100 8103 	bmi.w	8005836 <_printf_float+0x44a>
 8005630:	68e0      	ldr	r0, [r4, #12]
 8005632:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005634:	4298      	cmp	r0, r3
 8005636:	bfb8      	it	lt
 8005638:	4618      	movlt	r0, r3
 800563a:	e734      	b.n	80054a6 <_printf_float+0xba>
 800563c:	2301      	movs	r3, #1
 800563e:	4652      	mov	r2, sl
 8005640:	4631      	mov	r1, r6
 8005642:	4628      	mov	r0, r5
 8005644:	47b8      	blx	r7
 8005646:	3001      	adds	r0, #1
 8005648:	f43f af2b 	beq.w	80054a2 <_printf_float+0xb6>
 800564c:	f109 0901 	add.w	r9, r9, #1
 8005650:	e7e8      	b.n	8005624 <_printf_float+0x238>
 8005652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005654:	2b00      	cmp	r3, #0
 8005656:	dc39      	bgt.n	80056cc <_printf_float+0x2e0>
 8005658:	4a1b      	ldr	r2, [pc, #108]	@ (80056c8 <_printf_float+0x2dc>)
 800565a:	2301      	movs	r3, #1
 800565c:	4631      	mov	r1, r6
 800565e:	4628      	mov	r0, r5
 8005660:	47b8      	blx	r7
 8005662:	3001      	adds	r0, #1
 8005664:	f43f af1d 	beq.w	80054a2 <_printf_float+0xb6>
 8005668:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800566c:	ea59 0303 	orrs.w	r3, r9, r3
 8005670:	d102      	bne.n	8005678 <_printf_float+0x28c>
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	07d9      	lsls	r1, r3, #31
 8005676:	d5d7      	bpl.n	8005628 <_printf_float+0x23c>
 8005678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800567c:	4631      	mov	r1, r6
 800567e:	4628      	mov	r0, r5
 8005680:	47b8      	blx	r7
 8005682:	3001      	adds	r0, #1
 8005684:	f43f af0d 	beq.w	80054a2 <_printf_float+0xb6>
 8005688:	f04f 0a00 	mov.w	sl, #0
 800568c:	f104 0b1a 	add.w	fp, r4, #26
 8005690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005692:	425b      	negs	r3, r3
 8005694:	4553      	cmp	r3, sl
 8005696:	dc01      	bgt.n	800569c <_printf_float+0x2b0>
 8005698:	464b      	mov	r3, r9
 800569a:	e793      	b.n	80055c4 <_printf_float+0x1d8>
 800569c:	2301      	movs	r3, #1
 800569e:	465a      	mov	r2, fp
 80056a0:	4631      	mov	r1, r6
 80056a2:	4628      	mov	r0, r5
 80056a4:	47b8      	blx	r7
 80056a6:	3001      	adds	r0, #1
 80056a8:	f43f aefb 	beq.w	80054a2 <_printf_float+0xb6>
 80056ac:	f10a 0a01 	add.w	sl, sl, #1
 80056b0:	e7ee      	b.n	8005690 <_printf_float+0x2a4>
 80056b2:	bf00      	nop
 80056b4:	7fefffff 	.word	0x7fefffff
 80056b8:	08009b40 	.word	0x08009b40
 80056bc:	08009b3c 	.word	0x08009b3c
 80056c0:	08009b48 	.word	0x08009b48
 80056c4:	08009b44 	.word	0x08009b44
 80056c8:	08009b4c 	.word	0x08009b4c
 80056cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056d2:	4553      	cmp	r3, sl
 80056d4:	bfa8      	it	ge
 80056d6:	4653      	movge	r3, sl
 80056d8:	2b00      	cmp	r3, #0
 80056da:	4699      	mov	r9, r3
 80056dc:	dc36      	bgt.n	800574c <_printf_float+0x360>
 80056de:	f04f 0b00 	mov.w	fp, #0
 80056e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056e6:	f104 021a 	add.w	r2, r4, #26
 80056ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056ec:	9306      	str	r3, [sp, #24]
 80056ee:	eba3 0309 	sub.w	r3, r3, r9
 80056f2:	455b      	cmp	r3, fp
 80056f4:	dc31      	bgt.n	800575a <_printf_float+0x36e>
 80056f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056f8:	459a      	cmp	sl, r3
 80056fa:	dc3a      	bgt.n	8005772 <_printf_float+0x386>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	07da      	lsls	r2, r3, #31
 8005700:	d437      	bmi.n	8005772 <_printf_float+0x386>
 8005702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005704:	ebaa 0903 	sub.w	r9, sl, r3
 8005708:	9b06      	ldr	r3, [sp, #24]
 800570a:	ebaa 0303 	sub.w	r3, sl, r3
 800570e:	4599      	cmp	r9, r3
 8005710:	bfa8      	it	ge
 8005712:	4699      	movge	r9, r3
 8005714:	f1b9 0f00 	cmp.w	r9, #0
 8005718:	dc33      	bgt.n	8005782 <_printf_float+0x396>
 800571a:	f04f 0800 	mov.w	r8, #0
 800571e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005722:	f104 0b1a 	add.w	fp, r4, #26
 8005726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005728:	ebaa 0303 	sub.w	r3, sl, r3
 800572c:	eba3 0309 	sub.w	r3, r3, r9
 8005730:	4543      	cmp	r3, r8
 8005732:	f77f af79 	ble.w	8005628 <_printf_float+0x23c>
 8005736:	2301      	movs	r3, #1
 8005738:	465a      	mov	r2, fp
 800573a:	4631      	mov	r1, r6
 800573c:	4628      	mov	r0, r5
 800573e:	47b8      	blx	r7
 8005740:	3001      	adds	r0, #1
 8005742:	f43f aeae 	beq.w	80054a2 <_printf_float+0xb6>
 8005746:	f108 0801 	add.w	r8, r8, #1
 800574a:	e7ec      	b.n	8005726 <_printf_float+0x33a>
 800574c:	4642      	mov	r2, r8
 800574e:	4631      	mov	r1, r6
 8005750:	4628      	mov	r0, r5
 8005752:	47b8      	blx	r7
 8005754:	3001      	adds	r0, #1
 8005756:	d1c2      	bne.n	80056de <_printf_float+0x2f2>
 8005758:	e6a3      	b.n	80054a2 <_printf_float+0xb6>
 800575a:	2301      	movs	r3, #1
 800575c:	4631      	mov	r1, r6
 800575e:	4628      	mov	r0, r5
 8005760:	9206      	str	r2, [sp, #24]
 8005762:	47b8      	blx	r7
 8005764:	3001      	adds	r0, #1
 8005766:	f43f ae9c 	beq.w	80054a2 <_printf_float+0xb6>
 800576a:	9a06      	ldr	r2, [sp, #24]
 800576c:	f10b 0b01 	add.w	fp, fp, #1
 8005770:	e7bb      	b.n	80056ea <_printf_float+0x2fe>
 8005772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005776:	4631      	mov	r1, r6
 8005778:	4628      	mov	r0, r5
 800577a:	47b8      	blx	r7
 800577c:	3001      	adds	r0, #1
 800577e:	d1c0      	bne.n	8005702 <_printf_float+0x316>
 8005780:	e68f      	b.n	80054a2 <_printf_float+0xb6>
 8005782:	9a06      	ldr	r2, [sp, #24]
 8005784:	464b      	mov	r3, r9
 8005786:	4442      	add	r2, r8
 8005788:	4631      	mov	r1, r6
 800578a:	4628      	mov	r0, r5
 800578c:	47b8      	blx	r7
 800578e:	3001      	adds	r0, #1
 8005790:	d1c3      	bne.n	800571a <_printf_float+0x32e>
 8005792:	e686      	b.n	80054a2 <_printf_float+0xb6>
 8005794:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005798:	f1ba 0f01 	cmp.w	sl, #1
 800579c:	dc01      	bgt.n	80057a2 <_printf_float+0x3b6>
 800579e:	07db      	lsls	r3, r3, #31
 80057a0:	d536      	bpl.n	8005810 <_printf_float+0x424>
 80057a2:	2301      	movs	r3, #1
 80057a4:	4642      	mov	r2, r8
 80057a6:	4631      	mov	r1, r6
 80057a8:	4628      	mov	r0, r5
 80057aa:	47b8      	blx	r7
 80057ac:	3001      	adds	r0, #1
 80057ae:	f43f ae78 	beq.w	80054a2 <_printf_float+0xb6>
 80057b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057b6:	4631      	mov	r1, r6
 80057b8:	4628      	mov	r0, r5
 80057ba:	47b8      	blx	r7
 80057bc:	3001      	adds	r0, #1
 80057be:	f43f ae70 	beq.w	80054a2 <_printf_float+0xb6>
 80057c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057c6:	2200      	movs	r2, #0
 80057c8:	2300      	movs	r3, #0
 80057ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057ce:	f7fb f98b 	bl	8000ae8 <__aeabi_dcmpeq>
 80057d2:	b9c0      	cbnz	r0, 8005806 <_printf_float+0x41a>
 80057d4:	4653      	mov	r3, sl
 80057d6:	f108 0201 	add.w	r2, r8, #1
 80057da:	4631      	mov	r1, r6
 80057dc:	4628      	mov	r0, r5
 80057de:	47b8      	blx	r7
 80057e0:	3001      	adds	r0, #1
 80057e2:	d10c      	bne.n	80057fe <_printf_float+0x412>
 80057e4:	e65d      	b.n	80054a2 <_printf_float+0xb6>
 80057e6:	2301      	movs	r3, #1
 80057e8:	465a      	mov	r2, fp
 80057ea:	4631      	mov	r1, r6
 80057ec:	4628      	mov	r0, r5
 80057ee:	47b8      	blx	r7
 80057f0:	3001      	adds	r0, #1
 80057f2:	f43f ae56 	beq.w	80054a2 <_printf_float+0xb6>
 80057f6:	f108 0801 	add.w	r8, r8, #1
 80057fa:	45d0      	cmp	r8, sl
 80057fc:	dbf3      	blt.n	80057e6 <_printf_float+0x3fa>
 80057fe:	464b      	mov	r3, r9
 8005800:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005804:	e6df      	b.n	80055c6 <_printf_float+0x1da>
 8005806:	f04f 0800 	mov.w	r8, #0
 800580a:	f104 0b1a 	add.w	fp, r4, #26
 800580e:	e7f4      	b.n	80057fa <_printf_float+0x40e>
 8005810:	2301      	movs	r3, #1
 8005812:	4642      	mov	r2, r8
 8005814:	e7e1      	b.n	80057da <_printf_float+0x3ee>
 8005816:	2301      	movs	r3, #1
 8005818:	464a      	mov	r2, r9
 800581a:	4631      	mov	r1, r6
 800581c:	4628      	mov	r0, r5
 800581e:	47b8      	blx	r7
 8005820:	3001      	adds	r0, #1
 8005822:	f43f ae3e 	beq.w	80054a2 <_printf_float+0xb6>
 8005826:	f108 0801 	add.w	r8, r8, #1
 800582a:	68e3      	ldr	r3, [r4, #12]
 800582c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800582e:	1a5b      	subs	r3, r3, r1
 8005830:	4543      	cmp	r3, r8
 8005832:	dcf0      	bgt.n	8005816 <_printf_float+0x42a>
 8005834:	e6fc      	b.n	8005630 <_printf_float+0x244>
 8005836:	f04f 0800 	mov.w	r8, #0
 800583a:	f104 0919 	add.w	r9, r4, #25
 800583e:	e7f4      	b.n	800582a <_printf_float+0x43e>

08005840 <_printf_common>:
 8005840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005844:	4616      	mov	r6, r2
 8005846:	4698      	mov	r8, r3
 8005848:	688a      	ldr	r2, [r1, #8]
 800584a:	690b      	ldr	r3, [r1, #16]
 800584c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005850:	4293      	cmp	r3, r2
 8005852:	bfb8      	it	lt
 8005854:	4613      	movlt	r3, r2
 8005856:	6033      	str	r3, [r6, #0]
 8005858:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800585c:	4607      	mov	r7, r0
 800585e:	460c      	mov	r4, r1
 8005860:	b10a      	cbz	r2, 8005866 <_printf_common+0x26>
 8005862:	3301      	adds	r3, #1
 8005864:	6033      	str	r3, [r6, #0]
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	0699      	lsls	r1, r3, #26
 800586a:	bf42      	ittt	mi
 800586c:	6833      	ldrmi	r3, [r6, #0]
 800586e:	3302      	addmi	r3, #2
 8005870:	6033      	strmi	r3, [r6, #0]
 8005872:	6825      	ldr	r5, [r4, #0]
 8005874:	f015 0506 	ands.w	r5, r5, #6
 8005878:	d106      	bne.n	8005888 <_printf_common+0x48>
 800587a:	f104 0a19 	add.w	sl, r4, #25
 800587e:	68e3      	ldr	r3, [r4, #12]
 8005880:	6832      	ldr	r2, [r6, #0]
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	42ab      	cmp	r3, r5
 8005886:	dc26      	bgt.n	80058d6 <_printf_common+0x96>
 8005888:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800588c:	6822      	ldr	r2, [r4, #0]
 800588e:	3b00      	subs	r3, #0
 8005890:	bf18      	it	ne
 8005892:	2301      	movne	r3, #1
 8005894:	0692      	lsls	r2, r2, #26
 8005896:	d42b      	bmi.n	80058f0 <_printf_common+0xb0>
 8005898:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800589c:	4641      	mov	r1, r8
 800589e:	4638      	mov	r0, r7
 80058a0:	47c8      	blx	r9
 80058a2:	3001      	adds	r0, #1
 80058a4:	d01e      	beq.n	80058e4 <_printf_common+0xa4>
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	6922      	ldr	r2, [r4, #16]
 80058aa:	f003 0306 	and.w	r3, r3, #6
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	bf02      	ittt	eq
 80058b2:	68e5      	ldreq	r5, [r4, #12]
 80058b4:	6833      	ldreq	r3, [r6, #0]
 80058b6:	1aed      	subeq	r5, r5, r3
 80058b8:	68a3      	ldr	r3, [r4, #8]
 80058ba:	bf0c      	ite	eq
 80058bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058c0:	2500      	movne	r5, #0
 80058c2:	4293      	cmp	r3, r2
 80058c4:	bfc4      	itt	gt
 80058c6:	1a9b      	subgt	r3, r3, r2
 80058c8:	18ed      	addgt	r5, r5, r3
 80058ca:	2600      	movs	r6, #0
 80058cc:	341a      	adds	r4, #26
 80058ce:	42b5      	cmp	r5, r6
 80058d0:	d11a      	bne.n	8005908 <_printf_common+0xc8>
 80058d2:	2000      	movs	r0, #0
 80058d4:	e008      	b.n	80058e8 <_printf_common+0xa8>
 80058d6:	2301      	movs	r3, #1
 80058d8:	4652      	mov	r2, sl
 80058da:	4641      	mov	r1, r8
 80058dc:	4638      	mov	r0, r7
 80058de:	47c8      	blx	r9
 80058e0:	3001      	adds	r0, #1
 80058e2:	d103      	bne.n	80058ec <_printf_common+0xac>
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295
 80058e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ec:	3501      	adds	r5, #1
 80058ee:	e7c6      	b.n	800587e <_printf_common+0x3e>
 80058f0:	18e1      	adds	r1, r4, r3
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	2030      	movs	r0, #48	@ 0x30
 80058f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058fa:	4422      	add	r2, r4
 80058fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005900:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005904:	3302      	adds	r3, #2
 8005906:	e7c7      	b.n	8005898 <_printf_common+0x58>
 8005908:	2301      	movs	r3, #1
 800590a:	4622      	mov	r2, r4
 800590c:	4641      	mov	r1, r8
 800590e:	4638      	mov	r0, r7
 8005910:	47c8      	blx	r9
 8005912:	3001      	adds	r0, #1
 8005914:	d0e6      	beq.n	80058e4 <_printf_common+0xa4>
 8005916:	3601      	adds	r6, #1
 8005918:	e7d9      	b.n	80058ce <_printf_common+0x8e>
	...

0800591c <_printf_i>:
 800591c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005920:	7e0f      	ldrb	r7, [r1, #24]
 8005922:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005924:	2f78      	cmp	r7, #120	@ 0x78
 8005926:	4691      	mov	r9, r2
 8005928:	4680      	mov	r8, r0
 800592a:	460c      	mov	r4, r1
 800592c:	469a      	mov	sl, r3
 800592e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005932:	d807      	bhi.n	8005944 <_printf_i+0x28>
 8005934:	2f62      	cmp	r7, #98	@ 0x62
 8005936:	d80a      	bhi.n	800594e <_printf_i+0x32>
 8005938:	2f00      	cmp	r7, #0
 800593a:	f000 80d1 	beq.w	8005ae0 <_printf_i+0x1c4>
 800593e:	2f58      	cmp	r7, #88	@ 0x58
 8005940:	f000 80b8 	beq.w	8005ab4 <_printf_i+0x198>
 8005944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005948:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800594c:	e03a      	b.n	80059c4 <_printf_i+0xa8>
 800594e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005952:	2b15      	cmp	r3, #21
 8005954:	d8f6      	bhi.n	8005944 <_printf_i+0x28>
 8005956:	a101      	add	r1, pc, #4	@ (adr r1, 800595c <_printf_i+0x40>)
 8005958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800595c:	080059b5 	.word	0x080059b5
 8005960:	080059c9 	.word	0x080059c9
 8005964:	08005945 	.word	0x08005945
 8005968:	08005945 	.word	0x08005945
 800596c:	08005945 	.word	0x08005945
 8005970:	08005945 	.word	0x08005945
 8005974:	080059c9 	.word	0x080059c9
 8005978:	08005945 	.word	0x08005945
 800597c:	08005945 	.word	0x08005945
 8005980:	08005945 	.word	0x08005945
 8005984:	08005945 	.word	0x08005945
 8005988:	08005ac7 	.word	0x08005ac7
 800598c:	080059f3 	.word	0x080059f3
 8005990:	08005a81 	.word	0x08005a81
 8005994:	08005945 	.word	0x08005945
 8005998:	08005945 	.word	0x08005945
 800599c:	08005ae9 	.word	0x08005ae9
 80059a0:	08005945 	.word	0x08005945
 80059a4:	080059f3 	.word	0x080059f3
 80059a8:	08005945 	.word	0x08005945
 80059ac:	08005945 	.word	0x08005945
 80059b0:	08005a89 	.word	0x08005a89
 80059b4:	6833      	ldr	r3, [r6, #0]
 80059b6:	1d1a      	adds	r2, r3, #4
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6032      	str	r2, [r6, #0]
 80059bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059c4:	2301      	movs	r3, #1
 80059c6:	e09c      	b.n	8005b02 <_printf_i+0x1e6>
 80059c8:	6833      	ldr	r3, [r6, #0]
 80059ca:	6820      	ldr	r0, [r4, #0]
 80059cc:	1d19      	adds	r1, r3, #4
 80059ce:	6031      	str	r1, [r6, #0]
 80059d0:	0606      	lsls	r6, r0, #24
 80059d2:	d501      	bpl.n	80059d8 <_printf_i+0xbc>
 80059d4:	681d      	ldr	r5, [r3, #0]
 80059d6:	e003      	b.n	80059e0 <_printf_i+0xc4>
 80059d8:	0645      	lsls	r5, r0, #25
 80059da:	d5fb      	bpl.n	80059d4 <_printf_i+0xb8>
 80059dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059e0:	2d00      	cmp	r5, #0
 80059e2:	da03      	bge.n	80059ec <_printf_i+0xd0>
 80059e4:	232d      	movs	r3, #45	@ 0x2d
 80059e6:	426d      	negs	r5, r5
 80059e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059ec:	4858      	ldr	r0, [pc, #352]	@ (8005b50 <_printf_i+0x234>)
 80059ee:	230a      	movs	r3, #10
 80059f0:	e011      	b.n	8005a16 <_printf_i+0xfa>
 80059f2:	6821      	ldr	r1, [r4, #0]
 80059f4:	6833      	ldr	r3, [r6, #0]
 80059f6:	0608      	lsls	r0, r1, #24
 80059f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80059fc:	d402      	bmi.n	8005a04 <_printf_i+0xe8>
 80059fe:	0649      	lsls	r1, r1, #25
 8005a00:	bf48      	it	mi
 8005a02:	b2ad      	uxthmi	r5, r5
 8005a04:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a06:	4852      	ldr	r0, [pc, #328]	@ (8005b50 <_printf_i+0x234>)
 8005a08:	6033      	str	r3, [r6, #0]
 8005a0a:	bf14      	ite	ne
 8005a0c:	230a      	movne	r3, #10
 8005a0e:	2308      	moveq	r3, #8
 8005a10:	2100      	movs	r1, #0
 8005a12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a16:	6866      	ldr	r6, [r4, #4]
 8005a18:	60a6      	str	r6, [r4, #8]
 8005a1a:	2e00      	cmp	r6, #0
 8005a1c:	db05      	blt.n	8005a2a <_printf_i+0x10e>
 8005a1e:	6821      	ldr	r1, [r4, #0]
 8005a20:	432e      	orrs	r6, r5
 8005a22:	f021 0104 	bic.w	r1, r1, #4
 8005a26:	6021      	str	r1, [r4, #0]
 8005a28:	d04b      	beq.n	8005ac2 <_printf_i+0x1a6>
 8005a2a:	4616      	mov	r6, r2
 8005a2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a30:	fb03 5711 	mls	r7, r3, r1, r5
 8005a34:	5dc7      	ldrb	r7, [r0, r7]
 8005a36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a3a:	462f      	mov	r7, r5
 8005a3c:	42bb      	cmp	r3, r7
 8005a3e:	460d      	mov	r5, r1
 8005a40:	d9f4      	bls.n	8005a2c <_printf_i+0x110>
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d10b      	bne.n	8005a5e <_printf_i+0x142>
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	07df      	lsls	r7, r3, #31
 8005a4a:	d508      	bpl.n	8005a5e <_printf_i+0x142>
 8005a4c:	6923      	ldr	r3, [r4, #16]
 8005a4e:	6861      	ldr	r1, [r4, #4]
 8005a50:	4299      	cmp	r1, r3
 8005a52:	bfde      	ittt	le
 8005a54:	2330      	movle	r3, #48	@ 0x30
 8005a56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a5e:	1b92      	subs	r2, r2, r6
 8005a60:	6122      	str	r2, [r4, #16]
 8005a62:	f8cd a000 	str.w	sl, [sp]
 8005a66:	464b      	mov	r3, r9
 8005a68:	aa03      	add	r2, sp, #12
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	f7ff fee7 	bl	8005840 <_printf_common>
 8005a72:	3001      	adds	r0, #1
 8005a74:	d14a      	bne.n	8005b0c <_printf_i+0x1f0>
 8005a76:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7a:	b004      	add	sp, #16
 8005a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	f043 0320 	orr.w	r3, r3, #32
 8005a86:	6023      	str	r3, [r4, #0]
 8005a88:	4832      	ldr	r0, [pc, #200]	@ (8005b54 <_printf_i+0x238>)
 8005a8a:	2778      	movs	r7, #120	@ 0x78
 8005a8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	6831      	ldr	r1, [r6, #0]
 8005a94:	061f      	lsls	r7, r3, #24
 8005a96:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a9a:	d402      	bmi.n	8005aa2 <_printf_i+0x186>
 8005a9c:	065f      	lsls	r7, r3, #25
 8005a9e:	bf48      	it	mi
 8005aa0:	b2ad      	uxthmi	r5, r5
 8005aa2:	6031      	str	r1, [r6, #0]
 8005aa4:	07d9      	lsls	r1, r3, #31
 8005aa6:	bf44      	itt	mi
 8005aa8:	f043 0320 	orrmi.w	r3, r3, #32
 8005aac:	6023      	strmi	r3, [r4, #0]
 8005aae:	b11d      	cbz	r5, 8005ab8 <_printf_i+0x19c>
 8005ab0:	2310      	movs	r3, #16
 8005ab2:	e7ad      	b.n	8005a10 <_printf_i+0xf4>
 8005ab4:	4826      	ldr	r0, [pc, #152]	@ (8005b50 <_printf_i+0x234>)
 8005ab6:	e7e9      	b.n	8005a8c <_printf_i+0x170>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	f023 0320 	bic.w	r3, r3, #32
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	e7f6      	b.n	8005ab0 <_printf_i+0x194>
 8005ac2:	4616      	mov	r6, r2
 8005ac4:	e7bd      	b.n	8005a42 <_printf_i+0x126>
 8005ac6:	6833      	ldr	r3, [r6, #0]
 8005ac8:	6825      	ldr	r5, [r4, #0]
 8005aca:	6961      	ldr	r1, [r4, #20]
 8005acc:	1d18      	adds	r0, r3, #4
 8005ace:	6030      	str	r0, [r6, #0]
 8005ad0:	062e      	lsls	r6, r5, #24
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	d501      	bpl.n	8005ada <_printf_i+0x1be>
 8005ad6:	6019      	str	r1, [r3, #0]
 8005ad8:	e002      	b.n	8005ae0 <_printf_i+0x1c4>
 8005ada:	0668      	lsls	r0, r5, #25
 8005adc:	d5fb      	bpl.n	8005ad6 <_printf_i+0x1ba>
 8005ade:	8019      	strh	r1, [r3, #0]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	6123      	str	r3, [r4, #16]
 8005ae4:	4616      	mov	r6, r2
 8005ae6:	e7bc      	b.n	8005a62 <_printf_i+0x146>
 8005ae8:	6833      	ldr	r3, [r6, #0]
 8005aea:	1d1a      	adds	r2, r3, #4
 8005aec:	6032      	str	r2, [r6, #0]
 8005aee:	681e      	ldr	r6, [r3, #0]
 8005af0:	6862      	ldr	r2, [r4, #4]
 8005af2:	2100      	movs	r1, #0
 8005af4:	4630      	mov	r0, r6
 8005af6:	f7fa fb7b 	bl	80001f0 <memchr>
 8005afa:	b108      	cbz	r0, 8005b00 <_printf_i+0x1e4>
 8005afc:	1b80      	subs	r0, r0, r6
 8005afe:	6060      	str	r0, [r4, #4]
 8005b00:	6863      	ldr	r3, [r4, #4]
 8005b02:	6123      	str	r3, [r4, #16]
 8005b04:	2300      	movs	r3, #0
 8005b06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b0a:	e7aa      	b.n	8005a62 <_printf_i+0x146>
 8005b0c:	6923      	ldr	r3, [r4, #16]
 8005b0e:	4632      	mov	r2, r6
 8005b10:	4649      	mov	r1, r9
 8005b12:	4640      	mov	r0, r8
 8005b14:	47d0      	blx	sl
 8005b16:	3001      	adds	r0, #1
 8005b18:	d0ad      	beq.n	8005a76 <_printf_i+0x15a>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	079b      	lsls	r3, r3, #30
 8005b1e:	d413      	bmi.n	8005b48 <_printf_i+0x22c>
 8005b20:	68e0      	ldr	r0, [r4, #12]
 8005b22:	9b03      	ldr	r3, [sp, #12]
 8005b24:	4298      	cmp	r0, r3
 8005b26:	bfb8      	it	lt
 8005b28:	4618      	movlt	r0, r3
 8005b2a:	e7a6      	b.n	8005a7a <_printf_i+0x15e>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	4632      	mov	r2, r6
 8005b30:	4649      	mov	r1, r9
 8005b32:	4640      	mov	r0, r8
 8005b34:	47d0      	blx	sl
 8005b36:	3001      	adds	r0, #1
 8005b38:	d09d      	beq.n	8005a76 <_printf_i+0x15a>
 8005b3a:	3501      	adds	r5, #1
 8005b3c:	68e3      	ldr	r3, [r4, #12]
 8005b3e:	9903      	ldr	r1, [sp, #12]
 8005b40:	1a5b      	subs	r3, r3, r1
 8005b42:	42ab      	cmp	r3, r5
 8005b44:	dcf2      	bgt.n	8005b2c <_printf_i+0x210>
 8005b46:	e7eb      	b.n	8005b20 <_printf_i+0x204>
 8005b48:	2500      	movs	r5, #0
 8005b4a:	f104 0619 	add.w	r6, r4, #25
 8005b4e:	e7f5      	b.n	8005b3c <_printf_i+0x220>
 8005b50:	08009b4e 	.word	0x08009b4e
 8005b54:	08009b5f 	.word	0x08009b5f

08005b58 <_scanf_float>:
 8005b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5c:	b087      	sub	sp, #28
 8005b5e:	4691      	mov	r9, r2
 8005b60:	9303      	str	r3, [sp, #12]
 8005b62:	688b      	ldr	r3, [r1, #8]
 8005b64:	1e5a      	subs	r2, r3, #1
 8005b66:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005b6a:	bf81      	itttt	hi
 8005b6c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005b70:	eb03 0b05 	addhi.w	fp, r3, r5
 8005b74:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005b78:	608b      	strhi	r3, [r1, #8]
 8005b7a:	680b      	ldr	r3, [r1, #0]
 8005b7c:	460a      	mov	r2, r1
 8005b7e:	f04f 0500 	mov.w	r5, #0
 8005b82:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005b86:	f842 3b1c 	str.w	r3, [r2], #28
 8005b8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005b8e:	4680      	mov	r8, r0
 8005b90:	460c      	mov	r4, r1
 8005b92:	bf98      	it	ls
 8005b94:	f04f 0b00 	movls.w	fp, #0
 8005b98:	9201      	str	r2, [sp, #4]
 8005b9a:	4616      	mov	r6, r2
 8005b9c:	46aa      	mov	sl, r5
 8005b9e:	462f      	mov	r7, r5
 8005ba0:	9502      	str	r5, [sp, #8]
 8005ba2:	68a2      	ldr	r2, [r4, #8]
 8005ba4:	b15a      	cbz	r2, 8005bbe <_scanf_float+0x66>
 8005ba6:	f8d9 3000 	ldr.w	r3, [r9]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b4e      	cmp	r3, #78	@ 0x4e
 8005bae:	d863      	bhi.n	8005c78 <_scanf_float+0x120>
 8005bb0:	2b40      	cmp	r3, #64	@ 0x40
 8005bb2:	d83b      	bhi.n	8005c2c <_scanf_float+0xd4>
 8005bb4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005bb8:	b2c8      	uxtb	r0, r1
 8005bba:	280e      	cmp	r0, #14
 8005bbc:	d939      	bls.n	8005c32 <_scanf_float+0xda>
 8005bbe:	b11f      	cbz	r7, 8005bc8 <_scanf_float+0x70>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bc6:	6023      	str	r3, [r4, #0]
 8005bc8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bcc:	f1ba 0f01 	cmp.w	sl, #1
 8005bd0:	f200 8114 	bhi.w	8005dfc <_scanf_float+0x2a4>
 8005bd4:	9b01      	ldr	r3, [sp, #4]
 8005bd6:	429e      	cmp	r6, r3
 8005bd8:	f200 8105 	bhi.w	8005de6 <_scanf_float+0x28e>
 8005bdc:	2001      	movs	r0, #1
 8005bde:	b007      	add	sp, #28
 8005be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005be8:	2a0d      	cmp	r2, #13
 8005bea:	d8e8      	bhi.n	8005bbe <_scanf_float+0x66>
 8005bec:	a101      	add	r1, pc, #4	@ (adr r1, 8005bf4 <_scanf_float+0x9c>)
 8005bee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005bf2:	bf00      	nop
 8005bf4:	08005d3d 	.word	0x08005d3d
 8005bf8:	08005bbf 	.word	0x08005bbf
 8005bfc:	08005bbf 	.word	0x08005bbf
 8005c00:	08005bbf 	.word	0x08005bbf
 8005c04:	08005d99 	.word	0x08005d99
 8005c08:	08005d73 	.word	0x08005d73
 8005c0c:	08005bbf 	.word	0x08005bbf
 8005c10:	08005bbf 	.word	0x08005bbf
 8005c14:	08005d4b 	.word	0x08005d4b
 8005c18:	08005bbf 	.word	0x08005bbf
 8005c1c:	08005bbf 	.word	0x08005bbf
 8005c20:	08005bbf 	.word	0x08005bbf
 8005c24:	08005bbf 	.word	0x08005bbf
 8005c28:	08005d07 	.word	0x08005d07
 8005c2c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005c30:	e7da      	b.n	8005be8 <_scanf_float+0x90>
 8005c32:	290e      	cmp	r1, #14
 8005c34:	d8c3      	bhi.n	8005bbe <_scanf_float+0x66>
 8005c36:	a001      	add	r0, pc, #4	@ (adr r0, 8005c3c <_scanf_float+0xe4>)
 8005c38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005c3c:	08005cf7 	.word	0x08005cf7
 8005c40:	08005bbf 	.word	0x08005bbf
 8005c44:	08005cf7 	.word	0x08005cf7
 8005c48:	08005d87 	.word	0x08005d87
 8005c4c:	08005bbf 	.word	0x08005bbf
 8005c50:	08005c99 	.word	0x08005c99
 8005c54:	08005cdd 	.word	0x08005cdd
 8005c58:	08005cdd 	.word	0x08005cdd
 8005c5c:	08005cdd 	.word	0x08005cdd
 8005c60:	08005cdd 	.word	0x08005cdd
 8005c64:	08005cdd 	.word	0x08005cdd
 8005c68:	08005cdd 	.word	0x08005cdd
 8005c6c:	08005cdd 	.word	0x08005cdd
 8005c70:	08005cdd 	.word	0x08005cdd
 8005c74:	08005cdd 	.word	0x08005cdd
 8005c78:	2b6e      	cmp	r3, #110	@ 0x6e
 8005c7a:	d809      	bhi.n	8005c90 <_scanf_float+0x138>
 8005c7c:	2b60      	cmp	r3, #96	@ 0x60
 8005c7e:	d8b1      	bhi.n	8005be4 <_scanf_float+0x8c>
 8005c80:	2b54      	cmp	r3, #84	@ 0x54
 8005c82:	d07b      	beq.n	8005d7c <_scanf_float+0x224>
 8005c84:	2b59      	cmp	r3, #89	@ 0x59
 8005c86:	d19a      	bne.n	8005bbe <_scanf_float+0x66>
 8005c88:	2d07      	cmp	r5, #7
 8005c8a:	d198      	bne.n	8005bbe <_scanf_float+0x66>
 8005c8c:	2508      	movs	r5, #8
 8005c8e:	e02f      	b.n	8005cf0 <_scanf_float+0x198>
 8005c90:	2b74      	cmp	r3, #116	@ 0x74
 8005c92:	d073      	beq.n	8005d7c <_scanf_float+0x224>
 8005c94:	2b79      	cmp	r3, #121	@ 0x79
 8005c96:	e7f6      	b.n	8005c86 <_scanf_float+0x12e>
 8005c98:	6821      	ldr	r1, [r4, #0]
 8005c9a:	05c8      	lsls	r0, r1, #23
 8005c9c:	d51e      	bpl.n	8005cdc <_scanf_float+0x184>
 8005c9e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005ca2:	6021      	str	r1, [r4, #0]
 8005ca4:	3701      	adds	r7, #1
 8005ca6:	f1bb 0f00 	cmp.w	fp, #0
 8005caa:	d003      	beq.n	8005cb4 <_scanf_float+0x15c>
 8005cac:	3201      	adds	r2, #1
 8005cae:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cb2:	60a2      	str	r2, [r4, #8]
 8005cb4:	68a3      	ldr	r3, [r4, #8]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	60a3      	str	r3, [r4, #8]
 8005cba:	6923      	ldr	r3, [r4, #16]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	6123      	str	r3, [r4, #16]
 8005cc0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f8c9 3004 	str.w	r3, [r9, #4]
 8005ccc:	f340 8082 	ble.w	8005dd4 <_scanf_float+0x27c>
 8005cd0:	f8d9 3000 	ldr.w	r3, [r9]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	f8c9 3000 	str.w	r3, [r9]
 8005cda:	e762      	b.n	8005ba2 <_scanf_float+0x4a>
 8005cdc:	eb1a 0105 	adds.w	r1, sl, r5
 8005ce0:	f47f af6d 	bne.w	8005bbe <_scanf_float+0x66>
 8005ce4:	6822      	ldr	r2, [r4, #0]
 8005ce6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005cea:	6022      	str	r2, [r4, #0]
 8005cec:	460d      	mov	r5, r1
 8005cee:	468a      	mov	sl, r1
 8005cf0:	f806 3b01 	strb.w	r3, [r6], #1
 8005cf4:	e7de      	b.n	8005cb4 <_scanf_float+0x15c>
 8005cf6:	6822      	ldr	r2, [r4, #0]
 8005cf8:	0610      	lsls	r0, r2, #24
 8005cfa:	f57f af60 	bpl.w	8005bbe <_scanf_float+0x66>
 8005cfe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d02:	6022      	str	r2, [r4, #0]
 8005d04:	e7f4      	b.n	8005cf0 <_scanf_float+0x198>
 8005d06:	f1ba 0f00 	cmp.w	sl, #0
 8005d0a:	d10c      	bne.n	8005d26 <_scanf_float+0x1ce>
 8005d0c:	b977      	cbnz	r7, 8005d2c <_scanf_float+0x1d4>
 8005d0e:	6822      	ldr	r2, [r4, #0]
 8005d10:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005d14:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005d18:	d108      	bne.n	8005d2c <_scanf_float+0x1d4>
 8005d1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005d1e:	6022      	str	r2, [r4, #0]
 8005d20:	f04f 0a01 	mov.w	sl, #1
 8005d24:	e7e4      	b.n	8005cf0 <_scanf_float+0x198>
 8005d26:	f1ba 0f02 	cmp.w	sl, #2
 8005d2a:	d050      	beq.n	8005dce <_scanf_float+0x276>
 8005d2c:	2d01      	cmp	r5, #1
 8005d2e:	d002      	beq.n	8005d36 <_scanf_float+0x1de>
 8005d30:	2d04      	cmp	r5, #4
 8005d32:	f47f af44 	bne.w	8005bbe <_scanf_float+0x66>
 8005d36:	3501      	adds	r5, #1
 8005d38:	b2ed      	uxtb	r5, r5
 8005d3a:	e7d9      	b.n	8005cf0 <_scanf_float+0x198>
 8005d3c:	f1ba 0f01 	cmp.w	sl, #1
 8005d40:	f47f af3d 	bne.w	8005bbe <_scanf_float+0x66>
 8005d44:	f04f 0a02 	mov.w	sl, #2
 8005d48:	e7d2      	b.n	8005cf0 <_scanf_float+0x198>
 8005d4a:	b975      	cbnz	r5, 8005d6a <_scanf_float+0x212>
 8005d4c:	2f00      	cmp	r7, #0
 8005d4e:	f47f af37 	bne.w	8005bc0 <_scanf_float+0x68>
 8005d52:	6822      	ldr	r2, [r4, #0]
 8005d54:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005d58:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005d5c:	f040 8103 	bne.w	8005f66 <_scanf_float+0x40e>
 8005d60:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005d64:	6022      	str	r2, [r4, #0]
 8005d66:	2501      	movs	r5, #1
 8005d68:	e7c2      	b.n	8005cf0 <_scanf_float+0x198>
 8005d6a:	2d03      	cmp	r5, #3
 8005d6c:	d0e3      	beq.n	8005d36 <_scanf_float+0x1de>
 8005d6e:	2d05      	cmp	r5, #5
 8005d70:	e7df      	b.n	8005d32 <_scanf_float+0x1da>
 8005d72:	2d02      	cmp	r5, #2
 8005d74:	f47f af23 	bne.w	8005bbe <_scanf_float+0x66>
 8005d78:	2503      	movs	r5, #3
 8005d7a:	e7b9      	b.n	8005cf0 <_scanf_float+0x198>
 8005d7c:	2d06      	cmp	r5, #6
 8005d7e:	f47f af1e 	bne.w	8005bbe <_scanf_float+0x66>
 8005d82:	2507      	movs	r5, #7
 8005d84:	e7b4      	b.n	8005cf0 <_scanf_float+0x198>
 8005d86:	6822      	ldr	r2, [r4, #0]
 8005d88:	0591      	lsls	r1, r2, #22
 8005d8a:	f57f af18 	bpl.w	8005bbe <_scanf_float+0x66>
 8005d8e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005d92:	6022      	str	r2, [r4, #0]
 8005d94:	9702      	str	r7, [sp, #8]
 8005d96:	e7ab      	b.n	8005cf0 <_scanf_float+0x198>
 8005d98:	6822      	ldr	r2, [r4, #0]
 8005d9a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005d9e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005da2:	d005      	beq.n	8005db0 <_scanf_float+0x258>
 8005da4:	0550      	lsls	r0, r2, #21
 8005da6:	f57f af0a 	bpl.w	8005bbe <_scanf_float+0x66>
 8005daa:	2f00      	cmp	r7, #0
 8005dac:	f000 80db 	beq.w	8005f66 <_scanf_float+0x40e>
 8005db0:	0591      	lsls	r1, r2, #22
 8005db2:	bf58      	it	pl
 8005db4:	9902      	ldrpl	r1, [sp, #8]
 8005db6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005dba:	bf58      	it	pl
 8005dbc:	1a79      	subpl	r1, r7, r1
 8005dbe:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005dc2:	bf58      	it	pl
 8005dc4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005dc8:	6022      	str	r2, [r4, #0]
 8005dca:	2700      	movs	r7, #0
 8005dcc:	e790      	b.n	8005cf0 <_scanf_float+0x198>
 8005dce:	f04f 0a03 	mov.w	sl, #3
 8005dd2:	e78d      	b.n	8005cf0 <_scanf_float+0x198>
 8005dd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005dd8:	4649      	mov	r1, r9
 8005dda:	4640      	mov	r0, r8
 8005ddc:	4798      	blx	r3
 8005dde:	2800      	cmp	r0, #0
 8005de0:	f43f aedf 	beq.w	8005ba2 <_scanf_float+0x4a>
 8005de4:	e6eb      	b.n	8005bbe <_scanf_float+0x66>
 8005de6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005dea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005dee:	464a      	mov	r2, r9
 8005df0:	4640      	mov	r0, r8
 8005df2:	4798      	blx	r3
 8005df4:	6923      	ldr	r3, [r4, #16]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	6123      	str	r3, [r4, #16]
 8005dfa:	e6eb      	b.n	8005bd4 <_scanf_float+0x7c>
 8005dfc:	1e6b      	subs	r3, r5, #1
 8005dfe:	2b06      	cmp	r3, #6
 8005e00:	d824      	bhi.n	8005e4c <_scanf_float+0x2f4>
 8005e02:	2d02      	cmp	r5, #2
 8005e04:	d836      	bhi.n	8005e74 <_scanf_float+0x31c>
 8005e06:	9b01      	ldr	r3, [sp, #4]
 8005e08:	429e      	cmp	r6, r3
 8005e0a:	f67f aee7 	bls.w	8005bdc <_scanf_float+0x84>
 8005e0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e16:	464a      	mov	r2, r9
 8005e18:	4640      	mov	r0, r8
 8005e1a:	4798      	blx	r3
 8005e1c:	6923      	ldr	r3, [r4, #16]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	6123      	str	r3, [r4, #16]
 8005e22:	e7f0      	b.n	8005e06 <_scanf_float+0x2ae>
 8005e24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e28:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005e2c:	464a      	mov	r2, r9
 8005e2e:	4640      	mov	r0, r8
 8005e30:	4798      	blx	r3
 8005e32:	6923      	ldr	r3, [r4, #16]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	6123      	str	r3, [r4, #16]
 8005e38:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e3c:	fa5f fa8a 	uxtb.w	sl, sl
 8005e40:	f1ba 0f02 	cmp.w	sl, #2
 8005e44:	d1ee      	bne.n	8005e24 <_scanf_float+0x2cc>
 8005e46:	3d03      	subs	r5, #3
 8005e48:	b2ed      	uxtb	r5, r5
 8005e4a:	1b76      	subs	r6, r6, r5
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	05da      	lsls	r2, r3, #23
 8005e50:	d530      	bpl.n	8005eb4 <_scanf_float+0x35c>
 8005e52:	055b      	lsls	r3, r3, #21
 8005e54:	d511      	bpl.n	8005e7a <_scanf_float+0x322>
 8005e56:	9b01      	ldr	r3, [sp, #4]
 8005e58:	429e      	cmp	r6, r3
 8005e5a:	f67f aebf 	bls.w	8005bdc <_scanf_float+0x84>
 8005e5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e66:	464a      	mov	r2, r9
 8005e68:	4640      	mov	r0, r8
 8005e6a:	4798      	blx	r3
 8005e6c:	6923      	ldr	r3, [r4, #16]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	6123      	str	r3, [r4, #16]
 8005e72:	e7f0      	b.n	8005e56 <_scanf_float+0x2fe>
 8005e74:	46aa      	mov	sl, r5
 8005e76:	46b3      	mov	fp, r6
 8005e78:	e7de      	b.n	8005e38 <_scanf_float+0x2e0>
 8005e7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005e7e:	6923      	ldr	r3, [r4, #16]
 8005e80:	2965      	cmp	r1, #101	@ 0x65
 8005e82:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e86:	f106 35ff 	add.w	r5, r6, #4294967295
 8005e8a:	6123      	str	r3, [r4, #16]
 8005e8c:	d00c      	beq.n	8005ea8 <_scanf_float+0x350>
 8005e8e:	2945      	cmp	r1, #69	@ 0x45
 8005e90:	d00a      	beq.n	8005ea8 <_scanf_float+0x350>
 8005e92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e96:	464a      	mov	r2, r9
 8005e98:	4640      	mov	r0, r8
 8005e9a:	4798      	blx	r3
 8005e9c:	6923      	ldr	r3, [r4, #16]
 8005e9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	1eb5      	subs	r5, r6, #2
 8005ea6:	6123      	str	r3, [r4, #16]
 8005ea8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005eac:	464a      	mov	r2, r9
 8005eae:	4640      	mov	r0, r8
 8005eb0:	4798      	blx	r3
 8005eb2:	462e      	mov	r6, r5
 8005eb4:	6822      	ldr	r2, [r4, #0]
 8005eb6:	f012 0210 	ands.w	r2, r2, #16
 8005eba:	d001      	beq.n	8005ec0 <_scanf_float+0x368>
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	e68e      	b.n	8005bde <_scanf_float+0x86>
 8005ec0:	7032      	strb	r2, [r6, #0]
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ecc:	d125      	bne.n	8005f1a <_scanf_float+0x3c2>
 8005ece:	9b02      	ldr	r3, [sp, #8]
 8005ed0:	429f      	cmp	r7, r3
 8005ed2:	d00a      	beq.n	8005eea <_scanf_float+0x392>
 8005ed4:	1bda      	subs	r2, r3, r7
 8005ed6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005eda:	429e      	cmp	r6, r3
 8005edc:	bf28      	it	cs
 8005ede:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005ee2:	4922      	ldr	r1, [pc, #136]	@ (8005f6c <_scanf_float+0x414>)
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	f000 f907 	bl	80060f8 <siprintf>
 8005eea:	9901      	ldr	r1, [sp, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	4640      	mov	r0, r8
 8005ef0:	f002 fc2e 	bl	8008750 <_strtod_r>
 8005ef4:	9b03      	ldr	r3, [sp, #12]
 8005ef6:	6821      	ldr	r1, [r4, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f011 0f02 	tst.w	r1, #2
 8005efe:	ec57 6b10 	vmov	r6, r7, d0
 8005f02:	f103 0204 	add.w	r2, r3, #4
 8005f06:	d015      	beq.n	8005f34 <_scanf_float+0x3dc>
 8005f08:	9903      	ldr	r1, [sp, #12]
 8005f0a:	600a      	str	r2, [r1, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	e9c3 6700 	strd	r6, r7, [r3]
 8005f12:	68e3      	ldr	r3, [r4, #12]
 8005f14:	3301      	adds	r3, #1
 8005f16:	60e3      	str	r3, [r4, #12]
 8005f18:	e7d0      	b.n	8005ebc <_scanf_float+0x364>
 8005f1a:	9b04      	ldr	r3, [sp, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0e4      	beq.n	8005eea <_scanf_float+0x392>
 8005f20:	9905      	ldr	r1, [sp, #20]
 8005f22:	230a      	movs	r3, #10
 8005f24:	3101      	adds	r1, #1
 8005f26:	4640      	mov	r0, r8
 8005f28:	f002 fc92 	bl	8008850 <_strtol_r>
 8005f2c:	9b04      	ldr	r3, [sp, #16]
 8005f2e:	9e05      	ldr	r6, [sp, #20]
 8005f30:	1ac2      	subs	r2, r0, r3
 8005f32:	e7d0      	b.n	8005ed6 <_scanf_float+0x37e>
 8005f34:	f011 0f04 	tst.w	r1, #4
 8005f38:	9903      	ldr	r1, [sp, #12]
 8005f3a:	600a      	str	r2, [r1, #0]
 8005f3c:	d1e6      	bne.n	8005f0c <_scanf_float+0x3b4>
 8005f3e:	681d      	ldr	r5, [r3, #0]
 8005f40:	4632      	mov	r2, r6
 8005f42:	463b      	mov	r3, r7
 8005f44:	4630      	mov	r0, r6
 8005f46:	4639      	mov	r1, r7
 8005f48:	f7fa fe00 	bl	8000b4c <__aeabi_dcmpun>
 8005f4c:	b128      	cbz	r0, 8005f5a <_scanf_float+0x402>
 8005f4e:	4808      	ldr	r0, [pc, #32]	@ (8005f70 <_scanf_float+0x418>)
 8005f50:	f000 f9f4 	bl	800633c <nanf>
 8005f54:	ed85 0a00 	vstr	s0, [r5]
 8005f58:	e7db      	b.n	8005f12 <_scanf_float+0x3ba>
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	4639      	mov	r1, r7
 8005f5e:	f7fa fe53 	bl	8000c08 <__aeabi_d2f>
 8005f62:	6028      	str	r0, [r5, #0]
 8005f64:	e7d5      	b.n	8005f12 <_scanf_float+0x3ba>
 8005f66:	2700      	movs	r7, #0
 8005f68:	e62e      	b.n	8005bc8 <_scanf_float+0x70>
 8005f6a:	bf00      	nop
 8005f6c:	08009b70 	.word	0x08009b70
 8005f70:	08009cb1 	.word	0x08009cb1

08005f74 <std>:
 8005f74:	2300      	movs	r3, #0
 8005f76:	b510      	push	{r4, lr}
 8005f78:	4604      	mov	r4, r0
 8005f7a:	e9c0 3300 	strd	r3, r3, [r0]
 8005f7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f82:	6083      	str	r3, [r0, #8]
 8005f84:	8181      	strh	r1, [r0, #12]
 8005f86:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f88:	81c2      	strh	r2, [r0, #14]
 8005f8a:	6183      	str	r3, [r0, #24]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	2208      	movs	r2, #8
 8005f90:	305c      	adds	r0, #92	@ 0x5c
 8005f92:	f000 f953 	bl	800623c <memset>
 8005f96:	4b0d      	ldr	r3, [pc, #52]	@ (8005fcc <std+0x58>)
 8005f98:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd0 <std+0x5c>)
 8005f9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd4 <std+0x60>)
 8005fa0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd8 <std+0x64>)
 8005fa4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8005fdc <std+0x68>)
 8005fa8:	6224      	str	r4, [r4, #32]
 8005faa:	429c      	cmp	r4, r3
 8005fac:	d006      	beq.n	8005fbc <std+0x48>
 8005fae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005fb2:	4294      	cmp	r4, r2
 8005fb4:	d002      	beq.n	8005fbc <std+0x48>
 8005fb6:	33d0      	adds	r3, #208	@ 0xd0
 8005fb8:	429c      	cmp	r4, r3
 8005fba:	d105      	bne.n	8005fc8 <std+0x54>
 8005fbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fc4:	f000 b9b6 	b.w	8006334 <__retarget_lock_init_recursive>
 8005fc8:	bd10      	pop	{r4, pc}
 8005fca:	bf00      	nop
 8005fcc:	0800613d 	.word	0x0800613d
 8005fd0:	0800615f 	.word	0x0800615f
 8005fd4:	08006197 	.word	0x08006197
 8005fd8:	080061bb 	.word	0x080061bb
 8005fdc:	200003b8 	.word	0x200003b8

08005fe0 <stdio_exit_handler>:
 8005fe0:	4a02      	ldr	r2, [pc, #8]	@ (8005fec <stdio_exit_handler+0xc>)
 8005fe2:	4903      	ldr	r1, [pc, #12]	@ (8005ff0 <stdio_exit_handler+0x10>)
 8005fe4:	4803      	ldr	r0, [pc, #12]	@ (8005ff4 <stdio_exit_handler+0x14>)
 8005fe6:	f000 b869 	b.w	80060bc <_fwalk_sglue>
 8005fea:	bf00      	nop
 8005fec:	20000018 	.word	0x20000018
 8005ff0:	08008c0d 	.word	0x08008c0d
 8005ff4:	20000028 	.word	0x20000028

08005ff8 <cleanup_stdio>:
 8005ff8:	6841      	ldr	r1, [r0, #4]
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800602c <cleanup_stdio+0x34>)
 8005ffc:	4299      	cmp	r1, r3
 8005ffe:	b510      	push	{r4, lr}
 8006000:	4604      	mov	r4, r0
 8006002:	d001      	beq.n	8006008 <cleanup_stdio+0x10>
 8006004:	f002 fe02 	bl	8008c0c <_fflush_r>
 8006008:	68a1      	ldr	r1, [r4, #8]
 800600a:	4b09      	ldr	r3, [pc, #36]	@ (8006030 <cleanup_stdio+0x38>)
 800600c:	4299      	cmp	r1, r3
 800600e:	d002      	beq.n	8006016 <cleanup_stdio+0x1e>
 8006010:	4620      	mov	r0, r4
 8006012:	f002 fdfb 	bl	8008c0c <_fflush_r>
 8006016:	68e1      	ldr	r1, [r4, #12]
 8006018:	4b06      	ldr	r3, [pc, #24]	@ (8006034 <cleanup_stdio+0x3c>)
 800601a:	4299      	cmp	r1, r3
 800601c:	d004      	beq.n	8006028 <cleanup_stdio+0x30>
 800601e:	4620      	mov	r0, r4
 8006020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006024:	f002 bdf2 	b.w	8008c0c <_fflush_r>
 8006028:	bd10      	pop	{r4, pc}
 800602a:	bf00      	nop
 800602c:	200003b8 	.word	0x200003b8
 8006030:	20000420 	.word	0x20000420
 8006034:	20000488 	.word	0x20000488

08006038 <global_stdio_init.part.0>:
 8006038:	b510      	push	{r4, lr}
 800603a:	4b0b      	ldr	r3, [pc, #44]	@ (8006068 <global_stdio_init.part.0+0x30>)
 800603c:	4c0b      	ldr	r4, [pc, #44]	@ (800606c <global_stdio_init.part.0+0x34>)
 800603e:	4a0c      	ldr	r2, [pc, #48]	@ (8006070 <global_stdio_init.part.0+0x38>)
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	4620      	mov	r0, r4
 8006044:	2200      	movs	r2, #0
 8006046:	2104      	movs	r1, #4
 8006048:	f7ff ff94 	bl	8005f74 <std>
 800604c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006050:	2201      	movs	r2, #1
 8006052:	2109      	movs	r1, #9
 8006054:	f7ff ff8e 	bl	8005f74 <std>
 8006058:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800605c:	2202      	movs	r2, #2
 800605e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006062:	2112      	movs	r1, #18
 8006064:	f7ff bf86 	b.w	8005f74 <std>
 8006068:	200004f0 	.word	0x200004f0
 800606c:	200003b8 	.word	0x200003b8
 8006070:	08005fe1 	.word	0x08005fe1

08006074 <__sfp_lock_acquire>:
 8006074:	4801      	ldr	r0, [pc, #4]	@ (800607c <__sfp_lock_acquire+0x8>)
 8006076:	f000 b95e 	b.w	8006336 <__retarget_lock_acquire_recursive>
 800607a:	bf00      	nop
 800607c:	200004f9 	.word	0x200004f9

08006080 <__sfp_lock_release>:
 8006080:	4801      	ldr	r0, [pc, #4]	@ (8006088 <__sfp_lock_release+0x8>)
 8006082:	f000 b959 	b.w	8006338 <__retarget_lock_release_recursive>
 8006086:	bf00      	nop
 8006088:	200004f9 	.word	0x200004f9

0800608c <__sinit>:
 800608c:	b510      	push	{r4, lr}
 800608e:	4604      	mov	r4, r0
 8006090:	f7ff fff0 	bl	8006074 <__sfp_lock_acquire>
 8006094:	6a23      	ldr	r3, [r4, #32]
 8006096:	b11b      	cbz	r3, 80060a0 <__sinit+0x14>
 8006098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800609c:	f7ff bff0 	b.w	8006080 <__sfp_lock_release>
 80060a0:	4b04      	ldr	r3, [pc, #16]	@ (80060b4 <__sinit+0x28>)
 80060a2:	6223      	str	r3, [r4, #32]
 80060a4:	4b04      	ldr	r3, [pc, #16]	@ (80060b8 <__sinit+0x2c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1f5      	bne.n	8006098 <__sinit+0xc>
 80060ac:	f7ff ffc4 	bl	8006038 <global_stdio_init.part.0>
 80060b0:	e7f2      	b.n	8006098 <__sinit+0xc>
 80060b2:	bf00      	nop
 80060b4:	08005ff9 	.word	0x08005ff9
 80060b8:	200004f0 	.word	0x200004f0

080060bc <_fwalk_sglue>:
 80060bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060c0:	4607      	mov	r7, r0
 80060c2:	4688      	mov	r8, r1
 80060c4:	4614      	mov	r4, r2
 80060c6:	2600      	movs	r6, #0
 80060c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060cc:	f1b9 0901 	subs.w	r9, r9, #1
 80060d0:	d505      	bpl.n	80060de <_fwalk_sglue+0x22>
 80060d2:	6824      	ldr	r4, [r4, #0]
 80060d4:	2c00      	cmp	r4, #0
 80060d6:	d1f7      	bne.n	80060c8 <_fwalk_sglue+0xc>
 80060d8:	4630      	mov	r0, r6
 80060da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060de:	89ab      	ldrh	r3, [r5, #12]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d907      	bls.n	80060f4 <_fwalk_sglue+0x38>
 80060e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060e8:	3301      	adds	r3, #1
 80060ea:	d003      	beq.n	80060f4 <_fwalk_sglue+0x38>
 80060ec:	4629      	mov	r1, r5
 80060ee:	4638      	mov	r0, r7
 80060f0:	47c0      	blx	r8
 80060f2:	4306      	orrs	r6, r0
 80060f4:	3568      	adds	r5, #104	@ 0x68
 80060f6:	e7e9      	b.n	80060cc <_fwalk_sglue+0x10>

080060f8 <siprintf>:
 80060f8:	b40e      	push	{r1, r2, r3}
 80060fa:	b510      	push	{r4, lr}
 80060fc:	b09d      	sub	sp, #116	@ 0x74
 80060fe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006100:	9002      	str	r0, [sp, #8]
 8006102:	9006      	str	r0, [sp, #24]
 8006104:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006108:	480a      	ldr	r0, [pc, #40]	@ (8006134 <siprintf+0x3c>)
 800610a:	9107      	str	r1, [sp, #28]
 800610c:	9104      	str	r1, [sp, #16]
 800610e:	490a      	ldr	r1, [pc, #40]	@ (8006138 <siprintf+0x40>)
 8006110:	f853 2b04 	ldr.w	r2, [r3], #4
 8006114:	9105      	str	r1, [sp, #20]
 8006116:	2400      	movs	r4, #0
 8006118:	a902      	add	r1, sp, #8
 800611a:	6800      	ldr	r0, [r0, #0]
 800611c:	9301      	str	r3, [sp, #4]
 800611e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006120:	f002 fbf4 	bl	800890c <_svfiprintf_r>
 8006124:	9b02      	ldr	r3, [sp, #8]
 8006126:	701c      	strb	r4, [r3, #0]
 8006128:	b01d      	add	sp, #116	@ 0x74
 800612a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800612e:	b003      	add	sp, #12
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	20000024 	.word	0x20000024
 8006138:	ffff0208 	.word	0xffff0208

0800613c <__sread>:
 800613c:	b510      	push	{r4, lr}
 800613e:	460c      	mov	r4, r1
 8006140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006144:	f000 f8a8 	bl	8006298 <_read_r>
 8006148:	2800      	cmp	r0, #0
 800614a:	bfab      	itete	ge
 800614c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800614e:	89a3      	ldrhlt	r3, [r4, #12]
 8006150:	181b      	addge	r3, r3, r0
 8006152:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006156:	bfac      	ite	ge
 8006158:	6563      	strge	r3, [r4, #84]	@ 0x54
 800615a:	81a3      	strhlt	r3, [r4, #12]
 800615c:	bd10      	pop	{r4, pc}

0800615e <__swrite>:
 800615e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006162:	461f      	mov	r7, r3
 8006164:	898b      	ldrh	r3, [r1, #12]
 8006166:	05db      	lsls	r3, r3, #23
 8006168:	4605      	mov	r5, r0
 800616a:	460c      	mov	r4, r1
 800616c:	4616      	mov	r6, r2
 800616e:	d505      	bpl.n	800617c <__swrite+0x1e>
 8006170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006174:	2302      	movs	r3, #2
 8006176:	2200      	movs	r2, #0
 8006178:	f000 f87c 	bl	8006274 <_lseek_r>
 800617c:	89a3      	ldrh	r3, [r4, #12]
 800617e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006182:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006186:	81a3      	strh	r3, [r4, #12]
 8006188:	4632      	mov	r2, r6
 800618a:	463b      	mov	r3, r7
 800618c:	4628      	mov	r0, r5
 800618e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006192:	f000 b893 	b.w	80062bc <_write_r>

08006196 <__sseek>:
 8006196:	b510      	push	{r4, lr}
 8006198:	460c      	mov	r4, r1
 800619a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800619e:	f000 f869 	bl	8006274 <_lseek_r>
 80061a2:	1c43      	adds	r3, r0, #1
 80061a4:	89a3      	ldrh	r3, [r4, #12]
 80061a6:	bf15      	itete	ne
 80061a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061b2:	81a3      	strheq	r3, [r4, #12]
 80061b4:	bf18      	it	ne
 80061b6:	81a3      	strhne	r3, [r4, #12]
 80061b8:	bd10      	pop	{r4, pc}

080061ba <__sclose>:
 80061ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061be:	f000 b849 	b.w	8006254 <_close_r>

080061c2 <_vsniprintf_r>:
 80061c2:	b530      	push	{r4, r5, lr}
 80061c4:	4614      	mov	r4, r2
 80061c6:	2c00      	cmp	r4, #0
 80061c8:	b09b      	sub	sp, #108	@ 0x6c
 80061ca:	4605      	mov	r5, r0
 80061cc:	461a      	mov	r2, r3
 80061ce:	da05      	bge.n	80061dc <_vsniprintf_r+0x1a>
 80061d0:	238b      	movs	r3, #139	@ 0x8b
 80061d2:	6003      	str	r3, [r0, #0]
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295
 80061d8:	b01b      	add	sp, #108	@ 0x6c
 80061da:	bd30      	pop	{r4, r5, pc}
 80061dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80061e0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80061ea:	bf14      	ite	ne
 80061ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 80061f0:	4623      	moveq	r3, r4
 80061f2:	9302      	str	r3, [sp, #8]
 80061f4:	9305      	str	r3, [sp, #20]
 80061f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80061fa:	9100      	str	r1, [sp, #0]
 80061fc:	9104      	str	r1, [sp, #16]
 80061fe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006202:	4669      	mov	r1, sp
 8006204:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006206:	f002 fb81 	bl	800890c <_svfiprintf_r>
 800620a:	1c43      	adds	r3, r0, #1
 800620c:	bfbc      	itt	lt
 800620e:	238b      	movlt	r3, #139	@ 0x8b
 8006210:	602b      	strlt	r3, [r5, #0]
 8006212:	2c00      	cmp	r4, #0
 8006214:	d0e0      	beq.n	80061d8 <_vsniprintf_r+0x16>
 8006216:	9b00      	ldr	r3, [sp, #0]
 8006218:	2200      	movs	r2, #0
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	e7dc      	b.n	80061d8 <_vsniprintf_r+0x16>
	...

08006220 <vsniprintf>:
 8006220:	b507      	push	{r0, r1, r2, lr}
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	4613      	mov	r3, r2
 8006226:	460a      	mov	r2, r1
 8006228:	4601      	mov	r1, r0
 800622a:	4803      	ldr	r0, [pc, #12]	@ (8006238 <vsniprintf+0x18>)
 800622c:	6800      	ldr	r0, [r0, #0]
 800622e:	f7ff ffc8 	bl	80061c2 <_vsniprintf_r>
 8006232:	b003      	add	sp, #12
 8006234:	f85d fb04 	ldr.w	pc, [sp], #4
 8006238:	20000024 	.word	0x20000024

0800623c <memset>:
 800623c:	4402      	add	r2, r0
 800623e:	4603      	mov	r3, r0
 8006240:	4293      	cmp	r3, r2
 8006242:	d100      	bne.n	8006246 <memset+0xa>
 8006244:	4770      	bx	lr
 8006246:	f803 1b01 	strb.w	r1, [r3], #1
 800624a:	e7f9      	b.n	8006240 <memset+0x4>

0800624c <_localeconv_r>:
 800624c:	4800      	ldr	r0, [pc, #0]	@ (8006250 <_localeconv_r+0x4>)
 800624e:	4770      	bx	lr
 8006250:	20000164 	.word	0x20000164

08006254 <_close_r>:
 8006254:	b538      	push	{r3, r4, r5, lr}
 8006256:	4d06      	ldr	r5, [pc, #24]	@ (8006270 <_close_r+0x1c>)
 8006258:	2300      	movs	r3, #0
 800625a:	4604      	mov	r4, r0
 800625c:	4608      	mov	r0, r1
 800625e:	602b      	str	r3, [r5, #0]
 8006260:	f7fb ffce 	bl	8002200 <_close>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	d102      	bne.n	800626e <_close_r+0x1a>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	b103      	cbz	r3, 800626e <_close_r+0x1a>
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	200004f4 	.word	0x200004f4

08006274 <_lseek_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4d07      	ldr	r5, [pc, #28]	@ (8006294 <_lseek_r+0x20>)
 8006278:	4604      	mov	r4, r0
 800627a:	4608      	mov	r0, r1
 800627c:	4611      	mov	r1, r2
 800627e:	2200      	movs	r2, #0
 8006280:	602a      	str	r2, [r5, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	f7fb ffe3 	bl	800224e <_lseek>
 8006288:	1c43      	adds	r3, r0, #1
 800628a:	d102      	bne.n	8006292 <_lseek_r+0x1e>
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	b103      	cbz	r3, 8006292 <_lseek_r+0x1e>
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	200004f4 	.word	0x200004f4

08006298 <_read_r>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	4d07      	ldr	r5, [pc, #28]	@ (80062b8 <_read_r+0x20>)
 800629c:	4604      	mov	r4, r0
 800629e:	4608      	mov	r0, r1
 80062a0:	4611      	mov	r1, r2
 80062a2:	2200      	movs	r2, #0
 80062a4:	602a      	str	r2, [r5, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	f7fb ff71 	bl	800218e <_read>
 80062ac:	1c43      	adds	r3, r0, #1
 80062ae:	d102      	bne.n	80062b6 <_read_r+0x1e>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	b103      	cbz	r3, 80062b6 <_read_r+0x1e>
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	bd38      	pop	{r3, r4, r5, pc}
 80062b8:	200004f4 	.word	0x200004f4

080062bc <_write_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	4d07      	ldr	r5, [pc, #28]	@ (80062dc <_write_r+0x20>)
 80062c0:	4604      	mov	r4, r0
 80062c2:	4608      	mov	r0, r1
 80062c4:	4611      	mov	r1, r2
 80062c6:	2200      	movs	r2, #0
 80062c8:	602a      	str	r2, [r5, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	f7fb ff7c 	bl	80021c8 <_write>
 80062d0:	1c43      	adds	r3, r0, #1
 80062d2:	d102      	bne.n	80062da <_write_r+0x1e>
 80062d4:	682b      	ldr	r3, [r5, #0]
 80062d6:	b103      	cbz	r3, 80062da <_write_r+0x1e>
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	bd38      	pop	{r3, r4, r5, pc}
 80062dc:	200004f4 	.word	0x200004f4

080062e0 <__errno>:
 80062e0:	4b01      	ldr	r3, [pc, #4]	@ (80062e8 <__errno+0x8>)
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	20000024 	.word	0x20000024

080062ec <__libc_init_array>:
 80062ec:	b570      	push	{r4, r5, r6, lr}
 80062ee:	4d0d      	ldr	r5, [pc, #52]	@ (8006324 <__libc_init_array+0x38>)
 80062f0:	4c0d      	ldr	r4, [pc, #52]	@ (8006328 <__libc_init_array+0x3c>)
 80062f2:	1b64      	subs	r4, r4, r5
 80062f4:	10a4      	asrs	r4, r4, #2
 80062f6:	2600      	movs	r6, #0
 80062f8:	42a6      	cmp	r6, r4
 80062fa:	d109      	bne.n	8006310 <__libc_init_array+0x24>
 80062fc:	4d0b      	ldr	r5, [pc, #44]	@ (800632c <__libc_init_array+0x40>)
 80062fe:	4c0c      	ldr	r4, [pc, #48]	@ (8006330 <__libc_init_array+0x44>)
 8006300:	f003 fb74 	bl	80099ec <_init>
 8006304:	1b64      	subs	r4, r4, r5
 8006306:	10a4      	asrs	r4, r4, #2
 8006308:	2600      	movs	r6, #0
 800630a:	42a6      	cmp	r6, r4
 800630c:	d105      	bne.n	800631a <__libc_init_array+0x2e>
 800630e:	bd70      	pop	{r4, r5, r6, pc}
 8006310:	f855 3b04 	ldr.w	r3, [r5], #4
 8006314:	4798      	blx	r3
 8006316:	3601      	adds	r6, #1
 8006318:	e7ee      	b.n	80062f8 <__libc_init_array+0xc>
 800631a:	f855 3b04 	ldr.w	r3, [r5], #4
 800631e:	4798      	blx	r3
 8006320:	3601      	adds	r6, #1
 8006322:	e7f2      	b.n	800630a <__libc_init_array+0x1e>
 8006324:	08009f6c 	.word	0x08009f6c
 8006328:	08009f6c 	.word	0x08009f6c
 800632c:	08009f6c 	.word	0x08009f6c
 8006330:	08009f70 	.word	0x08009f70

08006334 <__retarget_lock_init_recursive>:
 8006334:	4770      	bx	lr

08006336 <__retarget_lock_acquire_recursive>:
 8006336:	4770      	bx	lr

08006338 <__retarget_lock_release_recursive>:
 8006338:	4770      	bx	lr
	...

0800633c <nanf>:
 800633c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006344 <nanf+0x8>
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	7fc00000 	.word	0x7fc00000

08006348 <quorem>:
 8006348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634c:	6903      	ldr	r3, [r0, #16]
 800634e:	690c      	ldr	r4, [r1, #16]
 8006350:	42a3      	cmp	r3, r4
 8006352:	4607      	mov	r7, r0
 8006354:	db7e      	blt.n	8006454 <quorem+0x10c>
 8006356:	3c01      	subs	r4, #1
 8006358:	f101 0814 	add.w	r8, r1, #20
 800635c:	00a3      	lsls	r3, r4, #2
 800635e:	f100 0514 	add.w	r5, r0, #20
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800636e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006372:	3301      	adds	r3, #1
 8006374:	429a      	cmp	r2, r3
 8006376:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800637a:	fbb2 f6f3 	udiv	r6, r2, r3
 800637e:	d32e      	bcc.n	80063de <quorem+0x96>
 8006380:	f04f 0a00 	mov.w	sl, #0
 8006384:	46c4      	mov	ip, r8
 8006386:	46ae      	mov	lr, r5
 8006388:	46d3      	mov	fp, sl
 800638a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800638e:	b298      	uxth	r0, r3
 8006390:	fb06 a000 	mla	r0, r6, r0, sl
 8006394:	0c02      	lsrs	r2, r0, #16
 8006396:	0c1b      	lsrs	r3, r3, #16
 8006398:	fb06 2303 	mla	r3, r6, r3, r2
 800639c:	f8de 2000 	ldr.w	r2, [lr]
 80063a0:	b280      	uxth	r0, r0
 80063a2:	b292      	uxth	r2, r2
 80063a4:	1a12      	subs	r2, r2, r0
 80063a6:	445a      	add	r2, fp
 80063a8:	f8de 0000 	ldr.w	r0, [lr]
 80063ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80063b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80063ba:	b292      	uxth	r2, r2
 80063bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80063c0:	45e1      	cmp	r9, ip
 80063c2:	f84e 2b04 	str.w	r2, [lr], #4
 80063c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80063ca:	d2de      	bcs.n	800638a <quorem+0x42>
 80063cc:	9b00      	ldr	r3, [sp, #0]
 80063ce:	58eb      	ldr	r3, [r5, r3]
 80063d0:	b92b      	cbnz	r3, 80063de <quorem+0x96>
 80063d2:	9b01      	ldr	r3, [sp, #4]
 80063d4:	3b04      	subs	r3, #4
 80063d6:	429d      	cmp	r5, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	d32f      	bcc.n	800643c <quorem+0xf4>
 80063dc:	613c      	str	r4, [r7, #16]
 80063de:	4638      	mov	r0, r7
 80063e0:	f001 f9c6 	bl	8007770 <__mcmp>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	db25      	blt.n	8006434 <quorem+0xec>
 80063e8:	4629      	mov	r1, r5
 80063ea:	2000      	movs	r0, #0
 80063ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80063f0:	f8d1 c000 	ldr.w	ip, [r1]
 80063f4:	fa1f fe82 	uxth.w	lr, r2
 80063f8:	fa1f f38c 	uxth.w	r3, ip
 80063fc:	eba3 030e 	sub.w	r3, r3, lr
 8006400:	4403      	add	r3, r0
 8006402:	0c12      	lsrs	r2, r2, #16
 8006404:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006408:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800640c:	b29b      	uxth	r3, r3
 800640e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006412:	45c1      	cmp	r9, r8
 8006414:	f841 3b04 	str.w	r3, [r1], #4
 8006418:	ea4f 4022 	mov.w	r0, r2, asr #16
 800641c:	d2e6      	bcs.n	80063ec <quorem+0xa4>
 800641e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006422:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006426:	b922      	cbnz	r2, 8006432 <quorem+0xea>
 8006428:	3b04      	subs	r3, #4
 800642a:	429d      	cmp	r5, r3
 800642c:	461a      	mov	r2, r3
 800642e:	d30b      	bcc.n	8006448 <quorem+0x100>
 8006430:	613c      	str	r4, [r7, #16]
 8006432:	3601      	adds	r6, #1
 8006434:	4630      	mov	r0, r6
 8006436:	b003      	add	sp, #12
 8006438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643c:	6812      	ldr	r2, [r2, #0]
 800643e:	3b04      	subs	r3, #4
 8006440:	2a00      	cmp	r2, #0
 8006442:	d1cb      	bne.n	80063dc <quorem+0x94>
 8006444:	3c01      	subs	r4, #1
 8006446:	e7c6      	b.n	80063d6 <quorem+0x8e>
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	3b04      	subs	r3, #4
 800644c:	2a00      	cmp	r2, #0
 800644e:	d1ef      	bne.n	8006430 <quorem+0xe8>
 8006450:	3c01      	subs	r4, #1
 8006452:	e7ea      	b.n	800642a <quorem+0xe2>
 8006454:	2000      	movs	r0, #0
 8006456:	e7ee      	b.n	8006436 <quorem+0xee>

08006458 <_dtoa_r>:
 8006458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645c:	69c7      	ldr	r7, [r0, #28]
 800645e:	b097      	sub	sp, #92	@ 0x5c
 8006460:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006464:	ec55 4b10 	vmov	r4, r5, d0
 8006468:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800646a:	9107      	str	r1, [sp, #28]
 800646c:	4681      	mov	r9, r0
 800646e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006470:	9311      	str	r3, [sp, #68]	@ 0x44
 8006472:	b97f      	cbnz	r7, 8006494 <_dtoa_r+0x3c>
 8006474:	2010      	movs	r0, #16
 8006476:	f000 fe09 	bl	800708c <malloc>
 800647a:	4602      	mov	r2, r0
 800647c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006480:	b920      	cbnz	r0, 800648c <_dtoa_r+0x34>
 8006482:	4ba9      	ldr	r3, [pc, #676]	@ (8006728 <_dtoa_r+0x2d0>)
 8006484:	21ef      	movs	r1, #239	@ 0xef
 8006486:	48a9      	ldr	r0, [pc, #676]	@ (800672c <_dtoa_r+0x2d4>)
 8006488:	f002 fc3a 	bl	8008d00 <__assert_func>
 800648c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006490:	6007      	str	r7, [r0, #0]
 8006492:	60c7      	str	r7, [r0, #12]
 8006494:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006498:	6819      	ldr	r1, [r3, #0]
 800649a:	b159      	cbz	r1, 80064b4 <_dtoa_r+0x5c>
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	604a      	str	r2, [r1, #4]
 80064a0:	2301      	movs	r3, #1
 80064a2:	4093      	lsls	r3, r2
 80064a4:	608b      	str	r3, [r1, #8]
 80064a6:	4648      	mov	r0, r9
 80064a8:	f000 fee6 	bl	8007278 <_Bfree>
 80064ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	1e2b      	subs	r3, r5, #0
 80064b6:	bfb9      	ittee	lt
 80064b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80064bc:	9305      	strlt	r3, [sp, #20]
 80064be:	2300      	movge	r3, #0
 80064c0:	6033      	strge	r3, [r6, #0]
 80064c2:	9f05      	ldr	r7, [sp, #20]
 80064c4:	4b9a      	ldr	r3, [pc, #616]	@ (8006730 <_dtoa_r+0x2d8>)
 80064c6:	bfbc      	itt	lt
 80064c8:	2201      	movlt	r2, #1
 80064ca:	6032      	strlt	r2, [r6, #0]
 80064cc:	43bb      	bics	r3, r7
 80064ce:	d112      	bne.n	80064f6 <_dtoa_r+0x9e>
 80064d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80064d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80064dc:	4323      	orrs	r3, r4
 80064de:	f000 855a 	beq.w	8006f96 <_dtoa_r+0xb3e>
 80064e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80064e4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006744 <_dtoa_r+0x2ec>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 855c 	beq.w	8006fa6 <_dtoa_r+0xb4e>
 80064ee:	f10a 0303 	add.w	r3, sl, #3
 80064f2:	f000 bd56 	b.w	8006fa2 <_dtoa_r+0xb4a>
 80064f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80064fa:	2200      	movs	r2, #0
 80064fc:	ec51 0b17 	vmov	r0, r1, d7
 8006500:	2300      	movs	r3, #0
 8006502:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006506:	f7fa faef 	bl	8000ae8 <__aeabi_dcmpeq>
 800650a:	4680      	mov	r8, r0
 800650c:	b158      	cbz	r0, 8006526 <_dtoa_r+0xce>
 800650e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006510:	2301      	movs	r3, #1
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006516:	b113      	cbz	r3, 800651e <_dtoa_r+0xc6>
 8006518:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800651a:	4b86      	ldr	r3, [pc, #536]	@ (8006734 <_dtoa_r+0x2dc>)
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006748 <_dtoa_r+0x2f0>
 8006522:	f000 bd40 	b.w	8006fa6 <_dtoa_r+0xb4e>
 8006526:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800652a:	aa14      	add	r2, sp, #80	@ 0x50
 800652c:	a915      	add	r1, sp, #84	@ 0x54
 800652e:	4648      	mov	r0, r9
 8006530:	f001 fa3e 	bl	80079b0 <__d2b>
 8006534:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006538:	9002      	str	r0, [sp, #8]
 800653a:	2e00      	cmp	r6, #0
 800653c:	d078      	beq.n	8006630 <_dtoa_r+0x1d8>
 800653e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006540:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006548:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800654c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006550:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006554:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006558:	4619      	mov	r1, r3
 800655a:	2200      	movs	r2, #0
 800655c:	4b76      	ldr	r3, [pc, #472]	@ (8006738 <_dtoa_r+0x2e0>)
 800655e:	f7f9 fea3 	bl	80002a8 <__aeabi_dsub>
 8006562:	a36b      	add	r3, pc, #428	@ (adr r3, 8006710 <_dtoa_r+0x2b8>)
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	f7fa f856 	bl	8000618 <__aeabi_dmul>
 800656c:	a36a      	add	r3, pc, #424	@ (adr r3, 8006718 <_dtoa_r+0x2c0>)
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	f7f9 fe9b 	bl	80002ac <__adddf3>
 8006576:	4604      	mov	r4, r0
 8006578:	4630      	mov	r0, r6
 800657a:	460d      	mov	r5, r1
 800657c:	f7f9 ffe2 	bl	8000544 <__aeabi_i2d>
 8006580:	a367      	add	r3, pc, #412	@ (adr r3, 8006720 <_dtoa_r+0x2c8>)
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	f7fa f847 	bl	8000618 <__aeabi_dmul>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4620      	mov	r0, r4
 8006590:	4629      	mov	r1, r5
 8006592:	f7f9 fe8b 	bl	80002ac <__adddf3>
 8006596:	4604      	mov	r4, r0
 8006598:	460d      	mov	r5, r1
 800659a:	f7fa faed 	bl	8000b78 <__aeabi_d2iz>
 800659e:	2200      	movs	r2, #0
 80065a0:	4607      	mov	r7, r0
 80065a2:	2300      	movs	r3, #0
 80065a4:	4620      	mov	r0, r4
 80065a6:	4629      	mov	r1, r5
 80065a8:	f7fa faa8 	bl	8000afc <__aeabi_dcmplt>
 80065ac:	b140      	cbz	r0, 80065c0 <_dtoa_r+0x168>
 80065ae:	4638      	mov	r0, r7
 80065b0:	f7f9 ffc8 	bl	8000544 <__aeabi_i2d>
 80065b4:	4622      	mov	r2, r4
 80065b6:	462b      	mov	r3, r5
 80065b8:	f7fa fa96 	bl	8000ae8 <__aeabi_dcmpeq>
 80065bc:	b900      	cbnz	r0, 80065c0 <_dtoa_r+0x168>
 80065be:	3f01      	subs	r7, #1
 80065c0:	2f16      	cmp	r7, #22
 80065c2:	d852      	bhi.n	800666a <_dtoa_r+0x212>
 80065c4:	4b5d      	ldr	r3, [pc, #372]	@ (800673c <_dtoa_r+0x2e4>)
 80065c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80065d2:	f7fa fa93 	bl	8000afc <__aeabi_dcmplt>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d049      	beq.n	800666e <_dtoa_r+0x216>
 80065da:	3f01      	subs	r7, #1
 80065dc:	2300      	movs	r3, #0
 80065de:	9310      	str	r3, [sp, #64]	@ 0x40
 80065e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80065e2:	1b9b      	subs	r3, r3, r6
 80065e4:	1e5a      	subs	r2, r3, #1
 80065e6:	bf45      	ittet	mi
 80065e8:	f1c3 0301 	rsbmi	r3, r3, #1
 80065ec:	9300      	strmi	r3, [sp, #0]
 80065ee:	2300      	movpl	r3, #0
 80065f0:	2300      	movmi	r3, #0
 80065f2:	9206      	str	r2, [sp, #24]
 80065f4:	bf54      	ite	pl
 80065f6:	9300      	strpl	r3, [sp, #0]
 80065f8:	9306      	strmi	r3, [sp, #24]
 80065fa:	2f00      	cmp	r7, #0
 80065fc:	db39      	blt.n	8006672 <_dtoa_r+0x21a>
 80065fe:	9b06      	ldr	r3, [sp, #24]
 8006600:	970d      	str	r7, [sp, #52]	@ 0x34
 8006602:	443b      	add	r3, r7
 8006604:	9306      	str	r3, [sp, #24]
 8006606:	2300      	movs	r3, #0
 8006608:	9308      	str	r3, [sp, #32]
 800660a:	9b07      	ldr	r3, [sp, #28]
 800660c:	2b09      	cmp	r3, #9
 800660e:	d863      	bhi.n	80066d8 <_dtoa_r+0x280>
 8006610:	2b05      	cmp	r3, #5
 8006612:	bfc4      	itt	gt
 8006614:	3b04      	subgt	r3, #4
 8006616:	9307      	strgt	r3, [sp, #28]
 8006618:	9b07      	ldr	r3, [sp, #28]
 800661a:	f1a3 0302 	sub.w	r3, r3, #2
 800661e:	bfcc      	ite	gt
 8006620:	2400      	movgt	r4, #0
 8006622:	2401      	movle	r4, #1
 8006624:	2b03      	cmp	r3, #3
 8006626:	d863      	bhi.n	80066f0 <_dtoa_r+0x298>
 8006628:	e8df f003 	tbb	[pc, r3]
 800662c:	2b375452 	.word	0x2b375452
 8006630:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006634:	441e      	add	r6, r3
 8006636:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800663a:	2b20      	cmp	r3, #32
 800663c:	bfc1      	itttt	gt
 800663e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006642:	409f      	lslgt	r7, r3
 8006644:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006648:	fa24 f303 	lsrgt.w	r3, r4, r3
 800664c:	bfd6      	itet	le
 800664e:	f1c3 0320 	rsble	r3, r3, #32
 8006652:	ea47 0003 	orrgt.w	r0, r7, r3
 8006656:	fa04 f003 	lslle.w	r0, r4, r3
 800665a:	f7f9 ff63 	bl	8000524 <__aeabi_ui2d>
 800665e:	2201      	movs	r2, #1
 8006660:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006664:	3e01      	subs	r6, #1
 8006666:	9212      	str	r2, [sp, #72]	@ 0x48
 8006668:	e776      	b.n	8006558 <_dtoa_r+0x100>
 800666a:	2301      	movs	r3, #1
 800666c:	e7b7      	b.n	80065de <_dtoa_r+0x186>
 800666e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006670:	e7b6      	b.n	80065e0 <_dtoa_r+0x188>
 8006672:	9b00      	ldr	r3, [sp, #0]
 8006674:	1bdb      	subs	r3, r3, r7
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	427b      	negs	r3, r7
 800667a:	9308      	str	r3, [sp, #32]
 800667c:	2300      	movs	r3, #0
 800667e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006680:	e7c3      	b.n	800660a <_dtoa_r+0x1b2>
 8006682:	2301      	movs	r3, #1
 8006684:	9309      	str	r3, [sp, #36]	@ 0x24
 8006686:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006688:	eb07 0b03 	add.w	fp, r7, r3
 800668c:	f10b 0301 	add.w	r3, fp, #1
 8006690:	2b01      	cmp	r3, #1
 8006692:	9303      	str	r3, [sp, #12]
 8006694:	bfb8      	it	lt
 8006696:	2301      	movlt	r3, #1
 8006698:	e006      	b.n	80066a8 <_dtoa_r+0x250>
 800669a:	2301      	movs	r3, #1
 800669c:	9309      	str	r3, [sp, #36]	@ 0x24
 800669e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	dd28      	ble.n	80066f6 <_dtoa_r+0x29e>
 80066a4:	469b      	mov	fp, r3
 80066a6:	9303      	str	r3, [sp, #12]
 80066a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80066ac:	2100      	movs	r1, #0
 80066ae:	2204      	movs	r2, #4
 80066b0:	f102 0514 	add.w	r5, r2, #20
 80066b4:	429d      	cmp	r5, r3
 80066b6:	d926      	bls.n	8006706 <_dtoa_r+0x2ae>
 80066b8:	6041      	str	r1, [r0, #4]
 80066ba:	4648      	mov	r0, r9
 80066bc:	f000 fd9c 	bl	80071f8 <_Balloc>
 80066c0:	4682      	mov	sl, r0
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d142      	bne.n	800674c <_dtoa_r+0x2f4>
 80066c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006740 <_dtoa_r+0x2e8>)
 80066c8:	4602      	mov	r2, r0
 80066ca:	f240 11af 	movw	r1, #431	@ 0x1af
 80066ce:	e6da      	b.n	8006486 <_dtoa_r+0x2e>
 80066d0:	2300      	movs	r3, #0
 80066d2:	e7e3      	b.n	800669c <_dtoa_r+0x244>
 80066d4:	2300      	movs	r3, #0
 80066d6:	e7d5      	b.n	8006684 <_dtoa_r+0x22c>
 80066d8:	2401      	movs	r4, #1
 80066da:	2300      	movs	r3, #0
 80066dc:	9307      	str	r3, [sp, #28]
 80066de:	9409      	str	r4, [sp, #36]	@ 0x24
 80066e0:	f04f 3bff 	mov.w	fp, #4294967295
 80066e4:	2200      	movs	r2, #0
 80066e6:	f8cd b00c 	str.w	fp, [sp, #12]
 80066ea:	2312      	movs	r3, #18
 80066ec:	920c      	str	r2, [sp, #48]	@ 0x30
 80066ee:	e7db      	b.n	80066a8 <_dtoa_r+0x250>
 80066f0:	2301      	movs	r3, #1
 80066f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80066f4:	e7f4      	b.n	80066e0 <_dtoa_r+0x288>
 80066f6:	f04f 0b01 	mov.w	fp, #1
 80066fa:	f8cd b00c 	str.w	fp, [sp, #12]
 80066fe:	465b      	mov	r3, fp
 8006700:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006704:	e7d0      	b.n	80066a8 <_dtoa_r+0x250>
 8006706:	3101      	adds	r1, #1
 8006708:	0052      	lsls	r2, r2, #1
 800670a:	e7d1      	b.n	80066b0 <_dtoa_r+0x258>
 800670c:	f3af 8000 	nop.w
 8006710:	636f4361 	.word	0x636f4361
 8006714:	3fd287a7 	.word	0x3fd287a7
 8006718:	8b60c8b3 	.word	0x8b60c8b3
 800671c:	3fc68a28 	.word	0x3fc68a28
 8006720:	509f79fb 	.word	0x509f79fb
 8006724:	3fd34413 	.word	0x3fd34413
 8006728:	08009b82 	.word	0x08009b82
 800672c:	08009b99 	.word	0x08009b99
 8006730:	7ff00000 	.word	0x7ff00000
 8006734:	08009b4d 	.word	0x08009b4d
 8006738:	3ff80000 	.word	0x3ff80000
 800673c:	08009d48 	.word	0x08009d48
 8006740:	08009bf1 	.word	0x08009bf1
 8006744:	08009b7e 	.word	0x08009b7e
 8006748:	08009b4c 	.word	0x08009b4c
 800674c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006750:	6018      	str	r0, [r3, #0]
 8006752:	9b03      	ldr	r3, [sp, #12]
 8006754:	2b0e      	cmp	r3, #14
 8006756:	f200 80a1 	bhi.w	800689c <_dtoa_r+0x444>
 800675a:	2c00      	cmp	r4, #0
 800675c:	f000 809e 	beq.w	800689c <_dtoa_r+0x444>
 8006760:	2f00      	cmp	r7, #0
 8006762:	dd33      	ble.n	80067cc <_dtoa_r+0x374>
 8006764:	4b9c      	ldr	r3, [pc, #624]	@ (80069d8 <_dtoa_r+0x580>)
 8006766:	f007 020f 	and.w	r2, r7, #15
 800676a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800676e:	ed93 7b00 	vldr	d7, [r3]
 8006772:	05f8      	lsls	r0, r7, #23
 8006774:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006778:	ea4f 1427 	mov.w	r4, r7, asr #4
 800677c:	d516      	bpl.n	80067ac <_dtoa_r+0x354>
 800677e:	4b97      	ldr	r3, [pc, #604]	@ (80069dc <_dtoa_r+0x584>)
 8006780:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006784:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006788:	f7fa f870 	bl	800086c <__aeabi_ddiv>
 800678c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006790:	f004 040f 	and.w	r4, r4, #15
 8006794:	2603      	movs	r6, #3
 8006796:	4d91      	ldr	r5, [pc, #580]	@ (80069dc <_dtoa_r+0x584>)
 8006798:	b954      	cbnz	r4, 80067b0 <_dtoa_r+0x358>
 800679a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800679e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067a2:	f7fa f863 	bl	800086c <__aeabi_ddiv>
 80067a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067aa:	e028      	b.n	80067fe <_dtoa_r+0x3a6>
 80067ac:	2602      	movs	r6, #2
 80067ae:	e7f2      	b.n	8006796 <_dtoa_r+0x33e>
 80067b0:	07e1      	lsls	r1, r4, #31
 80067b2:	d508      	bpl.n	80067c6 <_dtoa_r+0x36e>
 80067b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80067b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80067bc:	f7f9 ff2c 	bl	8000618 <__aeabi_dmul>
 80067c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80067c4:	3601      	adds	r6, #1
 80067c6:	1064      	asrs	r4, r4, #1
 80067c8:	3508      	adds	r5, #8
 80067ca:	e7e5      	b.n	8006798 <_dtoa_r+0x340>
 80067cc:	f000 80af 	beq.w	800692e <_dtoa_r+0x4d6>
 80067d0:	427c      	negs	r4, r7
 80067d2:	4b81      	ldr	r3, [pc, #516]	@ (80069d8 <_dtoa_r+0x580>)
 80067d4:	4d81      	ldr	r5, [pc, #516]	@ (80069dc <_dtoa_r+0x584>)
 80067d6:	f004 020f 	and.w	r2, r4, #15
 80067da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80067e6:	f7f9 ff17 	bl	8000618 <__aeabi_dmul>
 80067ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067ee:	1124      	asrs	r4, r4, #4
 80067f0:	2300      	movs	r3, #0
 80067f2:	2602      	movs	r6, #2
 80067f4:	2c00      	cmp	r4, #0
 80067f6:	f040 808f 	bne.w	8006918 <_dtoa_r+0x4c0>
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1d3      	bne.n	80067a6 <_dtoa_r+0x34e>
 80067fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006800:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 8094 	beq.w	8006932 <_dtoa_r+0x4da>
 800680a:	4b75      	ldr	r3, [pc, #468]	@ (80069e0 <_dtoa_r+0x588>)
 800680c:	2200      	movs	r2, #0
 800680e:	4620      	mov	r0, r4
 8006810:	4629      	mov	r1, r5
 8006812:	f7fa f973 	bl	8000afc <__aeabi_dcmplt>
 8006816:	2800      	cmp	r0, #0
 8006818:	f000 808b 	beq.w	8006932 <_dtoa_r+0x4da>
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 8087 	beq.w	8006932 <_dtoa_r+0x4da>
 8006824:	f1bb 0f00 	cmp.w	fp, #0
 8006828:	dd34      	ble.n	8006894 <_dtoa_r+0x43c>
 800682a:	4620      	mov	r0, r4
 800682c:	4b6d      	ldr	r3, [pc, #436]	@ (80069e4 <_dtoa_r+0x58c>)
 800682e:	2200      	movs	r2, #0
 8006830:	4629      	mov	r1, r5
 8006832:	f7f9 fef1 	bl	8000618 <__aeabi_dmul>
 8006836:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800683a:	f107 38ff 	add.w	r8, r7, #4294967295
 800683e:	3601      	adds	r6, #1
 8006840:	465c      	mov	r4, fp
 8006842:	4630      	mov	r0, r6
 8006844:	f7f9 fe7e 	bl	8000544 <__aeabi_i2d>
 8006848:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800684c:	f7f9 fee4 	bl	8000618 <__aeabi_dmul>
 8006850:	4b65      	ldr	r3, [pc, #404]	@ (80069e8 <_dtoa_r+0x590>)
 8006852:	2200      	movs	r2, #0
 8006854:	f7f9 fd2a 	bl	80002ac <__adddf3>
 8006858:	4605      	mov	r5, r0
 800685a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800685e:	2c00      	cmp	r4, #0
 8006860:	d16a      	bne.n	8006938 <_dtoa_r+0x4e0>
 8006862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006866:	4b61      	ldr	r3, [pc, #388]	@ (80069ec <_dtoa_r+0x594>)
 8006868:	2200      	movs	r2, #0
 800686a:	f7f9 fd1d 	bl	80002a8 <__aeabi_dsub>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006876:	462a      	mov	r2, r5
 8006878:	4633      	mov	r3, r6
 800687a:	f7fa f95d 	bl	8000b38 <__aeabi_dcmpgt>
 800687e:	2800      	cmp	r0, #0
 8006880:	f040 8298 	bne.w	8006db4 <_dtoa_r+0x95c>
 8006884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006888:	462a      	mov	r2, r5
 800688a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800688e:	f7fa f935 	bl	8000afc <__aeabi_dcmplt>
 8006892:	bb38      	cbnz	r0, 80068e4 <_dtoa_r+0x48c>
 8006894:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006898:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800689c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f2c0 8157 	blt.w	8006b52 <_dtoa_r+0x6fa>
 80068a4:	2f0e      	cmp	r7, #14
 80068a6:	f300 8154 	bgt.w	8006b52 <_dtoa_r+0x6fa>
 80068aa:	4b4b      	ldr	r3, [pc, #300]	@ (80069d8 <_dtoa_r+0x580>)
 80068ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068b0:	ed93 7b00 	vldr	d7, [r3]
 80068b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	ed8d 7b00 	vstr	d7, [sp]
 80068bc:	f280 80e5 	bge.w	8006a8a <_dtoa_r+0x632>
 80068c0:	9b03      	ldr	r3, [sp, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f300 80e1 	bgt.w	8006a8a <_dtoa_r+0x632>
 80068c8:	d10c      	bne.n	80068e4 <_dtoa_r+0x48c>
 80068ca:	4b48      	ldr	r3, [pc, #288]	@ (80069ec <_dtoa_r+0x594>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	ec51 0b17 	vmov	r0, r1, d7
 80068d2:	f7f9 fea1 	bl	8000618 <__aeabi_dmul>
 80068d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068da:	f7fa f923 	bl	8000b24 <__aeabi_dcmpge>
 80068de:	2800      	cmp	r0, #0
 80068e0:	f000 8266 	beq.w	8006db0 <_dtoa_r+0x958>
 80068e4:	2400      	movs	r4, #0
 80068e6:	4625      	mov	r5, r4
 80068e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068ea:	4656      	mov	r6, sl
 80068ec:	ea6f 0803 	mvn.w	r8, r3
 80068f0:	2700      	movs	r7, #0
 80068f2:	4621      	mov	r1, r4
 80068f4:	4648      	mov	r0, r9
 80068f6:	f000 fcbf 	bl	8007278 <_Bfree>
 80068fa:	2d00      	cmp	r5, #0
 80068fc:	f000 80bd 	beq.w	8006a7a <_dtoa_r+0x622>
 8006900:	b12f      	cbz	r7, 800690e <_dtoa_r+0x4b6>
 8006902:	42af      	cmp	r7, r5
 8006904:	d003      	beq.n	800690e <_dtoa_r+0x4b6>
 8006906:	4639      	mov	r1, r7
 8006908:	4648      	mov	r0, r9
 800690a:	f000 fcb5 	bl	8007278 <_Bfree>
 800690e:	4629      	mov	r1, r5
 8006910:	4648      	mov	r0, r9
 8006912:	f000 fcb1 	bl	8007278 <_Bfree>
 8006916:	e0b0      	b.n	8006a7a <_dtoa_r+0x622>
 8006918:	07e2      	lsls	r2, r4, #31
 800691a:	d505      	bpl.n	8006928 <_dtoa_r+0x4d0>
 800691c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006920:	f7f9 fe7a 	bl	8000618 <__aeabi_dmul>
 8006924:	3601      	adds	r6, #1
 8006926:	2301      	movs	r3, #1
 8006928:	1064      	asrs	r4, r4, #1
 800692a:	3508      	adds	r5, #8
 800692c:	e762      	b.n	80067f4 <_dtoa_r+0x39c>
 800692e:	2602      	movs	r6, #2
 8006930:	e765      	b.n	80067fe <_dtoa_r+0x3a6>
 8006932:	9c03      	ldr	r4, [sp, #12]
 8006934:	46b8      	mov	r8, r7
 8006936:	e784      	b.n	8006842 <_dtoa_r+0x3ea>
 8006938:	4b27      	ldr	r3, [pc, #156]	@ (80069d8 <_dtoa_r+0x580>)
 800693a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800693c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006940:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006944:	4454      	add	r4, sl
 8006946:	2900      	cmp	r1, #0
 8006948:	d054      	beq.n	80069f4 <_dtoa_r+0x59c>
 800694a:	4929      	ldr	r1, [pc, #164]	@ (80069f0 <_dtoa_r+0x598>)
 800694c:	2000      	movs	r0, #0
 800694e:	f7f9 ff8d 	bl	800086c <__aeabi_ddiv>
 8006952:	4633      	mov	r3, r6
 8006954:	462a      	mov	r2, r5
 8006956:	f7f9 fca7 	bl	80002a8 <__aeabi_dsub>
 800695a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800695e:	4656      	mov	r6, sl
 8006960:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006964:	f7fa f908 	bl	8000b78 <__aeabi_d2iz>
 8006968:	4605      	mov	r5, r0
 800696a:	f7f9 fdeb 	bl	8000544 <__aeabi_i2d>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006976:	f7f9 fc97 	bl	80002a8 <__aeabi_dsub>
 800697a:	3530      	adds	r5, #48	@ 0x30
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006984:	f806 5b01 	strb.w	r5, [r6], #1
 8006988:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800698c:	f7fa f8b6 	bl	8000afc <__aeabi_dcmplt>
 8006990:	2800      	cmp	r0, #0
 8006992:	d172      	bne.n	8006a7a <_dtoa_r+0x622>
 8006994:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006998:	4911      	ldr	r1, [pc, #68]	@ (80069e0 <_dtoa_r+0x588>)
 800699a:	2000      	movs	r0, #0
 800699c:	f7f9 fc84 	bl	80002a8 <__aeabi_dsub>
 80069a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80069a4:	f7fa f8aa 	bl	8000afc <__aeabi_dcmplt>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	f040 80b4 	bne.w	8006b16 <_dtoa_r+0x6be>
 80069ae:	42a6      	cmp	r6, r4
 80069b0:	f43f af70 	beq.w	8006894 <_dtoa_r+0x43c>
 80069b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80069b8:	4b0a      	ldr	r3, [pc, #40]	@ (80069e4 <_dtoa_r+0x58c>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	f7f9 fe2c 	bl	8000618 <__aeabi_dmul>
 80069c0:	4b08      	ldr	r3, [pc, #32]	@ (80069e4 <_dtoa_r+0x58c>)
 80069c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80069c6:	2200      	movs	r2, #0
 80069c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069cc:	f7f9 fe24 	bl	8000618 <__aeabi_dmul>
 80069d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069d4:	e7c4      	b.n	8006960 <_dtoa_r+0x508>
 80069d6:	bf00      	nop
 80069d8:	08009d48 	.word	0x08009d48
 80069dc:	08009d20 	.word	0x08009d20
 80069e0:	3ff00000 	.word	0x3ff00000
 80069e4:	40240000 	.word	0x40240000
 80069e8:	401c0000 	.word	0x401c0000
 80069ec:	40140000 	.word	0x40140000
 80069f0:	3fe00000 	.word	0x3fe00000
 80069f4:	4631      	mov	r1, r6
 80069f6:	4628      	mov	r0, r5
 80069f8:	f7f9 fe0e 	bl	8000618 <__aeabi_dmul>
 80069fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a00:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006a02:	4656      	mov	r6, sl
 8006a04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a08:	f7fa f8b6 	bl	8000b78 <__aeabi_d2iz>
 8006a0c:	4605      	mov	r5, r0
 8006a0e:	f7f9 fd99 	bl	8000544 <__aeabi_i2d>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a1a:	f7f9 fc45 	bl	80002a8 <__aeabi_dsub>
 8006a1e:	3530      	adds	r5, #48	@ 0x30
 8006a20:	f806 5b01 	strb.w	r5, [r6], #1
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	42a6      	cmp	r6, r4
 8006a2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	d124      	bne.n	8006a7e <_dtoa_r+0x626>
 8006a34:	4baf      	ldr	r3, [pc, #700]	@ (8006cf4 <_dtoa_r+0x89c>)
 8006a36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006a3a:	f7f9 fc37 	bl	80002ac <__adddf3>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	460b      	mov	r3, r1
 8006a42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a46:	f7fa f877 	bl	8000b38 <__aeabi_dcmpgt>
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d163      	bne.n	8006b16 <_dtoa_r+0x6be>
 8006a4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006a52:	49a8      	ldr	r1, [pc, #672]	@ (8006cf4 <_dtoa_r+0x89c>)
 8006a54:	2000      	movs	r0, #0
 8006a56:	f7f9 fc27 	bl	80002a8 <__aeabi_dsub>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a62:	f7fa f84b 	bl	8000afc <__aeabi_dcmplt>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	f43f af14 	beq.w	8006894 <_dtoa_r+0x43c>
 8006a6c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006a6e:	1e73      	subs	r3, r6, #1
 8006a70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a76:	2b30      	cmp	r3, #48	@ 0x30
 8006a78:	d0f8      	beq.n	8006a6c <_dtoa_r+0x614>
 8006a7a:	4647      	mov	r7, r8
 8006a7c:	e03b      	b.n	8006af6 <_dtoa_r+0x69e>
 8006a7e:	4b9e      	ldr	r3, [pc, #632]	@ (8006cf8 <_dtoa_r+0x8a0>)
 8006a80:	f7f9 fdca 	bl	8000618 <__aeabi_dmul>
 8006a84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a88:	e7bc      	b.n	8006a04 <_dtoa_r+0x5ac>
 8006a8a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006a8e:	4656      	mov	r6, sl
 8006a90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a94:	4620      	mov	r0, r4
 8006a96:	4629      	mov	r1, r5
 8006a98:	f7f9 fee8 	bl	800086c <__aeabi_ddiv>
 8006a9c:	f7fa f86c 	bl	8000b78 <__aeabi_d2iz>
 8006aa0:	4680      	mov	r8, r0
 8006aa2:	f7f9 fd4f 	bl	8000544 <__aeabi_i2d>
 8006aa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aaa:	f7f9 fdb5 	bl	8000618 <__aeabi_dmul>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006aba:	f7f9 fbf5 	bl	80002a8 <__aeabi_dsub>
 8006abe:	f806 4b01 	strb.w	r4, [r6], #1
 8006ac2:	9d03      	ldr	r5, [sp, #12]
 8006ac4:	eba6 040a 	sub.w	r4, r6, sl
 8006ac8:	42a5      	cmp	r5, r4
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	d133      	bne.n	8006b38 <_dtoa_r+0x6e0>
 8006ad0:	f7f9 fbec 	bl	80002ac <__adddf3>
 8006ad4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ad8:	4604      	mov	r4, r0
 8006ada:	460d      	mov	r5, r1
 8006adc:	f7fa f82c 	bl	8000b38 <__aeabi_dcmpgt>
 8006ae0:	b9c0      	cbnz	r0, 8006b14 <_dtoa_r+0x6bc>
 8006ae2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	4629      	mov	r1, r5
 8006aea:	f7f9 fffd 	bl	8000ae8 <__aeabi_dcmpeq>
 8006aee:	b110      	cbz	r0, 8006af6 <_dtoa_r+0x69e>
 8006af0:	f018 0f01 	tst.w	r8, #1
 8006af4:	d10e      	bne.n	8006b14 <_dtoa_r+0x6bc>
 8006af6:	9902      	ldr	r1, [sp, #8]
 8006af8:	4648      	mov	r0, r9
 8006afa:	f000 fbbd 	bl	8007278 <_Bfree>
 8006afe:	2300      	movs	r3, #0
 8006b00:	7033      	strb	r3, [r6, #0]
 8006b02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006b04:	3701      	adds	r7, #1
 8006b06:	601f      	str	r7, [r3, #0]
 8006b08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 824b 	beq.w	8006fa6 <_dtoa_r+0xb4e>
 8006b10:	601e      	str	r6, [r3, #0]
 8006b12:	e248      	b.n	8006fa6 <_dtoa_r+0xb4e>
 8006b14:	46b8      	mov	r8, r7
 8006b16:	4633      	mov	r3, r6
 8006b18:	461e      	mov	r6, r3
 8006b1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b1e:	2a39      	cmp	r2, #57	@ 0x39
 8006b20:	d106      	bne.n	8006b30 <_dtoa_r+0x6d8>
 8006b22:	459a      	cmp	sl, r3
 8006b24:	d1f8      	bne.n	8006b18 <_dtoa_r+0x6c0>
 8006b26:	2230      	movs	r2, #48	@ 0x30
 8006b28:	f108 0801 	add.w	r8, r8, #1
 8006b2c:	f88a 2000 	strb.w	r2, [sl]
 8006b30:	781a      	ldrb	r2, [r3, #0]
 8006b32:	3201      	adds	r2, #1
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	e7a0      	b.n	8006a7a <_dtoa_r+0x622>
 8006b38:	4b6f      	ldr	r3, [pc, #444]	@ (8006cf8 <_dtoa_r+0x8a0>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f7f9 fd6c 	bl	8000618 <__aeabi_dmul>
 8006b40:	2200      	movs	r2, #0
 8006b42:	2300      	movs	r3, #0
 8006b44:	4604      	mov	r4, r0
 8006b46:	460d      	mov	r5, r1
 8006b48:	f7f9 ffce 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d09f      	beq.n	8006a90 <_dtoa_r+0x638>
 8006b50:	e7d1      	b.n	8006af6 <_dtoa_r+0x69e>
 8006b52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b54:	2a00      	cmp	r2, #0
 8006b56:	f000 80ea 	beq.w	8006d2e <_dtoa_r+0x8d6>
 8006b5a:	9a07      	ldr	r2, [sp, #28]
 8006b5c:	2a01      	cmp	r2, #1
 8006b5e:	f300 80cd 	bgt.w	8006cfc <_dtoa_r+0x8a4>
 8006b62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006b64:	2a00      	cmp	r2, #0
 8006b66:	f000 80c1 	beq.w	8006cec <_dtoa_r+0x894>
 8006b6a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006b6e:	9c08      	ldr	r4, [sp, #32]
 8006b70:	9e00      	ldr	r6, [sp, #0]
 8006b72:	9a00      	ldr	r2, [sp, #0]
 8006b74:	441a      	add	r2, r3
 8006b76:	9200      	str	r2, [sp, #0]
 8006b78:	9a06      	ldr	r2, [sp, #24]
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	441a      	add	r2, r3
 8006b7e:	4648      	mov	r0, r9
 8006b80:	9206      	str	r2, [sp, #24]
 8006b82:	f000 fc77 	bl	8007474 <__i2b>
 8006b86:	4605      	mov	r5, r0
 8006b88:	b166      	cbz	r6, 8006ba4 <_dtoa_r+0x74c>
 8006b8a:	9b06      	ldr	r3, [sp, #24]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dd09      	ble.n	8006ba4 <_dtoa_r+0x74c>
 8006b90:	42b3      	cmp	r3, r6
 8006b92:	9a00      	ldr	r2, [sp, #0]
 8006b94:	bfa8      	it	ge
 8006b96:	4633      	movge	r3, r6
 8006b98:	1ad2      	subs	r2, r2, r3
 8006b9a:	9200      	str	r2, [sp, #0]
 8006b9c:	9a06      	ldr	r2, [sp, #24]
 8006b9e:	1af6      	subs	r6, r6, r3
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	9306      	str	r3, [sp, #24]
 8006ba4:	9b08      	ldr	r3, [sp, #32]
 8006ba6:	b30b      	cbz	r3, 8006bec <_dtoa_r+0x794>
 8006ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 80c6 	beq.w	8006d3c <_dtoa_r+0x8e4>
 8006bb0:	2c00      	cmp	r4, #0
 8006bb2:	f000 80c0 	beq.w	8006d36 <_dtoa_r+0x8de>
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	4622      	mov	r2, r4
 8006bba:	4648      	mov	r0, r9
 8006bbc:	f000 fd12 	bl	80075e4 <__pow5mult>
 8006bc0:	9a02      	ldr	r2, [sp, #8]
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	4648      	mov	r0, r9
 8006bc8:	f000 fc6a 	bl	80074a0 <__multiply>
 8006bcc:	9902      	ldr	r1, [sp, #8]
 8006bce:	4680      	mov	r8, r0
 8006bd0:	4648      	mov	r0, r9
 8006bd2:	f000 fb51 	bl	8007278 <_Bfree>
 8006bd6:	9b08      	ldr	r3, [sp, #32]
 8006bd8:	1b1b      	subs	r3, r3, r4
 8006bda:	9308      	str	r3, [sp, #32]
 8006bdc:	f000 80b1 	beq.w	8006d42 <_dtoa_r+0x8ea>
 8006be0:	9a08      	ldr	r2, [sp, #32]
 8006be2:	4641      	mov	r1, r8
 8006be4:	4648      	mov	r0, r9
 8006be6:	f000 fcfd 	bl	80075e4 <__pow5mult>
 8006bea:	9002      	str	r0, [sp, #8]
 8006bec:	2101      	movs	r1, #1
 8006bee:	4648      	mov	r0, r9
 8006bf0:	f000 fc40 	bl	8007474 <__i2b>
 8006bf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 81d8 	beq.w	8006fae <_dtoa_r+0xb56>
 8006bfe:	461a      	mov	r2, r3
 8006c00:	4601      	mov	r1, r0
 8006c02:	4648      	mov	r0, r9
 8006c04:	f000 fcee 	bl	80075e4 <__pow5mult>
 8006c08:	9b07      	ldr	r3, [sp, #28]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	f300 809f 	bgt.w	8006d50 <_dtoa_r+0x8f8>
 8006c12:	9b04      	ldr	r3, [sp, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f040 8097 	bne.w	8006d48 <_dtoa_r+0x8f0>
 8006c1a:	9b05      	ldr	r3, [sp, #20]
 8006c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f040 8093 	bne.w	8006d4c <_dtoa_r+0x8f4>
 8006c26:	9b05      	ldr	r3, [sp, #20]
 8006c28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c2c:	0d1b      	lsrs	r3, r3, #20
 8006c2e:	051b      	lsls	r3, r3, #20
 8006c30:	b133      	cbz	r3, 8006c40 <_dtoa_r+0x7e8>
 8006c32:	9b00      	ldr	r3, [sp, #0]
 8006c34:	3301      	adds	r3, #1
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	9b06      	ldr	r3, [sp, #24]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	9306      	str	r3, [sp, #24]
 8006c3e:	2301      	movs	r3, #1
 8006c40:	9308      	str	r3, [sp, #32]
 8006c42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 81b8 	beq.w	8006fba <_dtoa_r+0xb62>
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c50:	6918      	ldr	r0, [r3, #16]
 8006c52:	f000 fbc3 	bl	80073dc <__hi0bits>
 8006c56:	f1c0 0020 	rsb	r0, r0, #32
 8006c5a:	9b06      	ldr	r3, [sp, #24]
 8006c5c:	4418      	add	r0, r3
 8006c5e:	f010 001f 	ands.w	r0, r0, #31
 8006c62:	f000 8082 	beq.w	8006d6a <_dtoa_r+0x912>
 8006c66:	f1c0 0320 	rsb	r3, r0, #32
 8006c6a:	2b04      	cmp	r3, #4
 8006c6c:	dd73      	ble.n	8006d56 <_dtoa_r+0x8fe>
 8006c6e:	9b00      	ldr	r3, [sp, #0]
 8006c70:	f1c0 001c 	rsb	r0, r0, #28
 8006c74:	4403      	add	r3, r0
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	9b06      	ldr	r3, [sp, #24]
 8006c7a:	4403      	add	r3, r0
 8006c7c:	4406      	add	r6, r0
 8006c7e:	9306      	str	r3, [sp, #24]
 8006c80:	9b00      	ldr	r3, [sp, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	dd05      	ble.n	8006c92 <_dtoa_r+0x83a>
 8006c86:	9902      	ldr	r1, [sp, #8]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4648      	mov	r0, r9
 8006c8c:	f000 fd04 	bl	8007698 <__lshift>
 8006c90:	9002      	str	r0, [sp, #8]
 8006c92:	9b06      	ldr	r3, [sp, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	dd05      	ble.n	8006ca4 <_dtoa_r+0x84c>
 8006c98:	4621      	mov	r1, r4
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	4648      	mov	r0, r9
 8006c9e:	f000 fcfb 	bl	8007698 <__lshift>
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d061      	beq.n	8006d6e <_dtoa_r+0x916>
 8006caa:	9802      	ldr	r0, [sp, #8]
 8006cac:	4621      	mov	r1, r4
 8006cae:	f000 fd5f 	bl	8007770 <__mcmp>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	da5b      	bge.n	8006d6e <_dtoa_r+0x916>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	9902      	ldr	r1, [sp, #8]
 8006cba:	220a      	movs	r2, #10
 8006cbc:	4648      	mov	r0, r9
 8006cbe:	f000 fafd 	bl	80072bc <__multadd>
 8006cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc4:	9002      	str	r0, [sp, #8]
 8006cc6:	f107 38ff 	add.w	r8, r7, #4294967295
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 8177 	beq.w	8006fbe <_dtoa_r+0xb66>
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	220a      	movs	r2, #10
 8006cd6:	4648      	mov	r0, r9
 8006cd8:	f000 faf0 	bl	80072bc <__multadd>
 8006cdc:	f1bb 0f00 	cmp.w	fp, #0
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	dc6f      	bgt.n	8006dc4 <_dtoa_r+0x96c>
 8006ce4:	9b07      	ldr	r3, [sp, #28]
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	dc49      	bgt.n	8006d7e <_dtoa_r+0x926>
 8006cea:	e06b      	b.n	8006dc4 <_dtoa_r+0x96c>
 8006cec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006cee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006cf2:	e73c      	b.n	8006b6e <_dtoa_r+0x716>
 8006cf4:	3fe00000 	.word	0x3fe00000
 8006cf8:	40240000 	.word	0x40240000
 8006cfc:	9b03      	ldr	r3, [sp, #12]
 8006cfe:	1e5c      	subs	r4, r3, #1
 8006d00:	9b08      	ldr	r3, [sp, #32]
 8006d02:	42a3      	cmp	r3, r4
 8006d04:	db09      	blt.n	8006d1a <_dtoa_r+0x8c2>
 8006d06:	1b1c      	subs	r4, r3, r4
 8006d08:	9b03      	ldr	r3, [sp, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f6bf af30 	bge.w	8006b70 <_dtoa_r+0x718>
 8006d10:	9b00      	ldr	r3, [sp, #0]
 8006d12:	9a03      	ldr	r2, [sp, #12]
 8006d14:	1a9e      	subs	r6, r3, r2
 8006d16:	2300      	movs	r3, #0
 8006d18:	e72b      	b.n	8006b72 <_dtoa_r+0x71a>
 8006d1a:	9b08      	ldr	r3, [sp, #32]
 8006d1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006d1e:	9408      	str	r4, [sp, #32]
 8006d20:	1ae3      	subs	r3, r4, r3
 8006d22:	441a      	add	r2, r3
 8006d24:	9e00      	ldr	r6, [sp, #0]
 8006d26:	9b03      	ldr	r3, [sp, #12]
 8006d28:	920d      	str	r2, [sp, #52]	@ 0x34
 8006d2a:	2400      	movs	r4, #0
 8006d2c:	e721      	b.n	8006b72 <_dtoa_r+0x71a>
 8006d2e:	9c08      	ldr	r4, [sp, #32]
 8006d30:	9e00      	ldr	r6, [sp, #0]
 8006d32:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006d34:	e728      	b.n	8006b88 <_dtoa_r+0x730>
 8006d36:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006d3a:	e751      	b.n	8006be0 <_dtoa_r+0x788>
 8006d3c:	9a08      	ldr	r2, [sp, #32]
 8006d3e:	9902      	ldr	r1, [sp, #8]
 8006d40:	e750      	b.n	8006be4 <_dtoa_r+0x78c>
 8006d42:	f8cd 8008 	str.w	r8, [sp, #8]
 8006d46:	e751      	b.n	8006bec <_dtoa_r+0x794>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e779      	b.n	8006c40 <_dtoa_r+0x7e8>
 8006d4c:	9b04      	ldr	r3, [sp, #16]
 8006d4e:	e777      	b.n	8006c40 <_dtoa_r+0x7e8>
 8006d50:	2300      	movs	r3, #0
 8006d52:	9308      	str	r3, [sp, #32]
 8006d54:	e779      	b.n	8006c4a <_dtoa_r+0x7f2>
 8006d56:	d093      	beq.n	8006c80 <_dtoa_r+0x828>
 8006d58:	9a00      	ldr	r2, [sp, #0]
 8006d5a:	331c      	adds	r3, #28
 8006d5c:	441a      	add	r2, r3
 8006d5e:	9200      	str	r2, [sp, #0]
 8006d60:	9a06      	ldr	r2, [sp, #24]
 8006d62:	441a      	add	r2, r3
 8006d64:	441e      	add	r6, r3
 8006d66:	9206      	str	r2, [sp, #24]
 8006d68:	e78a      	b.n	8006c80 <_dtoa_r+0x828>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	e7f4      	b.n	8006d58 <_dtoa_r+0x900>
 8006d6e:	9b03      	ldr	r3, [sp, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	46b8      	mov	r8, r7
 8006d74:	dc20      	bgt.n	8006db8 <_dtoa_r+0x960>
 8006d76:	469b      	mov	fp, r3
 8006d78:	9b07      	ldr	r3, [sp, #28]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	dd1e      	ble.n	8006dbc <_dtoa_r+0x964>
 8006d7e:	f1bb 0f00 	cmp.w	fp, #0
 8006d82:	f47f adb1 	bne.w	80068e8 <_dtoa_r+0x490>
 8006d86:	4621      	mov	r1, r4
 8006d88:	465b      	mov	r3, fp
 8006d8a:	2205      	movs	r2, #5
 8006d8c:	4648      	mov	r0, r9
 8006d8e:	f000 fa95 	bl	80072bc <__multadd>
 8006d92:	4601      	mov	r1, r0
 8006d94:	4604      	mov	r4, r0
 8006d96:	9802      	ldr	r0, [sp, #8]
 8006d98:	f000 fcea 	bl	8007770 <__mcmp>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	f77f ada3 	ble.w	80068e8 <_dtoa_r+0x490>
 8006da2:	4656      	mov	r6, sl
 8006da4:	2331      	movs	r3, #49	@ 0x31
 8006da6:	f806 3b01 	strb.w	r3, [r6], #1
 8006daa:	f108 0801 	add.w	r8, r8, #1
 8006dae:	e59f      	b.n	80068f0 <_dtoa_r+0x498>
 8006db0:	9c03      	ldr	r4, [sp, #12]
 8006db2:	46b8      	mov	r8, r7
 8006db4:	4625      	mov	r5, r4
 8006db6:	e7f4      	b.n	8006da2 <_dtoa_r+0x94a>
 8006db8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 8101 	beq.w	8006fc6 <_dtoa_r+0xb6e>
 8006dc4:	2e00      	cmp	r6, #0
 8006dc6:	dd05      	ble.n	8006dd4 <_dtoa_r+0x97c>
 8006dc8:	4629      	mov	r1, r5
 8006dca:	4632      	mov	r2, r6
 8006dcc:	4648      	mov	r0, r9
 8006dce:	f000 fc63 	bl	8007698 <__lshift>
 8006dd2:	4605      	mov	r5, r0
 8006dd4:	9b08      	ldr	r3, [sp, #32]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d05c      	beq.n	8006e94 <_dtoa_r+0xa3c>
 8006dda:	6869      	ldr	r1, [r5, #4]
 8006ddc:	4648      	mov	r0, r9
 8006dde:	f000 fa0b 	bl	80071f8 <_Balloc>
 8006de2:	4606      	mov	r6, r0
 8006de4:	b928      	cbnz	r0, 8006df2 <_dtoa_r+0x99a>
 8006de6:	4b82      	ldr	r3, [pc, #520]	@ (8006ff0 <_dtoa_r+0xb98>)
 8006de8:	4602      	mov	r2, r0
 8006dea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006dee:	f7ff bb4a 	b.w	8006486 <_dtoa_r+0x2e>
 8006df2:	692a      	ldr	r2, [r5, #16]
 8006df4:	3202      	adds	r2, #2
 8006df6:	0092      	lsls	r2, r2, #2
 8006df8:	f105 010c 	add.w	r1, r5, #12
 8006dfc:	300c      	adds	r0, #12
 8006dfe:	f001 ff69 	bl	8008cd4 <memcpy>
 8006e02:	2201      	movs	r2, #1
 8006e04:	4631      	mov	r1, r6
 8006e06:	4648      	mov	r0, r9
 8006e08:	f000 fc46 	bl	8007698 <__lshift>
 8006e0c:	f10a 0301 	add.w	r3, sl, #1
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	eb0a 030b 	add.w	r3, sl, fp
 8006e16:	9308      	str	r3, [sp, #32]
 8006e18:	9b04      	ldr	r3, [sp, #16]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	462f      	mov	r7, r5
 8006e20:	9306      	str	r3, [sp, #24]
 8006e22:	4605      	mov	r5, r0
 8006e24:	9b00      	ldr	r3, [sp, #0]
 8006e26:	9802      	ldr	r0, [sp, #8]
 8006e28:	4621      	mov	r1, r4
 8006e2a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006e2e:	f7ff fa8b 	bl	8006348 <quorem>
 8006e32:	4603      	mov	r3, r0
 8006e34:	3330      	adds	r3, #48	@ 0x30
 8006e36:	9003      	str	r0, [sp, #12]
 8006e38:	4639      	mov	r1, r7
 8006e3a:	9802      	ldr	r0, [sp, #8]
 8006e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e3e:	f000 fc97 	bl	8007770 <__mcmp>
 8006e42:	462a      	mov	r2, r5
 8006e44:	9004      	str	r0, [sp, #16]
 8006e46:	4621      	mov	r1, r4
 8006e48:	4648      	mov	r0, r9
 8006e4a:	f000 fcad 	bl	80077a8 <__mdiff>
 8006e4e:	68c2      	ldr	r2, [r0, #12]
 8006e50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e52:	4606      	mov	r6, r0
 8006e54:	bb02      	cbnz	r2, 8006e98 <_dtoa_r+0xa40>
 8006e56:	4601      	mov	r1, r0
 8006e58:	9802      	ldr	r0, [sp, #8]
 8006e5a:	f000 fc89 	bl	8007770 <__mcmp>
 8006e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e60:	4602      	mov	r2, r0
 8006e62:	4631      	mov	r1, r6
 8006e64:	4648      	mov	r0, r9
 8006e66:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e68:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e6a:	f000 fa05 	bl	8007278 <_Bfree>
 8006e6e:	9b07      	ldr	r3, [sp, #28]
 8006e70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006e72:	9e00      	ldr	r6, [sp, #0]
 8006e74:	ea42 0103 	orr.w	r1, r2, r3
 8006e78:	9b06      	ldr	r3, [sp, #24]
 8006e7a:	4319      	orrs	r1, r3
 8006e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e7e:	d10d      	bne.n	8006e9c <_dtoa_r+0xa44>
 8006e80:	2b39      	cmp	r3, #57	@ 0x39
 8006e82:	d027      	beq.n	8006ed4 <_dtoa_r+0xa7c>
 8006e84:	9a04      	ldr	r2, [sp, #16]
 8006e86:	2a00      	cmp	r2, #0
 8006e88:	dd01      	ble.n	8006e8e <_dtoa_r+0xa36>
 8006e8a:	9b03      	ldr	r3, [sp, #12]
 8006e8c:	3331      	adds	r3, #49	@ 0x31
 8006e8e:	f88b 3000 	strb.w	r3, [fp]
 8006e92:	e52e      	b.n	80068f2 <_dtoa_r+0x49a>
 8006e94:	4628      	mov	r0, r5
 8006e96:	e7b9      	b.n	8006e0c <_dtoa_r+0x9b4>
 8006e98:	2201      	movs	r2, #1
 8006e9a:	e7e2      	b.n	8006e62 <_dtoa_r+0xa0a>
 8006e9c:	9904      	ldr	r1, [sp, #16]
 8006e9e:	2900      	cmp	r1, #0
 8006ea0:	db04      	blt.n	8006eac <_dtoa_r+0xa54>
 8006ea2:	9807      	ldr	r0, [sp, #28]
 8006ea4:	4301      	orrs	r1, r0
 8006ea6:	9806      	ldr	r0, [sp, #24]
 8006ea8:	4301      	orrs	r1, r0
 8006eaa:	d120      	bne.n	8006eee <_dtoa_r+0xa96>
 8006eac:	2a00      	cmp	r2, #0
 8006eae:	ddee      	ble.n	8006e8e <_dtoa_r+0xa36>
 8006eb0:	9902      	ldr	r1, [sp, #8]
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	4648      	mov	r0, r9
 8006eb8:	f000 fbee 	bl	8007698 <__lshift>
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	9002      	str	r0, [sp, #8]
 8006ec0:	f000 fc56 	bl	8007770 <__mcmp>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	9b00      	ldr	r3, [sp, #0]
 8006ec8:	dc02      	bgt.n	8006ed0 <_dtoa_r+0xa78>
 8006eca:	d1e0      	bne.n	8006e8e <_dtoa_r+0xa36>
 8006ecc:	07da      	lsls	r2, r3, #31
 8006ece:	d5de      	bpl.n	8006e8e <_dtoa_r+0xa36>
 8006ed0:	2b39      	cmp	r3, #57	@ 0x39
 8006ed2:	d1da      	bne.n	8006e8a <_dtoa_r+0xa32>
 8006ed4:	2339      	movs	r3, #57	@ 0x39
 8006ed6:	f88b 3000 	strb.w	r3, [fp]
 8006eda:	4633      	mov	r3, r6
 8006edc:	461e      	mov	r6, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006ee4:	2a39      	cmp	r2, #57	@ 0x39
 8006ee6:	d04e      	beq.n	8006f86 <_dtoa_r+0xb2e>
 8006ee8:	3201      	adds	r2, #1
 8006eea:	701a      	strb	r2, [r3, #0]
 8006eec:	e501      	b.n	80068f2 <_dtoa_r+0x49a>
 8006eee:	2a00      	cmp	r2, #0
 8006ef0:	dd03      	ble.n	8006efa <_dtoa_r+0xaa2>
 8006ef2:	2b39      	cmp	r3, #57	@ 0x39
 8006ef4:	d0ee      	beq.n	8006ed4 <_dtoa_r+0xa7c>
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	e7c9      	b.n	8006e8e <_dtoa_r+0xa36>
 8006efa:	9a00      	ldr	r2, [sp, #0]
 8006efc:	9908      	ldr	r1, [sp, #32]
 8006efe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f02:	428a      	cmp	r2, r1
 8006f04:	d028      	beq.n	8006f58 <_dtoa_r+0xb00>
 8006f06:	9902      	ldr	r1, [sp, #8]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	220a      	movs	r2, #10
 8006f0c:	4648      	mov	r0, r9
 8006f0e:	f000 f9d5 	bl	80072bc <__multadd>
 8006f12:	42af      	cmp	r7, r5
 8006f14:	9002      	str	r0, [sp, #8]
 8006f16:	f04f 0300 	mov.w	r3, #0
 8006f1a:	f04f 020a 	mov.w	r2, #10
 8006f1e:	4639      	mov	r1, r7
 8006f20:	4648      	mov	r0, r9
 8006f22:	d107      	bne.n	8006f34 <_dtoa_r+0xadc>
 8006f24:	f000 f9ca 	bl	80072bc <__multadd>
 8006f28:	4607      	mov	r7, r0
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	9b00      	ldr	r3, [sp, #0]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	e777      	b.n	8006e24 <_dtoa_r+0x9cc>
 8006f34:	f000 f9c2 	bl	80072bc <__multadd>
 8006f38:	4629      	mov	r1, r5
 8006f3a:	4607      	mov	r7, r0
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	220a      	movs	r2, #10
 8006f40:	4648      	mov	r0, r9
 8006f42:	f000 f9bb 	bl	80072bc <__multadd>
 8006f46:	4605      	mov	r5, r0
 8006f48:	e7f0      	b.n	8006f2c <_dtoa_r+0xad4>
 8006f4a:	f1bb 0f00 	cmp.w	fp, #0
 8006f4e:	bfcc      	ite	gt
 8006f50:	465e      	movgt	r6, fp
 8006f52:	2601      	movle	r6, #1
 8006f54:	4456      	add	r6, sl
 8006f56:	2700      	movs	r7, #0
 8006f58:	9902      	ldr	r1, [sp, #8]
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	4648      	mov	r0, r9
 8006f60:	f000 fb9a 	bl	8007698 <__lshift>
 8006f64:	4621      	mov	r1, r4
 8006f66:	9002      	str	r0, [sp, #8]
 8006f68:	f000 fc02 	bl	8007770 <__mcmp>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	dcb4      	bgt.n	8006eda <_dtoa_r+0xa82>
 8006f70:	d102      	bne.n	8006f78 <_dtoa_r+0xb20>
 8006f72:	9b00      	ldr	r3, [sp, #0]
 8006f74:	07db      	lsls	r3, r3, #31
 8006f76:	d4b0      	bmi.n	8006eda <_dtoa_r+0xa82>
 8006f78:	4633      	mov	r3, r6
 8006f7a:	461e      	mov	r6, r3
 8006f7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f80:	2a30      	cmp	r2, #48	@ 0x30
 8006f82:	d0fa      	beq.n	8006f7a <_dtoa_r+0xb22>
 8006f84:	e4b5      	b.n	80068f2 <_dtoa_r+0x49a>
 8006f86:	459a      	cmp	sl, r3
 8006f88:	d1a8      	bne.n	8006edc <_dtoa_r+0xa84>
 8006f8a:	2331      	movs	r3, #49	@ 0x31
 8006f8c:	f108 0801 	add.w	r8, r8, #1
 8006f90:	f88a 3000 	strb.w	r3, [sl]
 8006f94:	e4ad      	b.n	80068f2 <_dtoa_r+0x49a>
 8006f96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f98:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006ff4 <_dtoa_r+0xb9c>
 8006f9c:	b11b      	cbz	r3, 8006fa6 <_dtoa_r+0xb4e>
 8006f9e:	f10a 0308 	add.w	r3, sl, #8
 8006fa2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	4650      	mov	r0, sl
 8006fa8:	b017      	add	sp, #92	@ 0x5c
 8006faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fae:	9b07      	ldr	r3, [sp, #28]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	f77f ae2e 	ble.w	8006c12 <_dtoa_r+0x7ba>
 8006fb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fb8:	9308      	str	r3, [sp, #32]
 8006fba:	2001      	movs	r0, #1
 8006fbc:	e64d      	b.n	8006c5a <_dtoa_r+0x802>
 8006fbe:	f1bb 0f00 	cmp.w	fp, #0
 8006fc2:	f77f aed9 	ble.w	8006d78 <_dtoa_r+0x920>
 8006fc6:	4656      	mov	r6, sl
 8006fc8:	9802      	ldr	r0, [sp, #8]
 8006fca:	4621      	mov	r1, r4
 8006fcc:	f7ff f9bc 	bl	8006348 <quorem>
 8006fd0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006fd4:	f806 3b01 	strb.w	r3, [r6], #1
 8006fd8:	eba6 020a 	sub.w	r2, r6, sl
 8006fdc:	4593      	cmp	fp, r2
 8006fde:	ddb4      	ble.n	8006f4a <_dtoa_r+0xaf2>
 8006fe0:	9902      	ldr	r1, [sp, #8]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	220a      	movs	r2, #10
 8006fe6:	4648      	mov	r0, r9
 8006fe8:	f000 f968 	bl	80072bc <__multadd>
 8006fec:	9002      	str	r0, [sp, #8]
 8006fee:	e7eb      	b.n	8006fc8 <_dtoa_r+0xb70>
 8006ff0:	08009bf1 	.word	0x08009bf1
 8006ff4:	08009b75 	.word	0x08009b75

08006ff8 <_free_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	d041      	beq.n	8007084 <_free_r+0x8c>
 8007000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007004:	1f0c      	subs	r4, r1, #4
 8007006:	2b00      	cmp	r3, #0
 8007008:	bfb8      	it	lt
 800700a:	18e4      	addlt	r4, r4, r3
 800700c:	f000 f8e8 	bl	80071e0 <__malloc_lock>
 8007010:	4a1d      	ldr	r2, [pc, #116]	@ (8007088 <_free_r+0x90>)
 8007012:	6813      	ldr	r3, [r2, #0]
 8007014:	b933      	cbnz	r3, 8007024 <_free_r+0x2c>
 8007016:	6063      	str	r3, [r4, #4]
 8007018:	6014      	str	r4, [r2, #0]
 800701a:	4628      	mov	r0, r5
 800701c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007020:	f000 b8e4 	b.w	80071ec <__malloc_unlock>
 8007024:	42a3      	cmp	r3, r4
 8007026:	d908      	bls.n	800703a <_free_r+0x42>
 8007028:	6820      	ldr	r0, [r4, #0]
 800702a:	1821      	adds	r1, r4, r0
 800702c:	428b      	cmp	r3, r1
 800702e:	bf01      	itttt	eq
 8007030:	6819      	ldreq	r1, [r3, #0]
 8007032:	685b      	ldreq	r3, [r3, #4]
 8007034:	1809      	addeq	r1, r1, r0
 8007036:	6021      	streq	r1, [r4, #0]
 8007038:	e7ed      	b.n	8007016 <_free_r+0x1e>
 800703a:	461a      	mov	r2, r3
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	b10b      	cbz	r3, 8007044 <_free_r+0x4c>
 8007040:	42a3      	cmp	r3, r4
 8007042:	d9fa      	bls.n	800703a <_free_r+0x42>
 8007044:	6811      	ldr	r1, [r2, #0]
 8007046:	1850      	adds	r0, r2, r1
 8007048:	42a0      	cmp	r0, r4
 800704a:	d10b      	bne.n	8007064 <_free_r+0x6c>
 800704c:	6820      	ldr	r0, [r4, #0]
 800704e:	4401      	add	r1, r0
 8007050:	1850      	adds	r0, r2, r1
 8007052:	4283      	cmp	r3, r0
 8007054:	6011      	str	r1, [r2, #0]
 8007056:	d1e0      	bne.n	800701a <_free_r+0x22>
 8007058:	6818      	ldr	r0, [r3, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	6053      	str	r3, [r2, #4]
 800705e:	4408      	add	r0, r1
 8007060:	6010      	str	r0, [r2, #0]
 8007062:	e7da      	b.n	800701a <_free_r+0x22>
 8007064:	d902      	bls.n	800706c <_free_r+0x74>
 8007066:	230c      	movs	r3, #12
 8007068:	602b      	str	r3, [r5, #0]
 800706a:	e7d6      	b.n	800701a <_free_r+0x22>
 800706c:	6820      	ldr	r0, [r4, #0]
 800706e:	1821      	adds	r1, r4, r0
 8007070:	428b      	cmp	r3, r1
 8007072:	bf04      	itt	eq
 8007074:	6819      	ldreq	r1, [r3, #0]
 8007076:	685b      	ldreq	r3, [r3, #4]
 8007078:	6063      	str	r3, [r4, #4]
 800707a:	bf04      	itt	eq
 800707c:	1809      	addeq	r1, r1, r0
 800707e:	6021      	streq	r1, [r4, #0]
 8007080:	6054      	str	r4, [r2, #4]
 8007082:	e7ca      	b.n	800701a <_free_r+0x22>
 8007084:	bd38      	pop	{r3, r4, r5, pc}
 8007086:	bf00      	nop
 8007088:	20000500 	.word	0x20000500

0800708c <malloc>:
 800708c:	4b02      	ldr	r3, [pc, #8]	@ (8007098 <malloc+0xc>)
 800708e:	4601      	mov	r1, r0
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	f000 b825 	b.w	80070e0 <_malloc_r>
 8007096:	bf00      	nop
 8007098:	20000024 	.word	0x20000024

0800709c <sbrk_aligned>:
 800709c:	b570      	push	{r4, r5, r6, lr}
 800709e:	4e0f      	ldr	r6, [pc, #60]	@ (80070dc <sbrk_aligned+0x40>)
 80070a0:	460c      	mov	r4, r1
 80070a2:	6831      	ldr	r1, [r6, #0]
 80070a4:	4605      	mov	r5, r0
 80070a6:	b911      	cbnz	r1, 80070ae <sbrk_aligned+0x12>
 80070a8:	f001 fe04 	bl	8008cb4 <_sbrk_r>
 80070ac:	6030      	str	r0, [r6, #0]
 80070ae:	4621      	mov	r1, r4
 80070b0:	4628      	mov	r0, r5
 80070b2:	f001 fdff 	bl	8008cb4 <_sbrk_r>
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	d103      	bne.n	80070c2 <sbrk_aligned+0x26>
 80070ba:	f04f 34ff 	mov.w	r4, #4294967295
 80070be:	4620      	mov	r0, r4
 80070c0:	bd70      	pop	{r4, r5, r6, pc}
 80070c2:	1cc4      	adds	r4, r0, #3
 80070c4:	f024 0403 	bic.w	r4, r4, #3
 80070c8:	42a0      	cmp	r0, r4
 80070ca:	d0f8      	beq.n	80070be <sbrk_aligned+0x22>
 80070cc:	1a21      	subs	r1, r4, r0
 80070ce:	4628      	mov	r0, r5
 80070d0:	f001 fdf0 	bl	8008cb4 <_sbrk_r>
 80070d4:	3001      	adds	r0, #1
 80070d6:	d1f2      	bne.n	80070be <sbrk_aligned+0x22>
 80070d8:	e7ef      	b.n	80070ba <sbrk_aligned+0x1e>
 80070da:	bf00      	nop
 80070dc:	200004fc 	.word	0x200004fc

080070e0 <_malloc_r>:
 80070e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070e4:	1ccd      	adds	r5, r1, #3
 80070e6:	f025 0503 	bic.w	r5, r5, #3
 80070ea:	3508      	adds	r5, #8
 80070ec:	2d0c      	cmp	r5, #12
 80070ee:	bf38      	it	cc
 80070f0:	250c      	movcc	r5, #12
 80070f2:	2d00      	cmp	r5, #0
 80070f4:	4606      	mov	r6, r0
 80070f6:	db01      	blt.n	80070fc <_malloc_r+0x1c>
 80070f8:	42a9      	cmp	r1, r5
 80070fa:	d904      	bls.n	8007106 <_malloc_r+0x26>
 80070fc:	230c      	movs	r3, #12
 80070fe:	6033      	str	r3, [r6, #0]
 8007100:	2000      	movs	r0, #0
 8007102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007106:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071dc <_malloc_r+0xfc>
 800710a:	f000 f869 	bl	80071e0 <__malloc_lock>
 800710e:	f8d8 3000 	ldr.w	r3, [r8]
 8007112:	461c      	mov	r4, r3
 8007114:	bb44      	cbnz	r4, 8007168 <_malloc_r+0x88>
 8007116:	4629      	mov	r1, r5
 8007118:	4630      	mov	r0, r6
 800711a:	f7ff ffbf 	bl	800709c <sbrk_aligned>
 800711e:	1c43      	adds	r3, r0, #1
 8007120:	4604      	mov	r4, r0
 8007122:	d158      	bne.n	80071d6 <_malloc_r+0xf6>
 8007124:	f8d8 4000 	ldr.w	r4, [r8]
 8007128:	4627      	mov	r7, r4
 800712a:	2f00      	cmp	r7, #0
 800712c:	d143      	bne.n	80071b6 <_malloc_r+0xd6>
 800712e:	2c00      	cmp	r4, #0
 8007130:	d04b      	beq.n	80071ca <_malloc_r+0xea>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	4639      	mov	r1, r7
 8007136:	4630      	mov	r0, r6
 8007138:	eb04 0903 	add.w	r9, r4, r3
 800713c:	f001 fdba 	bl	8008cb4 <_sbrk_r>
 8007140:	4581      	cmp	r9, r0
 8007142:	d142      	bne.n	80071ca <_malloc_r+0xea>
 8007144:	6821      	ldr	r1, [r4, #0]
 8007146:	1a6d      	subs	r5, r5, r1
 8007148:	4629      	mov	r1, r5
 800714a:	4630      	mov	r0, r6
 800714c:	f7ff ffa6 	bl	800709c <sbrk_aligned>
 8007150:	3001      	adds	r0, #1
 8007152:	d03a      	beq.n	80071ca <_malloc_r+0xea>
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	442b      	add	r3, r5
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	f8d8 3000 	ldr.w	r3, [r8]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	bb62      	cbnz	r2, 80071bc <_malloc_r+0xdc>
 8007162:	f8c8 7000 	str.w	r7, [r8]
 8007166:	e00f      	b.n	8007188 <_malloc_r+0xa8>
 8007168:	6822      	ldr	r2, [r4, #0]
 800716a:	1b52      	subs	r2, r2, r5
 800716c:	d420      	bmi.n	80071b0 <_malloc_r+0xd0>
 800716e:	2a0b      	cmp	r2, #11
 8007170:	d917      	bls.n	80071a2 <_malloc_r+0xc2>
 8007172:	1961      	adds	r1, r4, r5
 8007174:	42a3      	cmp	r3, r4
 8007176:	6025      	str	r5, [r4, #0]
 8007178:	bf18      	it	ne
 800717a:	6059      	strne	r1, [r3, #4]
 800717c:	6863      	ldr	r3, [r4, #4]
 800717e:	bf08      	it	eq
 8007180:	f8c8 1000 	streq.w	r1, [r8]
 8007184:	5162      	str	r2, [r4, r5]
 8007186:	604b      	str	r3, [r1, #4]
 8007188:	4630      	mov	r0, r6
 800718a:	f000 f82f 	bl	80071ec <__malloc_unlock>
 800718e:	f104 000b 	add.w	r0, r4, #11
 8007192:	1d23      	adds	r3, r4, #4
 8007194:	f020 0007 	bic.w	r0, r0, #7
 8007198:	1ac2      	subs	r2, r0, r3
 800719a:	bf1c      	itt	ne
 800719c:	1a1b      	subne	r3, r3, r0
 800719e:	50a3      	strne	r3, [r4, r2]
 80071a0:	e7af      	b.n	8007102 <_malloc_r+0x22>
 80071a2:	6862      	ldr	r2, [r4, #4]
 80071a4:	42a3      	cmp	r3, r4
 80071a6:	bf0c      	ite	eq
 80071a8:	f8c8 2000 	streq.w	r2, [r8]
 80071ac:	605a      	strne	r2, [r3, #4]
 80071ae:	e7eb      	b.n	8007188 <_malloc_r+0xa8>
 80071b0:	4623      	mov	r3, r4
 80071b2:	6864      	ldr	r4, [r4, #4]
 80071b4:	e7ae      	b.n	8007114 <_malloc_r+0x34>
 80071b6:	463c      	mov	r4, r7
 80071b8:	687f      	ldr	r7, [r7, #4]
 80071ba:	e7b6      	b.n	800712a <_malloc_r+0x4a>
 80071bc:	461a      	mov	r2, r3
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	42a3      	cmp	r3, r4
 80071c2:	d1fb      	bne.n	80071bc <_malloc_r+0xdc>
 80071c4:	2300      	movs	r3, #0
 80071c6:	6053      	str	r3, [r2, #4]
 80071c8:	e7de      	b.n	8007188 <_malloc_r+0xa8>
 80071ca:	230c      	movs	r3, #12
 80071cc:	6033      	str	r3, [r6, #0]
 80071ce:	4630      	mov	r0, r6
 80071d0:	f000 f80c 	bl	80071ec <__malloc_unlock>
 80071d4:	e794      	b.n	8007100 <_malloc_r+0x20>
 80071d6:	6005      	str	r5, [r0, #0]
 80071d8:	e7d6      	b.n	8007188 <_malloc_r+0xa8>
 80071da:	bf00      	nop
 80071dc:	20000500 	.word	0x20000500

080071e0 <__malloc_lock>:
 80071e0:	4801      	ldr	r0, [pc, #4]	@ (80071e8 <__malloc_lock+0x8>)
 80071e2:	f7ff b8a8 	b.w	8006336 <__retarget_lock_acquire_recursive>
 80071e6:	bf00      	nop
 80071e8:	200004f8 	.word	0x200004f8

080071ec <__malloc_unlock>:
 80071ec:	4801      	ldr	r0, [pc, #4]	@ (80071f4 <__malloc_unlock+0x8>)
 80071ee:	f7ff b8a3 	b.w	8006338 <__retarget_lock_release_recursive>
 80071f2:	bf00      	nop
 80071f4:	200004f8 	.word	0x200004f8

080071f8 <_Balloc>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	69c6      	ldr	r6, [r0, #28]
 80071fc:	4604      	mov	r4, r0
 80071fe:	460d      	mov	r5, r1
 8007200:	b976      	cbnz	r6, 8007220 <_Balloc+0x28>
 8007202:	2010      	movs	r0, #16
 8007204:	f7ff ff42 	bl	800708c <malloc>
 8007208:	4602      	mov	r2, r0
 800720a:	61e0      	str	r0, [r4, #28]
 800720c:	b920      	cbnz	r0, 8007218 <_Balloc+0x20>
 800720e:	4b18      	ldr	r3, [pc, #96]	@ (8007270 <_Balloc+0x78>)
 8007210:	4818      	ldr	r0, [pc, #96]	@ (8007274 <_Balloc+0x7c>)
 8007212:	216b      	movs	r1, #107	@ 0x6b
 8007214:	f001 fd74 	bl	8008d00 <__assert_func>
 8007218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800721c:	6006      	str	r6, [r0, #0]
 800721e:	60c6      	str	r6, [r0, #12]
 8007220:	69e6      	ldr	r6, [r4, #28]
 8007222:	68f3      	ldr	r3, [r6, #12]
 8007224:	b183      	cbz	r3, 8007248 <_Balloc+0x50>
 8007226:	69e3      	ldr	r3, [r4, #28]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800722e:	b9b8      	cbnz	r0, 8007260 <_Balloc+0x68>
 8007230:	2101      	movs	r1, #1
 8007232:	fa01 f605 	lsl.w	r6, r1, r5
 8007236:	1d72      	adds	r2, r6, #5
 8007238:	0092      	lsls	r2, r2, #2
 800723a:	4620      	mov	r0, r4
 800723c:	f001 fd7e 	bl	8008d3c <_calloc_r>
 8007240:	b160      	cbz	r0, 800725c <_Balloc+0x64>
 8007242:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007246:	e00e      	b.n	8007266 <_Balloc+0x6e>
 8007248:	2221      	movs	r2, #33	@ 0x21
 800724a:	2104      	movs	r1, #4
 800724c:	4620      	mov	r0, r4
 800724e:	f001 fd75 	bl	8008d3c <_calloc_r>
 8007252:	69e3      	ldr	r3, [r4, #28]
 8007254:	60f0      	str	r0, [r6, #12]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e4      	bne.n	8007226 <_Balloc+0x2e>
 800725c:	2000      	movs	r0, #0
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	6802      	ldr	r2, [r0, #0]
 8007262:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007266:	2300      	movs	r3, #0
 8007268:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800726c:	e7f7      	b.n	800725e <_Balloc+0x66>
 800726e:	bf00      	nop
 8007270:	08009b82 	.word	0x08009b82
 8007274:	08009c02 	.word	0x08009c02

08007278 <_Bfree>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	69c6      	ldr	r6, [r0, #28]
 800727c:	4605      	mov	r5, r0
 800727e:	460c      	mov	r4, r1
 8007280:	b976      	cbnz	r6, 80072a0 <_Bfree+0x28>
 8007282:	2010      	movs	r0, #16
 8007284:	f7ff ff02 	bl	800708c <malloc>
 8007288:	4602      	mov	r2, r0
 800728a:	61e8      	str	r0, [r5, #28]
 800728c:	b920      	cbnz	r0, 8007298 <_Bfree+0x20>
 800728e:	4b09      	ldr	r3, [pc, #36]	@ (80072b4 <_Bfree+0x3c>)
 8007290:	4809      	ldr	r0, [pc, #36]	@ (80072b8 <_Bfree+0x40>)
 8007292:	218f      	movs	r1, #143	@ 0x8f
 8007294:	f001 fd34 	bl	8008d00 <__assert_func>
 8007298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800729c:	6006      	str	r6, [r0, #0]
 800729e:	60c6      	str	r6, [r0, #12]
 80072a0:	b13c      	cbz	r4, 80072b2 <_Bfree+0x3a>
 80072a2:	69eb      	ldr	r3, [r5, #28]
 80072a4:	6862      	ldr	r2, [r4, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072ac:	6021      	str	r1, [r4, #0]
 80072ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	08009b82 	.word	0x08009b82
 80072b8:	08009c02 	.word	0x08009c02

080072bc <__multadd>:
 80072bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c0:	690d      	ldr	r5, [r1, #16]
 80072c2:	4607      	mov	r7, r0
 80072c4:	460c      	mov	r4, r1
 80072c6:	461e      	mov	r6, r3
 80072c8:	f101 0c14 	add.w	ip, r1, #20
 80072cc:	2000      	movs	r0, #0
 80072ce:	f8dc 3000 	ldr.w	r3, [ip]
 80072d2:	b299      	uxth	r1, r3
 80072d4:	fb02 6101 	mla	r1, r2, r1, r6
 80072d8:	0c1e      	lsrs	r6, r3, #16
 80072da:	0c0b      	lsrs	r3, r1, #16
 80072dc:	fb02 3306 	mla	r3, r2, r6, r3
 80072e0:	b289      	uxth	r1, r1
 80072e2:	3001      	adds	r0, #1
 80072e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072e8:	4285      	cmp	r5, r0
 80072ea:	f84c 1b04 	str.w	r1, [ip], #4
 80072ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072f2:	dcec      	bgt.n	80072ce <__multadd+0x12>
 80072f4:	b30e      	cbz	r6, 800733a <__multadd+0x7e>
 80072f6:	68a3      	ldr	r3, [r4, #8]
 80072f8:	42ab      	cmp	r3, r5
 80072fa:	dc19      	bgt.n	8007330 <__multadd+0x74>
 80072fc:	6861      	ldr	r1, [r4, #4]
 80072fe:	4638      	mov	r0, r7
 8007300:	3101      	adds	r1, #1
 8007302:	f7ff ff79 	bl	80071f8 <_Balloc>
 8007306:	4680      	mov	r8, r0
 8007308:	b928      	cbnz	r0, 8007316 <__multadd+0x5a>
 800730a:	4602      	mov	r2, r0
 800730c:	4b0c      	ldr	r3, [pc, #48]	@ (8007340 <__multadd+0x84>)
 800730e:	480d      	ldr	r0, [pc, #52]	@ (8007344 <__multadd+0x88>)
 8007310:	21ba      	movs	r1, #186	@ 0xba
 8007312:	f001 fcf5 	bl	8008d00 <__assert_func>
 8007316:	6922      	ldr	r2, [r4, #16]
 8007318:	3202      	adds	r2, #2
 800731a:	f104 010c 	add.w	r1, r4, #12
 800731e:	0092      	lsls	r2, r2, #2
 8007320:	300c      	adds	r0, #12
 8007322:	f001 fcd7 	bl	8008cd4 <memcpy>
 8007326:	4621      	mov	r1, r4
 8007328:	4638      	mov	r0, r7
 800732a:	f7ff ffa5 	bl	8007278 <_Bfree>
 800732e:	4644      	mov	r4, r8
 8007330:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007334:	3501      	adds	r5, #1
 8007336:	615e      	str	r6, [r3, #20]
 8007338:	6125      	str	r5, [r4, #16]
 800733a:	4620      	mov	r0, r4
 800733c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007340:	08009bf1 	.word	0x08009bf1
 8007344:	08009c02 	.word	0x08009c02

08007348 <__s2b>:
 8007348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800734c:	460c      	mov	r4, r1
 800734e:	4615      	mov	r5, r2
 8007350:	461f      	mov	r7, r3
 8007352:	2209      	movs	r2, #9
 8007354:	3308      	adds	r3, #8
 8007356:	4606      	mov	r6, r0
 8007358:	fb93 f3f2 	sdiv	r3, r3, r2
 800735c:	2100      	movs	r1, #0
 800735e:	2201      	movs	r2, #1
 8007360:	429a      	cmp	r2, r3
 8007362:	db09      	blt.n	8007378 <__s2b+0x30>
 8007364:	4630      	mov	r0, r6
 8007366:	f7ff ff47 	bl	80071f8 <_Balloc>
 800736a:	b940      	cbnz	r0, 800737e <__s2b+0x36>
 800736c:	4602      	mov	r2, r0
 800736e:	4b19      	ldr	r3, [pc, #100]	@ (80073d4 <__s2b+0x8c>)
 8007370:	4819      	ldr	r0, [pc, #100]	@ (80073d8 <__s2b+0x90>)
 8007372:	21d3      	movs	r1, #211	@ 0xd3
 8007374:	f001 fcc4 	bl	8008d00 <__assert_func>
 8007378:	0052      	lsls	r2, r2, #1
 800737a:	3101      	adds	r1, #1
 800737c:	e7f0      	b.n	8007360 <__s2b+0x18>
 800737e:	9b08      	ldr	r3, [sp, #32]
 8007380:	6143      	str	r3, [r0, #20]
 8007382:	2d09      	cmp	r5, #9
 8007384:	f04f 0301 	mov.w	r3, #1
 8007388:	6103      	str	r3, [r0, #16]
 800738a:	dd16      	ble.n	80073ba <__s2b+0x72>
 800738c:	f104 0909 	add.w	r9, r4, #9
 8007390:	46c8      	mov	r8, r9
 8007392:	442c      	add	r4, r5
 8007394:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007398:	4601      	mov	r1, r0
 800739a:	3b30      	subs	r3, #48	@ 0x30
 800739c:	220a      	movs	r2, #10
 800739e:	4630      	mov	r0, r6
 80073a0:	f7ff ff8c 	bl	80072bc <__multadd>
 80073a4:	45a0      	cmp	r8, r4
 80073a6:	d1f5      	bne.n	8007394 <__s2b+0x4c>
 80073a8:	f1a5 0408 	sub.w	r4, r5, #8
 80073ac:	444c      	add	r4, r9
 80073ae:	1b2d      	subs	r5, r5, r4
 80073b0:	1963      	adds	r3, r4, r5
 80073b2:	42bb      	cmp	r3, r7
 80073b4:	db04      	blt.n	80073c0 <__s2b+0x78>
 80073b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ba:	340a      	adds	r4, #10
 80073bc:	2509      	movs	r5, #9
 80073be:	e7f6      	b.n	80073ae <__s2b+0x66>
 80073c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80073c4:	4601      	mov	r1, r0
 80073c6:	3b30      	subs	r3, #48	@ 0x30
 80073c8:	220a      	movs	r2, #10
 80073ca:	4630      	mov	r0, r6
 80073cc:	f7ff ff76 	bl	80072bc <__multadd>
 80073d0:	e7ee      	b.n	80073b0 <__s2b+0x68>
 80073d2:	bf00      	nop
 80073d4:	08009bf1 	.word	0x08009bf1
 80073d8:	08009c02 	.word	0x08009c02

080073dc <__hi0bits>:
 80073dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80073e0:	4603      	mov	r3, r0
 80073e2:	bf36      	itet	cc
 80073e4:	0403      	lslcc	r3, r0, #16
 80073e6:	2000      	movcs	r0, #0
 80073e8:	2010      	movcc	r0, #16
 80073ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073ee:	bf3c      	itt	cc
 80073f0:	021b      	lslcc	r3, r3, #8
 80073f2:	3008      	addcc	r0, #8
 80073f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073f8:	bf3c      	itt	cc
 80073fa:	011b      	lslcc	r3, r3, #4
 80073fc:	3004      	addcc	r0, #4
 80073fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007402:	bf3c      	itt	cc
 8007404:	009b      	lslcc	r3, r3, #2
 8007406:	3002      	addcc	r0, #2
 8007408:	2b00      	cmp	r3, #0
 800740a:	db05      	blt.n	8007418 <__hi0bits+0x3c>
 800740c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007410:	f100 0001 	add.w	r0, r0, #1
 8007414:	bf08      	it	eq
 8007416:	2020      	moveq	r0, #32
 8007418:	4770      	bx	lr

0800741a <__lo0bits>:
 800741a:	6803      	ldr	r3, [r0, #0]
 800741c:	4602      	mov	r2, r0
 800741e:	f013 0007 	ands.w	r0, r3, #7
 8007422:	d00b      	beq.n	800743c <__lo0bits+0x22>
 8007424:	07d9      	lsls	r1, r3, #31
 8007426:	d421      	bmi.n	800746c <__lo0bits+0x52>
 8007428:	0798      	lsls	r0, r3, #30
 800742a:	bf49      	itett	mi
 800742c:	085b      	lsrmi	r3, r3, #1
 800742e:	089b      	lsrpl	r3, r3, #2
 8007430:	2001      	movmi	r0, #1
 8007432:	6013      	strmi	r3, [r2, #0]
 8007434:	bf5c      	itt	pl
 8007436:	6013      	strpl	r3, [r2, #0]
 8007438:	2002      	movpl	r0, #2
 800743a:	4770      	bx	lr
 800743c:	b299      	uxth	r1, r3
 800743e:	b909      	cbnz	r1, 8007444 <__lo0bits+0x2a>
 8007440:	0c1b      	lsrs	r3, r3, #16
 8007442:	2010      	movs	r0, #16
 8007444:	b2d9      	uxtb	r1, r3
 8007446:	b909      	cbnz	r1, 800744c <__lo0bits+0x32>
 8007448:	3008      	adds	r0, #8
 800744a:	0a1b      	lsrs	r3, r3, #8
 800744c:	0719      	lsls	r1, r3, #28
 800744e:	bf04      	itt	eq
 8007450:	091b      	lsreq	r3, r3, #4
 8007452:	3004      	addeq	r0, #4
 8007454:	0799      	lsls	r1, r3, #30
 8007456:	bf04      	itt	eq
 8007458:	089b      	lsreq	r3, r3, #2
 800745a:	3002      	addeq	r0, #2
 800745c:	07d9      	lsls	r1, r3, #31
 800745e:	d403      	bmi.n	8007468 <__lo0bits+0x4e>
 8007460:	085b      	lsrs	r3, r3, #1
 8007462:	f100 0001 	add.w	r0, r0, #1
 8007466:	d003      	beq.n	8007470 <__lo0bits+0x56>
 8007468:	6013      	str	r3, [r2, #0]
 800746a:	4770      	bx	lr
 800746c:	2000      	movs	r0, #0
 800746e:	4770      	bx	lr
 8007470:	2020      	movs	r0, #32
 8007472:	4770      	bx	lr

08007474 <__i2b>:
 8007474:	b510      	push	{r4, lr}
 8007476:	460c      	mov	r4, r1
 8007478:	2101      	movs	r1, #1
 800747a:	f7ff febd 	bl	80071f8 <_Balloc>
 800747e:	4602      	mov	r2, r0
 8007480:	b928      	cbnz	r0, 800748e <__i2b+0x1a>
 8007482:	4b05      	ldr	r3, [pc, #20]	@ (8007498 <__i2b+0x24>)
 8007484:	4805      	ldr	r0, [pc, #20]	@ (800749c <__i2b+0x28>)
 8007486:	f240 1145 	movw	r1, #325	@ 0x145
 800748a:	f001 fc39 	bl	8008d00 <__assert_func>
 800748e:	2301      	movs	r3, #1
 8007490:	6144      	str	r4, [r0, #20]
 8007492:	6103      	str	r3, [r0, #16]
 8007494:	bd10      	pop	{r4, pc}
 8007496:	bf00      	nop
 8007498:	08009bf1 	.word	0x08009bf1
 800749c:	08009c02 	.word	0x08009c02

080074a0 <__multiply>:
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	4617      	mov	r7, r2
 80074a6:	690a      	ldr	r2, [r1, #16]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	bfa8      	it	ge
 80074ae:	463b      	movge	r3, r7
 80074b0:	4689      	mov	r9, r1
 80074b2:	bfa4      	itt	ge
 80074b4:	460f      	movge	r7, r1
 80074b6:	4699      	movge	r9, r3
 80074b8:	693d      	ldr	r5, [r7, #16]
 80074ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	6879      	ldr	r1, [r7, #4]
 80074c2:	eb05 060a 	add.w	r6, r5, sl
 80074c6:	42b3      	cmp	r3, r6
 80074c8:	b085      	sub	sp, #20
 80074ca:	bfb8      	it	lt
 80074cc:	3101      	addlt	r1, #1
 80074ce:	f7ff fe93 	bl	80071f8 <_Balloc>
 80074d2:	b930      	cbnz	r0, 80074e2 <__multiply+0x42>
 80074d4:	4602      	mov	r2, r0
 80074d6:	4b41      	ldr	r3, [pc, #260]	@ (80075dc <__multiply+0x13c>)
 80074d8:	4841      	ldr	r0, [pc, #260]	@ (80075e0 <__multiply+0x140>)
 80074da:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80074de:	f001 fc0f 	bl	8008d00 <__assert_func>
 80074e2:	f100 0414 	add.w	r4, r0, #20
 80074e6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80074ea:	4623      	mov	r3, r4
 80074ec:	2200      	movs	r2, #0
 80074ee:	4573      	cmp	r3, lr
 80074f0:	d320      	bcc.n	8007534 <__multiply+0x94>
 80074f2:	f107 0814 	add.w	r8, r7, #20
 80074f6:	f109 0114 	add.w	r1, r9, #20
 80074fa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80074fe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007502:	9302      	str	r3, [sp, #8]
 8007504:	1beb      	subs	r3, r5, r7
 8007506:	3b15      	subs	r3, #21
 8007508:	f023 0303 	bic.w	r3, r3, #3
 800750c:	3304      	adds	r3, #4
 800750e:	3715      	adds	r7, #21
 8007510:	42bd      	cmp	r5, r7
 8007512:	bf38      	it	cc
 8007514:	2304      	movcc	r3, #4
 8007516:	9301      	str	r3, [sp, #4]
 8007518:	9b02      	ldr	r3, [sp, #8]
 800751a:	9103      	str	r1, [sp, #12]
 800751c:	428b      	cmp	r3, r1
 800751e:	d80c      	bhi.n	800753a <__multiply+0x9a>
 8007520:	2e00      	cmp	r6, #0
 8007522:	dd03      	ble.n	800752c <__multiply+0x8c>
 8007524:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007528:	2b00      	cmp	r3, #0
 800752a:	d055      	beq.n	80075d8 <__multiply+0x138>
 800752c:	6106      	str	r6, [r0, #16]
 800752e:	b005      	add	sp, #20
 8007530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007534:	f843 2b04 	str.w	r2, [r3], #4
 8007538:	e7d9      	b.n	80074ee <__multiply+0x4e>
 800753a:	f8b1 a000 	ldrh.w	sl, [r1]
 800753e:	f1ba 0f00 	cmp.w	sl, #0
 8007542:	d01f      	beq.n	8007584 <__multiply+0xe4>
 8007544:	46c4      	mov	ip, r8
 8007546:	46a1      	mov	r9, r4
 8007548:	2700      	movs	r7, #0
 800754a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800754e:	f8d9 3000 	ldr.w	r3, [r9]
 8007552:	fa1f fb82 	uxth.w	fp, r2
 8007556:	b29b      	uxth	r3, r3
 8007558:	fb0a 330b 	mla	r3, sl, fp, r3
 800755c:	443b      	add	r3, r7
 800755e:	f8d9 7000 	ldr.w	r7, [r9]
 8007562:	0c12      	lsrs	r2, r2, #16
 8007564:	0c3f      	lsrs	r7, r7, #16
 8007566:	fb0a 7202 	mla	r2, sl, r2, r7
 800756a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800756e:	b29b      	uxth	r3, r3
 8007570:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007574:	4565      	cmp	r5, ip
 8007576:	f849 3b04 	str.w	r3, [r9], #4
 800757a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800757e:	d8e4      	bhi.n	800754a <__multiply+0xaa>
 8007580:	9b01      	ldr	r3, [sp, #4]
 8007582:	50e7      	str	r7, [r4, r3]
 8007584:	9b03      	ldr	r3, [sp, #12]
 8007586:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800758a:	3104      	adds	r1, #4
 800758c:	f1b9 0f00 	cmp.w	r9, #0
 8007590:	d020      	beq.n	80075d4 <__multiply+0x134>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	4647      	mov	r7, r8
 8007596:	46a4      	mov	ip, r4
 8007598:	f04f 0a00 	mov.w	sl, #0
 800759c:	f8b7 b000 	ldrh.w	fp, [r7]
 80075a0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80075a4:	fb09 220b 	mla	r2, r9, fp, r2
 80075a8:	4452      	add	r2, sl
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075b0:	f84c 3b04 	str.w	r3, [ip], #4
 80075b4:	f857 3b04 	ldr.w	r3, [r7], #4
 80075b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075bc:	f8bc 3000 	ldrh.w	r3, [ip]
 80075c0:	fb09 330a 	mla	r3, r9, sl, r3
 80075c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80075c8:	42bd      	cmp	r5, r7
 80075ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075ce:	d8e5      	bhi.n	800759c <__multiply+0xfc>
 80075d0:	9a01      	ldr	r2, [sp, #4]
 80075d2:	50a3      	str	r3, [r4, r2]
 80075d4:	3404      	adds	r4, #4
 80075d6:	e79f      	b.n	8007518 <__multiply+0x78>
 80075d8:	3e01      	subs	r6, #1
 80075da:	e7a1      	b.n	8007520 <__multiply+0x80>
 80075dc:	08009bf1 	.word	0x08009bf1
 80075e0:	08009c02 	.word	0x08009c02

080075e4 <__pow5mult>:
 80075e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075e8:	4615      	mov	r5, r2
 80075ea:	f012 0203 	ands.w	r2, r2, #3
 80075ee:	4607      	mov	r7, r0
 80075f0:	460e      	mov	r6, r1
 80075f2:	d007      	beq.n	8007604 <__pow5mult+0x20>
 80075f4:	4c25      	ldr	r4, [pc, #148]	@ (800768c <__pow5mult+0xa8>)
 80075f6:	3a01      	subs	r2, #1
 80075f8:	2300      	movs	r3, #0
 80075fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075fe:	f7ff fe5d 	bl	80072bc <__multadd>
 8007602:	4606      	mov	r6, r0
 8007604:	10ad      	asrs	r5, r5, #2
 8007606:	d03d      	beq.n	8007684 <__pow5mult+0xa0>
 8007608:	69fc      	ldr	r4, [r7, #28]
 800760a:	b97c      	cbnz	r4, 800762c <__pow5mult+0x48>
 800760c:	2010      	movs	r0, #16
 800760e:	f7ff fd3d 	bl	800708c <malloc>
 8007612:	4602      	mov	r2, r0
 8007614:	61f8      	str	r0, [r7, #28]
 8007616:	b928      	cbnz	r0, 8007624 <__pow5mult+0x40>
 8007618:	4b1d      	ldr	r3, [pc, #116]	@ (8007690 <__pow5mult+0xac>)
 800761a:	481e      	ldr	r0, [pc, #120]	@ (8007694 <__pow5mult+0xb0>)
 800761c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007620:	f001 fb6e 	bl	8008d00 <__assert_func>
 8007624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007628:	6004      	str	r4, [r0, #0]
 800762a:	60c4      	str	r4, [r0, #12]
 800762c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007634:	b94c      	cbnz	r4, 800764a <__pow5mult+0x66>
 8007636:	f240 2171 	movw	r1, #625	@ 0x271
 800763a:	4638      	mov	r0, r7
 800763c:	f7ff ff1a 	bl	8007474 <__i2b>
 8007640:	2300      	movs	r3, #0
 8007642:	f8c8 0008 	str.w	r0, [r8, #8]
 8007646:	4604      	mov	r4, r0
 8007648:	6003      	str	r3, [r0, #0]
 800764a:	f04f 0900 	mov.w	r9, #0
 800764e:	07eb      	lsls	r3, r5, #31
 8007650:	d50a      	bpl.n	8007668 <__pow5mult+0x84>
 8007652:	4631      	mov	r1, r6
 8007654:	4622      	mov	r2, r4
 8007656:	4638      	mov	r0, r7
 8007658:	f7ff ff22 	bl	80074a0 <__multiply>
 800765c:	4631      	mov	r1, r6
 800765e:	4680      	mov	r8, r0
 8007660:	4638      	mov	r0, r7
 8007662:	f7ff fe09 	bl	8007278 <_Bfree>
 8007666:	4646      	mov	r6, r8
 8007668:	106d      	asrs	r5, r5, #1
 800766a:	d00b      	beq.n	8007684 <__pow5mult+0xa0>
 800766c:	6820      	ldr	r0, [r4, #0]
 800766e:	b938      	cbnz	r0, 8007680 <__pow5mult+0x9c>
 8007670:	4622      	mov	r2, r4
 8007672:	4621      	mov	r1, r4
 8007674:	4638      	mov	r0, r7
 8007676:	f7ff ff13 	bl	80074a0 <__multiply>
 800767a:	6020      	str	r0, [r4, #0]
 800767c:	f8c0 9000 	str.w	r9, [r0]
 8007680:	4604      	mov	r4, r0
 8007682:	e7e4      	b.n	800764e <__pow5mult+0x6a>
 8007684:	4630      	mov	r0, r6
 8007686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800768a:	bf00      	nop
 800768c:	08009d14 	.word	0x08009d14
 8007690:	08009b82 	.word	0x08009b82
 8007694:	08009c02 	.word	0x08009c02

08007698 <__lshift>:
 8007698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800769c:	460c      	mov	r4, r1
 800769e:	6849      	ldr	r1, [r1, #4]
 80076a0:	6923      	ldr	r3, [r4, #16]
 80076a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076a6:	68a3      	ldr	r3, [r4, #8]
 80076a8:	4607      	mov	r7, r0
 80076aa:	4691      	mov	r9, r2
 80076ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076b0:	f108 0601 	add.w	r6, r8, #1
 80076b4:	42b3      	cmp	r3, r6
 80076b6:	db0b      	blt.n	80076d0 <__lshift+0x38>
 80076b8:	4638      	mov	r0, r7
 80076ba:	f7ff fd9d 	bl	80071f8 <_Balloc>
 80076be:	4605      	mov	r5, r0
 80076c0:	b948      	cbnz	r0, 80076d6 <__lshift+0x3e>
 80076c2:	4602      	mov	r2, r0
 80076c4:	4b28      	ldr	r3, [pc, #160]	@ (8007768 <__lshift+0xd0>)
 80076c6:	4829      	ldr	r0, [pc, #164]	@ (800776c <__lshift+0xd4>)
 80076c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80076cc:	f001 fb18 	bl	8008d00 <__assert_func>
 80076d0:	3101      	adds	r1, #1
 80076d2:	005b      	lsls	r3, r3, #1
 80076d4:	e7ee      	b.n	80076b4 <__lshift+0x1c>
 80076d6:	2300      	movs	r3, #0
 80076d8:	f100 0114 	add.w	r1, r0, #20
 80076dc:	f100 0210 	add.w	r2, r0, #16
 80076e0:	4618      	mov	r0, r3
 80076e2:	4553      	cmp	r3, sl
 80076e4:	db33      	blt.n	800774e <__lshift+0xb6>
 80076e6:	6920      	ldr	r0, [r4, #16]
 80076e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076ec:	f104 0314 	add.w	r3, r4, #20
 80076f0:	f019 091f 	ands.w	r9, r9, #31
 80076f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80076fc:	d02b      	beq.n	8007756 <__lshift+0xbe>
 80076fe:	f1c9 0e20 	rsb	lr, r9, #32
 8007702:	468a      	mov	sl, r1
 8007704:	2200      	movs	r2, #0
 8007706:	6818      	ldr	r0, [r3, #0]
 8007708:	fa00 f009 	lsl.w	r0, r0, r9
 800770c:	4310      	orrs	r0, r2
 800770e:	f84a 0b04 	str.w	r0, [sl], #4
 8007712:	f853 2b04 	ldr.w	r2, [r3], #4
 8007716:	459c      	cmp	ip, r3
 8007718:	fa22 f20e 	lsr.w	r2, r2, lr
 800771c:	d8f3      	bhi.n	8007706 <__lshift+0x6e>
 800771e:	ebac 0304 	sub.w	r3, ip, r4
 8007722:	3b15      	subs	r3, #21
 8007724:	f023 0303 	bic.w	r3, r3, #3
 8007728:	3304      	adds	r3, #4
 800772a:	f104 0015 	add.w	r0, r4, #21
 800772e:	4560      	cmp	r0, ip
 8007730:	bf88      	it	hi
 8007732:	2304      	movhi	r3, #4
 8007734:	50ca      	str	r2, [r1, r3]
 8007736:	b10a      	cbz	r2, 800773c <__lshift+0xa4>
 8007738:	f108 0602 	add.w	r6, r8, #2
 800773c:	3e01      	subs	r6, #1
 800773e:	4638      	mov	r0, r7
 8007740:	612e      	str	r6, [r5, #16]
 8007742:	4621      	mov	r1, r4
 8007744:	f7ff fd98 	bl	8007278 <_Bfree>
 8007748:	4628      	mov	r0, r5
 800774a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800774e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007752:	3301      	adds	r3, #1
 8007754:	e7c5      	b.n	80076e2 <__lshift+0x4a>
 8007756:	3904      	subs	r1, #4
 8007758:	f853 2b04 	ldr.w	r2, [r3], #4
 800775c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007760:	459c      	cmp	ip, r3
 8007762:	d8f9      	bhi.n	8007758 <__lshift+0xc0>
 8007764:	e7ea      	b.n	800773c <__lshift+0xa4>
 8007766:	bf00      	nop
 8007768:	08009bf1 	.word	0x08009bf1
 800776c:	08009c02 	.word	0x08009c02

08007770 <__mcmp>:
 8007770:	690a      	ldr	r2, [r1, #16]
 8007772:	4603      	mov	r3, r0
 8007774:	6900      	ldr	r0, [r0, #16]
 8007776:	1a80      	subs	r0, r0, r2
 8007778:	b530      	push	{r4, r5, lr}
 800777a:	d10e      	bne.n	800779a <__mcmp+0x2a>
 800777c:	3314      	adds	r3, #20
 800777e:	3114      	adds	r1, #20
 8007780:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007784:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007788:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800778c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007790:	4295      	cmp	r5, r2
 8007792:	d003      	beq.n	800779c <__mcmp+0x2c>
 8007794:	d205      	bcs.n	80077a2 <__mcmp+0x32>
 8007796:	f04f 30ff 	mov.w	r0, #4294967295
 800779a:	bd30      	pop	{r4, r5, pc}
 800779c:	42a3      	cmp	r3, r4
 800779e:	d3f3      	bcc.n	8007788 <__mcmp+0x18>
 80077a0:	e7fb      	b.n	800779a <__mcmp+0x2a>
 80077a2:	2001      	movs	r0, #1
 80077a4:	e7f9      	b.n	800779a <__mcmp+0x2a>
	...

080077a8 <__mdiff>:
 80077a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ac:	4689      	mov	r9, r1
 80077ae:	4606      	mov	r6, r0
 80077b0:	4611      	mov	r1, r2
 80077b2:	4648      	mov	r0, r9
 80077b4:	4614      	mov	r4, r2
 80077b6:	f7ff ffdb 	bl	8007770 <__mcmp>
 80077ba:	1e05      	subs	r5, r0, #0
 80077bc:	d112      	bne.n	80077e4 <__mdiff+0x3c>
 80077be:	4629      	mov	r1, r5
 80077c0:	4630      	mov	r0, r6
 80077c2:	f7ff fd19 	bl	80071f8 <_Balloc>
 80077c6:	4602      	mov	r2, r0
 80077c8:	b928      	cbnz	r0, 80077d6 <__mdiff+0x2e>
 80077ca:	4b3f      	ldr	r3, [pc, #252]	@ (80078c8 <__mdiff+0x120>)
 80077cc:	f240 2137 	movw	r1, #567	@ 0x237
 80077d0:	483e      	ldr	r0, [pc, #248]	@ (80078cc <__mdiff+0x124>)
 80077d2:	f001 fa95 	bl	8008d00 <__assert_func>
 80077d6:	2301      	movs	r3, #1
 80077d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077dc:	4610      	mov	r0, r2
 80077de:	b003      	add	sp, #12
 80077e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e4:	bfbc      	itt	lt
 80077e6:	464b      	movlt	r3, r9
 80077e8:	46a1      	movlt	r9, r4
 80077ea:	4630      	mov	r0, r6
 80077ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80077f0:	bfba      	itte	lt
 80077f2:	461c      	movlt	r4, r3
 80077f4:	2501      	movlt	r5, #1
 80077f6:	2500      	movge	r5, #0
 80077f8:	f7ff fcfe 	bl	80071f8 <_Balloc>
 80077fc:	4602      	mov	r2, r0
 80077fe:	b918      	cbnz	r0, 8007808 <__mdiff+0x60>
 8007800:	4b31      	ldr	r3, [pc, #196]	@ (80078c8 <__mdiff+0x120>)
 8007802:	f240 2145 	movw	r1, #581	@ 0x245
 8007806:	e7e3      	b.n	80077d0 <__mdiff+0x28>
 8007808:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800780c:	6926      	ldr	r6, [r4, #16]
 800780e:	60c5      	str	r5, [r0, #12]
 8007810:	f109 0310 	add.w	r3, r9, #16
 8007814:	f109 0514 	add.w	r5, r9, #20
 8007818:	f104 0e14 	add.w	lr, r4, #20
 800781c:	f100 0b14 	add.w	fp, r0, #20
 8007820:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007824:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007828:	9301      	str	r3, [sp, #4]
 800782a:	46d9      	mov	r9, fp
 800782c:	f04f 0c00 	mov.w	ip, #0
 8007830:	9b01      	ldr	r3, [sp, #4]
 8007832:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007836:	f853 af04 	ldr.w	sl, [r3, #4]!
 800783a:	9301      	str	r3, [sp, #4]
 800783c:	fa1f f38a 	uxth.w	r3, sl
 8007840:	4619      	mov	r1, r3
 8007842:	b283      	uxth	r3, r0
 8007844:	1acb      	subs	r3, r1, r3
 8007846:	0c00      	lsrs	r0, r0, #16
 8007848:	4463      	add	r3, ip
 800784a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800784e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007852:	b29b      	uxth	r3, r3
 8007854:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007858:	4576      	cmp	r6, lr
 800785a:	f849 3b04 	str.w	r3, [r9], #4
 800785e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007862:	d8e5      	bhi.n	8007830 <__mdiff+0x88>
 8007864:	1b33      	subs	r3, r6, r4
 8007866:	3b15      	subs	r3, #21
 8007868:	f023 0303 	bic.w	r3, r3, #3
 800786c:	3415      	adds	r4, #21
 800786e:	3304      	adds	r3, #4
 8007870:	42a6      	cmp	r6, r4
 8007872:	bf38      	it	cc
 8007874:	2304      	movcc	r3, #4
 8007876:	441d      	add	r5, r3
 8007878:	445b      	add	r3, fp
 800787a:	461e      	mov	r6, r3
 800787c:	462c      	mov	r4, r5
 800787e:	4544      	cmp	r4, r8
 8007880:	d30e      	bcc.n	80078a0 <__mdiff+0xf8>
 8007882:	f108 0103 	add.w	r1, r8, #3
 8007886:	1b49      	subs	r1, r1, r5
 8007888:	f021 0103 	bic.w	r1, r1, #3
 800788c:	3d03      	subs	r5, #3
 800788e:	45a8      	cmp	r8, r5
 8007890:	bf38      	it	cc
 8007892:	2100      	movcc	r1, #0
 8007894:	440b      	add	r3, r1
 8007896:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800789a:	b191      	cbz	r1, 80078c2 <__mdiff+0x11a>
 800789c:	6117      	str	r7, [r2, #16]
 800789e:	e79d      	b.n	80077dc <__mdiff+0x34>
 80078a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80078a4:	46e6      	mov	lr, ip
 80078a6:	0c08      	lsrs	r0, r1, #16
 80078a8:	fa1c fc81 	uxtah	ip, ip, r1
 80078ac:	4471      	add	r1, lr
 80078ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80078b2:	b289      	uxth	r1, r1
 80078b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80078b8:	f846 1b04 	str.w	r1, [r6], #4
 80078bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078c0:	e7dd      	b.n	800787e <__mdiff+0xd6>
 80078c2:	3f01      	subs	r7, #1
 80078c4:	e7e7      	b.n	8007896 <__mdiff+0xee>
 80078c6:	bf00      	nop
 80078c8:	08009bf1 	.word	0x08009bf1
 80078cc:	08009c02 	.word	0x08009c02

080078d0 <__ulp>:
 80078d0:	b082      	sub	sp, #8
 80078d2:	ed8d 0b00 	vstr	d0, [sp]
 80078d6:	9a01      	ldr	r2, [sp, #4]
 80078d8:	4b0f      	ldr	r3, [pc, #60]	@ (8007918 <__ulp+0x48>)
 80078da:	4013      	ands	r3, r2
 80078dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	dc08      	bgt.n	80078f6 <__ulp+0x26>
 80078e4:	425b      	negs	r3, r3
 80078e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80078ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 80078ee:	da04      	bge.n	80078fa <__ulp+0x2a>
 80078f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80078f4:	4113      	asrs	r3, r2
 80078f6:	2200      	movs	r2, #0
 80078f8:	e008      	b.n	800790c <__ulp+0x3c>
 80078fa:	f1a2 0314 	sub.w	r3, r2, #20
 80078fe:	2b1e      	cmp	r3, #30
 8007900:	bfda      	itte	le
 8007902:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007906:	40da      	lsrle	r2, r3
 8007908:	2201      	movgt	r2, #1
 800790a:	2300      	movs	r3, #0
 800790c:	4619      	mov	r1, r3
 800790e:	4610      	mov	r0, r2
 8007910:	ec41 0b10 	vmov	d0, r0, r1
 8007914:	b002      	add	sp, #8
 8007916:	4770      	bx	lr
 8007918:	7ff00000 	.word	0x7ff00000

0800791c <__b2d>:
 800791c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007920:	6906      	ldr	r6, [r0, #16]
 8007922:	f100 0814 	add.w	r8, r0, #20
 8007926:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800792a:	1f37      	subs	r7, r6, #4
 800792c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007930:	4610      	mov	r0, r2
 8007932:	f7ff fd53 	bl	80073dc <__hi0bits>
 8007936:	f1c0 0320 	rsb	r3, r0, #32
 800793a:	280a      	cmp	r0, #10
 800793c:	600b      	str	r3, [r1, #0]
 800793e:	491b      	ldr	r1, [pc, #108]	@ (80079ac <__b2d+0x90>)
 8007940:	dc15      	bgt.n	800796e <__b2d+0x52>
 8007942:	f1c0 0c0b 	rsb	ip, r0, #11
 8007946:	fa22 f30c 	lsr.w	r3, r2, ip
 800794a:	45b8      	cmp	r8, r7
 800794c:	ea43 0501 	orr.w	r5, r3, r1
 8007950:	bf34      	ite	cc
 8007952:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007956:	2300      	movcs	r3, #0
 8007958:	3015      	adds	r0, #21
 800795a:	fa02 f000 	lsl.w	r0, r2, r0
 800795e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007962:	4303      	orrs	r3, r0
 8007964:	461c      	mov	r4, r3
 8007966:	ec45 4b10 	vmov	d0, r4, r5
 800796a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800796e:	45b8      	cmp	r8, r7
 8007970:	bf3a      	itte	cc
 8007972:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007976:	f1a6 0708 	subcc.w	r7, r6, #8
 800797a:	2300      	movcs	r3, #0
 800797c:	380b      	subs	r0, #11
 800797e:	d012      	beq.n	80079a6 <__b2d+0x8a>
 8007980:	f1c0 0120 	rsb	r1, r0, #32
 8007984:	fa23 f401 	lsr.w	r4, r3, r1
 8007988:	4082      	lsls	r2, r0
 800798a:	4322      	orrs	r2, r4
 800798c:	4547      	cmp	r7, r8
 800798e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007992:	bf8c      	ite	hi
 8007994:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007998:	2200      	movls	r2, #0
 800799a:	4083      	lsls	r3, r0
 800799c:	40ca      	lsrs	r2, r1
 800799e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80079a2:	4313      	orrs	r3, r2
 80079a4:	e7de      	b.n	8007964 <__b2d+0x48>
 80079a6:	ea42 0501 	orr.w	r5, r2, r1
 80079aa:	e7db      	b.n	8007964 <__b2d+0x48>
 80079ac:	3ff00000 	.word	0x3ff00000

080079b0 <__d2b>:
 80079b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079b4:	460f      	mov	r7, r1
 80079b6:	2101      	movs	r1, #1
 80079b8:	ec59 8b10 	vmov	r8, r9, d0
 80079bc:	4616      	mov	r6, r2
 80079be:	f7ff fc1b 	bl	80071f8 <_Balloc>
 80079c2:	4604      	mov	r4, r0
 80079c4:	b930      	cbnz	r0, 80079d4 <__d2b+0x24>
 80079c6:	4602      	mov	r2, r0
 80079c8:	4b23      	ldr	r3, [pc, #140]	@ (8007a58 <__d2b+0xa8>)
 80079ca:	4824      	ldr	r0, [pc, #144]	@ (8007a5c <__d2b+0xac>)
 80079cc:	f240 310f 	movw	r1, #783	@ 0x30f
 80079d0:	f001 f996 	bl	8008d00 <__assert_func>
 80079d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80079d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079dc:	b10d      	cbz	r5, 80079e2 <__d2b+0x32>
 80079de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079e2:	9301      	str	r3, [sp, #4]
 80079e4:	f1b8 0300 	subs.w	r3, r8, #0
 80079e8:	d023      	beq.n	8007a32 <__d2b+0x82>
 80079ea:	4668      	mov	r0, sp
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	f7ff fd14 	bl	800741a <__lo0bits>
 80079f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80079f6:	b1d0      	cbz	r0, 8007a2e <__d2b+0x7e>
 80079f8:	f1c0 0320 	rsb	r3, r0, #32
 80079fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007a00:	430b      	orrs	r3, r1
 8007a02:	40c2      	lsrs	r2, r0
 8007a04:	6163      	str	r3, [r4, #20]
 8007a06:	9201      	str	r2, [sp, #4]
 8007a08:	9b01      	ldr	r3, [sp, #4]
 8007a0a:	61a3      	str	r3, [r4, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	bf0c      	ite	eq
 8007a10:	2201      	moveq	r2, #1
 8007a12:	2202      	movne	r2, #2
 8007a14:	6122      	str	r2, [r4, #16]
 8007a16:	b1a5      	cbz	r5, 8007a42 <__d2b+0x92>
 8007a18:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007a1c:	4405      	add	r5, r0
 8007a1e:	603d      	str	r5, [r7, #0]
 8007a20:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a24:	6030      	str	r0, [r6, #0]
 8007a26:	4620      	mov	r0, r4
 8007a28:	b003      	add	sp, #12
 8007a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a2e:	6161      	str	r1, [r4, #20]
 8007a30:	e7ea      	b.n	8007a08 <__d2b+0x58>
 8007a32:	a801      	add	r0, sp, #4
 8007a34:	f7ff fcf1 	bl	800741a <__lo0bits>
 8007a38:	9b01      	ldr	r3, [sp, #4]
 8007a3a:	6163      	str	r3, [r4, #20]
 8007a3c:	3020      	adds	r0, #32
 8007a3e:	2201      	movs	r2, #1
 8007a40:	e7e8      	b.n	8007a14 <__d2b+0x64>
 8007a42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a46:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007a4a:	6038      	str	r0, [r7, #0]
 8007a4c:	6918      	ldr	r0, [r3, #16]
 8007a4e:	f7ff fcc5 	bl	80073dc <__hi0bits>
 8007a52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a56:	e7e5      	b.n	8007a24 <__d2b+0x74>
 8007a58:	08009bf1 	.word	0x08009bf1
 8007a5c:	08009c02 	.word	0x08009c02

08007a60 <__ratio>:
 8007a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	b085      	sub	sp, #20
 8007a66:	e9cd 1000 	strd	r1, r0, [sp]
 8007a6a:	a902      	add	r1, sp, #8
 8007a6c:	f7ff ff56 	bl	800791c <__b2d>
 8007a70:	9800      	ldr	r0, [sp, #0]
 8007a72:	a903      	add	r1, sp, #12
 8007a74:	ec55 4b10 	vmov	r4, r5, d0
 8007a78:	f7ff ff50 	bl	800791c <__b2d>
 8007a7c:	9b01      	ldr	r3, [sp, #4]
 8007a7e:	6919      	ldr	r1, [r3, #16]
 8007a80:	9b00      	ldr	r3, [sp, #0]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	1ac9      	subs	r1, r1, r3
 8007a86:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007a8a:	1a9b      	subs	r3, r3, r2
 8007a8c:	ec5b ab10 	vmov	sl, fp, d0
 8007a90:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	bfce      	itee	gt
 8007a98:	462a      	movgt	r2, r5
 8007a9a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007a9e:	465a      	movle	r2, fp
 8007aa0:	462f      	mov	r7, r5
 8007aa2:	46d9      	mov	r9, fp
 8007aa4:	bfcc      	ite	gt
 8007aa6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007aaa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007aae:	464b      	mov	r3, r9
 8007ab0:	4652      	mov	r2, sl
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	4639      	mov	r1, r7
 8007ab6:	f7f8 fed9 	bl	800086c <__aeabi_ddiv>
 8007aba:	ec41 0b10 	vmov	d0, r0, r1
 8007abe:	b005      	add	sp, #20
 8007ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ac4 <__copybits>:
 8007ac4:	3901      	subs	r1, #1
 8007ac6:	b570      	push	{r4, r5, r6, lr}
 8007ac8:	1149      	asrs	r1, r1, #5
 8007aca:	6914      	ldr	r4, [r2, #16]
 8007acc:	3101      	adds	r1, #1
 8007ace:	f102 0314 	add.w	r3, r2, #20
 8007ad2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ad6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007ada:	1f05      	subs	r5, r0, #4
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	d30c      	bcc.n	8007afa <__copybits+0x36>
 8007ae0:	1aa3      	subs	r3, r4, r2
 8007ae2:	3b11      	subs	r3, #17
 8007ae4:	f023 0303 	bic.w	r3, r3, #3
 8007ae8:	3211      	adds	r2, #17
 8007aea:	42a2      	cmp	r2, r4
 8007aec:	bf88      	it	hi
 8007aee:	2300      	movhi	r3, #0
 8007af0:	4418      	add	r0, r3
 8007af2:	2300      	movs	r3, #0
 8007af4:	4288      	cmp	r0, r1
 8007af6:	d305      	bcc.n	8007b04 <__copybits+0x40>
 8007af8:	bd70      	pop	{r4, r5, r6, pc}
 8007afa:	f853 6b04 	ldr.w	r6, [r3], #4
 8007afe:	f845 6f04 	str.w	r6, [r5, #4]!
 8007b02:	e7eb      	b.n	8007adc <__copybits+0x18>
 8007b04:	f840 3b04 	str.w	r3, [r0], #4
 8007b08:	e7f4      	b.n	8007af4 <__copybits+0x30>

08007b0a <__any_on>:
 8007b0a:	f100 0214 	add.w	r2, r0, #20
 8007b0e:	6900      	ldr	r0, [r0, #16]
 8007b10:	114b      	asrs	r3, r1, #5
 8007b12:	4298      	cmp	r0, r3
 8007b14:	b510      	push	{r4, lr}
 8007b16:	db11      	blt.n	8007b3c <__any_on+0x32>
 8007b18:	dd0a      	ble.n	8007b30 <__any_on+0x26>
 8007b1a:	f011 011f 	ands.w	r1, r1, #31
 8007b1e:	d007      	beq.n	8007b30 <__any_on+0x26>
 8007b20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007b24:	fa24 f001 	lsr.w	r0, r4, r1
 8007b28:	fa00 f101 	lsl.w	r1, r0, r1
 8007b2c:	428c      	cmp	r4, r1
 8007b2e:	d10b      	bne.n	8007b48 <__any_on+0x3e>
 8007b30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d803      	bhi.n	8007b40 <__any_on+0x36>
 8007b38:	2000      	movs	r0, #0
 8007b3a:	bd10      	pop	{r4, pc}
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	e7f7      	b.n	8007b30 <__any_on+0x26>
 8007b40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b44:	2900      	cmp	r1, #0
 8007b46:	d0f5      	beq.n	8007b34 <__any_on+0x2a>
 8007b48:	2001      	movs	r0, #1
 8007b4a:	e7f6      	b.n	8007b3a <__any_on+0x30>

08007b4c <sulp>:
 8007b4c:	b570      	push	{r4, r5, r6, lr}
 8007b4e:	4604      	mov	r4, r0
 8007b50:	460d      	mov	r5, r1
 8007b52:	ec45 4b10 	vmov	d0, r4, r5
 8007b56:	4616      	mov	r6, r2
 8007b58:	f7ff feba 	bl	80078d0 <__ulp>
 8007b5c:	ec51 0b10 	vmov	r0, r1, d0
 8007b60:	b17e      	cbz	r6, 8007b82 <sulp+0x36>
 8007b62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b66:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	dd09      	ble.n	8007b82 <sulp+0x36>
 8007b6e:	051b      	lsls	r3, r3, #20
 8007b70:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007b74:	2400      	movs	r4, #0
 8007b76:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007b7a:	4622      	mov	r2, r4
 8007b7c:	462b      	mov	r3, r5
 8007b7e:	f7f8 fd4b 	bl	8000618 <__aeabi_dmul>
 8007b82:	ec41 0b10 	vmov	d0, r0, r1
 8007b86:	bd70      	pop	{r4, r5, r6, pc}

08007b88 <_strtod_l>:
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	b09f      	sub	sp, #124	@ 0x7c
 8007b8e:	460c      	mov	r4, r1
 8007b90:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007b92:	2200      	movs	r2, #0
 8007b94:	921a      	str	r2, [sp, #104]	@ 0x68
 8007b96:	9005      	str	r0, [sp, #20]
 8007b98:	f04f 0a00 	mov.w	sl, #0
 8007b9c:	f04f 0b00 	mov.w	fp, #0
 8007ba0:	460a      	mov	r2, r1
 8007ba2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ba4:	7811      	ldrb	r1, [r2, #0]
 8007ba6:	292b      	cmp	r1, #43	@ 0x2b
 8007ba8:	d04a      	beq.n	8007c40 <_strtod_l+0xb8>
 8007baa:	d838      	bhi.n	8007c1e <_strtod_l+0x96>
 8007bac:	290d      	cmp	r1, #13
 8007bae:	d832      	bhi.n	8007c16 <_strtod_l+0x8e>
 8007bb0:	2908      	cmp	r1, #8
 8007bb2:	d832      	bhi.n	8007c1a <_strtod_l+0x92>
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	d03b      	beq.n	8007c30 <_strtod_l+0xa8>
 8007bb8:	2200      	movs	r2, #0
 8007bba:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bbc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007bbe:	782a      	ldrb	r2, [r5, #0]
 8007bc0:	2a30      	cmp	r2, #48	@ 0x30
 8007bc2:	f040 80b2 	bne.w	8007d2a <_strtod_l+0x1a2>
 8007bc6:	786a      	ldrb	r2, [r5, #1]
 8007bc8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007bcc:	2a58      	cmp	r2, #88	@ 0x58
 8007bce:	d16e      	bne.n	8007cae <_strtod_l+0x126>
 8007bd0:	9302      	str	r3, [sp, #8]
 8007bd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	ab1a      	add	r3, sp, #104	@ 0x68
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	4a8f      	ldr	r2, [pc, #572]	@ (8007e18 <_strtod_l+0x290>)
 8007bdc:	9805      	ldr	r0, [sp, #20]
 8007bde:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007be0:	a919      	add	r1, sp, #100	@ 0x64
 8007be2:	f001 f927 	bl	8008e34 <__gethex>
 8007be6:	f010 060f 	ands.w	r6, r0, #15
 8007bea:	4604      	mov	r4, r0
 8007bec:	d005      	beq.n	8007bfa <_strtod_l+0x72>
 8007bee:	2e06      	cmp	r6, #6
 8007bf0:	d128      	bne.n	8007c44 <_strtod_l+0xbc>
 8007bf2:	3501      	adds	r5, #1
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	9519      	str	r5, [sp, #100]	@ 0x64
 8007bf8:	930e      	str	r3, [sp, #56]	@ 0x38
 8007bfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f040 858e 	bne.w	800871e <_strtod_l+0xb96>
 8007c02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c04:	b1cb      	cbz	r3, 8007c3a <_strtod_l+0xb2>
 8007c06:	4652      	mov	r2, sl
 8007c08:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007c0c:	ec43 2b10 	vmov	d0, r2, r3
 8007c10:	b01f      	add	sp, #124	@ 0x7c
 8007c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c16:	2920      	cmp	r1, #32
 8007c18:	d1ce      	bne.n	8007bb8 <_strtod_l+0x30>
 8007c1a:	3201      	adds	r2, #1
 8007c1c:	e7c1      	b.n	8007ba2 <_strtod_l+0x1a>
 8007c1e:	292d      	cmp	r1, #45	@ 0x2d
 8007c20:	d1ca      	bne.n	8007bb8 <_strtod_l+0x30>
 8007c22:	2101      	movs	r1, #1
 8007c24:	910e      	str	r1, [sp, #56]	@ 0x38
 8007c26:	1c51      	adds	r1, r2, #1
 8007c28:	9119      	str	r1, [sp, #100]	@ 0x64
 8007c2a:	7852      	ldrb	r2, [r2, #1]
 8007c2c:	2a00      	cmp	r2, #0
 8007c2e:	d1c5      	bne.n	8007bbc <_strtod_l+0x34>
 8007c30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c32:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f040 8570 	bne.w	800871a <_strtod_l+0xb92>
 8007c3a:	4652      	mov	r2, sl
 8007c3c:	465b      	mov	r3, fp
 8007c3e:	e7e5      	b.n	8007c0c <_strtod_l+0x84>
 8007c40:	2100      	movs	r1, #0
 8007c42:	e7ef      	b.n	8007c24 <_strtod_l+0x9c>
 8007c44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c46:	b13a      	cbz	r2, 8007c58 <_strtod_l+0xd0>
 8007c48:	2135      	movs	r1, #53	@ 0x35
 8007c4a:	a81c      	add	r0, sp, #112	@ 0x70
 8007c4c:	f7ff ff3a 	bl	8007ac4 <__copybits>
 8007c50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c52:	9805      	ldr	r0, [sp, #20]
 8007c54:	f7ff fb10 	bl	8007278 <_Bfree>
 8007c58:	3e01      	subs	r6, #1
 8007c5a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007c5c:	2e04      	cmp	r6, #4
 8007c5e:	d806      	bhi.n	8007c6e <_strtod_l+0xe6>
 8007c60:	e8df f006 	tbb	[pc, r6]
 8007c64:	201d0314 	.word	0x201d0314
 8007c68:	14          	.byte	0x14
 8007c69:	00          	.byte	0x00
 8007c6a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007c6e:	05e1      	lsls	r1, r4, #23
 8007c70:	bf48      	it	mi
 8007c72:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007c76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c7a:	0d1b      	lsrs	r3, r3, #20
 8007c7c:	051b      	lsls	r3, r3, #20
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1bb      	bne.n	8007bfa <_strtod_l+0x72>
 8007c82:	f7fe fb2d 	bl	80062e0 <__errno>
 8007c86:	2322      	movs	r3, #34	@ 0x22
 8007c88:	6003      	str	r3, [r0, #0]
 8007c8a:	e7b6      	b.n	8007bfa <_strtod_l+0x72>
 8007c8c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007c90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007c94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007c98:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007c9c:	e7e7      	b.n	8007c6e <_strtod_l+0xe6>
 8007c9e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007e20 <_strtod_l+0x298>
 8007ca2:	e7e4      	b.n	8007c6e <_strtod_l+0xe6>
 8007ca4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007ca8:	f04f 3aff 	mov.w	sl, #4294967295
 8007cac:	e7df      	b.n	8007c6e <_strtod_l+0xe6>
 8007cae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cb4:	785b      	ldrb	r3, [r3, #1]
 8007cb6:	2b30      	cmp	r3, #48	@ 0x30
 8007cb8:	d0f9      	beq.n	8007cae <_strtod_l+0x126>
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d09d      	beq.n	8007bfa <_strtod_l+0x72>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	2700      	movs	r7, #0
 8007cc2:	9308      	str	r3, [sp, #32]
 8007cc4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cc6:	930c      	str	r3, [sp, #48]	@ 0x30
 8007cc8:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007cca:	46b9      	mov	r9, r7
 8007ccc:	220a      	movs	r2, #10
 8007cce:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007cd0:	7805      	ldrb	r5, [r0, #0]
 8007cd2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007cd6:	b2d9      	uxtb	r1, r3
 8007cd8:	2909      	cmp	r1, #9
 8007cda:	d928      	bls.n	8007d2e <_strtod_l+0x1a6>
 8007cdc:	494f      	ldr	r1, [pc, #316]	@ (8007e1c <_strtod_l+0x294>)
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f000 ffd6 	bl	8008c90 <strncmp>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d032      	beq.n	8007d4e <_strtod_l+0x1c6>
 8007ce8:	2000      	movs	r0, #0
 8007cea:	462a      	mov	r2, r5
 8007cec:	900a      	str	r0, [sp, #40]	@ 0x28
 8007cee:	464d      	mov	r5, r9
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2a65      	cmp	r2, #101	@ 0x65
 8007cf4:	d001      	beq.n	8007cfa <_strtod_l+0x172>
 8007cf6:	2a45      	cmp	r2, #69	@ 0x45
 8007cf8:	d114      	bne.n	8007d24 <_strtod_l+0x19c>
 8007cfa:	b91d      	cbnz	r5, 8007d04 <_strtod_l+0x17c>
 8007cfc:	9a08      	ldr	r2, [sp, #32]
 8007cfe:	4302      	orrs	r2, r0
 8007d00:	d096      	beq.n	8007c30 <_strtod_l+0xa8>
 8007d02:	2500      	movs	r5, #0
 8007d04:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007d06:	1c62      	adds	r2, r4, #1
 8007d08:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d0a:	7862      	ldrb	r2, [r4, #1]
 8007d0c:	2a2b      	cmp	r2, #43	@ 0x2b
 8007d0e:	d07a      	beq.n	8007e06 <_strtod_l+0x27e>
 8007d10:	2a2d      	cmp	r2, #45	@ 0x2d
 8007d12:	d07e      	beq.n	8007e12 <_strtod_l+0x28a>
 8007d14:	f04f 0c00 	mov.w	ip, #0
 8007d18:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007d1c:	2909      	cmp	r1, #9
 8007d1e:	f240 8085 	bls.w	8007e2c <_strtod_l+0x2a4>
 8007d22:	9419      	str	r4, [sp, #100]	@ 0x64
 8007d24:	f04f 0800 	mov.w	r8, #0
 8007d28:	e0a5      	b.n	8007e76 <_strtod_l+0x2ee>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	e7c8      	b.n	8007cc0 <_strtod_l+0x138>
 8007d2e:	f1b9 0f08 	cmp.w	r9, #8
 8007d32:	bfd8      	it	le
 8007d34:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007d36:	f100 0001 	add.w	r0, r0, #1
 8007d3a:	bfda      	itte	le
 8007d3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d40:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007d42:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007d46:	f109 0901 	add.w	r9, r9, #1
 8007d4a:	9019      	str	r0, [sp, #100]	@ 0x64
 8007d4c:	e7bf      	b.n	8007cce <_strtod_l+0x146>
 8007d4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d50:	1c5a      	adds	r2, r3, #1
 8007d52:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d54:	785a      	ldrb	r2, [r3, #1]
 8007d56:	f1b9 0f00 	cmp.w	r9, #0
 8007d5a:	d03b      	beq.n	8007dd4 <_strtod_l+0x24c>
 8007d5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007d5e:	464d      	mov	r5, r9
 8007d60:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007d64:	2b09      	cmp	r3, #9
 8007d66:	d912      	bls.n	8007d8e <_strtod_l+0x206>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e7c2      	b.n	8007cf2 <_strtod_l+0x16a>
 8007d6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d6e:	1c5a      	adds	r2, r3, #1
 8007d70:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d72:	785a      	ldrb	r2, [r3, #1]
 8007d74:	3001      	adds	r0, #1
 8007d76:	2a30      	cmp	r2, #48	@ 0x30
 8007d78:	d0f8      	beq.n	8007d6c <_strtod_l+0x1e4>
 8007d7a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007d7e:	2b08      	cmp	r3, #8
 8007d80:	f200 84d2 	bhi.w	8008728 <_strtod_l+0xba0>
 8007d84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d86:	900a      	str	r0, [sp, #40]	@ 0x28
 8007d88:	2000      	movs	r0, #0
 8007d8a:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d8c:	4605      	mov	r5, r0
 8007d8e:	3a30      	subs	r2, #48	@ 0x30
 8007d90:	f100 0301 	add.w	r3, r0, #1
 8007d94:	d018      	beq.n	8007dc8 <_strtod_l+0x240>
 8007d96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d98:	4419      	add	r1, r3
 8007d9a:	910a      	str	r1, [sp, #40]	@ 0x28
 8007d9c:	462e      	mov	r6, r5
 8007d9e:	f04f 0e0a 	mov.w	lr, #10
 8007da2:	1c71      	adds	r1, r6, #1
 8007da4:	eba1 0c05 	sub.w	ip, r1, r5
 8007da8:	4563      	cmp	r3, ip
 8007daa:	dc15      	bgt.n	8007dd8 <_strtod_l+0x250>
 8007dac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007db0:	182b      	adds	r3, r5, r0
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	f105 0501 	add.w	r5, r5, #1
 8007db8:	4405      	add	r5, r0
 8007dba:	dc1a      	bgt.n	8007df2 <_strtod_l+0x26a>
 8007dbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007dbe:	230a      	movs	r3, #10
 8007dc0:	fb03 2301 	mla	r3, r3, r1, r2
 8007dc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007dca:	1c51      	adds	r1, r2, #1
 8007dcc:	9119      	str	r1, [sp, #100]	@ 0x64
 8007dce:	7852      	ldrb	r2, [r2, #1]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	e7c5      	b.n	8007d60 <_strtod_l+0x1d8>
 8007dd4:	4648      	mov	r0, r9
 8007dd6:	e7ce      	b.n	8007d76 <_strtod_l+0x1ee>
 8007dd8:	2e08      	cmp	r6, #8
 8007dda:	dc05      	bgt.n	8007de8 <_strtod_l+0x260>
 8007ddc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007dde:	fb0e f606 	mul.w	r6, lr, r6
 8007de2:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007de4:	460e      	mov	r6, r1
 8007de6:	e7dc      	b.n	8007da2 <_strtod_l+0x21a>
 8007de8:	2910      	cmp	r1, #16
 8007dea:	bfd8      	it	le
 8007dec:	fb0e f707 	mulle.w	r7, lr, r7
 8007df0:	e7f8      	b.n	8007de4 <_strtod_l+0x25c>
 8007df2:	2b0f      	cmp	r3, #15
 8007df4:	bfdc      	itt	le
 8007df6:	230a      	movle	r3, #10
 8007df8:	fb03 2707 	mlale	r7, r3, r7, r2
 8007dfc:	e7e3      	b.n	8007dc6 <_strtod_l+0x23e>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e02:	2301      	movs	r3, #1
 8007e04:	e77a      	b.n	8007cfc <_strtod_l+0x174>
 8007e06:	f04f 0c00 	mov.w	ip, #0
 8007e0a:	1ca2      	adds	r2, r4, #2
 8007e0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e0e:	78a2      	ldrb	r2, [r4, #2]
 8007e10:	e782      	b.n	8007d18 <_strtod_l+0x190>
 8007e12:	f04f 0c01 	mov.w	ip, #1
 8007e16:	e7f8      	b.n	8007e0a <_strtod_l+0x282>
 8007e18:	08009e24 	.word	0x08009e24
 8007e1c:	08009c5b 	.word	0x08009c5b
 8007e20:	7ff00000 	.word	0x7ff00000
 8007e24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e26:	1c51      	adds	r1, r2, #1
 8007e28:	9119      	str	r1, [sp, #100]	@ 0x64
 8007e2a:	7852      	ldrb	r2, [r2, #1]
 8007e2c:	2a30      	cmp	r2, #48	@ 0x30
 8007e2e:	d0f9      	beq.n	8007e24 <_strtod_l+0x29c>
 8007e30:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007e34:	2908      	cmp	r1, #8
 8007e36:	f63f af75 	bhi.w	8007d24 <_strtod_l+0x19c>
 8007e3a:	3a30      	subs	r2, #48	@ 0x30
 8007e3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e40:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007e42:	f04f 080a 	mov.w	r8, #10
 8007e46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e48:	1c56      	adds	r6, r2, #1
 8007e4a:	9619      	str	r6, [sp, #100]	@ 0x64
 8007e4c:	7852      	ldrb	r2, [r2, #1]
 8007e4e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007e52:	f1be 0f09 	cmp.w	lr, #9
 8007e56:	d939      	bls.n	8007ecc <_strtod_l+0x344>
 8007e58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007e5a:	1a76      	subs	r6, r6, r1
 8007e5c:	2e08      	cmp	r6, #8
 8007e5e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007e62:	dc03      	bgt.n	8007e6c <_strtod_l+0x2e4>
 8007e64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e66:	4588      	cmp	r8, r1
 8007e68:	bfa8      	it	ge
 8007e6a:	4688      	movge	r8, r1
 8007e6c:	f1bc 0f00 	cmp.w	ip, #0
 8007e70:	d001      	beq.n	8007e76 <_strtod_l+0x2ee>
 8007e72:	f1c8 0800 	rsb	r8, r8, #0
 8007e76:	2d00      	cmp	r5, #0
 8007e78:	d14e      	bne.n	8007f18 <_strtod_l+0x390>
 8007e7a:	9908      	ldr	r1, [sp, #32]
 8007e7c:	4308      	orrs	r0, r1
 8007e7e:	f47f aebc 	bne.w	8007bfa <_strtod_l+0x72>
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f47f aed4 	bne.w	8007c30 <_strtod_l+0xa8>
 8007e88:	2a69      	cmp	r2, #105	@ 0x69
 8007e8a:	d028      	beq.n	8007ede <_strtod_l+0x356>
 8007e8c:	dc25      	bgt.n	8007eda <_strtod_l+0x352>
 8007e8e:	2a49      	cmp	r2, #73	@ 0x49
 8007e90:	d025      	beq.n	8007ede <_strtod_l+0x356>
 8007e92:	2a4e      	cmp	r2, #78	@ 0x4e
 8007e94:	f47f aecc 	bne.w	8007c30 <_strtod_l+0xa8>
 8007e98:	499a      	ldr	r1, [pc, #616]	@ (8008104 <_strtod_l+0x57c>)
 8007e9a:	a819      	add	r0, sp, #100	@ 0x64
 8007e9c:	f001 f9ec 	bl	8009278 <__match>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	f43f aec5 	beq.w	8007c30 <_strtod_l+0xa8>
 8007ea6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b28      	cmp	r3, #40	@ 0x28
 8007eac:	d12e      	bne.n	8007f0c <_strtod_l+0x384>
 8007eae:	4996      	ldr	r1, [pc, #600]	@ (8008108 <_strtod_l+0x580>)
 8007eb0:	aa1c      	add	r2, sp, #112	@ 0x70
 8007eb2:	a819      	add	r0, sp, #100	@ 0x64
 8007eb4:	f001 f9f4 	bl	80092a0 <__hexnan>
 8007eb8:	2805      	cmp	r0, #5
 8007eba:	d127      	bne.n	8007f0c <_strtod_l+0x384>
 8007ebc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007ebe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007ec2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007ec6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007eca:	e696      	b.n	8007bfa <_strtod_l+0x72>
 8007ecc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ece:	fb08 2101 	mla	r1, r8, r1, r2
 8007ed2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007ed6:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ed8:	e7b5      	b.n	8007e46 <_strtod_l+0x2be>
 8007eda:	2a6e      	cmp	r2, #110	@ 0x6e
 8007edc:	e7da      	b.n	8007e94 <_strtod_l+0x30c>
 8007ede:	498b      	ldr	r1, [pc, #556]	@ (800810c <_strtod_l+0x584>)
 8007ee0:	a819      	add	r0, sp, #100	@ 0x64
 8007ee2:	f001 f9c9 	bl	8009278 <__match>
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	f43f aea2 	beq.w	8007c30 <_strtod_l+0xa8>
 8007eec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007eee:	4988      	ldr	r1, [pc, #544]	@ (8008110 <_strtod_l+0x588>)
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	a819      	add	r0, sp, #100	@ 0x64
 8007ef4:	9319      	str	r3, [sp, #100]	@ 0x64
 8007ef6:	f001 f9bf 	bl	8009278 <__match>
 8007efa:	b910      	cbnz	r0, 8007f02 <_strtod_l+0x37a>
 8007efc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007efe:	3301      	adds	r3, #1
 8007f00:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f02:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008120 <_strtod_l+0x598>
 8007f06:	f04f 0a00 	mov.w	sl, #0
 8007f0a:	e676      	b.n	8007bfa <_strtod_l+0x72>
 8007f0c:	4881      	ldr	r0, [pc, #516]	@ (8008114 <_strtod_l+0x58c>)
 8007f0e:	f000 feef 	bl	8008cf0 <nan>
 8007f12:	ec5b ab10 	vmov	sl, fp, d0
 8007f16:	e670      	b.n	8007bfa <_strtod_l+0x72>
 8007f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f1a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007f1c:	eba8 0303 	sub.w	r3, r8, r3
 8007f20:	f1b9 0f00 	cmp.w	r9, #0
 8007f24:	bf08      	it	eq
 8007f26:	46a9      	moveq	r9, r5
 8007f28:	2d10      	cmp	r5, #16
 8007f2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f2c:	462c      	mov	r4, r5
 8007f2e:	bfa8      	it	ge
 8007f30:	2410      	movge	r4, #16
 8007f32:	f7f8 faf7 	bl	8000524 <__aeabi_ui2d>
 8007f36:	2d09      	cmp	r5, #9
 8007f38:	4682      	mov	sl, r0
 8007f3a:	468b      	mov	fp, r1
 8007f3c:	dc13      	bgt.n	8007f66 <_strtod_l+0x3de>
 8007f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f43f ae5a 	beq.w	8007bfa <_strtod_l+0x72>
 8007f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f48:	dd78      	ble.n	800803c <_strtod_l+0x4b4>
 8007f4a:	2b16      	cmp	r3, #22
 8007f4c:	dc5f      	bgt.n	800800e <_strtod_l+0x486>
 8007f4e:	4972      	ldr	r1, [pc, #456]	@ (8008118 <_strtod_l+0x590>)
 8007f50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f58:	4652      	mov	r2, sl
 8007f5a:	465b      	mov	r3, fp
 8007f5c:	f7f8 fb5c 	bl	8000618 <__aeabi_dmul>
 8007f60:	4682      	mov	sl, r0
 8007f62:	468b      	mov	fp, r1
 8007f64:	e649      	b.n	8007bfa <_strtod_l+0x72>
 8007f66:	4b6c      	ldr	r3, [pc, #432]	@ (8008118 <_strtod_l+0x590>)
 8007f68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007f70:	f7f8 fb52 	bl	8000618 <__aeabi_dmul>
 8007f74:	4682      	mov	sl, r0
 8007f76:	4638      	mov	r0, r7
 8007f78:	468b      	mov	fp, r1
 8007f7a:	f7f8 fad3 	bl	8000524 <__aeabi_ui2d>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4650      	mov	r0, sl
 8007f84:	4659      	mov	r1, fp
 8007f86:	f7f8 f991 	bl	80002ac <__adddf3>
 8007f8a:	2d0f      	cmp	r5, #15
 8007f8c:	4682      	mov	sl, r0
 8007f8e:	468b      	mov	fp, r1
 8007f90:	ddd5      	ble.n	8007f3e <_strtod_l+0x3b6>
 8007f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f94:	1b2c      	subs	r4, r5, r4
 8007f96:	441c      	add	r4, r3
 8007f98:	2c00      	cmp	r4, #0
 8007f9a:	f340 8093 	ble.w	80080c4 <_strtod_l+0x53c>
 8007f9e:	f014 030f 	ands.w	r3, r4, #15
 8007fa2:	d00a      	beq.n	8007fba <_strtod_l+0x432>
 8007fa4:	495c      	ldr	r1, [pc, #368]	@ (8008118 <_strtod_l+0x590>)
 8007fa6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007faa:	4652      	mov	r2, sl
 8007fac:	465b      	mov	r3, fp
 8007fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fb2:	f7f8 fb31 	bl	8000618 <__aeabi_dmul>
 8007fb6:	4682      	mov	sl, r0
 8007fb8:	468b      	mov	fp, r1
 8007fba:	f034 040f 	bics.w	r4, r4, #15
 8007fbe:	d073      	beq.n	80080a8 <_strtod_l+0x520>
 8007fc0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007fc4:	dd49      	ble.n	800805a <_strtod_l+0x4d2>
 8007fc6:	2400      	movs	r4, #0
 8007fc8:	46a0      	mov	r8, r4
 8007fca:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007fcc:	46a1      	mov	r9, r4
 8007fce:	9a05      	ldr	r2, [sp, #20]
 8007fd0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008120 <_strtod_l+0x598>
 8007fd4:	2322      	movs	r3, #34	@ 0x22
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	f04f 0a00 	mov.w	sl, #0
 8007fdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f43f ae0b 	beq.w	8007bfa <_strtod_l+0x72>
 8007fe4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007fe6:	9805      	ldr	r0, [sp, #20]
 8007fe8:	f7ff f946 	bl	8007278 <_Bfree>
 8007fec:	9805      	ldr	r0, [sp, #20]
 8007fee:	4649      	mov	r1, r9
 8007ff0:	f7ff f942 	bl	8007278 <_Bfree>
 8007ff4:	9805      	ldr	r0, [sp, #20]
 8007ff6:	4641      	mov	r1, r8
 8007ff8:	f7ff f93e 	bl	8007278 <_Bfree>
 8007ffc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ffe:	9805      	ldr	r0, [sp, #20]
 8008000:	f7ff f93a 	bl	8007278 <_Bfree>
 8008004:	9805      	ldr	r0, [sp, #20]
 8008006:	4621      	mov	r1, r4
 8008008:	f7ff f936 	bl	8007278 <_Bfree>
 800800c:	e5f5      	b.n	8007bfa <_strtod_l+0x72>
 800800e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008010:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008014:	4293      	cmp	r3, r2
 8008016:	dbbc      	blt.n	8007f92 <_strtod_l+0x40a>
 8008018:	4c3f      	ldr	r4, [pc, #252]	@ (8008118 <_strtod_l+0x590>)
 800801a:	f1c5 050f 	rsb	r5, r5, #15
 800801e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008022:	4652      	mov	r2, sl
 8008024:	465b      	mov	r3, fp
 8008026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800802a:	f7f8 faf5 	bl	8000618 <__aeabi_dmul>
 800802e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008030:	1b5d      	subs	r5, r3, r5
 8008032:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008036:	e9d4 2300 	ldrd	r2, r3, [r4]
 800803a:	e78f      	b.n	8007f5c <_strtod_l+0x3d4>
 800803c:	3316      	adds	r3, #22
 800803e:	dba8      	blt.n	8007f92 <_strtod_l+0x40a>
 8008040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008042:	eba3 0808 	sub.w	r8, r3, r8
 8008046:	4b34      	ldr	r3, [pc, #208]	@ (8008118 <_strtod_l+0x590>)
 8008048:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800804c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008050:	4650      	mov	r0, sl
 8008052:	4659      	mov	r1, fp
 8008054:	f7f8 fc0a 	bl	800086c <__aeabi_ddiv>
 8008058:	e782      	b.n	8007f60 <_strtod_l+0x3d8>
 800805a:	2300      	movs	r3, #0
 800805c:	4f2f      	ldr	r7, [pc, #188]	@ (800811c <_strtod_l+0x594>)
 800805e:	1124      	asrs	r4, r4, #4
 8008060:	4650      	mov	r0, sl
 8008062:	4659      	mov	r1, fp
 8008064:	461e      	mov	r6, r3
 8008066:	2c01      	cmp	r4, #1
 8008068:	dc21      	bgt.n	80080ae <_strtod_l+0x526>
 800806a:	b10b      	cbz	r3, 8008070 <_strtod_l+0x4e8>
 800806c:	4682      	mov	sl, r0
 800806e:	468b      	mov	fp, r1
 8008070:	492a      	ldr	r1, [pc, #168]	@ (800811c <_strtod_l+0x594>)
 8008072:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008076:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800807a:	4652      	mov	r2, sl
 800807c:	465b      	mov	r3, fp
 800807e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008082:	f7f8 fac9 	bl	8000618 <__aeabi_dmul>
 8008086:	4b26      	ldr	r3, [pc, #152]	@ (8008120 <_strtod_l+0x598>)
 8008088:	460a      	mov	r2, r1
 800808a:	400b      	ands	r3, r1
 800808c:	4925      	ldr	r1, [pc, #148]	@ (8008124 <_strtod_l+0x59c>)
 800808e:	428b      	cmp	r3, r1
 8008090:	4682      	mov	sl, r0
 8008092:	d898      	bhi.n	8007fc6 <_strtod_l+0x43e>
 8008094:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008098:	428b      	cmp	r3, r1
 800809a:	bf86      	itte	hi
 800809c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008128 <_strtod_l+0x5a0>
 80080a0:	f04f 3aff 	movhi.w	sl, #4294967295
 80080a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80080a8:	2300      	movs	r3, #0
 80080aa:	9308      	str	r3, [sp, #32]
 80080ac:	e076      	b.n	800819c <_strtod_l+0x614>
 80080ae:	07e2      	lsls	r2, r4, #31
 80080b0:	d504      	bpl.n	80080bc <_strtod_l+0x534>
 80080b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080b6:	f7f8 faaf 	bl	8000618 <__aeabi_dmul>
 80080ba:	2301      	movs	r3, #1
 80080bc:	3601      	adds	r6, #1
 80080be:	1064      	asrs	r4, r4, #1
 80080c0:	3708      	adds	r7, #8
 80080c2:	e7d0      	b.n	8008066 <_strtod_l+0x4de>
 80080c4:	d0f0      	beq.n	80080a8 <_strtod_l+0x520>
 80080c6:	4264      	negs	r4, r4
 80080c8:	f014 020f 	ands.w	r2, r4, #15
 80080cc:	d00a      	beq.n	80080e4 <_strtod_l+0x55c>
 80080ce:	4b12      	ldr	r3, [pc, #72]	@ (8008118 <_strtod_l+0x590>)
 80080d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080d4:	4650      	mov	r0, sl
 80080d6:	4659      	mov	r1, fp
 80080d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080dc:	f7f8 fbc6 	bl	800086c <__aeabi_ddiv>
 80080e0:	4682      	mov	sl, r0
 80080e2:	468b      	mov	fp, r1
 80080e4:	1124      	asrs	r4, r4, #4
 80080e6:	d0df      	beq.n	80080a8 <_strtod_l+0x520>
 80080e8:	2c1f      	cmp	r4, #31
 80080ea:	dd1f      	ble.n	800812c <_strtod_l+0x5a4>
 80080ec:	2400      	movs	r4, #0
 80080ee:	46a0      	mov	r8, r4
 80080f0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80080f2:	46a1      	mov	r9, r4
 80080f4:	9a05      	ldr	r2, [sp, #20]
 80080f6:	2322      	movs	r3, #34	@ 0x22
 80080f8:	f04f 0a00 	mov.w	sl, #0
 80080fc:	f04f 0b00 	mov.w	fp, #0
 8008100:	6013      	str	r3, [r2, #0]
 8008102:	e76b      	b.n	8007fdc <_strtod_l+0x454>
 8008104:	08009b49 	.word	0x08009b49
 8008108:	08009e10 	.word	0x08009e10
 800810c:	08009b41 	.word	0x08009b41
 8008110:	08009b78 	.word	0x08009b78
 8008114:	08009cb1 	.word	0x08009cb1
 8008118:	08009d48 	.word	0x08009d48
 800811c:	08009d20 	.word	0x08009d20
 8008120:	7ff00000 	.word	0x7ff00000
 8008124:	7ca00000 	.word	0x7ca00000
 8008128:	7fefffff 	.word	0x7fefffff
 800812c:	f014 0310 	ands.w	r3, r4, #16
 8008130:	bf18      	it	ne
 8008132:	236a      	movne	r3, #106	@ 0x6a
 8008134:	4ea9      	ldr	r6, [pc, #676]	@ (80083dc <_strtod_l+0x854>)
 8008136:	9308      	str	r3, [sp, #32]
 8008138:	4650      	mov	r0, sl
 800813a:	4659      	mov	r1, fp
 800813c:	2300      	movs	r3, #0
 800813e:	07e7      	lsls	r7, r4, #31
 8008140:	d504      	bpl.n	800814c <_strtod_l+0x5c4>
 8008142:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008146:	f7f8 fa67 	bl	8000618 <__aeabi_dmul>
 800814a:	2301      	movs	r3, #1
 800814c:	1064      	asrs	r4, r4, #1
 800814e:	f106 0608 	add.w	r6, r6, #8
 8008152:	d1f4      	bne.n	800813e <_strtod_l+0x5b6>
 8008154:	b10b      	cbz	r3, 800815a <_strtod_l+0x5d2>
 8008156:	4682      	mov	sl, r0
 8008158:	468b      	mov	fp, r1
 800815a:	9b08      	ldr	r3, [sp, #32]
 800815c:	b1b3      	cbz	r3, 800818c <_strtod_l+0x604>
 800815e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008162:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008166:	2b00      	cmp	r3, #0
 8008168:	4659      	mov	r1, fp
 800816a:	dd0f      	ble.n	800818c <_strtod_l+0x604>
 800816c:	2b1f      	cmp	r3, #31
 800816e:	dd56      	ble.n	800821e <_strtod_l+0x696>
 8008170:	2b34      	cmp	r3, #52	@ 0x34
 8008172:	bfde      	ittt	le
 8008174:	f04f 33ff 	movle.w	r3, #4294967295
 8008178:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800817c:	4093      	lslle	r3, r2
 800817e:	f04f 0a00 	mov.w	sl, #0
 8008182:	bfcc      	ite	gt
 8008184:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008188:	ea03 0b01 	andle.w	fp, r3, r1
 800818c:	2200      	movs	r2, #0
 800818e:	2300      	movs	r3, #0
 8008190:	4650      	mov	r0, sl
 8008192:	4659      	mov	r1, fp
 8008194:	f7f8 fca8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008198:	2800      	cmp	r0, #0
 800819a:	d1a7      	bne.n	80080ec <_strtod_l+0x564>
 800819c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80081a2:	9805      	ldr	r0, [sp, #20]
 80081a4:	462b      	mov	r3, r5
 80081a6:	464a      	mov	r2, r9
 80081a8:	f7ff f8ce 	bl	8007348 <__s2b>
 80081ac:	900b      	str	r0, [sp, #44]	@ 0x2c
 80081ae:	2800      	cmp	r0, #0
 80081b0:	f43f af09 	beq.w	8007fc6 <_strtod_l+0x43e>
 80081b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081b8:	2a00      	cmp	r2, #0
 80081ba:	eba3 0308 	sub.w	r3, r3, r8
 80081be:	bfa8      	it	ge
 80081c0:	2300      	movge	r3, #0
 80081c2:	9312      	str	r3, [sp, #72]	@ 0x48
 80081c4:	2400      	movs	r4, #0
 80081c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80081ca:	9316      	str	r3, [sp, #88]	@ 0x58
 80081cc:	46a0      	mov	r8, r4
 80081ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081d0:	9805      	ldr	r0, [sp, #20]
 80081d2:	6859      	ldr	r1, [r3, #4]
 80081d4:	f7ff f810 	bl	80071f8 <_Balloc>
 80081d8:	4681      	mov	r9, r0
 80081da:	2800      	cmp	r0, #0
 80081dc:	f43f aef7 	beq.w	8007fce <_strtod_l+0x446>
 80081e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	3202      	adds	r2, #2
 80081e6:	f103 010c 	add.w	r1, r3, #12
 80081ea:	0092      	lsls	r2, r2, #2
 80081ec:	300c      	adds	r0, #12
 80081ee:	f000 fd71 	bl	8008cd4 <memcpy>
 80081f2:	ec4b ab10 	vmov	d0, sl, fp
 80081f6:	9805      	ldr	r0, [sp, #20]
 80081f8:	aa1c      	add	r2, sp, #112	@ 0x70
 80081fa:	a91b      	add	r1, sp, #108	@ 0x6c
 80081fc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008200:	f7ff fbd6 	bl	80079b0 <__d2b>
 8008204:	901a      	str	r0, [sp, #104]	@ 0x68
 8008206:	2800      	cmp	r0, #0
 8008208:	f43f aee1 	beq.w	8007fce <_strtod_l+0x446>
 800820c:	9805      	ldr	r0, [sp, #20]
 800820e:	2101      	movs	r1, #1
 8008210:	f7ff f930 	bl	8007474 <__i2b>
 8008214:	4680      	mov	r8, r0
 8008216:	b948      	cbnz	r0, 800822c <_strtod_l+0x6a4>
 8008218:	f04f 0800 	mov.w	r8, #0
 800821c:	e6d7      	b.n	8007fce <_strtod_l+0x446>
 800821e:	f04f 32ff 	mov.w	r2, #4294967295
 8008222:	fa02 f303 	lsl.w	r3, r2, r3
 8008226:	ea03 0a0a 	and.w	sl, r3, sl
 800822a:	e7af      	b.n	800818c <_strtod_l+0x604>
 800822c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800822e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008230:	2d00      	cmp	r5, #0
 8008232:	bfab      	itete	ge
 8008234:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008236:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008238:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800823a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800823c:	bfac      	ite	ge
 800823e:	18ef      	addge	r7, r5, r3
 8008240:	1b5e      	sublt	r6, r3, r5
 8008242:	9b08      	ldr	r3, [sp, #32]
 8008244:	1aed      	subs	r5, r5, r3
 8008246:	4415      	add	r5, r2
 8008248:	4b65      	ldr	r3, [pc, #404]	@ (80083e0 <_strtod_l+0x858>)
 800824a:	3d01      	subs	r5, #1
 800824c:	429d      	cmp	r5, r3
 800824e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008252:	da50      	bge.n	80082f6 <_strtod_l+0x76e>
 8008254:	1b5b      	subs	r3, r3, r5
 8008256:	2b1f      	cmp	r3, #31
 8008258:	eba2 0203 	sub.w	r2, r2, r3
 800825c:	f04f 0101 	mov.w	r1, #1
 8008260:	dc3d      	bgt.n	80082de <_strtod_l+0x756>
 8008262:	fa01 f303 	lsl.w	r3, r1, r3
 8008266:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008268:	2300      	movs	r3, #0
 800826a:	9310      	str	r3, [sp, #64]	@ 0x40
 800826c:	18bd      	adds	r5, r7, r2
 800826e:	9b08      	ldr	r3, [sp, #32]
 8008270:	42af      	cmp	r7, r5
 8008272:	4416      	add	r6, r2
 8008274:	441e      	add	r6, r3
 8008276:	463b      	mov	r3, r7
 8008278:	bfa8      	it	ge
 800827a:	462b      	movge	r3, r5
 800827c:	42b3      	cmp	r3, r6
 800827e:	bfa8      	it	ge
 8008280:	4633      	movge	r3, r6
 8008282:	2b00      	cmp	r3, #0
 8008284:	bfc2      	ittt	gt
 8008286:	1aed      	subgt	r5, r5, r3
 8008288:	1af6      	subgt	r6, r6, r3
 800828a:	1aff      	subgt	r7, r7, r3
 800828c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800828e:	2b00      	cmp	r3, #0
 8008290:	dd16      	ble.n	80082c0 <_strtod_l+0x738>
 8008292:	4641      	mov	r1, r8
 8008294:	9805      	ldr	r0, [sp, #20]
 8008296:	461a      	mov	r2, r3
 8008298:	f7ff f9a4 	bl	80075e4 <__pow5mult>
 800829c:	4680      	mov	r8, r0
 800829e:	2800      	cmp	r0, #0
 80082a0:	d0ba      	beq.n	8008218 <_strtod_l+0x690>
 80082a2:	4601      	mov	r1, r0
 80082a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80082a6:	9805      	ldr	r0, [sp, #20]
 80082a8:	f7ff f8fa 	bl	80074a0 <__multiply>
 80082ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f43f ae8d 	beq.w	8007fce <_strtod_l+0x446>
 80082b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082b6:	9805      	ldr	r0, [sp, #20]
 80082b8:	f7fe ffde 	bl	8007278 <_Bfree>
 80082bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082be:	931a      	str	r3, [sp, #104]	@ 0x68
 80082c0:	2d00      	cmp	r5, #0
 80082c2:	dc1d      	bgt.n	8008300 <_strtod_l+0x778>
 80082c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	dd23      	ble.n	8008312 <_strtod_l+0x78a>
 80082ca:	4649      	mov	r1, r9
 80082cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80082ce:	9805      	ldr	r0, [sp, #20]
 80082d0:	f7ff f988 	bl	80075e4 <__pow5mult>
 80082d4:	4681      	mov	r9, r0
 80082d6:	b9e0      	cbnz	r0, 8008312 <_strtod_l+0x78a>
 80082d8:	f04f 0900 	mov.w	r9, #0
 80082dc:	e677      	b.n	8007fce <_strtod_l+0x446>
 80082de:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80082e2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80082e6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80082ea:	35e2      	adds	r5, #226	@ 0xe2
 80082ec:	fa01 f305 	lsl.w	r3, r1, r5
 80082f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80082f2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80082f4:	e7ba      	b.n	800826c <_strtod_l+0x6e4>
 80082f6:	2300      	movs	r3, #0
 80082f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80082fa:	2301      	movs	r3, #1
 80082fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082fe:	e7b5      	b.n	800826c <_strtod_l+0x6e4>
 8008300:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008302:	9805      	ldr	r0, [sp, #20]
 8008304:	462a      	mov	r2, r5
 8008306:	f7ff f9c7 	bl	8007698 <__lshift>
 800830a:	901a      	str	r0, [sp, #104]	@ 0x68
 800830c:	2800      	cmp	r0, #0
 800830e:	d1d9      	bne.n	80082c4 <_strtod_l+0x73c>
 8008310:	e65d      	b.n	8007fce <_strtod_l+0x446>
 8008312:	2e00      	cmp	r6, #0
 8008314:	dd07      	ble.n	8008326 <_strtod_l+0x79e>
 8008316:	4649      	mov	r1, r9
 8008318:	9805      	ldr	r0, [sp, #20]
 800831a:	4632      	mov	r2, r6
 800831c:	f7ff f9bc 	bl	8007698 <__lshift>
 8008320:	4681      	mov	r9, r0
 8008322:	2800      	cmp	r0, #0
 8008324:	d0d8      	beq.n	80082d8 <_strtod_l+0x750>
 8008326:	2f00      	cmp	r7, #0
 8008328:	dd08      	ble.n	800833c <_strtod_l+0x7b4>
 800832a:	4641      	mov	r1, r8
 800832c:	9805      	ldr	r0, [sp, #20]
 800832e:	463a      	mov	r2, r7
 8008330:	f7ff f9b2 	bl	8007698 <__lshift>
 8008334:	4680      	mov	r8, r0
 8008336:	2800      	cmp	r0, #0
 8008338:	f43f ae49 	beq.w	8007fce <_strtod_l+0x446>
 800833c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800833e:	9805      	ldr	r0, [sp, #20]
 8008340:	464a      	mov	r2, r9
 8008342:	f7ff fa31 	bl	80077a8 <__mdiff>
 8008346:	4604      	mov	r4, r0
 8008348:	2800      	cmp	r0, #0
 800834a:	f43f ae40 	beq.w	8007fce <_strtod_l+0x446>
 800834e:	68c3      	ldr	r3, [r0, #12]
 8008350:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008352:	2300      	movs	r3, #0
 8008354:	60c3      	str	r3, [r0, #12]
 8008356:	4641      	mov	r1, r8
 8008358:	f7ff fa0a 	bl	8007770 <__mcmp>
 800835c:	2800      	cmp	r0, #0
 800835e:	da45      	bge.n	80083ec <_strtod_l+0x864>
 8008360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008362:	ea53 030a 	orrs.w	r3, r3, sl
 8008366:	d16b      	bne.n	8008440 <_strtod_l+0x8b8>
 8008368:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800836c:	2b00      	cmp	r3, #0
 800836e:	d167      	bne.n	8008440 <_strtod_l+0x8b8>
 8008370:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008374:	0d1b      	lsrs	r3, r3, #20
 8008376:	051b      	lsls	r3, r3, #20
 8008378:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800837c:	d960      	bls.n	8008440 <_strtod_l+0x8b8>
 800837e:	6963      	ldr	r3, [r4, #20]
 8008380:	b913      	cbnz	r3, 8008388 <_strtod_l+0x800>
 8008382:	6923      	ldr	r3, [r4, #16]
 8008384:	2b01      	cmp	r3, #1
 8008386:	dd5b      	ble.n	8008440 <_strtod_l+0x8b8>
 8008388:	4621      	mov	r1, r4
 800838a:	2201      	movs	r2, #1
 800838c:	9805      	ldr	r0, [sp, #20]
 800838e:	f7ff f983 	bl	8007698 <__lshift>
 8008392:	4641      	mov	r1, r8
 8008394:	4604      	mov	r4, r0
 8008396:	f7ff f9eb 	bl	8007770 <__mcmp>
 800839a:	2800      	cmp	r0, #0
 800839c:	dd50      	ble.n	8008440 <_strtod_l+0x8b8>
 800839e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083a2:	9a08      	ldr	r2, [sp, #32]
 80083a4:	0d1b      	lsrs	r3, r3, #20
 80083a6:	051b      	lsls	r3, r3, #20
 80083a8:	2a00      	cmp	r2, #0
 80083aa:	d06a      	beq.n	8008482 <_strtod_l+0x8fa>
 80083ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80083b0:	d867      	bhi.n	8008482 <_strtod_l+0x8fa>
 80083b2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80083b6:	f67f ae9d 	bls.w	80080f4 <_strtod_l+0x56c>
 80083ba:	4b0a      	ldr	r3, [pc, #40]	@ (80083e4 <_strtod_l+0x85c>)
 80083bc:	4650      	mov	r0, sl
 80083be:	4659      	mov	r1, fp
 80083c0:	2200      	movs	r2, #0
 80083c2:	f7f8 f929 	bl	8000618 <__aeabi_dmul>
 80083c6:	4b08      	ldr	r3, [pc, #32]	@ (80083e8 <_strtod_l+0x860>)
 80083c8:	400b      	ands	r3, r1
 80083ca:	4682      	mov	sl, r0
 80083cc:	468b      	mov	fp, r1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f47f ae08 	bne.w	8007fe4 <_strtod_l+0x45c>
 80083d4:	9a05      	ldr	r2, [sp, #20]
 80083d6:	2322      	movs	r3, #34	@ 0x22
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	e603      	b.n	8007fe4 <_strtod_l+0x45c>
 80083dc:	08009e38 	.word	0x08009e38
 80083e0:	fffffc02 	.word	0xfffffc02
 80083e4:	39500000 	.word	0x39500000
 80083e8:	7ff00000 	.word	0x7ff00000
 80083ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80083f0:	d165      	bne.n	80084be <_strtod_l+0x936>
 80083f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80083f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083f8:	b35a      	cbz	r2, 8008452 <_strtod_l+0x8ca>
 80083fa:	4a9f      	ldr	r2, [pc, #636]	@ (8008678 <_strtod_l+0xaf0>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d12b      	bne.n	8008458 <_strtod_l+0x8d0>
 8008400:	9b08      	ldr	r3, [sp, #32]
 8008402:	4651      	mov	r1, sl
 8008404:	b303      	cbz	r3, 8008448 <_strtod_l+0x8c0>
 8008406:	4b9d      	ldr	r3, [pc, #628]	@ (800867c <_strtod_l+0xaf4>)
 8008408:	465a      	mov	r2, fp
 800840a:	4013      	ands	r3, r2
 800840c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008410:	f04f 32ff 	mov.w	r2, #4294967295
 8008414:	d81b      	bhi.n	800844e <_strtod_l+0x8c6>
 8008416:	0d1b      	lsrs	r3, r3, #20
 8008418:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800841c:	fa02 f303 	lsl.w	r3, r2, r3
 8008420:	4299      	cmp	r1, r3
 8008422:	d119      	bne.n	8008458 <_strtod_l+0x8d0>
 8008424:	4b96      	ldr	r3, [pc, #600]	@ (8008680 <_strtod_l+0xaf8>)
 8008426:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008428:	429a      	cmp	r2, r3
 800842a:	d102      	bne.n	8008432 <_strtod_l+0x8aa>
 800842c:	3101      	adds	r1, #1
 800842e:	f43f adce 	beq.w	8007fce <_strtod_l+0x446>
 8008432:	4b92      	ldr	r3, [pc, #584]	@ (800867c <_strtod_l+0xaf4>)
 8008434:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008436:	401a      	ands	r2, r3
 8008438:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800843c:	f04f 0a00 	mov.w	sl, #0
 8008440:	9b08      	ldr	r3, [sp, #32]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1b9      	bne.n	80083ba <_strtod_l+0x832>
 8008446:	e5cd      	b.n	8007fe4 <_strtod_l+0x45c>
 8008448:	f04f 33ff 	mov.w	r3, #4294967295
 800844c:	e7e8      	b.n	8008420 <_strtod_l+0x898>
 800844e:	4613      	mov	r3, r2
 8008450:	e7e6      	b.n	8008420 <_strtod_l+0x898>
 8008452:	ea53 030a 	orrs.w	r3, r3, sl
 8008456:	d0a2      	beq.n	800839e <_strtod_l+0x816>
 8008458:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800845a:	b1db      	cbz	r3, 8008494 <_strtod_l+0x90c>
 800845c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800845e:	4213      	tst	r3, r2
 8008460:	d0ee      	beq.n	8008440 <_strtod_l+0x8b8>
 8008462:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008464:	9a08      	ldr	r2, [sp, #32]
 8008466:	4650      	mov	r0, sl
 8008468:	4659      	mov	r1, fp
 800846a:	b1bb      	cbz	r3, 800849c <_strtod_l+0x914>
 800846c:	f7ff fb6e 	bl	8007b4c <sulp>
 8008470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008474:	ec53 2b10 	vmov	r2, r3, d0
 8008478:	f7f7 ff18 	bl	80002ac <__adddf3>
 800847c:	4682      	mov	sl, r0
 800847e:	468b      	mov	fp, r1
 8008480:	e7de      	b.n	8008440 <_strtod_l+0x8b8>
 8008482:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008486:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800848a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800848e:	f04f 3aff 	mov.w	sl, #4294967295
 8008492:	e7d5      	b.n	8008440 <_strtod_l+0x8b8>
 8008494:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008496:	ea13 0f0a 	tst.w	r3, sl
 800849a:	e7e1      	b.n	8008460 <_strtod_l+0x8d8>
 800849c:	f7ff fb56 	bl	8007b4c <sulp>
 80084a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084a4:	ec53 2b10 	vmov	r2, r3, d0
 80084a8:	f7f7 fefe 	bl	80002a8 <__aeabi_dsub>
 80084ac:	2200      	movs	r2, #0
 80084ae:	2300      	movs	r3, #0
 80084b0:	4682      	mov	sl, r0
 80084b2:	468b      	mov	fp, r1
 80084b4:	f7f8 fb18 	bl	8000ae8 <__aeabi_dcmpeq>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d0c1      	beq.n	8008440 <_strtod_l+0x8b8>
 80084bc:	e61a      	b.n	80080f4 <_strtod_l+0x56c>
 80084be:	4641      	mov	r1, r8
 80084c0:	4620      	mov	r0, r4
 80084c2:	f7ff facd 	bl	8007a60 <__ratio>
 80084c6:	ec57 6b10 	vmov	r6, r7, d0
 80084ca:	2200      	movs	r2, #0
 80084cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80084d0:	4630      	mov	r0, r6
 80084d2:	4639      	mov	r1, r7
 80084d4:	f7f8 fb1c 	bl	8000b10 <__aeabi_dcmple>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d06f      	beq.n	80085bc <_strtod_l+0xa34>
 80084dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d17a      	bne.n	80085d8 <_strtod_l+0xa50>
 80084e2:	f1ba 0f00 	cmp.w	sl, #0
 80084e6:	d158      	bne.n	800859a <_strtod_l+0xa12>
 80084e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d15a      	bne.n	80085a8 <_strtod_l+0xa20>
 80084f2:	4b64      	ldr	r3, [pc, #400]	@ (8008684 <_strtod_l+0xafc>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	4630      	mov	r0, r6
 80084f8:	4639      	mov	r1, r7
 80084fa:	f7f8 faff 	bl	8000afc <__aeabi_dcmplt>
 80084fe:	2800      	cmp	r0, #0
 8008500:	d159      	bne.n	80085b6 <_strtod_l+0xa2e>
 8008502:	4630      	mov	r0, r6
 8008504:	4639      	mov	r1, r7
 8008506:	4b60      	ldr	r3, [pc, #384]	@ (8008688 <_strtod_l+0xb00>)
 8008508:	2200      	movs	r2, #0
 800850a:	f7f8 f885 	bl	8000618 <__aeabi_dmul>
 800850e:	4606      	mov	r6, r0
 8008510:	460f      	mov	r7, r1
 8008512:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008516:	9606      	str	r6, [sp, #24]
 8008518:	9307      	str	r3, [sp, #28]
 800851a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800851e:	4d57      	ldr	r5, [pc, #348]	@ (800867c <_strtod_l+0xaf4>)
 8008520:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008526:	401d      	ands	r5, r3
 8008528:	4b58      	ldr	r3, [pc, #352]	@ (800868c <_strtod_l+0xb04>)
 800852a:	429d      	cmp	r5, r3
 800852c:	f040 80b2 	bne.w	8008694 <_strtod_l+0xb0c>
 8008530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008532:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008536:	ec4b ab10 	vmov	d0, sl, fp
 800853a:	f7ff f9c9 	bl	80078d0 <__ulp>
 800853e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008542:	ec51 0b10 	vmov	r0, r1, d0
 8008546:	f7f8 f867 	bl	8000618 <__aeabi_dmul>
 800854a:	4652      	mov	r2, sl
 800854c:	465b      	mov	r3, fp
 800854e:	f7f7 fead 	bl	80002ac <__adddf3>
 8008552:	460b      	mov	r3, r1
 8008554:	4949      	ldr	r1, [pc, #292]	@ (800867c <_strtod_l+0xaf4>)
 8008556:	4a4e      	ldr	r2, [pc, #312]	@ (8008690 <_strtod_l+0xb08>)
 8008558:	4019      	ands	r1, r3
 800855a:	4291      	cmp	r1, r2
 800855c:	4682      	mov	sl, r0
 800855e:	d942      	bls.n	80085e6 <_strtod_l+0xa5e>
 8008560:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008562:	4b47      	ldr	r3, [pc, #284]	@ (8008680 <_strtod_l+0xaf8>)
 8008564:	429a      	cmp	r2, r3
 8008566:	d103      	bne.n	8008570 <_strtod_l+0x9e8>
 8008568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800856a:	3301      	adds	r3, #1
 800856c:	f43f ad2f 	beq.w	8007fce <_strtod_l+0x446>
 8008570:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008680 <_strtod_l+0xaf8>
 8008574:	f04f 3aff 	mov.w	sl, #4294967295
 8008578:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800857a:	9805      	ldr	r0, [sp, #20]
 800857c:	f7fe fe7c 	bl	8007278 <_Bfree>
 8008580:	9805      	ldr	r0, [sp, #20]
 8008582:	4649      	mov	r1, r9
 8008584:	f7fe fe78 	bl	8007278 <_Bfree>
 8008588:	9805      	ldr	r0, [sp, #20]
 800858a:	4641      	mov	r1, r8
 800858c:	f7fe fe74 	bl	8007278 <_Bfree>
 8008590:	9805      	ldr	r0, [sp, #20]
 8008592:	4621      	mov	r1, r4
 8008594:	f7fe fe70 	bl	8007278 <_Bfree>
 8008598:	e619      	b.n	80081ce <_strtod_l+0x646>
 800859a:	f1ba 0f01 	cmp.w	sl, #1
 800859e:	d103      	bne.n	80085a8 <_strtod_l+0xa20>
 80085a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f43f ada6 	beq.w	80080f4 <_strtod_l+0x56c>
 80085a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008658 <_strtod_l+0xad0>
 80085ac:	4f35      	ldr	r7, [pc, #212]	@ (8008684 <_strtod_l+0xafc>)
 80085ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80085b2:	2600      	movs	r6, #0
 80085b4:	e7b1      	b.n	800851a <_strtod_l+0x992>
 80085b6:	4f34      	ldr	r7, [pc, #208]	@ (8008688 <_strtod_l+0xb00>)
 80085b8:	2600      	movs	r6, #0
 80085ba:	e7aa      	b.n	8008512 <_strtod_l+0x98a>
 80085bc:	4b32      	ldr	r3, [pc, #200]	@ (8008688 <_strtod_l+0xb00>)
 80085be:	4630      	mov	r0, r6
 80085c0:	4639      	mov	r1, r7
 80085c2:	2200      	movs	r2, #0
 80085c4:	f7f8 f828 	bl	8000618 <__aeabi_dmul>
 80085c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085ca:	4606      	mov	r6, r0
 80085cc:	460f      	mov	r7, r1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d09f      	beq.n	8008512 <_strtod_l+0x98a>
 80085d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80085d6:	e7a0      	b.n	800851a <_strtod_l+0x992>
 80085d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008660 <_strtod_l+0xad8>
 80085dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80085e0:	ec57 6b17 	vmov	r6, r7, d7
 80085e4:	e799      	b.n	800851a <_strtod_l+0x992>
 80085e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80085ea:	9b08      	ldr	r3, [sp, #32]
 80085ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1c1      	bne.n	8008578 <_strtod_l+0x9f0>
 80085f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80085f8:	0d1b      	lsrs	r3, r3, #20
 80085fa:	051b      	lsls	r3, r3, #20
 80085fc:	429d      	cmp	r5, r3
 80085fe:	d1bb      	bne.n	8008578 <_strtod_l+0x9f0>
 8008600:	4630      	mov	r0, r6
 8008602:	4639      	mov	r1, r7
 8008604:	f7f8 fb68 	bl	8000cd8 <__aeabi_d2lz>
 8008608:	f7f7 ffd8 	bl	80005bc <__aeabi_l2d>
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	4630      	mov	r0, r6
 8008612:	4639      	mov	r1, r7
 8008614:	f7f7 fe48 	bl	80002a8 <__aeabi_dsub>
 8008618:	460b      	mov	r3, r1
 800861a:	4602      	mov	r2, r0
 800861c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008620:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008626:	ea46 060a 	orr.w	r6, r6, sl
 800862a:	431e      	orrs	r6, r3
 800862c:	d06f      	beq.n	800870e <_strtod_l+0xb86>
 800862e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008668 <_strtod_l+0xae0>)
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	f7f8 fa62 	bl	8000afc <__aeabi_dcmplt>
 8008638:	2800      	cmp	r0, #0
 800863a:	f47f acd3 	bne.w	8007fe4 <_strtod_l+0x45c>
 800863e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008670 <_strtod_l+0xae8>)
 8008640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008644:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008648:	f7f8 fa76 	bl	8000b38 <__aeabi_dcmpgt>
 800864c:	2800      	cmp	r0, #0
 800864e:	d093      	beq.n	8008578 <_strtod_l+0x9f0>
 8008650:	e4c8      	b.n	8007fe4 <_strtod_l+0x45c>
 8008652:	bf00      	nop
 8008654:	f3af 8000 	nop.w
 8008658:	00000000 	.word	0x00000000
 800865c:	bff00000 	.word	0xbff00000
 8008660:	00000000 	.word	0x00000000
 8008664:	3ff00000 	.word	0x3ff00000
 8008668:	94a03595 	.word	0x94a03595
 800866c:	3fdfffff 	.word	0x3fdfffff
 8008670:	35afe535 	.word	0x35afe535
 8008674:	3fe00000 	.word	0x3fe00000
 8008678:	000fffff 	.word	0x000fffff
 800867c:	7ff00000 	.word	0x7ff00000
 8008680:	7fefffff 	.word	0x7fefffff
 8008684:	3ff00000 	.word	0x3ff00000
 8008688:	3fe00000 	.word	0x3fe00000
 800868c:	7fe00000 	.word	0x7fe00000
 8008690:	7c9fffff 	.word	0x7c9fffff
 8008694:	9b08      	ldr	r3, [sp, #32]
 8008696:	b323      	cbz	r3, 80086e2 <_strtod_l+0xb5a>
 8008698:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800869c:	d821      	bhi.n	80086e2 <_strtod_l+0xb5a>
 800869e:	a328      	add	r3, pc, #160	@ (adr r3, 8008740 <_strtod_l+0xbb8>)
 80086a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a4:	4630      	mov	r0, r6
 80086a6:	4639      	mov	r1, r7
 80086a8:	f7f8 fa32 	bl	8000b10 <__aeabi_dcmple>
 80086ac:	b1a0      	cbz	r0, 80086d8 <_strtod_l+0xb50>
 80086ae:	4639      	mov	r1, r7
 80086b0:	4630      	mov	r0, r6
 80086b2:	f7f8 fa89 	bl	8000bc8 <__aeabi_d2uiz>
 80086b6:	2801      	cmp	r0, #1
 80086b8:	bf38      	it	cc
 80086ba:	2001      	movcc	r0, #1
 80086bc:	f7f7 ff32 	bl	8000524 <__aeabi_ui2d>
 80086c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086c2:	4606      	mov	r6, r0
 80086c4:	460f      	mov	r7, r1
 80086c6:	b9fb      	cbnz	r3, 8008708 <_strtod_l+0xb80>
 80086c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80086cc:	9014      	str	r0, [sp, #80]	@ 0x50
 80086ce:	9315      	str	r3, [sp, #84]	@ 0x54
 80086d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80086d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80086d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80086da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80086de:	1b5b      	subs	r3, r3, r5
 80086e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80086e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80086e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80086ea:	f7ff f8f1 	bl	80078d0 <__ulp>
 80086ee:	4650      	mov	r0, sl
 80086f0:	ec53 2b10 	vmov	r2, r3, d0
 80086f4:	4659      	mov	r1, fp
 80086f6:	f7f7 ff8f 	bl	8000618 <__aeabi_dmul>
 80086fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80086fe:	f7f7 fdd5 	bl	80002ac <__adddf3>
 8008702:	4682      	mov	sl, r0
 8008704:	468b      	mov	fp, r1
 8008706:	e770      	b.n	80085ea <_strtod_l+0xa62>
 8008708:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800870c:	e7e0      	b.n	80086d0 <_strtod_l+0xb48>
 800870e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008748 <_strtod_l+0xbc0>)
 8008710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008714:	f7f8 f9f2 	bl	8000afc <__aeabi_dcmplt>
 8008718:	e798      	b.n	800864c <_strtod_l+0xac4>
 800871a:	2300      	movs	r3, #0
 800871c:	930e      	str	r3, [sp, #56]	@ 0x38
 800871e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008720:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008722:	6013      	str	r3, [r2, #0]
 8008724:	f7ff ba6d 	b.w	8007c02 <_strtod_l+0x7a>
 8008728:	2a65      	cmp	r2, #101	@ 0x65
 800872a:	f43f ab68 	beq.w	8007dfe <_strtod_l+0x276>
 800872e:	2a45      	cmp	r2, #69	@ 0x45
 8008730:	f43f ab65 	beq.w	8007dfe <_strtod_l+0x276>
 8008734:	2301      	movs	r3, #1
 8008736:	f7ff bba0 	b.w	8007e7a <_strtod_l+0x2f2>
 800873a:	bf00      	nop
 800873c:	f3af 8000 	nop.w
 8008740:	ffc00000 	.word	0xffc00000
 8008744:	41dfffff 	.word	0x41dfffff
 8008748:	94a03595 	.word	0x94a03595
 800874c:	3fcfffff 	.word	0x3fcfffff

08008750 <_strtod_r>:
 8008750:	4b01      	ldr	r3, [pc, #4]	@ (8008758 <_strtod_r+0x8>)
 8008752:	f7ff ba19 	b.w	8007b88 <_strtod_l>
 8008756:	bf00      	nop
 8008758:	20000074 	.word	0x20000074

0800875c <_strtol_l.isra.0>:
 800875c:	2b24      	cmp	r3, #36	@ 0x24
 800875e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008762:	4686      	mov	lr, r0
 8008764:	4690      	mov	r8, r2
 8008766:	d801      	bhi.n	800876c <_strtol_l.isra.0+0x10>
 8008768:	2b01      	cmp	r3, #1
 800876a:	d106      	bne.n	800877a <_strtol_l.isra.0+0x1e>
 800876c:	f7fd fdb8 	bl	80062e0 <__errno>
 8008770:	2316      	movs	r3, #22
 8008772:	6003      	str	r3, [r0, #0]
 8008774:	2000      	movs	r0, #0
 8008776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800877a:	4834      	ldr	r0, [pc, #208]	@ (800884c <_strtol_l.isra.0+0xf0>)
 800877c:	460d      	mov	r5, r1
 800877e:	462a      	mov	r2, r5
 8008780:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008784:	5d06      	ldrb	r6, [r0, r4]
 8008786:	f016 0608 	ands.w	r6, r6, #8
 800878a:	d1f8      	bne.n	800877e <_strtol_l.isra.0+0x22>
 800878c:	2c2d      	cmp	r4, #45	@ 0x2d
 800878e:	d110      	bne.n	80087b2 <_strtol_l.isra.0+0x56>
 8008790:	782c      	ldrb	r4, [r5, #0]
 8008792:	2601      	movs	r6, #1
 8008794:	1c95      	adds	r5, r2, #2
 8008796:	f033 0210 	bics.w	r2, r3, #16
 800879a:	d115      	bne.n	80087c8 <_strtol_l.isra.0+0x6c>
 800879c:	2c30      	cmp	r4, #48	@ 0x30
 800879e:	d10d      	bne.n	80087bc <_strtol_l.isra.0+0x60>
 80087a0:	782a      	ldrb	r2, [r5, #0]
 80087a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80087a6:	2a58      	cmp	r2, #88	@ 0x58
 80087a8:	d108      	bne.n	80087bc <_strtol_l.isra.0+0x60>
 80087aa:	786c      	ldrb	r4, [r5, #1]
 80087ac:	3502      	adds	r5, #2
 80087ae:	2310      	movs	r3, #16
 80087b0:	e00a      	b.n	80087c8 <_strtol_l.isra.0+0x6c>
 80087b2:	2c2b      	cmp	r4, #43	@ 0x2b
 80087b4:	bf04      	itt	eq
 80087b6:	782c      	ldrbeq	r4, [r5, #0]
 80087b8:	1c95      	addeq	r5, r2, #2
 80087ba:	e7ec      	b.n	8008796 <_strtol_l.isra.0+0x3a>
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1f6      	bne.n	80087ae <_strtol_l.isra.0+0x52>
 80087c0:	2c30      	cmp	r4, #48	@ 0x30
 80087c2:	bf14      	ite	ne
 80087c4:	230a      	movne	r3, #10
 80087c6:	2308      	moveq	r3, #8
 80087c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80087cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80087d0:	2200      	movs	r2, #0
 80087d2:	fbbc f9f3 	udiv	r9, ip, r3
 80087d6:	4610      	mov	r0, r2
 80087d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80087dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80087e0:	2f09      	cmp	r7, #9
 80087e2:	d80f      	bhi.n	8008804 <_strtol_l.isra.0+0xa8>
 80087e4:	463c      	mov	r4, r7
 80087e6:	42a3      	cmp	r3, r4
 80087e8:	dd1b      	ble.n	8008822 <_strtol_l.isra.0+0xc6>
 80087ea:	1c57      	adds	r7, r2, #1
 80087ec:	d007      	beq.n	80087fe <_strtol_l.isra.0+0xa2>
 80087ee:	4581      	cmp	r9, r0
 80087f0:	d314      	bcc.n	800881c <_strtol_l.isra.0+0xc0>
 80087f2:	d101      	bne.n	80087f8 <_strtol_l.isra.0+0x9c>
 80087f4:	45a2      	cmp	sl, r4
 80087f6:	db11      	blt.n	800881c <_strtol_l.isra.0+0xc0>
 80087f8:	fb00 4003 	mla	r0, r0, r3, r4
 80087fc:	2201      	movs	r2, #1
 80087fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008802:	e7eb      	b.n	80087dc <_strtol_l.isra.0+0x80>
 8008804:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008808:	2f19      	cmp	r7, #25
 800880a:	d801      	bhi.n	8008810 <_strtol_l.isra.0+0xb4>
 800880c:	3c37      	subs	r4, #55	@ 0x37
 800880e:	e7ea      	b.n	80087e6 <_strtol_l.isra.0+0x8a>
 8008810:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008814:	2f19      	cmp	r7, #25
 8008816:	d804      	bhi.n	8008822 <_strtol_l.isra.0+0xc6>
 8008818:	3c57      	subs	r4, #87	@ 0x57
 800881a:	e7e4      	b.n	80087e6 <_strtol_l.isra.0+0x8a>
 800881c:	f04f 32ff 	mov.w	r2, #4294967295
 8008820:	e7ed      	b.n	80087fe <_strtol_l.isra.0+0xa2>
 8008822:	1c53      	adds	r3, r2, #1
 8008824:	d108      	bne.n	8008838 <_strtol_l.isra.0+0xdc>
 8008826:	2322      	movs	r3, #34	@ 0x22
 8008828:	f8ce 3000 	str.w	r3, [lr]
 800882c:	4660      	mov	r0, ip
 800882e:	f1b8 0f00 	cmp.w	r8, #0
 8008832:	d0a0      	beq.n	8008776 <_strtol_l.isra.0+0x1a>
 8008834:	1e69      	subs	r1, r5, #1
 8008836:	e006      	b.n	8008846 <_strtol_l.isra.0+0xea>
 8008838:	b106      	cbz	r6, 800883c <_strtol_l.isra.0+0xe0>
 800883a:	4240      	negs	r0, r0
 800883c:	f1b8 0f00 	cmp.w	r8, #0
 8008840:	d099      	beq.n	8008776 <_strtol_l.isra.0+0x1a>
 8008842:	2a00      	cmp	r2, #0
 8008844:	d1f6      	bne.n	8008834 <_strtol_l.isra.0+0xd8>
 8008846:	f8c8 1000 	str.w	r1, [r8]
 800884a:	e794      	b.n	8008776 <_strtol_l.isra.0+0x1a>
 800884c:	08009e61 	.word	0x08009e61

08008850 <_strtol_r>:
 8008850:	f7ff bf84 	b.w	800875c <_strtol_l.isra.0>

08008854 <__ssputs_r>:
 8008854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008858:	688e      	ldr	r6, [r1, #8]
 800885a:	461f      	mov	r7, r3
 800885c:	42be      	cmp	r6, r7
 800885e:	680b      	ldr	r3, [r1, #0]
 8008860:	4682      	mov	sl, r0
 8008862:	460c      	mov	r4, r1
 8008864:	4690      	mov	r8, r2
 8008866:	d82d      	bhi.n	80088c4 <__ssputs_r+0x70>
 8008868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800886c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008870:	d026      	beq.n	80088c0 <__ssputs_r+0x6c>
 8008872:	6965      	ldr	r5, [r4, #20]
 8008874:	6909      	ldr	r1, [r1, #16]
 8008876:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800887a:	eba3 0901 	sub.w	r9, r3, r1
 800887e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008882:	1c7b      	adds	r3, r7, #1
 8008884:	444b      	add	r3, r9
 8008886:	106d      	asrs	r5, r5, #1
 8008888:	429d      	cmp	r5, r3
 800888a:	bf38      	it	cc
 800888c:	461d      	movcc	r5, r3
 800888e:	0553      	lsls	r3, r2, #21
 8008890:	d527      	bpl.n	80088e2 <__ssputs_r+0x8e>
 8008892:	4629      	mov	r1, r5
 8008894:	f7fe fc24 	bl	80070e0 <_malloc_r>
 8008898:	4606      	mov	r6, r0
 800889a:	b360      	cbz	r0, 80088f6 <__ssputs_r+0xa2>
 800889c:	6921      	ldr	r1, [r4, #16]
 800889e:	464a      	mov	r2, r9
 80088a0:	f000 fa18 	bl	8008cd4 <memcpy>
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80088aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ae:	81a3      	strh	r3, [r4, #12]
 80088b0:	6126      	str	r6, [r4, #16]
 80088b2:	6165      	str	r5, [r4, #20]
 80088b4:	444e      	add	r6, r9
 80088b6:	eba5 0509 	sub.w	r5, r5, r9
 80088ba:	6026      	str	r6, [r4, #0]
 80088bc:	60a5      	str	r5, [r4, #8]
 80088be:	463e      	mov	r6, r7
 80088c0:	42be      	cmp	r6, r7
 80088c2:	d900      	bls.n	80088c6 <__ssputs_r+0x72>
 80088c4:	463e      	mov	r6, r7
 80088c6:	6820      	ldr	r0, [r4, #0]
 80088c8:	4632      	mov	r2, r6
 80088ca:	4641      	mov	r1, r8
 80088cc:	f000 f9c6 	bl	8008c5c <memmove>
 80088d0:	68a3      	ldr	r3, [r4, #8]
 80088d2:	1b9b      	subs	r3, r3, r6
 80088d4:	60a3      	str	r3, [r4, #8]
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	4433      	add	r3, r6
 80088da:	6023      	str	r3, [r4, #0]
 80088dc:	2000      	movs	r0, #0
 80088de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e2:	462a      	mov	r2, r5
 80088e4:	f000 fd89 	bl	80093fa <_realloc_r>
 80088e8:	4606      	mov	r6, r0
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d1e0      	bne.n	80088b0 <__ssputs_r+0x5c>
 80088ee:	6921      	ldr	r1, [r4, #16]
 80088f0:	4650      	mov	r0, sl
 80088f2:	f7fe fb81 	bl	8006ff8 <_free_r>
 80088f6:	230c      	movs	r3, #12
 80088f8:	f8ca 3000 	str.w	r3, [sl]
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008902:	81a3      	strh	r3, [r4, #12]
 8008904:	f04f 30ff 	mov.w	r0, #4294967295
 8008908:	e7e9      	b.n	80088de <__ssputs_r+0x8a>
	...

0800890c <_svfiprintf_r>:
 800890c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008910:	4698      	mov	r8, r3
 8008912:	898b      	ldrh	r3, [r1, #12]
 8008914:	061b      	lsls	r3, r3, #24
 8008916:	b09d      	sub	sp, #116	@ 0x74
 8008918:	4607      	mov	r7, r0
 800891a:	460d      	mov	r5, r1
 800891c:	4614      	mov	r4, r2
 800891e:	d510      	bpl.n	8008942 <_svfiprintf_r+0x36>
 8008920:	690b      	ldr	r3, [r1, #16]
 8008922:	b973      	cbnz	r3, 8008942 <_svfiprintf_r+0x36>
 8008924:	2140      	movs	r1, #64	@ 0x40
 8008926:	f7fe fbdb 	bl	80070e0 <_malloc_r>
 800892a:	6028      	str	r0, [r5, #0]
 800892c:	6128      	str	r0, [r5, #16]
 800892e:	b930      	cbnz	r0, 800893e <_svfiprintf_r+0x32>
 8008930:	230c      	movs	r3, #12
 8008932:	603b      	str	r3, [r7, #0]
 8008934:	f04f 30ff 	mov.w	r0, #4294967295
 8008938:	b01d      	add	sp, #116	@ 0x74
 800893a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893e:	2340      	movs	r3, #64	@ 0x40
 8008940:	616b      	str	r3, [r5, #20]
 8008942:	2300      	movs	r3, #0
 8008944:	9309      	str	r3, [sp, #36]	@ 0x24
 8008946:	2320      	movs	r3, #32
 8008948:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800894c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008950:	2330      	movs	r3, #48	@ 0x30
 8008952:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008af0 <_svfiprintf_r+0x1e4>
 8008956:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800895a:	f04f 0901 	mov.w	r9, #1
 800895e:	4623      	mov	r3, r4
 8008960:	469a      	mov	sl, r3
 8008962:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008966:	b10a      	cbz	r2, 800896c <_svfiprintf_r+0x60>
 8008968:	2a25      	cmp	r2, #37	@ 0x25
 800896a:	d1f9      	bne.n	8008960 <_svfiprintf_r+0x54>
 800896c:	ebba 0b04 	subs.w	fp, sl, r4
 8008970:	d00b      	beq.n	800898a <_svfiprintf_r+0x7e>
 8008972:	465b      	mov	r3, fp
 8008974:	4622      	mov	r2, r4
 8008976:	4629      	mov	r1, r5
 8008978:	4638      	mov	r0, r7
 800897a:	f7ff ff6b 	bl	8008854 <__ssputs_r>
 800897e:	3001      	adds	r0, #1
 8008980:	f000 80a7 	beq.w	8008ad2 <_svfiprintf_r+0x1c6>
 8008984:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008986:	445a      	add	r2, fp
 8008988:	9209      	str	r2, [sp, #36]	@ 0x24
 800898a:	f89a 3000 	ldrb.w	r3, [sl]
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 809f 	beq.w	8008ad2 <_svfiprintf_r+0x1c6>
 8008994:	2300      	movs	r3, #0
 8008996:	f04f 32ff 	mov.w	r2, #4294967295
 800899a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800899e:	f10a 0a01 	add.w	sl, sl, #1
 80089a2:	9304      	str	r3, [sp, #16]
 80089a4:	9307      	str	r3, [sp, #28]
 80089a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80089ac:	4654      	mov	r4, sl
 80089ae:	2205      	movs	r2, #5
 80089b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089b4:	484e      	ldr	r0, [pc, #312]	@ (8008af0 <_svfiprintf_r+0x1e4>)
 80089b6:	f7f7 fc1b 	bl	80001f0 <memchr>
 80089ba:	9a04      	ldr	r2, [sp, #16]
 80089bc:	b9d8      	cbnz	r0, 80089f6 <_svfiprintf_r+0xea>
 80089be:	06d0      	lsls	r0, r2, #27
 80089c0:	bf44      	itt	mi
 80089c2:	2320      	movmi	r3, #32
 80089c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089c8:	0711      	lsls	r1, r2, #28
 80089ca:	bf44      	itt	mi
 80089cc:	232b      	movmi	r3, #43	@ 0x2b
 80089ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089d2:	f89a 3000 	ldrb.w	r3, [sl]
 80089d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80089d8:	d015      	beq.n	8008a06 <_svfiprintf_r+0xfa>
 80089da:	9a07      	ldr	r2, [sp, #28]
 80089dc:	4654      	mov	r4, sl
 80089de:	2000      	movs	r0, #0
 80089e0:	f04f 0c0a 	mov.w	ip, #10
 80089e4:	4621      	mov	r1, r4
 80089e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ea:	3b30      	subs	r3, #48	@ 0x30
 80089ec:	2b09      	cmp	r3, #9
 80089ee:	d94b      	bls.n	8008a88 <_svfiprintf_r+0x17c>
 80089f0:	b1b0      	cbz	r0, 8008a20 <_svfiprintf_r+0x114>
 80089f2:	9207      	str	r2, [sp, #28]
 80089f4:	e014      	b.n	8008a20 <_svfiprintf_r+0x114>
 80089f6:	eba0 0308 	sub.w	r3, r0, r8
 80089fa:	fa09 f303 	lsl.w	r3, r9, r3
 80089fe:	4313      	orrs	r3, r2
 8008a00:	9304      	str	r3, [sp, #16]
 8008a02:	46a2      	mov	sl, r4
 8008a04:	e7d2      	b.n	80089ac <_svfiprintf_r+0xa0>
 8008a06:	9b03      	ldr	r3, [sp, #12]
 8008a08:	1d19      	adds	r1, r3, #4
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	9103      	str	r1, [sp, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	bfbb      	ittet	lt
 8008a12:	425b      	neglt	r3, r3
 8008a14:	f042 0202 	orrlt.w	r2, r2, #2
 8008a18:	9307      	strge	r3, [sp, #28]
 8008a1a:	9307      	strlt	r3, [sp, #28]
 8008a1c:	bfb8      	it	lt
 8008a1e:	9204      	strlt	r2, [sp, #16]
 8008a20:	7823      	ldrb	r3, [r4, #0]
 8008a22:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a24:	d10a      	bne.n	8008a3c <_svfiprintf_r+0x130>
 8008a26:	7863      	ldrb	r3, [r4, #1]
 8008a28:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a2a:	d132      	bne.n	8008a92 <_svfiprintf_r+0x186>
 8008a2c:	9b03      	ldr	r3, [sp, #12]
 8008a2e:	1d1a      	adds	r2, r3, #4
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	9203      	str	r2, [sp, #12]
 8008a34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a38:	3402      	adds	r4, #2
 8008a3a:	9305      	str	r3, [sp, #20]
 8008a3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b00 <_svfiprintf_r+0x1f4>
 8008a40:	7821      	ldrb	r1, [r4, #0]
 8008a42:	2203      	movs	r2, #3
 8008a44:	4650      	mov	r0, sl
 8008a46:	f7f7 fbd3 	bl	80001f0 <memchr>
 8008a4a:	b138      	cbz	r0, 8008a5c <_svfiprintf_r+0x150>
 8008a4c:	9b04      	ldr	r3, [sp, #16]
 8008a4e:	eba0 000a 	sub.w	r0, r0, sl
 8008a52:	2240      	movs	r2, #64	@ 0x40
 8008a54:	4082      	lsls	r2, r0
 8008a56:	4313      	orrs	r3, r2
 8008a58:	3401      	adds	r4, #1
 8008a5a:	9304      	str	r3, [sp, #16]
 8008a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a60:	4824      	ldr	r0, [pc, #144]	@ (8008af4 <_svfiprintf_r+0x1e8>)
 8008a62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a66:	2206      	movs	r2, #6
 8008a68:	f7f7 fbc2 	bl	80001f0 <memchr>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d036      	beq.n	8008ade <_svfiprintf_r+0x1d2>
 8008a70:	4b21      	ldr	r3, [pc, #132]	@ (8008af8 <_svfiprintf_r+0x1ec>)
 8008a72:	bb1b      	cbnz	r3, 8008abc <_svfiprintf_r+0x1b0>
 8008a74:	9b03      	ldr	r3, [sp, #12]
 8008a76:	3307      	adds	r3, #7
 8008a78:	f023 0307 	bic.w	r3, r3, #7
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	9303      	str	r3, [sp, #12]
 8008a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a82:	4433      	add	r3, r6
 8008a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a86:	e76a      	b.n	800895e <_svfiprintf_r+0x52>
 8008a88:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	2001      	movs	r0, #1
 8008a90:	e7a8      	b.n	80089e4 <_svfiprintf_r+0xd8>
 8008a92:	2300      	movs	r3, #0
 8008a94:	3401      	adds	r4, #1
 8008a96:	9305      	str	r3, [sp, #20]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	f04f 0c0a 	mov.w	ip, #10
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aa4:	3a30      	subs	r2, #48	@ 0x30
 8008aa6:	2a09      	cmp	r2, #9
 8008aa8:	d903      	bls.n	8008ab2 <_svfiprintf_r+0x1a6>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d0c6      	beq.n	8008a3c <_svfiprintf_r+0x130>
 8008aae:	9105      	str	r1, [sp, #20]
 8008ab0:	e7c4      	b.n	8008a3c <_svfiprintf_r+0x130>
 8008ab2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e7f0      	b.n	8008a9e <_svfiprintf_r+0x192>
 8008abc:	ab03      	add	r3, sp, #12
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	462a      	mov	r2, r5
 8008ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8008afc <_svfiprintf_r+0x1f0>)
 8008ac4:	a904      	add	r1, sp, #16
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	f7fc fc90 	bl	80053ec <_printf_float>
 8008acc:	1c42      	adds	r2, r0, #1
 8008ace:	4606      	mov	r6, r0
 8008ad0:	d1d6      	bne.n	8008a80 <_svfiprintf_r+0x174>
 8008ad2:	89ab      	ldrh	r3, [r5, #12]
 8008ad4:	065b      	lsls	r3, r3, #25
 8008ad6:	f53f af2d 	bmi.w	8008934 <_svfiprintf_r+0x28>
 8008ada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008adc:	e72c      	b.n	8008938 <_svfiprintf_r+0x2c>
 8008ade:	ab03      	add	r3, sp, #12
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	462a      	mov	r2, r5
 8008ae4:	4b05      	ldr	r3, [pc, #20]	@ (8008afc <_svfiprintf_r+0x1f0>)
 8008ae6:	a904      	add	r1, sp, #16
 8008ae8:	4638      	mov	r0, r7
 8008aea:	f7fc ff17 	bl	800591c <_printf_i>
 8008aee:	e7ed      	b.n	8008acc <_svfiprintf_r+0x1c0>
 8008af0:	08009c5d 	.word	0x08009c5d
 8008af4:	08009c67 	.word	0x08009c67
 8008af8:	080053ed 	.word	0x080053ed
 8008afc:	08008855 	.word	0x08008855
 8008b00:	08009c63 	.word	0x08009c63

08008b04 <__sflush_r>:
 8008b04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0c:	0716      	lsls	r6, r2, #28
 8008b0e:	4605      	mov	r5, r0
 8008b10:	460c      	mov	r4, r1
 8008b12:	d454      	bmi.n	8008bbe <__sflush_r+0xba>
 8008b14:	684b      	ldr	r3, [r1, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	dc02      	bgt.n	8008b20 <__sflush_r+0x1c>
 8008b1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	dd48      	ble.n	8008bb2 <__sflush_r+0xae>
 8008b20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b22:	2e00      	cmp	r6, #0
 8008b24:	d045      	beq.n	8008bb2 <__sflush_r+0xae>
 8008b26:	2300      	movs	r3, #0
 8008b28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b2c:	682f      	ldr	r7, [r5, #0]
 8008b2e:	6a21      	ldr	r1, [r4, #32]
 8008b30:	602b      	str	r3, [r5, #0]
 8008b32:	d030      	beq.n	8008b96 <__sflush_r+0x92>
 8008b34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	0759      	lsls	r1, r3, #29
 8008b3a:	d505      	bpl.n	8008b48 <__sflush_r+0x44>
 8008b3c:	6863      	ldr	r3, [r4, #4]
 8008b3e:	1ad2      	subs	r2, r2, r3
 8008b40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b42:	b10b      	cbz	r3, 8008b48 <__sflush_r+0x44>
 8008b44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b46:	1ad2      	subs	r2, r2, r3
 8008b48:	2300      	movs	r3, #0
 8008b4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b4c:	6a21      	ldr	r1, [r4, #32]
 8008b4e:	4628      	mov	r0, r5
 8008b50:	47b0      	blx	r6
 8008b52:	1c43      	adds	r3, r0, #1
 8008b54:	89a3      	ldrh	r3, [r4, #12]
 8008b56:	d106      	bne.n	8008b66 <__sflush_r+0x62>
 8008b58:	6829      	ldr	r1, [r5, #0]
 8008b5a:	291d      	cmp	r1, #29
 8008b5c:	d82b      	bhi.n	8008bb6 <__sflush_r+0xb2>
 8008b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008c08 <__sflush_r+0x104>)
 8008b60:	40ca      	lsrs	r2, r1
 8008b62:	07d6      	lsls	r6, r2, #31
 8008b64:	d527      	bpl.n	8008bb6 <__sflush_r+0xb2>
 8008b66:	2200      	movs	r2, #0
 8008b68:	6062      	str	r2, [r4, #4]
 8008b6a:	04d9      	lsls	r1, r3, #19
 8008b6c:	6922      	ldr	r2, [r4, #16]
 8008b6e:	6022      	str	r2, [r4, #0]
 8008b70:	d504      	bpl.n	8008b7c <__sflush_r+0x78>
 8008b72:	1c42      	adds	r2, r0, #1
 8008b74:	d101      	bne.n	8008b7a <__sflush_r+0x76>
 8008b76:	682b      	ldr	r3, [r5, #0]
 8008b78:	b903      	cbnz	r3, 8008b7c <__sflush_r+0x78>
 8008b7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b7e:	602f      	str	r7, [r5, #0]
 8008b80:	b1b9      	cbz	r1, 8008bb2 <__sflush_r+0xae>
 8008b82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b86:	4299      	cmp	r1, r3
 8008b88:	d002      	beq.n	8008b90 <__sflush_r+0x8c>
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	f7fe fa34 	bl	8006ff8 <_free_r>
 8008b90:	2300      	movs	r3, #0
 8008b92:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b94:	e00d      	b.n	8008bb2 <__sflush_r+0xae>
 8008b96:	2301      	movs	r3, #1
 8008b98:	4628      	mov	r0, r5
 8008b9a:	47b0      	blx	r6
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	1c50      	adds	r0, r2, #1
 8008ba0:	d1c9      	bne.n	8008b36 <__sflush_r+0x32>
 8008ba2:	682b      	ldr	r3, [r5, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d0c6      	beq.n	8008b36 <__sflush_r+0x32>
 8008ba8:	2b1d      	cmp	r3, #29
 8008baa:	d001      	beq.n	8008bb0 <__sflush_r+0xac>
 8008bac:	2b16      	cmp	r3, #22
 8008bae:	d11e      	bne.n	8008bee <__sflush_r+0xea>
 8008bb0:	602f      	str	r7, [r5, #0]
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	e022      	b.n	8008bfc <__sflush_r+0xf8>
 8008bb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bba:	b21b      	sxth	r3, r3
 8008bbc:	e01b      	b.n	8008bf6 <__sflush_r+0xf2>
 8008bbe:	690f      	ldr	r7, [r1, #16]
 8008bc0:	2f00      	cmp	r7, #0
 8008bc2:	d0f6      	beq.n	8008bb2 <__sflush_r+0xae>
 8008bc4:	0793      	lsls	r3, r2, #30
 8008bc6:	680e      	ldr	r6, [r1, #0]
 8008bc8:	bf08      	it	eq
 8008bca:	694b      	ldreq	r3, [r1, #20]
 8008bcc:	600f      	str	r7, [r1, #0]
 8008bce:	bf18      	it	ne
 8008bd0:	2300      	movne	r3, #0
 8008bd2:	eba6 0807 	sub.w	r8, r6, r7
 8008bd6:	608b      	str	r3, [r1, #8]
 8008bd8:	f1b8 0f00 	cmp.w	r8, #0
 8008bdc:	dde9      	ble.n	8008bb2 <__sflush_r+0xae>
 8008bde:	6a21      	ldr	r1, [r4, #32]
 8008be0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008be2:	4643      	mov	r3, r8
 8008be4:	463a      	mov	r2, r7
 8008be6:	4628      	mov	r0, r5
 8008be8:	47b0      	blx	r6
 8008bea:	2800      	cmp	r0, #0
 8008bec:	dc08      	bgt.n	8008c00 <__sflush_r+0xfc>
 8008bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bf6:	81a3      	strh	r3, [r4, #12]
 8008bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c00:	4407      	add	r7, r0
 8008c02:	eba8 0800 	sub.w	r8, r8, r0
 8008c06:	e7e7      	b.n	8008bd8 <__sflush_r+0xd4>
 8008c08:	20400001 	.word	0x20400001

08008c0c <_fflush_r>:
 8008c0c:	b538      	push	{r3, r4, r5, lr}
 8008c0e:	690b      	ldr	r3, [r1, #16]
 8008c10:	4605      	mov	r5, r0
 8008c12:	460c      	mov	r4, r1
 8008c14:	b913      	cbnz	r3, 8008c1c <_fflush_r+0x10>
 8008c16:	2500      	movs	r5, #0
 8008c18:	4628      	mov	r0, r5
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
 8008c1c:	b118      	cbz	r0, 8008c26 <_fflush_r+0x1a>
 8008c1e:	6a03      	ldr	r3, [r0, #32]
 8008c20:	b90b      	cbnz	r3, 8008c26 <_fflush_r+0x1a>
 8008c22:	f7fd fa33 	bl	800608c <__sinit>
 8008c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0f3      	beq.n	8008c16 <_fflush_r+0xa>
 8008c2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c30:	07d0      	lsls	r0, r2, #31
 8008c32:	d404      	bmi.n	8008c3e <_fflush_r+0x32>
 8008c34:	0599      	lsls	r1, r3, #22
 8008c36:	d402      	bmi.n	8008c3e <_fflush_r+0x32>
 8008c38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c3a:	f7fd fb7c 	bl	8006336 <__retarget_lock_acquire_recursive>
 8008c3e:	4628      	mov	r0, r5
 8008c40:	4621      	mov	r1, r4
 8008c42:	f7ff ff5f 	bl	8008b04 <__sflush_r>
 8008c46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c48:	07da      	lsls	r2, r3, #31
 8008c4a:	4605      	mov	r5, r0
 8008c4c:	d4e4      	bmi.n	8008c18 <_fflush_r+0xc>
 8008c4e:	89a3      	ldrh	r3, [r4, #12]
 8008c50:	059b      	lsls	r3, r3, #22
 8008c52:	d4e1      	bmi.n	8008c18 <_fflush_r+0xc>
 8008c54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c56:	f7fd fb6f 	bl	8006338 <__retarget_lock_release_recursive>
 8008c5a:	e7dd      	b.n	8008c18 <_fflush_r+0xc>

08008c5c <memmove>:
 8008c5c:	4288      	cmp	r0, r1
 8008c5e:	b510      	push	{r4, lr}
 8008c60:	eb01 0402 	add.w	r4, r1, r2
 8008c64:	d902      	bls.n	8008c6c <memmove+0x10>
 8008c66:	4284      	cmp	r4, r0
 8008c68:	4623      	mov	r3, r4
 8008c6a:	d807      	bhi.n	8008c7c <memmove+0x20>
 8008c6c:	1e43      	subs	r3, r0, #1
 8008c6e:	42a1      	cmp	r1, r4
 8008c70:	d008      	beq.n	8008c84 <memmove+0x28>
 8008c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c7a:	e7f8      	b.n	8008c6e <memmove+0x12>
 8008c7c:	4402      	add	r2, r0
 8008c7e:	4601      	mov	r1, r0
 8008c80:	428a      	cmp	r2, r1
 8008c82:	d100      	bne.n	8008c86 <memmove+0x2a>
 8008c84:	bd10      	pop	{r4, pc}
 8008c86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c8e:	e7f7      	b.n	8008c80 <memmove+0x24>

08008c90 <strncmp>:
 8008c90:	b510      	push	{r4, lr}
 8008c92:	b16a      	cbz	r2, 8008cb0 <strncmp+0x20>
 8008c94:	3901      	subs	r1, #1
 8008c96:	1884      	adds	r4, r0, r2
 8008c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c9c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d103      	bne.n	8008cac <strncmp+0x1c>
 8008ca4:	42a0      	cmp	r0, r4
 8008ca6:	d001      	beq.n	8008cac <strncmp+0x1c>
 8008ca8:	2a00      	cmp	r2, #0
 8008caa:	d1f5      	bne.n	8008c98 <strncmp+0x8>
 8008cac:	1ad0      	subs	r0, r2, r3
 8008cae:	bd10      	pop	{r4, pc}
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	e7fc      	b.n	8008cae <strncmp+0x1e>

08008cb4 <_sbrk_r>:
 8008cb4:	b538      	push	{r3, r4, r5, lr}
 8008cb6:	4d06      	ldr	r5, [pc, #24]	@ (8008cd0 <_sbrk_r+0x1c>)
 8008cb8:	2300      	movs	r3, #0
 8008cba:	4604      	mov	r4, r0
 8008cbc:	4608      	mov	r0, r1
 8008cbe:	602b      	str	r3, [r5, #0]
 8008cc0:	f7f9 fad2 	bl	8002268 <_sbrk>
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	d102      	bne.n	8008cce <_sbrk_r+0x1a>
 8008cc8:	682b      	ldr	r3, [r5, #0]
 8008cca:	b103      	cbz	r3, 8008cce <_sbrk_r+0x1a>
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	bd38      	pop	{r3, r4, r5, pc}
 8008cd0:	200004f4 	.word	0x200004f4

08008cd4 <memcpy>:
 8008cd4:	440a      	add	r2, r1
 8008cd6:	4291      	cmp	r1, r2
 8008cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cdc:	d100      	bne.n	8008ce0 <memcpy+0xc>
 8008cde:	4770      	bx	lr
 8008ce0:	b510      	push	{r4, lr}
 8008ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cea:	4291      	cmp	r1, r2
 8008cec:	d1f9      	bne.n	8008ce2 <memcpy+0xe>
 8008cee:	bd10      	pop	{r4, pc}

08008cf0 <nan>:
 8008cf0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008cf8 <nan+0x8>
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	00000000 	.word	0x00000000
 8008cfc:	7ff80000 	.word	0x7ff80000

08008d00 <__assert_func>:
 8008d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d02:	4614      	mov	r4, r2
 8008d04:	461a      	mov	r2, r3
 8008d06:	4b09      	ldr	r3, [pc, #36]	@ (8008d2c <__assert_func+0x2c>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	68d8      	ldr	r0, [r3, #12]
 8008d0e:	b14c      	cbz	r4, 8008d24 <__assert_func+0x24>
 8008d10:	4b07      	ldr	r3, [pc, #28]	@ (8008d30 <__assert_func+0x30>)
 8008d12:	9100      	str	r1, [sp, #0]
 8008d14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d18:	4906      	ldr	r1, [pc, #24]	@ (8008d34 <__assert_func+0x34>)
 8008d1a:	462b      	mov	r3, r5
 8008d1c:	f000 fba8 	bl	8009470 <fiprintf>
 8008d20:	f000 fbb8 	bl	8009494 <abort>
 8008d24:	4b04      	ldr	r3, [pc, #16]	@ (8008d38 <__assert_func+0x38>)
 8008d26:	461c      	mov	r4, r3
 8008d28:	e7f3      	b.n	8008d12 <__assert_func+0x12>
 8008d2a:	bf00      	nop
 8008d2c:	20000024 	.word	0x20000024
 8008d30:	08009c76 	.word	0x08009c76
 8008d34:	08009c83 	.word	0x08009c83
 8008d38:	08009cb1 	.word	0x08009cb1

08008d3c <_calloc_r>:
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	fba1 5402 	umull	r5, r4, r1, r2
 8008d42:	b934      	cbnz	r4, 8008d52 <_calloc_r+0x16>
 8008d44:	4629      	mov	r1, r5
 8008d46:	f7fe f9cb 	bl	80070e0 <_malloc_r>
 8008d4a:	4606      	mov	r6, r0
 8008d4c:	b928      	cbnz	r0, 8008d5a <_calloc_r+0x1e>
 8008d4e:	4630      	mov	r0, r6
 8008d50:	bd70      	pop	{r4, r5, r6, pc}
 8008d52:	220c      	movs	r2, #12
 8008d54:	6002      	str	r2, [r0, #0]
 8008d56:	2600      	movs	r6, #0
 8008d58:	e7f9      	b.n	8008d4e <_calloc_r+0x12>
 8008d5a:	462a      	mov	r2, r5
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	f7fd fa6d 	bl	800623c <memset>
 8008d62:	e7f4      	b.n	8008d4e <_calloc_r+0x12>

08008d64 <rshift>:
 8008d64:	6903      	ldr	r3, [r0, #16]
 8008d66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d72:	f100 0414 	add.w	r4, r0, #20
 8008d76:	dd45      	ble.n	8008e04 <rshift+0xa0>
 8008d78:	f011 011f 	ands.w	r1, r1, #31
 8008d7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d84:	d10c      	bne.n	8008da0 <rshift+0x3c>
 8008d86:	f100 0710 	add.w	r7, r0, #16
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	42b1      	cmp	r1, r6
 8008d8e:	d334      	bcc.n	8008dfa <rshift+0x96>
 8008d90:	1a9b      	subs	r3, r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	1eea      	subs	r2, r5, #3
 8008d96:	4296      	cmp	r6, r2
 8008d98:	bf38      	it	cc
 8008d9a:	2300      	movcc	r3, #0
 8008d9c:	4423      	add	r3, r4
 8008d9e:	e015      	b.n	8008dcc <rshift+0x68>
 8008da0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008da4:	f1c1 0820 	rsb	r8, r1, #32
 8008da8:	40cf      	lsrs	r7, r1
 8008daa:	f105 0e04 	add.w	lr, r5, #4
 8008dae:	46a1      	mov	r9, r4
 8008db0:	4576      	cmp	r6, lr
 8008db2:	46f4      	mov	ip, lr
 8008db4:	d815      	bhi.n	8008de2 <rshift+0x7e>
 8008db6:	1a9a      	subs	r2, r3, r2
 8008db8:	0092      	lsls	r2, r2, #2
 8008dba:	3a04      	subs	r2, #4
 8008dbc:	3501      	adds	r5, #1
 8008dbe:	42ae      	cmp	r6, r5
 8008dc0:	bf38      	it	cc
 8008dc2:	2200      	movcc	r2, #0
 8008dc4:	18a3      	adds	r3, r4, r2
 8008dc6:	50a7      	str	r7, [r4, r2]
 8008dc8:	b107      	cbz	r7, 8008dcc <rshift+0x68>
 8008dca:	3304      	adds	r3, #4
 8008dcc:	1b1a      	subs	r2, r3, r4
 8008dce:	42a3      	cmp	r3, r4
 8008dd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008dd4:	bf08      	it	eq
 8008dd6:	2300      	moveq	r3, #0
 8008dd8:	6102      	str	r2, [r0, #16]
 8008dda:	bf08      	it	eq
 8008ddc:	6143      	streq	r3, [r0, #20]
 8008dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008de2:	f8dc c000 	ldr.w	ip, [ip]
 8008de6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008dea:	ea4c 0707 	orr.w	r7, ip, r7
 8008dee:	f849 7b04 	str.w	r7, [r9], #4
 8008df2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008df6:	40cf      	lsrs	r7, r1
 8008df8:	e7da      	b.n	8008db0 <rshift+0x4c>
 8008dfa:	f851 cb04 	ldr.w	ip, [r1], #4
 8008dfe:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e02:	e7c3      	b.n	8008d8c <rshift+0x28>
 8008e04:	4623      	mov	r3, r4
 8008e06:	e7e1      	b.n	8008dcc <rshift+0x68>

08008e08 <__hexdig_fun>:
 8008e08:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008e0c:	2b09      	cmp	r3, #9
 8008e0e:	d802      	bhi.n	8008e16 <__hexdig_fun+0xe>
 8008e10:	3820      	subs	r0, #32
 8008e12:	b2c0      	uxtb	r0, r0
 8008e14:	4770      	bx	lr
 8008e16:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	d801      	bhi.n	8008e22 <__hexdig_fun+0x1a>
 8008e1e:	3847      	subs	r0, #71	@ 0x47
 8008e20:	e7f7      	b.n	8008e12 <__hexdig_fun+0xa>
 8008e22:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008e26:	2b05      	cmp	r3, #5
 8008e28:	d801      	bhi.n	8008e2e <__hexdig_fun+0x26>
 8008e2a:	3827      	subs	r0, #39	@ 0x27
 8008e2c:	e7f1      	b.n	8008e12 <__hexdig_fun+0xa>
 8008e2e:	2000      	movs	r0, #0
 8008e30:	4770      	bx	lr
	...

08008e34 <__gethex>:
 8008e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e38:	b085      	sub	sp, #20
 8008e3a:	468a      	mov	sl, r1
 8008e3c:	9302      	str	r3, [sp, #8]
 8008e3e:	680b      	ldr	r3, [r1, #0]
 8008e40:	9001      	str	r0, [sp, #4]
 8008e42:	4690      	mov	r8, r2
 8008e44:	1c9c      	adds	r4, r3, #2
 8008e46:	46a1      	mov	r9, r4
 8008e48:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008e4c:	2830      	cmp	r0, #48	@ 0x30
 8008e4e:	d0fa      	beq.n	8008e46 <__gethex+0x12>
 8008e50:	eba9 0303 	sub.w	r3, r9, r3
 8008e54:	f1a3 0b02 	sub.w	fp, r3, #2
 8008e58:	f7ff ffd6 	bl	8008e08 <__hexdig_fun>
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d168      	bne.n	8008f34 <__gethex+0x100>
 8008e62:	49a0      	ldr	r1, [pc, #640]	@ (80090e4 <__gethex+0x2b0>)
 8008e64:	2201      	movs	r2, #1
 8008e66:	4648      	mov	r0, r9
 8008e68:	f7ff ff12 	bl	8008c90 <strncmp>
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d167      	bne.n	8008f42 <__gethex+0x10e>
 8008e72:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008e76:	4626      	mov	r6, r4
 8008e78:	f7ff ffc6 	bl	8008e08 <__hexdig_fun>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d062      	beq.n	8008f46 <__gethex+0x112>
 8008e80:	4623      	mov	r3, r4
 8008e82:	7818      	ldrb	r0, [r3, #0]
 8008e84:	2830      	cmp	r0, #48	@ 0x30
 8008e86:	4699      	mov	r9, r3
 8008e88:	f103 0301 	add.w	r3, r3, #1
 8008e8c:	d0f9      	beq.n	8008e82 <__gethex+0x4e>
 8008e8e:	f7ff ffbb 	bl	8008e08 <__hexdig_fun>
 8008e92:	fab0 f580 	clz	r5, r0
 8008e96:	096d      	lsrs	r5, r5, #5
 8008e98:	f04f 0b01 	mov.w	fp, #1
 8008e9c:	464a      	mov	r2, r9
 8008e9e:	4616      	mov	r6, r2
 8008ea0:	3201      	adds	r2, #1
 8008ea2:	7830      	ldrb	r0, [r6, #0]
 8008ea4:	f7ff ffb0 	bl	8008e08 <__hexdig_fun>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d1f8      	bne.n	8008e9e <__gethex+0x6a>
 8008eac:	498d      	ldr	r1, [pc, #564]	@ (80090e4 <__gethex+0x2b0>)
 8008eae:	2201      	movs	r2, #1
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f7ff feed 	bl	8008c90 <strncmp>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d13f      	bne.n	8008f3a <__gethex+0x106>
 8008eba:	b944      	cbnz	r4, 8008ece <__gethex+0x9a>
 8008ebc:	1c74      	adds	r4, r6, #1
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	4616      	mov	r6, r2
 8008ec2:	3201      	adds	r2, #1
 8008ec4:	7830      	ldrb	r0, [r6, #0]
 8008ec6:	f7ff ff9f 	bl	8008e08 <__hexdig_fun>
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d1f8      	bne.n	8008ec0 <__gethex+0x8c>
 8008ece:	1ba4      	subs	r4, r4, r6
 8008ed0:	00a7      	lsls	r7, r4, #2
 8008ed2:	7833      	ldrb	r3, [r6, #0]
 8008ed4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008ed8:	2b50      	cmp	r3, #80	@ 0x50
 8008eda:	d13e      	bne.n	8008f5a <__gethex+0x126>
 8008edc:	7873      	ldrb	r3, [r6, #1]
 8008ede:	2b2b      	cmp	r3, #43	@ 0x2b
 8008ee0:	d033      	beq.n	8008f4a <__gethex+0x116>
 8008ee2:	2b2d      	cmp	r3, #45	@ 0x2d
 8008ee4:	d034      	beq.n	8008f50 <__gethex+0x11c>
 8008ee6:	1c71      	adds	r1, r6, #1
 8008ee8:	2400      	movs	r4, #0
 8008eea:	7808      	ldrb	r0, [r1, #0]
 8008eec:	f7ff ff8c 	bl	8008e08 <__hexdig_fun>
 8008ef0:	1e43      	subs	r3, r0, #1
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b18      	cmp	r3, #24
 8008ef6:	d830      	bhi.n	8008f5a <__gethex+0x126>
 8008ef8:	f1a0 0210 	sub.w	r2, r0, #16
 8008efc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f00:	f7ff ff82 	bl	8008e08 <__hexdig_fun>
 8008f04:	f100 3cff 	add.w	ip, r0, #4294967295
 8008f08:	fa5f fc8c 	uxtb.w	ip, ip
 8008f0c:	f1bc 0f18 	cmp.w	ip, #24
 8008f10:	f04f 030a 	mov.w	r3, #10
 8008f14:	d91e      	bls.n	8008f54 <__gethex+0x120>
 8008f16:	b104      	cbz	r4, 8008f1a <__gethex+0xe6>
 8008f18:	4252      	negs	r2, r2
 8008f1a:	4417      	add	r7, r2
 8008f1c:	f8ca 1000 	str.w	r1, [sl]
 8008f20:	b1ed      	cbz	r5, 8008f5e <__gethex+0x12a>
 8008f22:	f1bb 0f00 	cmp.w	fp, #0
 8008f26:	bf0c      	ite	eq
 8008f28:	2506      	moveq	r5, #6
 8008f2a:	2500      	movne	r5, #0
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	b005      	add	sp, #20
 8008f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f34:	2500      	movs	r5, #0
 8008f36:	462c      	mov	r4, r5
 8008f38:	e7b0      	b.n	8008e9c <__gethex+0x68>
 8008f3a:	2c00      	cmp	r4, #0
 8008f3c:	d1c7      	bne.n	8008ece <__gethex+0x9a>
 8008f3e:	4627      	mov	r7, r4
 8008f40:	e7c7      	b.n	8008ed2 <__gethex+0x9e>
 8008f42:	464e      	mov	r6, r9
 8008f44:	462f      	mov	r7, r5
 8008f46:	2501      	movs	r5, #1
 8008f48:	e7c3      	b.n	8008ed2 <__gethex+0x9e>
 8008f4a:	2400      	movs	r4, #0
 8008f4c:	1cb1      	adds	r1, r6, #2
 8008f4e:	e7cc      	b.n	8008eea <__gethex+0xb6>
 8008f50:	2401      	movs	r4, #1
 8008f52:	e7fb      	b.n	8008f4c <__gethex+0x118>
 8008f54:	fb03 0002 	mla	r0, r3, r2, r0
 8008f58:	e7ce      	b.n	8008ef8 <__gethex+0xc4>
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	e7de      	b.n	8008f1c <__gethex+0xe8>
 8008f5e:	eba6 0309 	sub.w	r3, r6, r9
 8008f62:	3b01      	subs	r3, #1
 8008f64:	4629      	mov	r1, r5
 8008f66:	2b07      	cmp	r3, #7
 8008f68:	dc0a      	bgt.n	8008f80 <__gethex+0x14c>
 8008f6a:	9801      	ldr	r0, [sp, #4]
 8008f6c:	f7fe f944 	bl	80071f8 <_Balloc>
 8008f70:	4604      	mov	r4, r0
 8008f72:	b940      	cbnz	r0, 8008f86 <__gethex+0x152>
 8008f74:	4b5c      	ldr	r3, [pc, #368]	@ (80090e8 <__gethex+0x2b4>)
 8008f76:	4602      	mov	r2, r0
 8008f78:	21e4      	movs	r1, #228	@ 0xe4
 8008f7a:	485c      	ldr	r0, [pc, #368]	@ (80090ec <__gethex+0x2b8>)
 8008f7c:	f7ff fec0 	bl	8008d00 <__assert_func>
 8008f80:	3101      	adds	r1, #1
 8008f82:	105b      	asrs	r3, r3, #1
 8008f84:	e7ef      	b.n	8008f66 <__gethex+0x132>
 8008f86:	f100 0a14 	add.w	sl, r0, #20
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	4655      	mov	r5, sl
 8008f8e:	469b      	mov	fp, r3
 8008f90:	45b1      	cmp	r9, r6
 8008f92:	d337      	bcc.n	8009004 <__gethex+0x1d0>
 8008f94:	f845 bb04 	str.w	fp, [r5], #4
 8008f98:	eba5 050a 	sub.w	r5, r5, sl
 8008f9c:	10ad      	asrs	r5, r5, #2
 8008f9e:	6125      	str	r5, [r4, #16]
 8008fa0:	4658      	mov	r0, fp
 8008fa2:	f7fe fa1b 	bl	80073dc <__hi0bits>
 8008fa6:	016d      	lsls	r5, r5, #5
 8008fa8:	f8d8 6000 	ldr.w	r6, [r8]
 8008fac:	1a2d      	subs	r5, r5, r0
 8008fae:	42b5      	cmp	r5, r6
 8008fb0:	dd54      	ble.n	800905c <__gethex+0x228>
 8008fb2:	1bad      	subs	r5, r5, r6
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f7fe fda7 	bl	8007b0a <__any_on>
 8008fbc:	4681      	mov	r9, r0
 8008fbe:	b178      	cbz	r0, 8008fe0 <__gethex+0x1ac>
 8008fc0:	1e6b      	subs	r3, r5, #1
 8008fc2:	1159      	asrs	r1, r3, #5
 8008fc4:	f003 021f 	and.w	r2, r3, #31
 8008fc8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008fcc:	f04f 0901 	mov.w	r9, #1
 8008fd0:	fa09 f202 	lsl.w	r2, r9, r2
 8008fd4:	420a      	tst	r2, r1
 8008fd6:	d003      	beq.n	8008fe0 <__gethex+0x1ac>
 8008fd8:	454b      	cmp	r3, r9
 8008fda:	dc36      	bgt.n	800904a <__gethex+0x216>
 8008fdc:	f04f 0902 	mov.w	r9, #2
 8008fe0:	4629      	mov	r1, r5
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f7ff febe 	bl	8008d64 <rshift>
 8008fe8:	442f      	add	r7, r5
 8008fea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fee:	42bb      	cmp	r3, r7
 8008ff0:	da42      	bge.n	8009078 <__gethex+0x244>
 8008ff2:	9801      	ldr	r0, [sp, #4]
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	f7fe f93f 	bl	8007278 <_Bfree>
 8008ffa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	6013      	str	r3, [r2, #0]
 8009000:	25a3      	movs	r5, #163	@ 0xa3
 8009002:	e793      	b.n	8008f2c <__gethex+0xf8>
 8009004:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009008:	2a2e      	cmp	r2, #46	@ 0x2e
 800900a:	d012      	beq.n	8009032 <__gethex+0x1fe>
 800900c:	2b20      	cmp	r3, #32
 800900e:	d104      	bne.n	800901a <__gethex+0x1e6>
 8009010:	f845 bb04 	str.w	fp, [r5], #4
 8009014:	f04f 0b00 	mov.w	fp, #0
 8009018:	465b      	mov	r3, fp
 800901a:	7830      	ldrb	r0, [r6, #0]
 800901c:	9303      	str	r3, [sp, #12]
 800901e:	f7ff fef3 	bl	8008e08 <__hexdig_fun>
 8009022:	9b03      	ldr	r3, [sp, #12]
 8009024:	f000 000f 	and.w	r0, r0, #15
 8009028:	4098      	lsls	r0, r3
 800902a:	ea4b 0b00 	orr.w	fp, fp, r0
 800902e:	3304      	adds	r3, #4
 8009030:	e7ae      	b.n	8008f90 <__gethex+0x15c>
 8009032:	45b1      	cmp	r9, r6
 8009034:	d8ea      	bhi.n	800900c <__gethex+0x1d8>
 8009036:	492b      	ldr	r1, [pc, #172]	@ (80090e4 <__gethex+0x2b0>)
 8009038:	9303      	str	r3, [sp, #12]
 800903a:	2201      	movs	r2, #1
 800903c:	4630      	mov	r0, r6
 800903e:	f7ff fe27 	bl	8008c90 <strncmp>
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	2800      	cmp	r0, #0
 8009046:	d1e1      	bne.n	800900c <__gethex+0x1d8>
 8009048:	e7a2      	b.n	8008f90 <__gethex+0x15c>
 800904a:	1ea9      	subs	r1, r5, #2
 800904c:	4620      	mov	r0, r4
 800904e:	f7fe fd5c 	bl	8007b0a <__any_on>
 8009052:	2800      	cmp	r0, #0
 8009054:	d0c2      	beq.n	8008fdc <__gethex+0x1a8>
 8009056:	f04f 0903 	mov.w	r9, #3
 800905a:	e7c1      	b.n	8008fe0 <__gethex+0x1ac>
 800905c:	da09      	bge.n	8009072 <__gethex+0x23e>
 800905e:	1b75      	subs	r5, r6, r5
 8009060:	4621      	mov	r1, r4
 8009062:	9801      	ldr	r0, [sp, #4]
 8009064:	462a      	mov	r2, r5
 8009066:	f7fe fb17 	bl	8007698 <__lshift>
 800906a:	1b7f      	subs	r7, r7, r5
 800906c:	4604      	mov	r4, r0
 800906e:	f100 0a14 	add.w	sl, r0, #20
 8009072:	f04f 0900 	mov.w	r9, #0
 8009076:	e7b8      	b.n	8008fea <__gethex+0x1b6>
 8009078:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800907c:	42bd      	cmp	r5, r7
 800907e:	dd6f      	ble.n	8009160 <__gethex+0x32c>
 8009080:	1bed      	subs	r5, r5, r7
 8009082:	42ae      	cmp	r6, r5
 8009084:	dc34      	bgt.n	80090f0 <__gethex+0x2bc>
 8009086:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800908a:	2b02      	cmp	r3, #2
 800908c:	d022      	beq.n	80090d4 <__gethex+0x2a0>
 800908e:	2b03      	cmp	r3, #3
 8009090:	d024      	beq.n	80090dc <__gethex+0x2a8>
 8009092:	2b01      	cmp	r3, #1
 8009094:	d115      	bne.n	80090c2 <__gethex+0x28e>
 8009096:	42ae      	cmp	r6, r5
 8009098:	d113      	bne.n	80090c2 <__gethex+0x28e>
 800909a:	2e01      	cmp	r6, #1
 800909c:	d10b      	bne.n	80090b6 <__gethex+0x282>
 800909e:	9a02      	ldr	r2, [sp, #8]
 80090a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	2301      	movs	r3, #1
 80090a8:	6123      	str	r3, [r4, #16]
 80090aa:	f8ca 3000 	str.w	r3, [sl]
 80090ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090b0:	2562      	movs	r5, #98	@ 0x62
 80090b2:	601c      	str	r4, [r3, #0]
 80090b4:	e73a      	b.n	8008f2c <__gethex+0xf8>
 80090b6:	1e71      	subs	r1, r6, #1
 80090b8:	4620      	mov	r0, r4
 80090ba:	f7fe fd26 	bl	8007b0a <__any_on>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d1ed      	bne.n	800909e <__gethex+0x26a>
 80090c2:	9801      	ldr	r0, [sp, #4]
 80090c4:	4621      	mov	r1, r4
 80090c6:	f7fe f8d7 	bl	8007278 <_Bfree>
 80090ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090cc:	2300      	movs	r3, #0
 80090ce:	6013      	str	r3, [r2, #0]
 80090d0:	2550      	movs	r5, #80	@ 0x50
 80090d2:	e72b      	b.n	8008f2c <__gethex+0xf8>
 80090d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1f3      	bne.n	80090c2 <__gethex+0x28e>
 80090da:	e7e0      	b.n	800909e <__gethex+0x26a>
 80090dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1dd      	bne.n	800909e <__gethex+0x26a>
 80090e2:	e7ee      	b.n	80090c2 <__gethex+0x28e>
 80090e4:	08009c5b 	.word	0x08009c5b
 80090e8:	08009bf1 	.word	0x08009bf1
 80090ec:	08009cb2 	.word	0x08009cb2
 80090f0:	1e6f      	subs	r7, r5, #1
 80090f2:	f1b9 0f00 	cmp.w	r9, #0
 80090f6:	d130      	bne.n	800915a <__gethex+0x326>
 80090f8:	b127      	cbz	r7, 8009104 <__gethex+0x2d0>
 80090fa:	4639      	mov	r1, r7
 80090fc:	4620      	mov	r0, r4
 80090fe:	f7fe fd04 	bl	8007b0a <__any_on>
 8009102:	4681      	mov	r9, r0
 8009104:	117a      	asrs	r2, r7, #5
 8009106:	2301      	movs	r3, #1
 8009108:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800910c:	f007 071f 	and.w	r7, r7, #31
 8009110:	40bb      	lsls	r3, r7
 8009112:	4213      	tst	r3, r2
 8009114:	4629      	mov	r1, r5
 8009116:	4620      	mov	r0, r4
 8009118:	bf18      	it	ne
 800911a:	f049 0902 	orrne.w	r9, r9, #2
 800911e:	f7ff fe21 	bl	8008d64 <rshift>
 8009122:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009126:	1b76      	subs	r6, r6, r5
 8009128:	2502      	movs	r5, #2
 800912a:	f1b9 0f00 	cmp.w	r9, #0
 800912e:	d047      	beq.n	80091c0 <__gethex+0x38c>
 8009130:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009134:	2b02      	cmp	r3, #2
 8009136:	d015      	beq.n	8009164 <__gethex+0x330>
 8009138:	2b03      	cmp	r3, #3
 800913a:	d017      	beq.n	800916c <__gethex+0x338>
 800913c:	2b01      	cmp	r3, #1
 800913e:	d109      	bne.n	8009154 <__gethex+0x320>
 8009140:	f019 0f02 	tst.w	r9, #2
 8009144:	d006      	beq.n	8009154 <__gethex+0x320>
 8009146:	f8da 3000 	ldr.w	r3, [sl]
 800914a:	ea49 0903 	orr.w	r9, r9, r3
 800914e:	f019 0f01 	tst.w	r9, #1
 8009152:	d10e      	bne.n	8009172 <__gethex+0x33e>
 8009154:	f045 0510 	orr.w	r5, r5, #16
 8009158:	e032      	b.n	80091c0 <__gethex+0x38c>
 800915a:	f04f 0901 	mov.w	r9, #1
 800915e:	e7d1      	b.n	8009104 <__gethex+0x2d0>
 8009160:	2501      	movs	r5, #1
 8009162:	e7e2      	b.n	800912a <__gethex+0x2f6>
 8009164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009166:	f1c3 0301 	rsb	r3, r3, #1
 800916a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800916c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800916e:	2b00      	cmp	r3, #0
 8009170:	d0f0      	beq.n	8009154 <__gethex+0x320>
 8009172:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009176:	f104 0314 	add.w	r3, r4, #20
 800917a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800917e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009182:	f04f 0c00 	mov.w	ip, #0
 8009186:	4618      	mov	r0, r3
 8009188:	f853 2b04 	ldr.w	r2, [r3], #4
 800918c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009190:	d01b      	beq.n	80091ca <__gethex+0x396>
 8009192:	3201      	adds	r2, #1
 8009194:	6002      	str	r2, [r0, #0]
 8009196:	2d02      	cmp	r5, #2
 8009198:	f104 0314 	add.w	r3, r4, #20
 800919c:	d13c      	bne.n	8009218 <__gethex+0x3e4>
 800919e:	f8d8 2000 	ldr.w	r2, [r8]
 80091a2:	3a01      	subs	r2, #1
 80091a4:	42b2      	cmp	r2, r6
 80091a6:	d109      	bne.n	80091bc <__gethex+0x388>
 80091a8:	1171      	asrs	r1, r6, #5
 80091aa:	2201      	movs	r2, #1
 80091ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091b0:	f006 061f 	and.w	r6, r6, #31
 80091b4:	fa02 f606 	lsl.w	r6, r2, r6
 80091b8:	421e      	tst	r6, r3
 80091ba:	d13a      	bne.n	8009232 <__gethex+0x3fe>
 80091bc:	f045 0520 	orr.w	r5, r5, #32
 80091c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091c2:	601c      	str	r4, [r3, #0]
 80091c4:	9b02      	ldr	r3, [sp, #8]
 80091c6:	601f      	str	r7, [r3, #0]
 80091c8:	e6b0      	b.n	8008f2c <__gethex+0xf8>
 80091ca:	4299      	cmp	r1, r3
 80091cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80091d0:	d8d9      	bhi.n	8009186 <__gethex+0x352>
 80091d2:	68a3      	ldr	r3, [r4, #8]
 80091d4:	459b      	cmp	fp, r3
 80091d6:	db17      	blt.n	8009208 <__gethex+0x3d4>
 80091d8:	6861      	ldr	r1, [r4, #4]
 80091da:	9801      	ldr	r0, [sp, #4]
 80091dc:	3101      	adds	r1, #1
 80091de:	f7fe f80b 	bl	80071f8 <_Balloc>
 80091e2:	4681      	mov	r9, r0
 80091e4:	b918      	cbnz	r0, 80091ee <__gethex+0x3ba>
 80091e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009250 <__gethex+0x41c>)
 80091e8:	4602      	mov	r2, r0
 80091ea:	2184      	movs	r1, #132	@ 0x84
 80091ec:	e6c5      	b.n	8008f7a <__gethex+0x146>
 80091ee:	6922      	ldr	r2, [r4, #16]
 80091f0:	3202      	adds	r2, #2
 80091f2:	f104 010c 	add.w	r1, r4, #12
 80091f6:	0092      	lsls	r2, r2, #2
 80091f8:	300c      	adds	r0, #12
 80091fa:	f7ff fd6b 	bl	8008cd4 <memcpy>
 80091fe:	4621      	mov	r1, r4
 8009200:	9801      	ldr	r0, [sp, #4]
 8009202:	f7fe f839 	bl	8007278 <_Bfree>
 8009206:	464c      	mov	r4, r9
 8009208:	6923      	ldr	r3, [r4, #16]
 800920a:	1c5a      	adds	r2, r3, #1
 800920c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009210:	6122      	str	r2, [r4, #16]
 8009212:	2201      	movs	r2, #1
 8009214:	615a      	str	r2, [r3, #20]
 8009216:	e7be      	b.n	8009196 <__gethex+0x362>
 8009218:	6922      	ldr	r2, [r4, #16]
 800921a:	455a      	cmp	r2, fp
 800921c:	dd0b      	ble.n	8009236 <__gethex+0x402>
 800921e:	2101      	movs	r1, #1
 8009220:	4620      	mov	r0, r4
 8009222:	f7ff fd9f 	bl	8008d64 <rshift>
 8009226:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800922a:	3701      	adds	r7, #1
 800922c:	42bb      	cmp	r3, r7
 800922e:	f6ff aee0 	blt.w	8008ff2 <__gethex+0x1be>
 8009232:	2501      	movs	r5, #1
 8009234:	e7c2      	b.n	80091bc <__gethex+0x388>
 8009236:	f016 061f 	ands.w	r6, r6, #31
 800923a:	d0fa      	beq.n	8009232 <__gethex+0x3fe>
 800923c:	4453      	add	r3, sl
 800923e:	f1c6 0620 	rsb	r6, r6, #32
 8009242:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009246:	f7fe f8c9 	bl	80073dc <__hi0bits>
 800924a:	42b0      	cmp	r0, r6
 800924c:	dbe7      	blt.n	800921e <__gethex+0x3ea>
 800924e:	e7f0      	b.n	8009232 <__gethex+0x3fe>
 8009250:	08009bf1 	.word	0x08009bf1

08009254 <L_shift>:
 8009254:	f1c2 0208 	rsb	r2, r2, #8
 8009258:	0092      	lsls	r2, r2, #2
 800925a:	b570      	push	{r4, r5, r6, lr}
 800925c:	f1c2 0620 	rsb	r6, r2, #32
 8009260:	6843      	ldr	r3, [r0, #4]
 8009262:	6804      	ldr	r4, [r0, #0]
 8009264:	fa03 f506 	lsl.w	r5, r3, r6
 8009268:	432c      	orrs	r4, r5
 800926a:	40d3      	lsrs	r3, r2
 800926c:	6004      	str	r4, [r0, #0]
 800926e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009272:	4288      	cmp	r0, r1
 8009274:	d3f4      	bcc.n	8009260 <L_shift+0xc>
 8009276:	bd70      	pop	{r4, r5, r6, pc}

08009278 <__match>:
 8009278:	b530      	push	{r4, r5, lr}
 800927a:	6803      	ldr	r3, [r0, #0]
 800927c:	3301      	adds	r3, #1
 800927e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009282:	b914      	cbnz	r4, 800928a <__match+0x12>
 8009284:	6003      	str	r3, [r0, #0]
 8009286:	2001      	movs	r0, #1
 8009288:	bd30      	pop	{r4, r5, pc}
 800928a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800928e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009292:	2d19      	cmp	r5, #25
 8009294:	bf98      	it	ls
 8009296:	3220      	addls	r2, #32
 8009298:	42a2      	cmp	r2, r4
 800929a:	d0f0      	beq.n	800927e <__match+0x6>
 800929c:	2000      	movs	r0, #0
 800929e:	e7f3      	b.n	8009288 <__match+0x10>

080092a0 <__hexnan>:
 80092a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	680b      	ldr	r3, [r1, #0]
 80092a6:	6801      	ldr	r1, [r0, #0]
 80092a8:	115e      	asrs	r6, r3, #5
 80092aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80092ae:	f013 031f 	ands.w	r3, r3, #31
 80092b2:	b087      	sub	sp, #28
 80092b4:	bf18      	it	ne
 80092b6:	3604      	addne	r6, #4
 80092b8:	2500      	movs	r5, #0
 80092ba:	1f37      	subs	r7, r6, #4
 80092bc:	4682      	mov	sl, r0
 80092be:	4690      	mov	r8, r2
 80092c0:	9301      	str	r3, [sp, #4]
 80092c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80092c6:	46b9      	mov	r9, r7
 80092c8:	463c      	mov	r4, r7
 80092ca:	9502      	str	r5, [sp, #8]
 80092cc:	46ab      	mov	fp, r5
 80092ce:	784a      	ldrb	r2, [r1, #1]
 80092d0:	1c4b      	adds	r3, r1, #1
 80092d2:	9303      	str	r3, [sp, #12]
 80092d4:	b342      	cbz	r2, 8009328 <__hexnan+0x88>
 80092d6:	4610      	mov	r0, r2
 80092d8:	9105      	str	r1, [sp, #20]
 80092da:	9204      	str	r2, [sp, #16]
 80092dc:	f7ff fd94 	bl	8008e08 <__hexdig_fun>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d151      	bne.n	8009388 <__hexnan+0xe8>
 80092e4:	9a04      	ldr	r2, [sp, #16]
 80092e6:	9905      	ldr	r1, [sp, #20]
 80092e8:	2a20      	cmp	r2, #32
 80092ea:	d818      	bhi.n	800931e <__hexnan+0x7e>
 80092ec:	9b02      	ldr	r3, [sp, #8]
 80092ee:	459b      	cmp	fp, r3
 80092f0:	dd13      	ble.n	800931a <__hexnan+0x7a>
 80092f2:	454c      	cmp	r4, r9
 80092f4:	d206      	bcs.n	8009304 <__hexnan+0x64>
 80092f6:	2d07      	cmp	r5, #7
 80092f8:	dc04      	bgt.n	8009304 <__hexnan+0x64>
 80092fa:	462a      	mov	r2, r5
 80092fc:	4649      	mov	r1, r9
 80092fe:	4620      	mov	r0, r4
 8009300:	f7ff ffa8 	bl	8009254 <L_shift>
 8009304:	4544      	cmp	r4, r8
 8009306:	d952      	bls.n	80093ae <__hexnan+0x10e>
 8009308:	2300      	movs	r3, #0
 800930a:	f1a4 0904 	sub.w	r9, r4, #4
 800930e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009312:	f8cd b008 	str.w	fp, [sp, #8]
 8009316:	464c      	mov	r4, r9
 8009318:	461d      	mov	r5, r3
 800931a:	9903      	ldr	r1, [sp, #12]
 800931c:	e7d7      	b.n	80092ce <__hexnan+0x2e>
 800931e:	2a29      	cmp	r2, #41	@ 0x29
 8009320:	d157      	bne.n	80093d2 <__hexnan+0x132>
 8009322:	3102      	adds	r1, #2
 8009324:	f8ca 1000 	str.w	r1, [sl]
 8009328:	f1bb 0f00 	cmp.w	fp, #0
 800932c:	d051      	beq.n	80093d2 <__hexnan+0x132>
 800932e:	454c      	cmp	r4, r9
 8009330:	d206      	bcs.n	8009340 <__hexnan+0xa0>
 8009332:	2d07      	cmp	r5, #7
 8009334:	dc04      	bgt.n	8009340 <__hexnan+0xa0>
 8009336:	462a      	mov	r2, r5
 8009338:	4649      	mov	r1, r9
 800933a:	4620      	mov	r0, r4
 800933c:	f7ff ff8a 	bl	8009254 <L_shift>
 8009340:	4544      	cmp	r4, r8
 8009342:	d936      	bls.n	80093b2 <__hexnan+0x112>
 8009344:	f1a8 0204 	sub.w	r2, r8, #4
 8009348:	4623      	mov	r3, r4
 800934a:	f853 1b04 	ldr.w	r1, [r3], #4
 800934e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009352:	429f      	cmp	r7, r3
 8009354:	d2f9      	bcs.n	800934a <__hexnan+0xaa>
 8009356:	1b3b      	subs	r3, r7, r4
 8009358:	f023 0303 	bic.w	r3, r3, #3
 800935c:	3304      	adds	r3, #4
 800935e:	3401      	adds	r4, #1
 8009360:	3e03      	subs	r6, #3
 8009362:	42b4      	cmp	r4, r6
 8009364:	bf88      	it	hi
 8009366:	2304      	movhi	r3, #4
 8009368:	4443      	add	r3, r8
 800936a:	2200      	movs	r2, #0
 800936c:	f843 2b04 	str.w	r2, [r3], #4
 8009370:	429f      	cmp	r7, r3
 8009372:	d2fb      	bcs.n	800936c <__hexnan+0xcc>
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	b91b      	cbnz	r3, 8009380 <__hexnan+0xe0>
 8009378:	4547      	cmp	r7, r8
 800937a:	d128      	bne.n	80093ce <__hexnan+0x12e>
 800937c:	2301      	movs	r3, #1
 800937e:	603b      	str	r3, [r7, #0]
 8009380:	2005      	movs	r0, #5
 8009382:	b007      	add	sp, #28
 8009384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009388:	3501      	adds	r5, #1
 800938a:	2d08      	cmp	r5, #8
 800938c:	f10b 0b01 	add.w	fp, fp, #1
 8009390:	dd06      	ble.n	80093a0 <__hexnan+0x100>
 8009392:	4544      	cmp	r4, r8
 8009394:	d9c1      	bls.n	800931a <__hexnan+0x7a>
 8009396:	2300      	movs	r3, #0
 8009398:	f844 3c04 	str.w	r3, [r4, #-4]
 800939c:	2501      	movs	r5, #1
 800939e:	3c04      	subs	r4, #4
 80093a0:	6822      	ldr	r2, [r4, #0]
 80093a2:	f000 000f 	and.w	r0, r0, #15
 80093a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80093aa:	6020      	str	r0, [r4, #0]
 80093ac:	e7b5      	b.n	800931a <__hexnan+0x7a>
 80093ae:	2508      	movs	r5, #8
 80093b0:	e7b3      	b.n	800931a <__hexnan+0x7a>
 80093b2:	9b01      	ldr	r3, [sp, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d0dd      	beq.n	8009374 <__hexnan+0xd4>
 80093b8:	f1c3 0320 	rsb	r3, r3, #32
 80093bc:	f04f 32ff 	mov.w	r2, #4294967295
 80093c0:	40da      	lsrs	r2, r3
 80093c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80093c6:	4013      	ands	r3, r2
 80093c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80093cc:	e7d2      	b.n	8009374 <__hexnan+0xd4>
 80093ce:	3f04      	subs	r7, #4
 80093d0:	e7d0      	b.n	8009374 <__hexnan+0xd4>
 80093d2:	2004      	movs	r0, #4
 80093d4:	e7d5      	b.n	8009382 <__hexnan+0xe2>

080093d6 <__ascii_mbtowc>:
 80093d6:	b082      	sub	sp, #8
 80093d8:	b901      	cbnz	r1, 80093dc <__ascii_mbtowc+0x6>
 80093da:	a901      	add	r1, sp, #4
 80093dc:	b142      	cbz	r2, 80093f0 <__ascii_mbtowc+0x1a>
 80093de:	b14b      	cbz	r3, 80093f4 <__ascii_mbtowc+0x1e>
 80093e0:	7813      	ldrb	r3, [r2, #0]
 80093e2:	600b      	str	r3, [r1, #0]
 80093e4:	7812      	ldrb	r2, [r2, #0]
 80093e6:	1e10      	subs	r0, r2, #0
 80093e8:	bf18      	it	ne
 80093ea:	2001      	movne	r0, #1
 80093ec:	b002      	add	sp, #8
 80093ee:	4770      	bx	lr
 80093f0:	4610      	mov	r0, r2
 80093f2:	e7fb      	b.n	80093ec <__ascii_mbtowc+0x16>
 80093f4:	f06f 0001 	mvn.w	r0, #1
 80093f8:	e7f8      	b.n	80093ec <__ascii_mbtowc+0x16>

080093fa <_realloc_r>:
 80093fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093fe:	4607      	mov	r7, r0
 8009400:	4614      	mov	r4, r2
 8009402:	460d      	mov	r5, r1
 8009404:	b921      	cbnz	r1, 8009410 <_realloc_r+0x16>
 8009406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800940a:	4611      	mov	r1, r2
 800940c:	f7fd be68 	b.w	80070e0 <_malloc_r>
 8009410:	b92a      	cbnz	r2, 800941e <_realloc_r+0x24>
 8009412:	f7fd fdf1 	bl	8006ff8 <_free_r>
 8009416:	4625      	mov	r5, r4
 8009418:	4628      	mov	r0, r5
 800941a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800941e:	f000 f840 	bl	80094a2 <_malloc_usable_size_r>
 8009422:	4284      	cmp	r4, r0
 8009424:	4606      	mov	r6, r0
 8009426:	d802      	bhi.n	800942e <_realloc_r+0x34>
 8009428:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800942c:	d8f4      	bhi.n	8009418 <_realloc_r+0x1e>
 800942e:	4621      	mov	r1, r4
 8009430:	4638      	mov	r0, r7
 8009432:	f7fd fe55 	bl	80070e0 <_malloc_r>
 8009436:	4680      	mov	r8, r0
 8009438:	b908      	cbnz	r0, 800943e <_realloc_r+0x44>
 800943a:	4645      	mov	r5, r8
 800943c:	e7ec      	b.n	8009418 <_realloc_r+0x1e>
 800943e:	42b4      	cmp	r4, r6
 8009440:	4622      	mov	r2, r4
 8009442:	4629      	mov	r1, r5
 8009444:	bf28      	it	cs
 8009446:	4632      	movcs	r2, r6
 8009448:	f7ff fc44 	bl	8008cd4 <memcpy>
 800944c:	4629      	mov	r1, r5
 800944e:	4638      	mov	r0, r7
 8009450:	f7fd fdd2 	bl	8006ff8 <_free_r>
 8009454:	e7f1      	b.n	800943a <_realloc_r+0x40>

08009456 <__ascii_wctomb>:
 8009456:	4603      	mov	r3, r0
 8009458:	4608      	mov	r0, r1
 800945a:	b141      	cbz	r1, 800946e <__ascii_wctomb+0x18>
 800945c:	2aff      	cmp	r2, #255	@ 0xff
 800945e:	d904      	bls.n	800946a <__ascii_wctomb+0x14>
 8009460:	228a      	movs	r2, #138	@ 0x8a
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	f04f 30ff 	mov.w	r0, #4294967295
 8009468:	4770      	bx	lr
 800946a:	700a      	strb	r2, [r1, #0]
 800946c:	2001      	movs	r0, #1
 800946e:	4770      	bx	lr

08009470 <fiprintf>:
 8009470:	b40e      	push	{r1, r2, r3}
 8009472:	b503      	push	{r0, r1, lr}
 8009474:	4601      	mov	r1, r0
 8009476:	ab03      	add	r3, sp, #12
 8009478:	4805      	ldr	r0, [pc, #20]	@ (8009490 <fiprintf+0x20>)
 800947a:	f853 2b04 	ldr.w	r2, [r3], #4
 800947e:	6800      	ldr	r0, [r0, #0]
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	f000 f83f 	bl	8009504 <_vfiprintf_r>
 8009486:	b002      	add	sp, #8
 8009488:	f85d eb04 	ldr.w	lr, [sp], #4
 800948c:	b003      	add	sp, #12
 800948e:	4770      	bx	lr
 8009490:	20000024 	.word	0x20000024

08009494 <abort>:
 8009494:	b508      	push	{r3, lr}
 8009496:	2006      	movs	r0, #6
 8009498:	f000 fa08 	bl	80098ac <raise>
 800949c:	2001      	movs	r0, #1
 800949e:	f7f8 fe6b 	bl	8002178 <_exit>

080094a2 <_malloc_usable_size_r>:
 80094a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094a6:	1f18      	subs	r0, r3, #4
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	bfbc      	itt	lt
 80094ac:	580b      	ldrlt	r3, [r1, r0]
 80094ae:	18c0      	addlt	r0, r0, r3
 80094b0:	4770      	bx	lr

080094b2 <__sfputc_r>:
 80094b2:	6893      	ldr	r3, [r2, #8]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	b410      	push	{r4}
 80094ba:	6093      	str	r3, [r2, #8]
 80094bc:	da08      	bge.n	80094d0 <__sfputc_r+0x1e>
 80094be:	6994      	ldr	r4, [r2, #24]
 80094c0:	42a3      	cmp	r3, r4
 80094c2:	db01      	blt.n	80094c8 <__sfputc_r+0x16>
 80094c4:	290a      	cmp	r1, #10
 80094c6:	d103      	bne.n	80094d0 <__sfputc_r+0x1e>
 80094c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094cc:	f000 b932 	b.w	8009734 <__swbuf_r>
 80094d0:	6813      	ldr	r3, [r2, #0]
 80094d2:	1c58      	adds	r0, r3, #1
 80094d4:	6010      	str	r0, [r2, #0]
 80094d6:	7019      	strb	r1, [r3, #0]
 80094d8:	4608      	mov	r0, r1
 80094da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <__sfputs_r>:
 80094e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e2:	4606      	mov	r6, r0
 80094e4:	460f      	mov	r7, r1
 80094e6:	4614      	mov	r4, r2
 80094e8:	18d5      	adds	r5, r2, r3
 80094ea:	42ac      	cmp	r4, r5
 80094ec:	d101      	bne.n	80094f2 <__sfputs_r+0x12>
 80094ee:	2000      	movs	r0, #0
 80094f0:	e007      	b.n	8009502 <__sfputs_r+0x22>
 80094f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f6:	463a      	mov	r2, r7
 80094f8:	4630      	mov	r0, r6
 80094fa:	f7ff ffda 	bl	80094b2 <__sfputc_r>
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	d1f3      	bne.n	80094ea <__sfputs_r+0xa>
 8009502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009504 <_vfiprintf_r>:
 8009504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009508:	460d      	mov	r5, r1
 800950a:	b09d      	sub	sp, #116	@ 0x74
 800950c:	4614      	mov	r4, r2
 800950e:	4698      	mov	r8, r3
 8009510:	4606      	mov	r6, r0
 8009512:	b118      	cbz	r0, 800951c <_vfiprintf_r+0x18>
 8009514:	6a03      	ldr	r3, [r0, #32]
 8009516:	b90b      	cbnz	r3, 800951c <_vfiprintf_r+0x18>
 8009518:	f7fc fdb8 	bl	800608c <__sinit>
 800951c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800951e:	07d9      	lsls	r1, r3, #31
 8009520:	d405      	bmi.n	800952e <_vfiprintf_r+0x2a>
 8009522:	89ab      	ldrh	r3, [r5, #12]
 8009524:	059a      	lsls	r2, r3, #22
 8009526:	d402      	bmi.n	800952e <_vfiprintf_r+0x2a>
 8009528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800952a:	f7fc ff04 	bl	8006336 <__retarget_lock_acquire_recursive>
 800952e:	89ab      	ldrh	r3, [r5, #12]
 8009530:	071b      	lsls	r3, r3, #28
 8009532:	d501      	bpl.n	8009538 <_vfiprintf_r+0x34>
 8009534:	692b      	ldr	r3, [r5, #16]
 8009536:	b99b      	cbnz	r3, 8009560 <_vfiprintf_r+0x5c>
 8009538:	4629      	mov	r1, r5
 800953a:	4630      	mov	r0, r6
 800953c:	f000 f938 	bl	80097b0 <__swsetup_r>
 8009540:	b170      	cbz	r0, 8009560 <_vfiprintf_r+0x5c>
 8009542:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009544:	07dc      	lsls	r4, r3, #31
 8009546:	d504      	bpl.n	8009552 <_vfiprintf_r+0x4e>
 8009548:	f04f 30ff 	mov.w	r0, #4294967295
 800954c:	b01d      	add	sp, #116	@ 0x74
 800954e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009552:	89ab      	ldrh	r3, [r5, #12]
 8009554:	0598      	lsls	r0, r3, #22
 8009556:	d4f7      	bmi.n	8009548 <_vfiprintf_r+0x44>
 8009558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800955a:	f7fc feed 	bl	8006338 <__retarget_lock_release_recursive>
 800955e:	e7f3      	b.n	8009548 <_vfiprintf_r+0x44>
 8009560:	2300      	movs	r3, #0
 8009562:	9309      	str	r3, [sp, #36]	@ 0x24
 8009564:	2320      	movs	r3, #32
 8009566:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800956a:	f8cd 800c 	str.w	r8, [sp, #12]
 800956e:	2330      	movs	r3, #48	@ 0x30
 8009570:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009720 <_vfiprintf_r+0x21c>
 8009574:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009578:	f04f 0901 	mov.w	r9, #1
 800957c:	4623      	mov	r3, r4
 800957e:	469a      	mov	sl, r3
 8009580:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009584:	b10a      	cbz	r2, 800958a <_vfiprintf_r+0x86>
 8009586:	2a25      	cmp	r2, #37	@ 0x25
 8009588:	d1f9      	bne.n	800957e <_vfiprintf_r+0x7a>
 800958a:	ebba 0b04 	subs.w	fp, sl, r4
 800958e:	d00b      	beq.n	80095a8 <_vfiprintf_r+0xa4>
 8009590:	465b      	mov	r3, fp
 8009592:	4622      	mov	r2, r4
 8009594:	4629      	mov	r1, r5
 8009596:	4630      	mov	r0, r6
 8009598:	f7ff ffa2 	bl	80094e0 <__sfputs_r>
 800959c:	3001      	adds	r0, #1
 800959e:	f000 80a7 	beq.w	80096f0 <_vfiprintf_r+0x1ec>
 80095a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095a4:	445a      	add	r2, fp
 80095a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80095a8:	f89a 3000 	ldrb.w	r3, [sl]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 809f 	beq.w	80096f0 <_vfiprintf_r+0x1ec>
 80095b2:	2300      	movs	r3, #0
 80095b4:	f04f 32ff 	mov.w	r2, #4294967295
 80095b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095bc:	f10a 0a01 	add.w	sl, sl, #1
 80095c0:	9304      	str	r3, [sp, #16]
 80095c2:	9307      	str	r3, [sp, #28]
 80095c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80095ca:	4654      	mov	r4, sl
 80095cc:	2205      	movs	r2, #5
 80095ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d2:	4853      	ldr	r0, [pc, #332]	@ (8009720 <_vfiprintf_r+0x21c>)
 80095d4:	f7f6 fe0c 	bl	80001f0 <memchr>
 80095d8:	9a04      	ldr	r2, [sp, #16]
 80095da:	b9d8      	cbnz	r0, 8009614 <_vfiprintf_r+0x110>
 80095dc:	06d1      	lsls	r1, r2, #27
 80095de:	bf44      	itt	mi
 80095e0:	2320      	movmi	r3, #32
 80095e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095e6:	0713      	lsls	r3, r2, #28
 80095e8:	bf44      	itt	mi
 80095ea:	232b      	movmi	r3, #43	@ 0x2b
 80095ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095f0:	f89a 3000 	ldrb.w	r3, [sl]
 80095f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80095f6:	d015      	beq.n	8009624 <_vfiprintf_r+0x120>
 80095f8:	9a07      	ldr	r2, [sp, #28]
 80095fa:	4654      	mov	r4, sl
 80095fc:	2000      	movs	r0, #0
 80095fe:	f04f 0c0a 	mov.w	ip, #10
 8009602:	4621      	mov	r1, r4
 8009604:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009608:	3b30      	subs	r3, #48	@ 0x30
 800960a:	2b09      	cmp	r3, #9
 800960c:	d94b      	bls.n	80096a6 <_vfiprintf_r+0x1a2>
 800960e:	b1b0      	cbz	r0, 800963e <_vfiprintf_r+0x13a>
 8009610:	9207      	str	r2, [sp, #28]
 8009612:	e014      	b.n	800963e <_vfiprintf_r+0x13a>
 8009614:	eba0 0308 	sub.w	r3, r0, r8
 8009618:	fa09 f303 	lsl.w	r3, r9, r3
 800961c:	4313      	orrs	r3, r2
 800961e:	9304      	str	r3, [sp, #16]
 8009620:	46a2      	mov	sl, r4
 8009622:	e7d2      	b.n	80095ca <_vfiprintf_r+0xc6>
 8009624:	9b03      	ldr	r3, [sp, #12]
 8009626:	1d19      	adds	r1, r3, #4
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	9103      	str	r1, [sp, #12]
 800962c:	2b00      	cmp	r3, #0
 800962e:	bfbb      	ittet	lt
 8009630:	425b      	neglt	r3, r3
 8009632:	f042 0202 	orrlt.w	r2, r2, #2
 8009636:	9307      	strge	r3, [sp, #28]
 8009638:	9307      	strlt	r3, [sp, #28]
 800963a:	bfb8      	it	lt
 800963c:	9204      	strlt	r2, [sp, #16]
 800963e:	7823      	ldrb	r3, [r4, #0]
 8009640:	2b2e      	cmp	r3, #46	@ 0x2e
 8009642:	d10a      	bne.n	800965a <_vfiprintf_r+0x156>
 8009644:	7863      	ldrb	r3, [r4, #1]
 8009646:	2b2a      	cmp	r3, #42	@ 0x2a
 8009648:	d132      	bne.n	80096b0 <_vfiprintf_r+0x1ac>
 800964a:	9b03      	ldr	r3, [sp, #12]
 800964c:	1d1a      	adds	r2, r3, #4
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	9203      	str	r2, [sp, #12]
 8009652:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009656:	3402      	adds	r4, #2
 8009658:	9305      	str	r3, [sp, #20]
 800965a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009730 <_vfiprintf_r+0x22c>
 800965e:	7821      	ldrb	r1, [r4, #0]
 8009660:	2203      	movs	r2, #3
 8009662:	4650      	mov	r0, sl
 8009664:	f7f6 fdc4 	bl	80001f0 <memchr>
 8009668:	b138      	cbz	r0, 800967a <_vfiprintf_r+0x176>
 800966a:	9b04      	ldr	r3, [sp, #16]
 800966c:	eba0 000a 	sub.w	r0, r0, sl
 8009670:	2240      	movs	r2, #64	@ 0x40
 8009672:	4082      	lsls	r2, r0
 8009674:	4313      	orrs	r3, r2
 8009676:	3401      	adds	r4, #1
 8009678:	9304      	str	r3, [sp, #16]
 800967a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800967e:	4829      	ldr	r0, [pc, #164]	@ (8009724 <_vfiprintf_r+0x220>)
 8009680:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009684:	2206      	movs	r2, #6
 8009686:	f7f6 fdb3 	bl	80001f0 <memchr>
 800968a:	2800      	cmp	r0, #0
 800968c:	d03f      	beq.n	800970e <_vfiprintf_r+0x20a>
 800968e:	4b26      	ldr	r3, [pc, #152]	@ (8009728 <_vfiprintf_r+0x224>)
 8009690:	bb1b      	cbnz	r3, 80096da <_vfiprintf_r+0x1d6>
 8009692:	9b03      	ldr	r3, [sp, #12]
 8009694:	3307      	adds	r3, #7
 8009696:	f023 0307 	bic.w	r3, r3, #7
 800969a:	3308      	adds	r3, #8
 800969c:	9303      	str	r3, [sp, #12]
 800969e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096a0:	443b      	add	r3, r7
 80096a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80096a4:	e76a      	b.n	800957c <_vfiprintf_r+0x78>
 80096a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80096aa:	460c      	mov	r4, r1
 80096ac:	2001      	movs	r0, #1
 80096ae:	e7a8      	b.n	8009602 <_vfiprintf_r+0xfe>
 80096b0:	2300      	movs	r3, #0
 80096b2:	3401      	adds	r4, #1
 80096b4:	9305      	str	r3, [sp, #20]
 80096b6:	4619      	mov	r1, r3
 80096b8:	f04f 0c0a 	mov.w	ip, #10
 80096bc:	4620      	mov	r0, r4
 80096be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096c2:	3a30      	subs	r2, #48	@ 0x30
 80096c4:	2a09      	cmp	r2, #9
 80096c6:	d903      	bls.n	80096d0 <_vfiprintf_r+0x1cc>
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d0c6      	beq.n	800965a <_vfiprintf_r+0x156>
 80096cc:	9105      	str	r1, [sp, #20]
 80096ce:	e7c4      	b.n	800965a <_vfiprintf_r+0x156>
 80096d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80096d4:	4604      	mov	r4, r0
 80096d6:	2301      	movs	r3, #1
 80096d8:	e7f0      	b.n	80096bc <_vfiprintf_r+0x1b8>
 80096da:	ab03      	add	r3, sp, #12
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	462a      	mov	r2, r5
 80096e0:	4b12      	ldr	r3, [pc, #72]	@ (800972c <_vfiprintf_r+0x228>)
 80096e2:	a904      	add	r1, sp, #16
 80096e4:	4630      	mov	r0, r6
 80096e6:	f7fb fe81 	bl	80053ec <_printf_float>
 80096ea:	4607      	mov	r7, r0
 80096ec:	1c78      	adds	r0, r7, #1
 80096ee:	d1d6      	bne.n	800969e <_vfiprintf_r+0x19a>
 80096f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096f2:	07d9      	lsls	r1, r3, #31
 80096f4:	d405      	bmi.n	8009702 <_vfiprintf_r+0x1fe>
 80096f6:	89ab      	ldrh	r3, [r5, #12]
 80096f8:	059a      	lsls	r2, r3, #22
 80096fa:	d402      	bmi.n	8009702 <_vfiprintf_r+0x1fe>
 80096fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096fe:	f7fc fe1b 	bl	8006338 <__retarget_lock_release_recursive>
 8009702:	89ab      	ldrh	r3, [r5, #12]
 8009704:	065b      	lsls	r3, r3, #25
 8009706:	f53f af1f 	bmi.w	8009548 <_vfiprintf_r+0x44>
 800970a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800970c:	e71e      	b.n	800954c <_vfiprintf_r+0x48>
 800970e:	ab03      	add	r3, sp, #12
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	462a      	mov	r2, r5
 8009714:	4b05      	ldr	r3, [pc, #20]	@ (800972c <_vfiprintf_r+0x228>)
 8009716:	a904      	add	r1, sp, #16
 8009718:	4630      	mov	r0, r6
 800971a:	f7fc f8ff 	bl	800591c <_printf_i>
 800971e:	e7e4      	b.n	80096ea <_vfiprintf_r+0x1e6>
 8009720:	08009c5d 	.word	0x08009c5d
 8009724:	08009c67 	.word	0x08009c67
 8009728:	080053ed 	.word	0x080053ed
 800972c:	080094e1 	.word	0x080094e1
 8009730:	08009c63 	.word	0x08009c63

08009734 <__swbuf_r>:
 8009734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009736:	460e      	mov	r6, r1
 8009738:	4614      	mov	r4, r2
 800973a:	4605      	mov	r5, r0
 800973c:	b118      	cbz	r0, 8009746 <__swbuf_r+0x12>
 800973e:	6a03      	ldr	r3, [r0, #32]
 8009740:	b90b      	cbnz	r3, 8009746 <__swbuf_r+0x12>
 8009742:	f7fc fca3 	bl	800608c <__sinit>
 8009746:	69a3      	ldr	r3, [r4, #24]
 8009748:	60a3      	str	r3, [r4, #8]
 800974a:	89a3      	ldrh	r3, [r4, #12]
 800974c:	071a      	lsls	r2, r3, #28
 800974e:	d501      	bpl.n	8009754 <__swbuf_r+0x20>
 8009750:	6923      	ldr	r3, [r4, #16]
 8009752:	b943      	cbnz	r3, 8009766 <__swbuf_r+0x32>
 8009754:	4621      	mov	r1, r4
 8009756:	4628      	mov	r0, r5
 8009758:	f000 f82a 	bl	80097b0 <__swsetup_r>
 800975c:	b118      	cbz	r0, 8009766 <__swbuf_r+0x32>
 800975e:	f04f 37ff 	mov.w	r7, #4294967295
 8009762:	4638      	mov	r0, r7
 8009764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	6922      	ldr	r2, [r4, #16]
 800976a:	1a98      	subs	r0, r3, r2
 800976c:	6963      	ldr	r3, [r4, #20]
 800976e:	b2f6      	uxtb	r6, r6
 8009770:	4283      	cmp	r3, r0
 8009772:	4637      	mov	r7, r6
 8009774:	dc05      	bgt.n	8009782 <__swbuf_r+0x4e>
 8009776:	4621      	mov	r1, r4
 8009778:	4628      	mov	r0, r5
 800977a:	f7ff fa47 	bl	8008c0c <_fflush_r>
 800977e:	2800      	cmp	r0, #0
 8009780:	d1ed      	bne.n	800975e <__swbuf_r+0x2a>
 8009782:	68a3      	ldr	r3, [r4, #8]
 8009784:	3b01      	subs	r3, #1
 8009786:	60a3      	str	r3, [r4, #8]
 8009788:	6823      	ldr	r3, [r4, #0]
 800978a:	1c5a      	adds	r2, r3, #1
 800978c:	6022      	str	r2, [r4, #0]
 800978e:	701e      	strb	r6, [r3, #0]
 8009790:	6962      	ldr	r2, [r4, #20]
 8009792:	1c43      	adds	r3, r0, #1
 8009794:	429a      	cmp	r2, r3
 8009796:	d004      	beq.n	80097a2 <__swbuf_r+0x6e>
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	07db      	lsls	r3, r3, #31
 800979c:	d5e1      	bpl.n	8009762 <__swbuf_r+0x2e>
 800979e:	2e0a      	cmp	r6, #10
 80097a0:	d1df      	bne.n	8009762 <__swbuf_r+0x2e>
 80097a2:	4621      	mov	r1, r4
 80097a4:	4628      	mov	r0, r5
 80097a6:	f7ff fa31 	bl	8008c0c <_fflush_r>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	d0d9      	beq.n	8009762 <__swbuf_r+0x2e>
 80097ae:	e7d6      	b.n	800975e <__swbuf_r+0x2a>

080097b0 <__swsetup_r>:
 80097b0:	b538      	push	{r3, r4, r5, lr}
 80097b2:	4b29      	ldr	r3, [pc, #164]	@ (8009858 <__swsetup_r+0xa8>)
 80097b4:	4605      	mov	r5, r0
 80097b6:	6818      	ldr	r0, [r3, #0]
 80097b8:	460c      	mov	r4, r1
 80097ba:	b118      	cbz	r0, 80097c4 <__swsetup_r+0x14>
 80097bc:	6a03      	ldr	r3, [r0, #32]
 80097be:	b90b      	cbnz	r3, 80097c4 <__swsetup_r+0x14>
 80097c0:	f7fc fc64 	bl	800608c <__sinit>
 80097c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097c8:	0719      	lsls	r1, r3, #28
 80097ca:	d422      	bmi.n	8009812 <__swsetup_r+0x62>
 80097cc:	06da      	lsls	r2, r3, #27
 80097ce:	d407      	bmi.n	80097e0 <__swsetup_r+0x30>
 80097d0:	2209      	movs	r2, #9
 80097d2:	602a      	str	r2, [r5, #0]
 80097d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097d8:	81a3      	strh	r3, [r4, #12]
 80097da:	f04f 30ff 	mov.w	r0, #4294967295
 80097de:	e033      	b.n	8009848 <__swsetup_r+0x98>
 80097e0:	0758      	lsls	r0, r3, #29
 80097e2:	d512      	bpl.n	800980a <__swsetup_r+0x5a>
 80097e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097e6:	b141      	cbz	r1, 80097fa <__swsetup_r+0x4a>
 80097e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097ec:	4299      	cmp	r1, r3
 80097ee:	d002      	beq.n	80097f6 <__swsetup_r+0x46>
 80097f0:	4628      	mov	r0, r5
 80097f2:	f7fd fc01 	bl	8006ff8 <_free_r>
 80097f6:	2300      	movs	r3, #0
 80097f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009800:	81a3      	strh	r3, [r4, #12]
 8009802:	2300      	movs	r3, #0
 8009804:	6063      	str	r3, [r4, #4]
 8009806:	6923      	ldr	r3, [r4, #16]
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	89a3      	ldrh	r3, [r4, #12]
 800980c:	f043 0308 	orr.w	r3, r3, #8
 8009810:	81a3      	strh	r3, [r4, #12]
 8009812:	6923      	ldr	r3, [r4, #16]
 8009814:	b94b      	cbnz	r3, 800982a <__swsetup_r+0x7a>
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800981c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009820:	d003      	beq.n	800982a <__swsetup_r+0x7a>
 8009822:	4621      	mov	r1, r4
 8009824:	4628      	mov	r0, r5
 8009826:	f000 f883 	bl	8009930 <__smakebuf_r>
 800982a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800982e:	f013 0201 	ands.w	r2, r3, #1
 8009832:	d00a      	beq.n	800984a <__swsetup_r+0x9a>
 8009834:	2200      	movs	r2, #0
 8009836:	60a2      	str	r2, [r4, #8]
 8009838:	6962      	ldr	r2, [r4, #20]
 800983a:	4252      	negs	r2, r2
 800983c:	61a2      	str	r2, [r4, #24]
 800983e:	6922      	ldr	r2, [r4, #16]
 8009840:	b942      	cbnz	r2, 8009854 <__swsetup_r+0xa4>
 8009842:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009846:	d1c5      	bne.n	80097d4 <__swsetup_r+0x24>
 8009848:	bd38      	pop	{r3, r4, r5, pc}
 800984a:	0799      	lsls	r1, r3, #30
 800984c:	bf58      	it	pl
 800984e:	6962      	ldrpl	r2, [r4, #20]
 8009850:	60a2      	str	r2, [r4, #8]
 8009852:	e7f4      	b.n	800983e <__swsetup_r+0x8e>
 8009854:	2000      	movs	r0, #0
 8009856:	e7f7      	b.n	8009848 <__swsetup_r+0x98>
 8009858:	20000024 	.word	0x20000024

0800985c <_raise_r>:
 800985c:	291f      	cmp	r1, #31
 800985e:	b538      	push	{r3, r4, r5, lr}
 8009860:	4605      	mov	r5, r0
 8009862:	460c      	mov	r4, r1
 8009864:	d904      	bls.n	8009870 <_raise_r+0x14>
 8009866:	2316      	movs	r3, #22
 8009868:	6003      	str	r3, [r0, #0]
 800986a:	f04f 30ff 	mov.w	r0, #4294967295
 800986e:	bd38      	pop	{r3, r4, r5, pc}
 8009870:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009872:	b112      	cbz	r2, 800987a <_raise_r+0x1e>
 8009874:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009878:	b94b      	cbnz	r3, 800988e <_raise_r+0x32>
 800987a:	4628      	mov	r0, r5
 800987c:	f000 f830 	bl	80098e0 <_getpid_r>
 8009880:	4622      	mov	r2, r4
 8009882:	4601      	mov	r1, r0
 8009884:	4628      	mov	r0, r5
 8009886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800988a:	f000 b817 	b.w	80098bc <_kill_r>
 800988e:	2b01      	cmp	r3, #1
 8009890:	d00a      	beq.n	80098a8 <_raise_r+0x4c>
 8009892:	1c59      	adds	r1, r3, #1
 8009894:	d103      	bne.n	800989e <_raise_r+0x42>
 8009896:	2316      	movs	r3, #22
 8009898:	6003      	str	r3, [r0, #0]
 800989a:	2001      	movs	r0, #1
 800989c:	e7e7      	b.n	800986e <_raise_r+0x12>
 800989e:	2100      	movs	r1, #0
 80098a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80098a4:	4620      	mov	r0, r4
 80098a6:	4798      	blx	r3
 80098a8:	2000      	movs	r0, #0
 80098aa:	e7e0      	b.n	800986e <_raise_r+0x12>

080098ac <raise>:
 80098ac:	4b02      	ldr	r3, [pc, #8]	@ (80098b8 <raise+0xc>)
 80098ae:	4601      	mov	r1, r0
 80098b0:	6818      	ldr	r0, [r3, #0]
 80098b2:	f7ff bfd3 	b.w	800985c <_raise_r>
 80098b6:	bf00      	nop
 80098b8:	20000024 	.word	0x20000024

080098bc <_kill_r>:
 80098bc:	b538      	push	{r3, r4, r5, lr}
 80098be:	4d07      	ldr	r5, [pc, #28]	@ (80098dc <_kill_r+0x20>)
 80098c0:	2300      	movs	r3, #0
 80098c2:	4604      	mov	r4, r0
 80098c4:	4608      	mov	r0, r1
 80098c6:	4611      	mov	r1, r2
 80098c8:	602b      	str	r3, [r5, #0]
 80098ca:	f7f8 fc45 	bl	8002158 <_kill>
 80098ce:	1c43      	adds	r3, r0, #1
 80098d0:	d102      	bne.n	80098d8 <_kill_r+0x1c>
 80098d2:	682b      	ldr	r3, [r5, #0]
 80098d4:	b103      	cbz	r3, 80098d8 <_kill_r+0x1c>
 80098d6:	6023      	str	r3, [r4, #0]
 80098d8:	bd38      	pop	{r3, r4, r5, pc}
 80098da:	bf00      	nop
 80098dc:	200004f4 	.word	0x200004f4

080098e0 <_getpid_r>:
 80098e0:	f7f8 bc32 	b.w	8002148 <_getpid>

080098e4 <__swhatbuf_r>:
 80098e4:	b570      	push	{r4, r5, r6, lr}
 80098e6:	460c      	mov	r4, r1
 80098e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ec:	2900      	cmp	r1, #0
 80098ee:	b096      	sub	sp, #88	@ 0x58
 80098f0:	4615      	mov	r5, r2
 80098f2:	461e      	mov	r6, r3
 80098f4:	da0d      	bge.n	8009912 <__swhatbuf_r+0x2e>
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80098fc:	f04f 0100 	mov.w	r1, #0
 8009900:	bf14      	ite	ne
 8009902:	2340      	movne	r3, #64	@ 0x40
 8009904:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009908:	2000      	movs	r0, #0
 800990a:	6031      	str	r1, [r6, #0]
 800990c:	602b      	str	r3, [r5, #0]
 800990e:	b016      	add	sp, #88	@ 0x58
 8009910:	bd70      	pop	{r4, r5, r6, pc}
 8009912:	466a      	mov	r2, sp
 8009914:	f000 f848 	bl	80099a8 <_fstat_r>
 8009918:	2800      	cmp	r0, #0
 800991a:	dbec      	blt.n	80098f6 <__swhatbuf_r+0x12>
 800991c:	9901      	ldr	r1, [sp, #4]
 800991e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009922:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009926:	4259      	negs	r1, r3
 8009928:	4159      	adcs	r1, r3
 800992a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800992e:	e7eb      	b.n	8009908 <__swhatbuf_r+0x24>

08009930 <__smakebuf_r>:
 8009930:	898b      	ldrh	r3, [r1, #12]
 8009932:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009934:	079d      	lsls	r5, r3, #30
 8009936:	4606      	mov	r6, r0
 8009938:	460c      	mov	r4, r1
 800993a:	d507      	bpl.n	800994c <__smakebuf_r+0x1c>
 800993c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009940:	6023      	str	r3, [r4, #0]
 8009942:	6123      	str	r3, [r4, #16]
 8009944:	2301      	movs	r3, #1
 8009946:	6163      	str	r3, [r4, #20]
 8009948:	b003      	add	sp, #12
 800994a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800994c:	ab01      	add	r3, sp, #4
 800994e:	466a      	mov	r2, sp
 8009950:	f7ff ffc8 	bl	80098e4 <__swhatbuf_r>
 8009954:	9f00      	ldr	r7, [sp, #0]
 8009956:	4605      	mov	r5, r0
 8009958:	4639      	mov	r1, r7
 800995a:	4630      	mov	r0, r6
 800995c:	f7fd fbc0 	bl	80070e0 <_malloc_r>
 8009960:	b948      	cbnz	r0, 8009976 <__smakebuf_r+0x46>
 8009962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009966:	059a      	lsls	r2, r3, #22
 8009968:	d4ee      	bmi.n	8009948 <__smakebuf_r+0x18>
 800996a:	f023 0303 	bic.w	r3, r3, #3
 800996e:	f043 0302 	orr.w	r3, r3, #2
 8009972:	81a3      	strh	r3, [r4, #12]
 8009974:	e7e2      	b.n	800993c <__smakebuf_r+0xc>
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	6020      	str	r0, [r4, #0]
 800997a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800997e:	81a3      	strh	r3, [r4, #12]
 8009980:	9b01      	ldr	r3, [sp, #4]
 8009982:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009986:	b15b      	cbz	r3, 80099a0 <__smakebuf_r+0x70>
 8009988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800998c:	4630      	mov	r0, r6
 800998e:	f000 f81d 	bl	80099cc <_isatty_r>
 8009992:	b128      	cbz	r0, 80099a0 <__smakebuf_r+0x70>
 8009994:	89a3      	ldrh	r3, [r4, #12]
 8009996:	f023 0303 	bic.w	r3, r3, #3
 800999a:	f043 0301 	orr.w	r3, r3, #1
 800999e:	81a3      	strh	r3, [r4, #12]
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	431d      	orrs	r5, r3
 80099a4:	81a5      	strh	r5, [r4, #12]
 80099a6:	e7cf      	b.n	8009948 <__smakebuf_r+0x18>

080099a8 <_fstat_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4d07      	ldr	r5, [pc, #28]	@ (80099c8 <_fstat_r+0x20>)
 80099ac:	2300      	movs	r3, #0
 80099ae:	4604      	mov	r4, r0
 80099b0:	4608      	mov	r0, r1
 80099b2:	4611      	mov	r1, r2
 80099b4:	602b      	str	r3, [r5, #0]
 80099b6:	f7f8 fc2f 	bl	8002218 <_fstat>
 80099ba:	1c43      	adds	r3, r0, #1
 80099bc:	d102      	bne.n	80099c4 <_fstat_r+0x1c>
 80099be:	682b      	ldr	r3, [r5, #0]
 80099c0:	b103      	cbz	r3, 80099c4 <_fstat_r+0x1c>
 80099c2:	6023      	str	r3, [r4, #0]
 80099c4:	bd38      	pop	{r3, r4, r5, pc}
 80099c6:	bf00      	nop
 80099c8:	200004f4 	.word	0x200004f4

080099cc <_isatty_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4d06      	ldr	r5, [pc, #24]	@ (80099e8 <_isatty_r+0x1c>)
 80099d0:	2300      	movs	r3, #0
 80099d2:	4604      	mov	r4, r0
 80099d4:	4608      	mov	r0, r1
 80099d6:	602b      	str	r3, [r5, #0]
 80099d8:	f7f8 fc2e 	bl	8002238 <_isatty>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_isatty_r+0x1a>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_isatty_r+0x1a>
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	200004f4 	.word	0x200004f4

080099ec <_init>:
 80099ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ee:	bf00      	nop
 80099f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f2:	bc08      	pop	{r3}
 80099f4:	469e      	mov	lr, r3
 80099f6:	4770      	bx	lr

080099f8 <_fini>:
 80099f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fa:	bf00      	nop
 80099fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099fe:	bc08      	pop	{r3}
 8009a00:	469e      	mov	lr, r3
 8009a02:	4770      	bx	lr
