
smart-scale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d50  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003f00  08003f00  00004f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fa0  08003fa0  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003fa0  08003fa0  00004fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fa8  08003fa8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa8  08003fa8  00004fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fac  08003fac  00004fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003fb0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          0000020c  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a2eb  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a6d  00000000  00000000  0000f377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  00010de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000728  00000000  00000000  00011740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000234f9  00000000  00000000  00011e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b0e2  00000000  00000000  00035361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d437a  00000000  00000000  00040443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001147bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002aa8  00000000  00000000  00114800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  001172a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ee8 	.word	0x08003ee8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08003ee8 	.word	0x08003ee8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b09d      	sub	sp, #116	@ 0x74
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fdd3 	bl	800117c <HAL_Init>

  /* USER CODE BEGIN Init */
  TM_MFRC522_Init();
 80005d6:	f000 fae3 	bl	8000ba0 <TM_MFRC522_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f865 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f933 	bl	8000848 <MX_GPIO_Init>
  MX_SPI4_Init();
 80005e2:	f000 f8d1 	bl	8000788 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 80005e6:	f000 f905 	bl	80007f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char msg[100];
  sprintf(msg, "RC522 RFID Reader Initialized\r\n");
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	4929      	ldr	r1, [pc, #164]	@ (8000694 <main+0xc8>)
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 ffda 	bl	80035a8 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fdfa 	bl	80001f0 <strlen>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	1d39      	adds	r1, r7, #4
 8000602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000606:	4824      	ldr	r0, [pc, #144]	@ (8000698 <main+0xcc>)
 8000608:	f002 fc12 	bl	8002e30 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	uint8_t CardID[4];
	HAL_Delay(100);
 800060c:	2064      	movs	r0, #100	@ 0x64
 800060e:	f000 fe27 	bl	8001260 <HAL_Delay>

	if (TM_MFRC522_Check(CardID) == MI_OK) {
 8000612:	463b      	mov	r3, r7
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fae9 	bl	8000bec <TM_MFRC522_Check>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d120      	bne.n	8000662 <main+0x96>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000626:	481d      	ldr	r0, [pc, #116]	@ (800069c <main+0xd0>)
 8000628:	f001 f8d0 	bl	80017cc <HAL_GPIO_WritePin>
		sprintf(msg, "Card UID: %02X%02X%02X%02X\r\n", CardID[0], CardID[1], CardID[2], CardID[3]);
 800062c:	783b      	ldrb	r3, [r7, #0]
 800062e:	4619      	mov	r1, r3
 8000630:	787b      	ldrb	r3, [r7, #1]
 8000632:	461c      	mov	r4, r3
 8000634:	78bb      	ldrb	r3, [r7, #2]
 8000636:	78fa      	ldrb	r2, [r7, #3]
 8000638:	1d38      	adds	r0, r7, #4
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	4623      	mov	r3, r4
 8000640:	460a      	mov	r2, r1
 8000642:	4917      	ldr	r1, [pc, #92]	@ (80006a0 <main+0xd4>)
 8000644:	f002 ffb0 	bl	80035a8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff fdd0 	bl	80001f0 <strlen>
 8000650:	4603      	mov	r3, r0
 8000652:	b29a      	uxth	r2, r3
 8000654:	1d39      	adds	r1, r7, #4
 8000656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800065a:	480f      	ldr	r0, [pc, #60]	@ (8000698 <main+0xcc>)
 800065c:	f002 fbe8 	bl	8002e30 <HAL_UART_Transmit>
 8000660:	e7d4      	b.n	800060c <main+0x40>
	} else {
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000668:	480c      	ldr	r0, [pc, #48]	@ (800069c <main+0xd0>)
 800066a:	f001 f8af 	bl	80017cc <HAL_GPIO_WritePin>
		sprintf(msg, "No Card Found!\r\n");
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	490c      	ldr	r1, [pc, #48]	@ (80006a4 <main+0xd8>)
 8000672:	4618      	mov	r0, r3
 8000674:	f002 ff98 	bl	80035a8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fdb8 	bl	80001f0 <strlen>
 8000680:	4603      	mov	r3, r0
 8000682:	b29a      	uxth	r2, r3
 8000684:	1d39      	adds	r1, r7, #4
 8000686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068a:	4803      	ldr	r0, [pc, #12]	@ (8000698 <main+0xcc>)
 800068c:	f002 fbd0 	bl	8002e30 <HAL_UART_Transmit>
  {
 8000690:	e7bc      	b.n	800060c <main+0x40>
 8000692:	bf00      	nop
 8000694:	08003f00 	.word	0x08003f00
 8000698:	200000d0 	.word	0x200000d0
 800069c:	40021800 	.word	0x40021800
 80006a0:	08003f20 	.word	0x08003f20
 80006a4:	08003f40 	.word	0x08003f40

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	@ 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2230      	movs	r2, #48	@ 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 ff98 	bl	80035ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000780 <SystemClock_Config+0xd8>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	4a2a      	ldr	r2, [pc, #168]	@ (8000780 <SystemClock_Config+0xd8>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	@ 0x40
 80006dc:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <SystemClock_Config+0xd8>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	4b25      	ldr	r3, [pc, #148]	@ (8000784 <SystemClock_Config+0xdc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a24      	ldr	r2, [pc, #144]	@ (8000784 <SystemClock_Config+0xdc>)
 80006f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <SystemClock_Config+0xdc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000704:	2301      	movs	r3, #1
 8000706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000708:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800070c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070e:	2302      	movs	r3, #2
 8000710:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000712:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000718:	2304      	movs	r3, #4
 800071a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800071c:	23b4      	movs	r3, #180	@ 0xb4
 800071e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f001 f8b7 	bl	80018a0 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000738:	f000 f8fc 	bl	8000934 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800073c:	f001 f860 	bl	8001800 <HAL_PWREx_EnableOverDrive>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000746:	f000 f8f5 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2302      	movs	r3, #2
 8000750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000756:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800075c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000760:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2105      	movs	r1, #5
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fb11 	bl	8001d90 <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000774:	f000 f8de 	bl	8000934 <Error_Handler>
  }
}
 8000778:	bf00      	nop
 800077a:	3750      	adds	r7, #80	@ 0x50
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800078c:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_SPI4_Init+0x64>)
 800078e:	4a18      	ldr	r2, [pc, #96]	@ (80007f0 <MX_SPI4_Init+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <MX_SPI4_Init+0x64>)
 8000794:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000798:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_SPI4_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_SPI4_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_SPI4_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_SPI4_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_SPI4_Init+0x64>)
 80007b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_SPI4_Init+0x64>)
 80007bc:	2218      	movs	r2, #24
 80007be:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <MX_SPI4_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_SPI4_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <MX_SPI4_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_SPI4_Init+0x64>)
 80007d4:	220a      	movs	r2, #10
 80007d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	@ (80007ec <MX_SPI4_Init+0x64>)
 80007da:	f001 fcf9 	bl	80021d0 <HAL_SPI_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80007e4:	f000 f8a6 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000078 	.word	0x20000078
 80007f0:	40013400 	.word	0x40013400

080007f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <MX_USART1_UART_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 800082c:	f002 fab0 	bl	8002d90 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000836:	f000 f87d 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000d0 	.word	0x200000d0
 8000844:	40011000 	.word	0x40011000

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b31      	ldr	r3, [pc, #196]	@ (8000928 <MX_GPIO_Init+0xe0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a30      	ldr	r2, [pc, #192]	@ (8000928 <MX_GPIO_Init+0xe0>)
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b2e      	ldr	r3, [pc, #184]	@ (8000928 <MX_GPIO_Init+0xe0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b2a      	ldr	r3, [pc, #168]	@ (8000928 <MX_GPIO_Init+0xe0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a29      	ldr	r2, [pc, #164]	@ (8000928 <MX_GPIO_Init+0xe0>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b27      	ldr	r3, [pc, #156]	@ (8000928 <MX_GPIO_Init+0xe0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b23      	ldr	r3, [pc, #140]	@ (8000928 <MX_GPIO_Init+0xe0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a22      	ldr	r2, [pc, #136]	@ (8000928 <MX_GPIO_Init+0xe0>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b20      	ldr	r3, [pc, #128]	@ (8000928 <MX_GPIO_Init+0xe0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000928 <MX_GPIO_Init+0xe0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a1b      	ldr	r2, [pc, #108]	@ (8000928 <MX_GPIO_Init+0xe0>)
 80008bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b19      	ldr	r3, [pc, #100]	@ (8000928 <MX_GPIO_Init+0xe0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2110      	movs	r1, #16
 80008d2:	4816      	ldr	r0, [pc, #88]	@ (800092c <MX_GPIO_Init+0xe4>)
 80008d4:	f000 ff7a 	bl	80017cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80008de:	4814      	ldr	r0, [pc, #80]	@ (8000930 <MX_GPIO_Init+0xe8>)
 80008e0:	f000 ff74 	bl	80017cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008e4:	2310      	movs	r3, #16
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	480c      	ldr	r0, [pc, #48]	@ (800092c <MX_GPIO_Init+0xe4>)
 80008fc:	f000 fdba 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000900:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_GPIO_Init+0xe8>)
 800091a:	f000 fdab 	bl	8001474 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	@ 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40021000 	.word	0x40021000
 8000930:	40021800 	.word	0x40021800

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094e:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <HAL_MspInit+0x4c>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000954:	6453      	str	r3, [r2, #68]	@ 0x44
 8000956:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	4a08      	ldr	r2, [pc, #32]	@ (800098c <HAL_MspInit+0x4c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	@ 0x40
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a19      	ldr	r2, [pc, #100]	@ (8000a14 <HAL_SPI_MspInit+0x84>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d12b      	bne.n	8000a0a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <HAL_SPI_MspInit+0x88>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	4a17      	ldr	r2, [pc, #92]	@ (8000a18 <HAL_SPI_MspInit+0x88>)
 80009bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c2:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <HAL_SPI_MspInit+0x88>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <HAL_SPI_MspInit+0x88>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a10      	ldr	r2, [pc, #64]	@ (8000a18 <HAL_SPI_MspInit+0x88>)
 80009d8:	f043 0310 	orr.w	r3, r3, #16
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <HAL_SPI_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80009ea:	2364      	movs	r3, #100	@ 0x64
 80009ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80009fa:	2305      	movs	r3, #5
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <HAL_SPI_MspInit+0x8c>)
 8000a06:	f000 fd35 	bl	8001474 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	@ 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40013400 	.word	0x40013400
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40021000 	.word	0x40021000

08000a20 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a19      	ldr	r2, [pc, #100]	@ (8000aa4 <HAL_UART_MspInit+0x84>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d12c      	bne.n	8000a9c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4a:	4a17      	ldr	r2, [pc, #92]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a4c:	f043 0310 	orr.w	r3, r3, #16
 8000a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	f003 0310 	and.w	r3, r3, #16
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a10      	ldr	r2, [pc, #64]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a7a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <HAL_UART_MspInit+0x8c>)
 8000a98:	f000 fcec 	bl	8001474 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	@ 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40011000 	.word	0x40011000
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b06:	f000 fb8b 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	@ (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	@ (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f002 fd5c 	bl	80035fc <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20030000 	.word	0x20030000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	20000118 	.word	0x20000118
 8000b78:	20000268 	.word	0x20000268

08000b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <TM_MFRC522_Init>:
 */
#include "tm_stm32f4_mfrc522.h"

extern SPI_HandleTypeDef hspi4;

void TM_MFRC522_Init(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	TM_MFRC522_InitPins();
 8000ba4:	f000 f83c 	bl	8000c20 <TM_MFRC522_InitPins>
	//TM_SPI_Init(MFRC522_SPI, MFRC522_SPI_PINSPACK);

	TM_MFRC522_Reset();
 8000ba8:	f000 f921 	bl	8000dee <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8000bac:	218d      	movs	r1, #141	@ 0x8d
 8000bae:	202a      	movs	r0, #42	@ 0x2a
 8000bb0:	f000 f842 	bl	8000c38 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8000bb4:	213e      	movs	r1, #62	@ 0x3e
 8000bb6:	202b      	movs	r0, #43	@ 0x2b
 8000bb8:	f000 f83e 	bl	8000c38 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8000bbc:	211e      	movs	r1, #30
 8000bbe:	202d      	movs	r0, #45	@ 0x2d
 8000bc0:	f000 f83a 	bl	8000c38 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	202c      	movs	r0, #44	@ 0x2c
 8000bc8:	f000 f836 	bl	8000c38 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8000bcc:	2170      	movs	r1, #112	@ 0x70
 8000bce:	2026      	movs	r0, #38	@ 0x26
 8000bd0:	f000 f832 	bl	8000c38 <TM_MFRC522_WriteRegister>
	
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8000bd4:	2140      	movs	r1, #64	@ 0x40
 8000bd6:	2015      	movs	r0, #21
 8000bd8:	f000 f82e 	bl	8000c38 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8000bdc:	213d      	movs	r1, #61	@ 0x3d
 8000bde:	2011      	movs	r0, #17
 8000be0:	f000 f82a 	bl	8000c38 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8000be4:	f000 f8ee 	bl	8000dc4 <TM_MFRC522_AntennaOn>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type
	status = TM_MFRC522_Request(PICC_REQIDL, id);	
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	2026      	movs	r0, #38	@ 0x26
 8000bf8:	f000 f901 	bl	8000dfe <TM_MFRC522_Request>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d104      	bne.n	8000c10 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);	
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f000 f9ed 	bl	8000fe6 <TM_MFRC522_Anticoll>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
 8000c10:	f000 fa6f 	bl	80010f2 <TM_MFRC522_Halt>

	return status;
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <TM_MFRC522_InitPins>:
		}
	}
	return MI_OK;
}

void TM_MFRC522_InitPins(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	//CS pin
//	GPIO_InitStruct.GPIO_Pin = MFRC522_CS_PIN;
//	GPIO_Init(MFRC522_CS_PORT, &GPIO_InitStruct);

	MFRC522_CS_HIGH;
 8000c24:	2201      	movs	r2, #1
 8000c26:	2110      	movs	r1, #16
 8000c28:	4802      	ldr	r0, [pc, #8]	@ (8000c34 <TM_MFRC522_InitPins+0x14>)
 8000c2a:	f000 fdcf 	bl	80017cc <HAL_GPIO_WritePin>
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <TM_MFRC522_WriteRegister>:

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	460a      	mov	r2, r1
 8000c42:	71fb      	strb	r3, [r7, #7]
 8000c44:	4613      	mov	r3, r2
 8000c46:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	481a      	ldr	r0, [pc, #104]	@ (8000cb8 <TM_MFRC522_WriteRegister+0x80>)
 8000c4e:	f000 fdbd 	bl	80017cc <HAL_GPIO_WritePin>
	//Send address
	uint8_t buf = (addr << 1) & 0x7E;
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef ret = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8000c64:	f107 010e 	add.w	r1, r7, #14
 8000c68:	230a      	movs	r3, #10
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4813      	ldr	r0, [pc, #76]	@ (8000cbc <TM_MFRC522_WriteRegister+0x84>)
 8000c6e:	f001 fb38 	bl	80022e2 <HAL_SPI_Transmit>
 8000c72:	4603      	mov	r3, r0
 8000c74:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8000c76:	bf00      	nop
 8000c78:	4810      	ldr	r0, [pc, #64]	@ (8000cbc <TM_MFRC522_WriteRegister+0x84>)
 8000c7a:	f001 ff38 	bl	8002aee <HAL_SPI_GetState>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d0f7      	beq.n	8000c78 <TM_MFRC522_WriteRegister+0x40>
	//Send data	
	HAL_SPI_Transmit(&hspi4, &val, 1, 10);
 8000c88:	1db9      	adds	r1, r7, #6
 8000c8a:	230a      	movs	r3, #10
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	480b      	ldr	r0, [pc, #44]	@ (8000cbc <TM_MFRC522_WriteRegister+0x84>)
 8000c90:	f001 fb27 	bl	80022e2 <HAL_SPI_Transmit>
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8000c94:	bf00      	nop
 8000c96:	4809      	ldr	r0, [pc, #36]	@ (8000cbc <TM_MFRC522_WriteRegister+0x84>)
 8000c98:	f001 ff29 	bl	8002aee <HAL_SPI_GetState>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d0f7      	beq.n	8000c96 <TM_MFRC522_WriteRegister+0x5e>
	//CS high
	MFRC522_CS_HIGH;
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2110      	movs	r1, #16
 8000caa:	4803      	ldr	r0, [pc, #12]	@ (8000cb8 <TM_MFRC522_WriteRegister+0x80>)
 8000cac:	f000 fd8e 	bl	80017cc <HAL_GPIO_WritePin>
}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	20000078 	.word	0x20000078

08000cc0 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2110      	movs	r1, #16
 8000cce:	481f      	ldr	r0, [pc, #124]	@ (8000d4c <TM_MFRC522_ReadRegister+0x8c>)
 8000cd0:	f000 fd7c 	bl	80017cc <HAL_GPIO_WritePin>

	uint8_t buf = ((addr << 1) & 0x7E) | 0x80;
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8000cf0:	f107 010d 	add.w	r1, r7, #13
 8000cf4:	230a      	movs	r3, #10
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4815      	ldr	r0, [pc, #84]	@ (8000d50 <TM_MFRC522_ReadRegister+0x90>)
 8000cfa:	f001 faf2 	bl	80022e2 <HAL_SPI_Transmit>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8000d02:	bf00      	nop
 8000d04:	4812      	ldr	r0, [pc, #72]	@ (8000d50 <TM_MFRC522_ReadRegister+0x90>)
 8000d06:	f001 fef2 	bl	8002aee <HAL_SPI_GetState>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d0f7      	beq.n	8000d04 <TM_MFRC522_ReadRegister+0x44>
	ret = HAL_SPI_Receive(&hspi4, &val, 1, 10);
 8000d14:	f107 010e 	add.w	r1, r7, #14
 8000d18:	230a      	movs	r3, #10
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	480c      	ldr	r0, [pc, #48]	@ (8000d50 <TM_MFRC522_ReadRegister+0x90>)
 8000d1e:	f001 fc24 	bl	800256a <HAL_SPI_Receive>
 8000d22:	4603      	mov	r3, r0
 8000d24:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8000d26:	bf00      	nop
 8000d28:	4809      	ldr	r0, [pc, #36]	@ (8000d50 <TM_MFRC522_ReadRegister+0x90>)
 8000d2a:	f001 fee0 	bl	8002aee <HAL_SPI_GetState>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	73fb      	strb	r3, [r7, #15]
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d0f7      	beq.n	8000d28 <TM_MFRC522_ReadRegister+0x68>
	//CS high
	MFRC522_CS_HIGH;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2110      	movs	r1, #16
 8000d3c:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <TM_MFRC522_ReadRegister+0x8c>)
 8000d3e:	f000 fd45 	bl	80017cc <HAL_GPIO_WritePin>

	return val;	
 8000d42:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	20000078 	.word	0x20000078

08000d54 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	71fb      	strb	r3, [r7, #7]
 8000d60:	4613      	mov	r3, r2
 8000d62:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ffaa 	bl	8000cc0 <TM_MFRC522_ReadRegister>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	461a      	mov	r2, r3
 8000d70:	79bb      	ldrb	r3, [r7, #6]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff5c 	bl	8000c38 <TM_MFRC522_WriteRegister>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	460a      	mov	r2, r1
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	4613      	mov	r3, r2
 8000d96:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff90 	bl	8000cc0 <TM_MFRC522_ReadRegister>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b25a      	sxtb	r2, r3
 8000da4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	4013      	ands	r3, r2
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff3e 	bl	8000c38 <TM_MFRC522_WriteRegister>
} 
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8000dca:	2014      	movs	r0, #20
 8000dcc:	f7ff ff78 	bl	8000cc0 <TM_MFRC522_ReadRegister>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d103      	bne.n	8000de6 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8000dde:	2103      	movs	r1, #3
 8000de0:	2014      	movs	r0, #20
 8000de2:	f7ff ffb7 	bl	8000d54 <TM_MFRC522_SetBitMask>
	}
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000df2:	210f      	movs	r1, #15
 8000df4:	2001      	movs	r0, #1
 8000df6:	f7ff ff1f 	bl	8000c38 <TM_MFRC522_WriteRegister>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af02      	add	r7, sp, #8
 8000e04:	4603      	mov	r3, r0
 8000e06:	6039      	str	r1, [r7, #0]
 8000e08:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8000e0a:	2107      	movs	r1, #7
 8000e0c:	200d      	movs	r0, #13
 8000e0e:	f7ff ff13 	bl	8000c38 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	79fa      	ldrb	r2, [r7, #7]
 8000e16:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	2201      	movs	r2, #1
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	200c      	movs	r0, #12
 8000e26:	f000 f80f 	bl	8000e48 <TM_MFRC522_ToCard>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10)) {    
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <TM_MFRC522_Request+0x3c>
 8000e34:	89bb      	ldrh	r3, [r7, #12]
 8000e36:	2b10      	cmp	r3, #16
 8000e38:	d001      	beq.n	8000e3e <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4603      	mov	r3, r0
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	4613      	mov	r3, r2
 8000e58:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8000e62:	2300      	movs	r3, #0
 8000e64:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b0c      	cmp	r3, #12
 8000e6a:	d006      	beq.n	8000e7a <TM_MFRC522_ToCard+0x32>
 8000e6c:	2b0e      	cmp	r3, #14
 8000e6e:	d109      	bne.n	8000e84 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8000e70:	2312      	movs	r3, #18
 8000e72:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8000e74:	2310      	movs	r3, #16
 8000e76:	757b      	strb	r3, [r7, #21]
			break;
 8000e78:	e005      	b.n	8000e86 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8000e7a:	2377      	movs	r3, #119	@ 0x77
 8000e7c:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000e7e:	2330      	movs	r3, #48	@ 0x30
 8000e80:	757b      	strb	r3, [r7, #21]
			break;
 8000e82:	e000      	b.n	8000e86 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000e84:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000e86:	7dbb      	ldrb	r3, [r7, #22]
 8000e88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4619      	mov	r1, r3
 8000e90:	2002      	movs	r0, #2
 8000e92:	f7ff fed1 	bl	8000c38 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8000e96:	2180      	movs	r1, #128	@ 0x80
 8000e98:	2004      	movs	r0, #4
 8000e9a:	f7ff ff75 	bl	8000d88 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000e9e:	2180      	movs	r1, #128	@ 0x80
 8000ea0:	200a      	movs	r0, #10
 8000ea2:	f7ff ff57 	bl	8000d54 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff fec5 	bl	8000c38 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 8000eae:	2300      	movs	r3, #0
 8000eb0:	827b      	strh	r3, [r7, #18]
 8000eb2:	e00a      	b.n	8000eca <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 8000eb4:	8a7b      	ldrh	r3, [r7, #18]
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	4413      	add	r3, r2
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	2009      	movs	r0, #9
 8000ec0:	f7ff feba 	bl	8000c38 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 8000ec4:	8a7b      	ldrh	r3, [r7, #18]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	827b      	strh	r3, [r7, #18]
 8000eca:	7bbb      	ldrb	r3, [r7, #14]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	8a7a      	ldrh	r2, [r7, #18]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d3ef      	bcc.n	8000eb4 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff fead 	bl	8000c38 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	2b0c      	cmp	r3, #12
 8000ee2:	d103      	bne.n	8000eec <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 8000ee4:	2180      	movs	r1, #128	@ 0x80
 8000ee6:	200d      	movs	r0, #13
 8000ee8:	f7ff ff34 	bl	8000d54 <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8000eec:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ef0:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f7ff fee4 	bl	8000cc0 <TM_MFRC522_ReadRegister>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	753b      	strb	r3, [r7, #20]
		i--;
 8000efc:	8a7b      	ldrh	r3, [r7, #18]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000f02:	8a7b      	ldrh	r3, [r7, #18]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00a      	beq.n	8000f1e <TM_MFRC522_ToCard+0xd6>
 8000f08:	7d3b      	ldrb	r3, [r7, #20]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d105      	bne.n	8000f1e <TM_MFRC522_ToCard+0xd6>
 8000f12:	7d3a      	ldrb	r2, [r7, #20]
 8000f14:	7d7b      	ldrb	r3, [r7, #21]
 8000f16:	4013      	ands	r3, r2
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0e9      	beq.n	8000ef2 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8000f1e:	2180      	movs	r1, #128	@ 0x80
 8000f20:	200d      	movs	r0, #13
 8000f22:	f7ff ff31 	bl	8000d88 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8000f26:	8a7b      	ldrh	r3, [r7, #18]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d057      	beq.n	8000fdc <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000f2c:	2006      	movs	r0, #6
 8000f2e:	f7ff fec7 	bl	8000cc0 <TM_MFRC522_ReadRegister>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f003 031b 	and.w	r3, r3, #27
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d14d      	bne.n	8000fd8 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 8000f40:	7d3a      	ldrb	r2, [r7, #20]
 8000f42:	7dbb      	ldrb	r3, [r7, #22]
 8000f44:	4013      	ands	r3, r2
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 8000f50:	2301      	movs	r3, #1
 8000f52:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b0c      	cmp	r3, #12
 8000f58:	d140      	bne.n	8000fdc <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000f5a:	200a      	movs	r0, #10
 8000f5c:	f7ff feb0 	bl	8000cc0 <TM_MFRC522_ReadRegister>
 8000f60:	4603      	mov	r3, r0
 8000f62:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000f64:	200c      	movs	r0, #12
 8000f66:	f7ff feab 	bl	8000cc0 <TM_MFRC522_ReadRegister>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 8000f72:	7c7b      	ldrb	r3, [r7, #17]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00b      	beq.n	8000f90 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 8000f78:	7d3b      	ldrb	r3, [r7, #20]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	7c7b      	ldrb	r3, [r7, #17]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	4413      	add	r3, r2
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f8c:	801a      	strh	r2, [r3, #0]
 8000f8e:	e005      	b.n	8000f9c <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 8000f90:	7d3b      	ldrb	r3, [r7, #20]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f9a:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 8000f9c:	7d3b      	ldrb	r3, [r7, #20]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 8000fa6:	7d3b      	ldrb	r3, [r7, #20]
 8000fa8:	2b10      	cmp	r3, #16
 8000faa:	d901      	bls.n	8000fb0 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 8000fac:	2310      	movs	r3, #16
 8000fae:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	827b      	strh	r3, [r7, #18]
 8000fb4:	e00a      	b.n	8000fcc <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 8000fb6:	8a7b      	ldrh	r3, [r7, #18]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	18d4      	adds	r4, r2, r3
 8000fbc:	2009      	movs	r0, #9
 8000fbe:	f7ff fe7f 	bl	8000cc0 <TM_MFRC522_ReadRegister>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 8000fc6:	8a7b      	ldrh	r3, [r7, #18]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	827b      	strh	r3, [r7, #18]
 8000fcc:	7d3b      	ldrb	r3, [r7, #20]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	8a7a      	ldrh	r2, [r7, #18]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d3ef      	bcc.n	8000fb6 <TM_MFRC522_ToCard+0x16e>
 8000fd6:	e001      	b.n	8000fdc <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 8000fd8:	2302      	movs	r3, #2
 8000fda:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	371c      	adds	r7, #28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}

08000fe6 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af02      	add	r7, sp, #8
 8000fec:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	200d      	movs	r0, #13
 8000ff6:	f7ff fe1f 	bl	8000c38 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2293      	movs	r2, #147	@ 0x93
 8000ffe:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3301      	adds	r3, #1
 8001004:	2220      	movs	r2, #32
 8001006:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001008:	f107 030a 	add.w	r3, r7, #10
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2202      	movs	r2, #2
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	200c      	movs	r0, #12
 8001016:	f7ff ff17 	bl	8000e48 <TM_MFRC522_ToCard>
 800101a:	4603      	mov	r3, r0
 800101c:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d118      	bne.n	8001056 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 8001024:	2300      	movs	r3, #0
 8001026:	73bb      	strb	r3, [r7, #14]
 8001028:	e009      	b.n	800103e <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 800102a:	7bbb      	ldrb	r3, [r7, #14]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4413      	add	r3, r2
 8001030:	781a      	ldrb	r2, [r3, #0]
 8001032:	7b7b      	ldrb	r3, [r7, #13]
 8001034:	4053      	eors	r3, r2
 8001036:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	3301      	adds	r3, #1
 800103c:	73bb      	strb	r3, [r7, #14]
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	2b03      	cmp	r3, #3
 8001042:	d9f2      	bls.n	800102a <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	7b7a      	ldrb	r2, [r7, #13]
 800104e:	429a      	cmp	r2, r3
 8001050:	d001      	beq.n	8001056 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 8001052:	2302      	movs	r3, #2
 8001054:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	460b      	mov	r3, r1
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);				//CRCIrq = 0
 800106e:	2104      	movs	r1, #4
 8001070:	2005      	movs	r0, #5
 8001072:	f7ff fe89 	bl	8000d88 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8001076:	2180      	movs	r1, #128	@ 0x80
 8001078:	200a      	movs	r0, #10
 800107a:	f7ff fe6b 	bl	8000d54 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {   
 800107e:	2300      	movs	r3, #0
 8001080:	75fb      	strb	r3, [r7, #23]
 8001082:	e00a      	b.n	800109a <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));   
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	2009      	movs	r0, #9
 8001090:	f7ff fdd2 	bl	8000c38 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {   
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	3301      	adds	r3, #1
 8001098:	75fb      	strb	r3, [r7, #23]
 800109a:	7dfa      	ldrb	r2, [r7, #23]
 800109c:	7afb      	ldrb	r3, [r7, #11]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d3f0      	bcc.n	8001084 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80010a2:	2103      	movs	r1, #3
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fdc7 	bl	8000c38 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 80010aa:	23ff      	movs	r3, #255	@ 0xff
 80010ac:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80010ae:	2005      	movs	r0, #5
 80010b0:	f7ff fe06 	bl	8000cc0 <TM_MFRC522_ReadRegister>
 80010b4:	4603      	mov	r3, r0
 80010b6:	75bb      	strb	r3, [r7, #22]
		i--;
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <TM_MFRC522_CalculateCRC+0x6e>
 80010c4:	7dbb      	ldrb	r3, [r7, #22]
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0ef      	beq.n	80010ae <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 80010ce:	2022      	movs	r0, #34	@ 0x22
 80010d0:	f7ff fdf6 	bl	8000cc0 <TM_MFRC522_ReadRegister>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	1c5c      	adds	r4, r3, #1
 80010e0:	2021      	movs	r0, #33	@ 0x21
 80010e2:	f7ff fded 	bl	8000cc0 <TM_MFRC522_ReadRegister>
 80010e6:	4603      	mov	r3, r0
 80010e8:	7023      	strb	r3, [r4, #0]
}
 80010ea:	bf00      	nop
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd90      	pop	{r4, r7, pc}

080010f2 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 80010f8:	2350      	movs	r3, #80	@ 0x50
 80010fa:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001100:	463b      	mov	r3, r7
 8001102:	1c9a      	adds	r2, r3, #2
 8001104:	463b      	mov	r3, r7
 8001106:	2102      	movs	r1, #2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ffa9 	bl	8001060 <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 800110e:	463a      	mov	r2, r7
 8001110:	4639      	mov	r1, r7
 8001112:	1dbb      	adds	r3, r7, #6
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	4613      	mov	r3, r2
 8001118:	2204      	movs	r2, #4
 800111a:	200c      	movs	r0, #12
 800111c:	f7ff fe94 	bl	8000e48 <TM_MFRC522_ToCard>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001160 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800112c:	f7ff fd26 	bl	8000b7c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001130:	480c      	ldr	r0, [pc, #48]	@ (8001164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001132:	490d      	ldr	r1, [pc, #52]	@ (8001168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001134:	4a0d      	ldr	r2, [pc, #52]	@ (800116c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001148:	4c0a      	ldr	r4, [pc, #40]	@ (8001174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001156:	f002 fa57 	bl	8003608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115a:	f7ff fa37 	bl	80005cc <main>
  bx  lr    
 800115e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001160:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001168:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800116c:	08003fb0 	.word	0x08003fb0
  ldr r2, =_sbss
 8001170:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001174:	20000268 	.word	0x20000268

08001178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC_IRQHandler>
	...

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001180:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0d      	ldr	r2, [pc, #52]	@ (80011bc <HAL_Init+0x40>)
 8001186:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800118a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <HAL_Init+0x40>)
 8001192:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a07      	ldr	r2, [pc, #28]	@ (80011bc <HAL_Init+0x40>)
 800119e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 f931 	bl	800140c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011aa:	200f      	movs	r0, #15
 80011ac:	f000 f808 	bl	80011c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b0:	f7ff fbc6 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023c00 	.word	0x40023c00

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c8:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <HAL_InitTick+0x54>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <HAL_InitTick+0x58>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f93b 	bl	800145a <HAL_SYSTICK_Config>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00e      	b.n	800120c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d80a      	bhi.n	800120a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f000 f911 	bl	8001422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001200:	4a06      	ldr	r2, [pc, #24]	@ (800121c <HAL_InitTick+0x5c>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	e000      	b.n	800120c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000000 	.word	0x20000000
 8001218:	20000008 	.word	0x20000008
 800121c:	20000004 	.word	0x20000004

08001220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000008 	.word	0x20000008
 8001244:	2000011c 	.word	0x2000011c

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	@ (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	2000011c 	.word	0x2000011c

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff ffee 	bl	8001248 <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d005      	beq.n	8001286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127a:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <HAL_Delay+0x44>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001286:	bf00      	nop
 8001288:	f7ff ffde 	bl	8001248 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d8f7      	bhi.n	8001288 <HAL_Delay+0x28>
  {
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000008 	.word	0x20000008

080012a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c4:	4013      	ands	r3, r2
 80012c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012da:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	60d3      	str	r3, [r2, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f4:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <__NVIC_GetPriorityGrouping+0x18>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	f003 0307 	and.w	r3, r3, #7
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	db0a      	blt.n	8001336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	490c      	ldr	r1, [pc, #48]	@ (8001358 <__NVIC_SetPriority+0x4c>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	0112      	lsls	r2, r2, #4
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	440b      	add	r3, r1
 8001330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001334:	e00a      	b.n	800134c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4908      	ldr	r1, [pc, #32]	@ (800135c <__NVIC_SetPriority+0x50>)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	3b04      	subs	r3, #4
 8001344:	0112      	lsls	r2, r2, #4
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	440b      	add	r3, r1
 800134a:	761a      	strb	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	@ 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f1c3 0307 	rsb	r3, r3, #7
 800137a:	2b04      	cmp	r3, #4
 800137c:	bf28      	it	cs
 800137e:	2304      	movcs	r3, #4
 8001380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3304      	adds	r3, #4
 8001386:	2b06      	cmp	r3, #6
 8001388:	d902      	bls.n	8001390 <NVIC_EncodePriority+0x30>
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3b03      	subs	r3, #3
 800138e:	e000      	b.n	8001392 <NVIC_EncodePriority+0x32>
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	f04f 32ff 	mov.w	r2, #4294967295
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43da      	mvns	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	401a      	ands	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	43d9      	mvns	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	4313      	orrs	r3, r2
         );
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3724      	adds	r7, #36	@ 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d8:	d301      	bcc.n	80013de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2301      	movs	r3, #1
 80013dc:	e00f      	b.n	80013fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <SysTick_Config+0x40>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e6:	210f      	movs	r1, #15
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f7ff ff8e 	bl	800130c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <SysTick_Config+0x40>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <SysTick_Config+0x40>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	e000e010 	.word	0xe000e010

0800140c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff47 	bl	80012a8 <__NVIC_SetPriorityGrouping>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001434:	f7ff ff5c 	bl	80012f0 <__NVIC_GetPriorityGrouping>
 8001438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7ff ff8e 	bl	8001360 <NVIC_EncodePriority>
 8001444:	4602      	mov	r2, r0
 8001446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff5d 	bl	800130c <__NVIC_SetPriority>
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffb0 	bl	80013c8 <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	@ 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	e177      	b.n	8001780 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001490:	2201      	movs	r2, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	f040 8166 	bne.w	800177a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d005      	beq.n	80014c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d130      	bne.n	8001528 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	2203      	movs	r2, #3
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014fc:	2201      	movs	r2, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 0201 	and.w	r2, r3, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b03      	cmp	r3, #3
 8001532:	d017      	beq.n	8001564 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d123      	bne.n	80015b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	220f      	movs	r2, #15
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	08da      	lsrs	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3208      	adds	r2, #8
 80015b2:	69b9      	ldr	r1, [r7, #24]
 80015b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0203 	and.w	r2, r3, #3
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80c0 	beq.w	800177a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b66      	ldr	r3, [pc, #408]	@ (8001798 <HAL_GPIO_Init+0x324>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	4a65      	ldr	r2, [pc, #404]	@ (8001798 <HAL_GPIO_Init+0x324>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001608:	6453      	str	r3, [r2, #68]	@ 0x44
 800160a:	4b63      	ldr	r3, [pc, #396]	@ (8001798 <HAL_GPIO_Init+0x324>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001616:	4a61      	ldr	r2, [pc, #388]	@ (800179c <HAL_GPIO_Init+0x328>)
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3302      	adds	r3, #2
 800161e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	220f      	movs	r2, #15
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a58      	ldr	r2, [pc, #352]	@ (80017a0 <HAL_GPIO_Init+0x32c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d037      	beq.n	80016b2 <HAL_GPIO_Init+0x23e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a57      	ldr	r2, [pc, #348]	@ (80017a4 <HAL_GPIO_Init+0x330>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d031      	beq.n	80016ae <HAL_GPIO_Init+0x23a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a56      	ldr	r2, [pc, #344]	@ (80017a8 <HAL_GPIO_Init+0x334>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d02b      	beq.n	80016aa <HAL_GPIO_Init+0x236>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a55      	ldr	r2, [pc, #340]	@ (80017ac <HAL_GPIO_Init+0x338>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d025      	beq.n	80016a6 <HAL_GPIO_Init+0x232>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a54      	ldr	r2, [pc, #336]	@ (80017b0 <HAL_GPIO_Init+0x33c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d01f      	beq.n	80016a2 <HAL_GPIO_Init+0x22e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a53      	ldr	r2, [pc, #332]	@ (80017b4 <HAL_GPIO_Init+0x340>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d019      	beq.n	800169e <HAL_GPIO_Init+0x22a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a52      	ldr	r2, [pc, #328]	@ (80017b8 <HAL_GPIO_Init+0x344>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d013      	beq.n	800169a <HAL_GPIO_Init+0x226>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a51      	ldr	r2, [pc, #324]	@ (80017bc <HAL_GPIO_Init+0x348>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d00d      	beq.n	8001696 <HAL_GPIO_Init+0x222>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a50      	ldr	r2, [pc, #320]	@ (80017c0 <HAL_GPIO_Init+0x34c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d007      	beq.n	8001692 <HAL_GPIO_Init+0x21e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4f      	ldr	r2, [pc, #316]	@ (80017c4 <HAL_GPIO_Init+0x350>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d101      	bne.n	800168e <HAL_GPIO_Init+0x21a>
 800168a:	2309      	movs	r3, #9
 800168c:	e012      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 800168e:	230a      	movs	r3, #10
 8001690:	e010      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 8001692:	2308      	movs	r3, #8
 8001694:	e00e      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 8001696:	2307      	movs	r3, #7
 8001698:	e00c      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 800169a:	2306      	movs	r3, #6
 800169c:	e00a      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 800169e:	2305      	movs	r3, #5
 80016a0:	e008      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 80016a2:	2304      	movs	r3, #4
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e004      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 80016b2:	2300      	movs	r3, #0
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	f002 0203 	and.w	r2, r2, #3
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4093      	lsls	r3, r2
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c4:	4935      	ldr	r1, [pc, #212]	@ (800179c <HAL_GPIO_Init+0x328>)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d2:	4b3d      	ldr	r3, [pc, #244]	@ (80017c8 <HAL_GPIO_Init+0x354>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016f6:	4a34      	ldr	r2, [pc, #208]	@ (80017c8 <HAL_GPIO_Init+0x354>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016fc:	4b32      	ldr	r3, [pc, #200]	@ (80017c8 <HAL_GPIO_Init+0x354>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001720:	4a29      	ldr	r2, [pc, #164]	@ (80017c8 <HAL_GPIO_Init+0x354>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001726:	4b28      	ldr	r3, [pc, #160]	@ (80017c8 <HAL_GPIO_Init+0x354>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800174a:	4a1f      	ldr	r2, [pc, #124]	@ (80017c8 <HAL_GPIO_Init+0x354>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001750:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <HAL_GPIO_Init+0x354>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001774:	4a14      	ldr	r2, [pc, #80]	@ (80017c8 <HAL_GPIO_Init+0x354>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3301      	adds	r3, #1
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	f67f ae84 	bls.w	8001490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3724      	adds	r7, #36	@ 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40013800 	.word	0x40013800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020400 	.word	0x40020400
 80017a8:	40020800 	.word	0x40020800
 80017ac:	40020c00 	.word	0x40020c00
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40021400 	.word	0x40021400
 80017b8:	40021800 	.word	0x40021800
 80017bc:	40021c00 	.word	0x40021c00
 80017c0:	40022000 	.word	0x40022000
 80017c4:	40022400 	.word	0x40022400
 80017c8:	40013c00 	.word	0x40013c00

080017cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
 80017d8:	4613      	mov	r3, r2
 80017da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017dc:	787b      	ldrb	r3, [r7, #1]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017e8:	e003      	b.n	80017f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	041a      	lsls	r2, r3, #16
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	619a      	str	r2, [r3, #24]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <HAL_PWREx_EnableOverDrive+0x90>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	4a1f      	ldr	r2, [pc, #124]	@ (8001890 <HAL_PWREx_EnableOverDrive+0x90>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001818:	6413      	str	r3, [r2, #64]	@ 0x40
 800181a:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <HAL_PWREx_EnableOverDrive+0x90>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001826:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <HAL_PWREx_EnableOverDrive+0x94>)
 8001828:	2201      	movs	r2, #1
 800182a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800182c:	f7ff fd0c 	bl	8001248 <HAL_GetTick>
 8001830:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001832:	e009      	b.n	8001848 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001834:	f7ff fd08 	bl	8001248 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001842:	d901      	bls.n	8001848 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e01f      	b.n	8001888 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001848:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <HAL_PWREx_EnableOverDrive+0x98>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001854:	d1ee      	bne.n	8001834 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001856:	4b11      	ldr	r3, [pc, #68]	@ (800189c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001858:	2201      	movs	r2, #1
 800185a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800185c:	f7ff fcf4 	bl	8001248 <HAL_GetTick>
 8001860:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001862:	e009      	b.n	8001878 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001864:	f7ff fcf0 	bl	8001248 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001872:	d901      	bls.n	8001878 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e007      	b.n	8001888 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001878:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <HAL_PWREx_EnableOverDrive+0x98>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001880:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001884:	d1ee      	bne.n	8001864 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800
 8001894:	420e0040 	.word	0x420e0040
 8001898:	40007000 	.word	0x40007000
 800189c:	420e0044 	.word	0x420e0044

080018a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e267      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d075      	beq.n	80019aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018be:	4b88      	ldr	r3, [pc, #544]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d00c      	beq.n	80018e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ca:	4b85      	ldr	r3, [pc, #532]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d112      	bne.n	80018fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d6:	4b82      	ldr	r3, [pc, #520]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018e2:	d10b      	bne.n	80018fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e4:	4b7e      	ldr	r3, [pc, #504]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d05b      	beq.n	80019a8 <HAL_RCC_OscConfig+0x108>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d157      	bne.n	80019a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e242      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001904:	d106      	bne.n	8001914 <HAL_RCC_OscConfig+0x74>
 8001906:	4b76      	ldr	r3, [pc, #472]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a75      	ldr	r2, [pc, #468]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e01d      	b.n	8001950 <HAL_RCC_OscConfig+0xb0>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x98>
 800191e:	4b70      	ldr	r3, [pc, #448]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a6f      	ldr	r2, [pc, #444]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a6c      	ldr	r2, [pc, #432]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0xb0>
 8001938:	4b69      	ldr	r3, [pc, #420]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a68      	ldr	r2, [pc, #416]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800193e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b66      	ldr	r3, [pc, #408]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a65      	ldr	r2, [pc, #404]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fc76 	bl	8001248 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff fc72 	bl	8001248 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	@ 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e207      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b5b      	ldr	r3, [pc, #364]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0xc0>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fc62 	bl	8001248 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff fc5e 	bl	8001248 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	@ 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e1f3      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	4b51      	ldr	r3, [pc, #324]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0xe8>
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d063      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019b6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00b      	beq.n	80019da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c2:	4b47      	ldr	r3, [pc, #284]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d11c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ce:	4b44      	ldr	r3, [pc, #272]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d116      	bne.n	8001a08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019da:	4b41      	ldr	r3, [pc, #260]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_RCC_OscConfig+0x152>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e1c7      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4937      	ldr	r1, [pc, #220]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a06:	e03a      	b.n	8001a7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a10:	4b34      	ldr	r3, [pc, #208]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff fc17 	bl	8001248 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fc13 	bl	8001248 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e1a8      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4925      	ldr	r1, [pc, #148]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
 8001a50:	e015      	b.n	8001a7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a52:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <HAL_RCC_OscConfig+0x244>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7ff fbf6 	bl	8001248 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a60:	f7ff fbf2 	bl	8001248 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e187      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d036      	beq.n	8001af8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d016      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <HAL_RCC_OscConfig+0x248>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff fbd6 	bl	8001248 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fbd2 	bl	8001248 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e167      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x200>
 8001abe:	e01b      	b.n	8001af8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac0:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_RCC_OscConfig+0x248>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fbbf 	bl	8001248 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001acc:	e00e      	b.n	8001aec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ace:	f7ff fbbb 	bl	8001248 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d907      	bls.n	8001aec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e150      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	42470000 	.word	0x42470000
 8001ae8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	4b88      	ldr	r3, [pc, #544]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1ea      	bne.n	8001ace <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 8097 	beq.w	8001c34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0a:	4b81      	ldr	r3, [pc, #516]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10f      	bne.n	8001b36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	4a7c      	ldr	r2, [pc, #496]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b26:	4b7a      	ldr	r3, [pc, #488]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b32:	2301      	movs	r3, #1
 8001b34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b36:	4b77      	ldr	r3, [pc, #476]	@ (8001d14 <HAL_RCC_OscConfig+0x474>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d118      	bne.n	8001b74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b42:	4b74      	ldr	r3, [pc, #464]	@ (8001d14 <HAL_RCC_OscConfig+0x474>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a73      	ldr	r2, [pc, #460]	@ (8001d14 <HAL_RCC_OscConfig+0x474>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4e:	f7ff fb7b 	bl	8001248 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b56:	f7ff fb77 	bl	8001248 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e10c      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	4b6a      	ldr	r3, [pc, #424]	@ (8001d14 <HAL_RCC_OscConfig+0x474>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_OscConfig+0x2ea>
 8001b7c:	4b64      	ldr	r3, [pc, #400]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b80:	4a63      	ldr	r2, [pc, #396]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b88:	e01c      	b.n	8001bc4 <HAL_RCC_OscConfig+0x324>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0x30c>
 8001b92:	4b5f      	ldr	r3, [pc, #380]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b96:	4a5e      	ldr	r2, [pc, #376]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b9e:	4b5c      	ldr	r3, [pc, #368]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba2:	4a5b      	ldr	r2, [pc, #364]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001baa:	e00b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x324>
 8001bac:	4b58      	ldr	r3, [pc, #352]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb0:	4a57      	ldr	r2, [pc, #348]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb8:	4b55      	ldr	r3, [pc, #340]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bbc:	4a54      	ldr	r2, [pc, #336]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	f023 0304 	bic.w	r3, r3, #4
 8001bc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d015      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bcc:	f7ff fb3c 	bl	8001248 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fb38 	bl	8001248 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e0cb      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bea:	4b49      	ldr	r3, [pc, #292]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0ee      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x334>
 8001bf6:	e014      	b.n	8001c22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fb26 	bl	8001248 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c00:	f7ff fb22 	bl	8001248 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e0b5      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c16:	4b3e      	ldr	r3, [pc, #248]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1ee      	bne.n	8001c00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d105      	bne.n	8001c34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c28:	4b39      	ldr	r3, [pc, #228]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	4a38      	ldr	r2, [pc, #224]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80a1 	beq.w	8001d80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c3e:	4b34      	ldr	r3, [pc, #208]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d05c      	beq.n	8001d04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d141      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	4b31      	ldr	r3, [pc, #196]	@ (8001d18 <HAL_RCC_OscConfig+0x478>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff faf6 	bl	8001248 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff faf2 	bl	8001248 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e087      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69da      	ldr	r2, [r3, #28]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	019b      	lsls	r3, r3, #6
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c94:	085b      	lsrs	r3, r3, #1
 8001c96:	3b01      	subs	r3, #1
 8001c98:	041b      	lsls	r3, r3, #16
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	491b      	ldr	r1, [pc, #108]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <HAL_RCC_OscConfig+0x478>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7ff facb 	bl	8001248 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7ff fac7 	bl	8001248 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e05c      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc8:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x416>
 8001cd4:	e054      	b.n	8001d80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_RCC_OscConfig+0x478>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fab4 	bl	8001248 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff fab0 	bl	8001248 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e045      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x444>
 8001d02:	e03d      	b.n	8001d80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e038      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40007000 	.word	0x40007000
 8001d18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <HAL_RCC_OscConfig+0x4ec>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d028      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d121      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d11a      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d111      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	3b01      	subs	r3, #1
 8001d66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800

08001d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0cc      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b68      	ldr	r3, [pc, #416]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d90c      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b65      	ldr	r3, [pc, #404]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b63      	ldr	r3, [pc, #396]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0b8      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de4:	4b59      	ldr	r3, [pc, #356]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a58      	ldr	r2, [pc, #352]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001dee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dfc:	4b53      	ldr	r3, [pc, #332]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4a52      	ldr	r2, [pc, #328]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	4b50      	ldr	r3, [pc, #320]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	494d      	ldr	r1, [pc, #308]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d044      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	4b47      	ldr	r3, [pc, #284]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d119      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e07f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d003      	beq.n	8001e4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e06f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e067      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6e:	4b37      	ldr	r3, [pc, #220]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f023 0203 	bic.w	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4934      	ldr	r1, [pc, #208]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e80:	f7ff f9e2 	bl	8001248 <HAL_GetTick>
 8001e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e88:	f7ff f9de 	bl	8001248 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e04f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 020c 	and.w	r2, r3, #12
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d1eb      	bne.n	8001e88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d20c      	bcs.n	8001ed8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e032      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4916      	ldr	r1, [pc, #88]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f02:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	490e      	ldr	r1, [pc, #56]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f16:	f000 f821 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	490a      	ldr	r1, [pc, #40]	@ (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	5ccb      	ldrb	r3, [r1, r3]
 8001f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2e:	4a09      	ldr	r2, [pc, #36]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff f942 	bl	80011c0 <HAL_InitTick>

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023c00 	.word	0x40023c00
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	08003f54 	.word	0x08003f54
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000004 	.word	0x20000004

08001f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f60:	b094      	sub	sp, #80	@ 0x50
 8001f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f74:	4b79      	ldr	r3, [pc, #484]	@ (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d00d      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x40>
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	f200 80e1 	bhi.w	8002148 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x34>
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d003      	beq.n	8001f96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f8e:	e0db      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f90:	4b73      	ldr	r3, [pc, #460]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f94:	e0db      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f96:	4b73      	ldr	r3, [pc, #460]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f9a:	e0d8      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f9c:	4b6f      	ldr	r3, [pc, #444]	@ (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fa4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb2:	4b6a      	ldr	r3, [pc, #424]	@ (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	099b      	lsrs	r3, r3, #6
 8001fb8:	2200      	movs	r2, #0
 8001fba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001fce:	4622      	mov	r2, r4
 8001fd0:	462b      	mov	r3, r5
 8001fd2:	f04f 0000 	mov.w	r0, #0
 8001fd6:	f04f 0100 	mov.w	r1, #0
 8001fda:	0159      	lsls	r1, r3, #5
 8001fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe0:	0150      	lsls	r0, r2, #5
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	1a51      	subs	r1, r2, r1
 8001fea:	6139      	str	r1, [r7, #16]
 8001fec:	4629      	mov	r1, r5
 8001fee:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002000:	4659      	mov	r1, fp
 8002002:	018b      	lsls	r3, r1, #6
 8002004:	4651      	mov	r1, sl
 8002006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800200a:	4651      	mov	r1, sl
 800200c:	018a      	lsls	r2, r1, #6
 800200e:	4651      	mov	r1, sl
 8002010:	ebb2 0801 	subs.w	r8, r2, r1
 8002014:	4659      	mov	r1, fp
 8002016:	eb63 0901 	sbc.w	r9, r3, r1
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800202a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800202e:	4690      	mov	r8, r2
 8002030:	4699      	mov	r9, r3
 8002032:	4623      	mov	r3, r4
 8002034:	eb18 0303 	adds.w	r3, r8, r3
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	462b      	mov	r3, r5
 800203c:	eb49 0303 	adc.w	r3, r9, r3
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800204e:	4629      	mov	r1, r5
 8002050:	024b      	lsls	r3, r1, #9
 8002052:	4621      	mov	r1, r4
 8002054:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002058:	4621      	mov	r1, r4
 800205a:	024a      	lsls	r2, r1, #9
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002062:	2200      	movs	r2, #0
 8002064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002066:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002068:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800206c:	f7fe f918 	bl	80002a0 <__aeabi_uldivmod>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4613      	mov	r3, r2
 8002076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002078:	e058      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207a:	4b38      	ldr	r3, [pc, #224]	@ (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	099b      	lsrs	r3, r3, #6
 8002080:	2200      	movs	r2, #0
 8002082:	4618      	mov	r0, r3
 8002084:	4611      	mov	r1, r2
 8002086:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800208a:	623b      	str	r3, [r7, #32]
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002090:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002094:	4642      	mov	r2, r8
 8002096:	464b      	mov	r3, r9
 8002098:	f04f 0000 	mov.w	r0, #0
 800209c:	f04f 0100 	mov.w	r1, #0
 80020a0:	0159      	lsls	r1, r3, #5
 80020a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020a6:	0150      	lsls	r0, r2, #5
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4641      	mov	r1, r8
 80020ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80020b2:	4649      	mov	r1, r9
 80020b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020cc:	ebb2 040a 	subs.w	r4, r2, sl
 80020d0:	eb63 050b 	sbc.w	r5, r3, fp
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	00eb      	lsls	r3, r5, #3
 80020de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020e2:	00e2      	lsls	r2, r4, #3
 80020e4:	4614      	mov	r4, r2
 80020e6:	461d      	mov	r5, r3
 80020e8:	4643      	mov	r3, r8
 80020ea:	18e3      	adds	r3, r4, r3
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	464b      	mov	r3, r9
 80020f0:	eb45 0303 	adc.w	r3, r5, r3
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002102:	4629      	mov	r1, r5
 8002104:	028b      	lsls	r3, r1, #10
 8002106:	4621      	mov	r1, r4
 8002108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800210c:	4621      	mov	r1, r4
 800210e:	028a      	lsls	r2, r1, #10
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002116:	2200      	movs	r2, #0
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	61fa      	str	r2, [r7, #28]
 800211c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002120:	f7fe f8be 	bl	80002a0 <__aeabi_uldivmod>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4613      	mov	r3, r2
 800212a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800212c:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <HAL_RCC_GetSysClockFreq+0x200>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	3301      	adds	r3, #1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800213c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800213e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002146:	e002      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002148:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x204>)
 800214a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800214c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002150:	4618      	mov	r0, r3
 8002152:	3750      	adds	r7, #80	@ 0x50
 8002154:	46bd      	mov	sp, r7
 8002156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	00f42400 	.word	0x00f42400
 8002164:	007a1200 	.word	0x007a1200

08002168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800216c:	4b03      	ldr	r3, [pc, #12]	@ (800217c <HAL_RCC_GetHCLKFreq+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000000 	.word	0x20000000

08002180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002184:	f7ff fff0 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	0a9b      	lsrs	r3, r3, #10
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	4903      	ldr	r1, [pc, #12]	@ (80021a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40023800 	.word	0x40023800
 80021a4:	08003f64 	.word	0x08003f64

080021a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021ac:	f7ff ffdc 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	0b5b      	lsrs	r3, r3, #13
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	4903      	ldr	r1, [pc, #12]	@ (80021cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40023800 	.word	0x40023800
 80021cc:	08003f64 	.word	0x08003f64

080021d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e07b      	b.n	80022da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d108      	bne.n	80021fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021f2:	d009      	beq.n	8002208 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
 80021fa:	e005      	b.n	8002208 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe fbb4 	bl	8000990 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800223e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800228c:	ea42 0103 	orr.w	r1, r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002294:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	f003 0104 	and.w	r1, r3, #4
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ae:	f003 0210 	and.w	r2, r3, #16
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b088      	sub	sp, #32
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	4613      	mov	r3, r2
 80022f0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022f2:	f7fe ffa9 	bl	8001248 <HAL_GetTick>
 80022f6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	d001      	beq.n	800230c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002308:	2302      	movs	r3, #2
 800230a:	e12a      	b.n	8002562 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_SPI_Transmit+0x36>
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e122      	b.n	8002562 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_SPI_Transmit+0x48>
 8002326:	2302      	movs	r3, #2
 8002328:	e11b      	b.n	8002562 <HAL_SPI_Transmit+0x280>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2203      	movs	r2, #3
 8002336:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	88fa      	ldrh	r2, [r7, #6]
 800234a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	88fa      	ldrh	r2, [r7, #6]
 8002350:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002378:	d10f      	bne.n	800239a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002388:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002398:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a4:	2b40      	cmp	r3, #64	@ 0x40
 80023a6:	d007      	beq.n	80023b8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023c0:	d152      	bne.n	8002468 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <HAL_SPI_Transmit+0xee>
 80023ca:	8b7b      	ldrh	r3, [r7, #26]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d145      	bne.n	800245c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d4:	881a      	ldrh	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e0:	1c9a      	adds	r2, r3, #2
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023f4:	e032      	b.n	800245c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b02      	cmp	r3, #2
 8002402:	d112      	bne.n	800242a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002408:	881a      	ldrh	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002414:	1c9a      	adds	r2, r3, #2
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002428:	e018      	b.n	800245c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800242a:	f7fe ff0d 	bl	8001248 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d803      	bhi.n	8002442 <HAL_SPI_Transmit+0x160>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d102      	bne.n	8002448 <HAL_SPI_Transmit+0x166>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d109      	bne.n	800245c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e082      	b.n	8002562 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1c7      	bne.n	80023f6 <HAL_SPI_Transmit+0x114>
 8002466:	e053      	b.n	8002510 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <HAL_SPI_Transmit+0x194>
 8002470:	8b7b      	ldrh	r3, [r7, #26]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d147      	bne.n	8002506 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	330c      	adds	r3, #12
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800249c:	e033      	b.n	8002506 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d113      	bne.n	80024d4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	330c      	adds	r3, #12
 80024b6:	7812      	ldrb	r2, [r2, #0]
 80024b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024d2:	e018      	b.n	8002506 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024d4:	f7fe feb8 	bl	8001248 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d803      	bhi.n	80024ec <HAL_SPI_Transmit+0x20a>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ea:	d102      	bne.n	80024f2 <HAL_SPI_Transmit+0x210>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e02d      	b.n	8002562 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1c6      	bne.n	800249e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	6839      	ldr	r1, [r7, #0]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 fbe7 	bl	8002ce8 <SPI_EndRxTxTransaction>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2220      	movs	r2, #32
 8002524:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10a      	bne.n	8002544 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002560:	2300      	movs	r3, #0
  }
}
 8002562:	4618      	mov	r0, r3
 8002564:	3720      	adds	r7, #32
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b088      	sub	sp, #32
 800256e:	af02      	add	r7, sp, #8
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	4613      	mov	r3, r2
 8002578:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d001      	beq.n	800258a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002586:	2302      	movs	r3, #2
 8002588:	e104      	b.n	8002794 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <HAL_SPI_Receive+0x2c>
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0fc      	b.n	8002794 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025a2:	d112      	bne.n	80025ca <HAL_SPI_Receive+0x60>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10e      	bne.n	80025ca <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2204      	movs	r2, #4
 80025b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025b4:	88fa      	ldrh	r2, [r7, #6]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	68b9      	ldr	r1, [r7, #8]
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 f8eb 	bl	800279c <HAL_SPI_TransmitReceive>
 80025c6:	4603      	mov	r3, r0
 80025c8:	e0e4      	b.n	8002794 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025ca:	f7fe fe3d 	bl	8001248 <HAL_GetTick>
 80025ce:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_SPI_Receive+0x74>
 80025da:	2302      	movs	r3, #2
 80025dc:	e0da      	b.n	8002794 <HAL_SPI_Receive+0x22a>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2204      	movs	r2, #4
 80025ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	88fa      	ldrh	r2, [r7, #6]
 80025fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	88fa      	ldrh	r2, [r7, #6]
 8002604:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800262c:	d10f      	bne.n	800264e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800263c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002658:	2b40      	cmp	r3, #64	@ 0x40
 800265a:	d007      	beq.n	800266c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800266a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d170      	bne.n	8002756 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002674:	e035      	b.n	80026e2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d115      	bne.n	80026b0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f103 020c 	add.w	r2, r3, #12
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002690:	7812      	ldrb	r2, [r2, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026ae:	e018      	b.n	80026e2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026b0:	f7fe fdca 	bl	8001248 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d803      	bhi.n	80026c8 <HAL_SPI_Receive+0x15e>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c6:	d102      	bne.n	80026ce <HAL_SPI_Receive+0x164>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e058      	b.n	8002794 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1c4      	bne.n	8002676 <HAL_SPI_Receive+0x10c>
 80026ec:	e038      	b.n	8002760 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d113      	bne.n	8002724 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002706:	b292      	uxth	r2, r2
 8002708:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270e:	1c9a      	adds	r2, r3, #2
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002722:	e018      	b.n	8002756 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002724:	f7fe fd90 	bl	8001248 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d803      	bhi.n	800273c <HAL_SPI_Receive+0x1d2>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273a:	d102      	bne.n	8002742 <HAL_SPI_Receive+0x1d8>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e01e      	b.n	8002794 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1c6      	bne.n	80026ee <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	6839      	ldr	r1, [r7, #0]
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fa59 	bl	8002c1c <SPI_EndRxTransaction>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002792:	2300      	movs	r3, #0
  }
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	@ 0x28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027aa:	2301      	movs	r3, #1
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027ae:	f7fe fd4b 	bl	8001248 <HAL_GetTick>
 80027b2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027ba:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80027c2:	887b      	ldrh	r3, [r7, #2]
 80027c4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027c6:	7ffb      	ldrb	r3, [r7, #31]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d00c      	beq.n	80027e6 <HAL_SPI_TransmitReceive+0x4a>
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027d2:	d106      	bne.n	80027e2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <HAL_SPI_TransmitReceive+0x46>
 80027dc:	7ffb      	ldrb	r3, [r7, #31]
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d001      	beq.n	80027e6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
 80027e4:	e17f      	b.n	8002ae6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_SPI_TransmitReceive+0x5c>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_SPI_TransmitReceive+0x5c>
 80027f2:	887b      	ldrh	r3, [r7, #2]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e174      	b.n	8002ae6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_SPI_TransmitReceive+0x6e>
 8002806:	2302      	movs	r3, #2
 8002808:	e16d      	b.n	8002ae6 <HAL_SPI_TransmitReceive+0x34a>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b04      	cmp	r3, #4
 800281c:	d003      	beq.n	8002826 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2205      	movs	r2, #5
 8002822:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	887a      	ldrh	r2, [r7, #2]
 8002836:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	887a      	ldrh	r2, [r7, #2]
 8002848:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	887a      	ldrh	r2, [r7, #2]
 800284e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002866:	2b40      	cmp	r3, #64	@ 0x40
 8002868:	d007      	beq.n	800287a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002878:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002882:	d17e      	bne.n	8002982 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_SPI_TransmitReceive+0xf6>
 800288c:	8afb      	ldrh	r3, [r7, #22]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d16c      	bne.n	800296c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	881a      	ldrh	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	1c9a      	adds	r2, r3, #2
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028b6:	e059      	b.n	800296c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d11b      	bne.n	80028fe <HAL_SPI_TransmitReceive+0x162>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d016      	beq.n	80028fe <HAL_SPI_TransmitReceive+0x162>
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d113      	bne.n	80028fe <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	881a      	ldrh	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	1c9a      	adds	r2, r3, #2
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b01      	cmp	r3, #1
 800290a:	d119      	bne.n	8002940 <HAL_SPI_TransmitReceive+0x1a4>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d014      	beq.n	8002940 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002920:	b292      	uxth	r2, r2
 8002922:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002928:	1c9a      	adds	r2, r3, #2
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800293c:	2301      	movs	r3, #1
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002940:	f7fe fc82 	bl	8001248 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800294c:	429a      	cmp	r2, r3
 800294e:	d80d      	bhi.n	800296c <HAL_SPI_TransmitReceive+0x1d0>
 8002950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002956:	d009      	beq.n	800296c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e0bc      	b.n	8002ae6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1a0      	bne.n	80028b8 <HAL_SPI_TransmitReceive+0x11c>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d19b      	bne.n	80028b8 <HAL_SPI_TransmitReceive+0x11c>
 8002980:	e082      	b.n	8002a88 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_SPI_TransmitReceive+0x1f4>
 800298a:	8afb      	ldrh	r3, [r7, #22]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d171      	bne.n	8002a74 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	330c      	adds	r3, #12
 800299a:	7812      	ldrb	r2, [r2, #0]
 800299c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029b6:	e05d      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d11c      	bne.n	8002a00 <HAL_SPI_TransmitReceive+0x264>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d017      	beq.n	8002a00 <HAL_SPI_TransmitReceive+0x264>
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d114      	bne.n	8002a00 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	330c      	adds	r3, #12
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d119      	bne.n	8002a42 <HAL_SPI_TransmitReceive+0x2a6>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d014      	beq.n	8002a42 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a42:	f7fe fc01 	bl	8001248 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d803      	bhi.n	8002a5a <HAL_SPI_TransmitReceive+0x2be>
 8002a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d102      	bne.n	8002a60 <HAL_SPI_TransmitReceive+0x2c4>
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e038      	b.n	8002ae6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d19c      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x21c>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d197      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a88:	6a3a      	ldr	r2, [r7, #32]
 8002a8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f92b 	bl	8002ce8 <SPI_EndRxTxTransaction>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e01d      	b.n	8002ae6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10a      	bne.n	8002ac8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
  }
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3728      	adds	r7, #40	@ 0x28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002afc:	b2db      	uxtb	r3, r3
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b1c:	f7fe fb94 	bl	8001248 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	4413      	add	r3, r2
 8002b2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b2c:	f7fe fb8c 	bl	8001248 <HAL_GetTick>
 8002b30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b32:	4b39      	ldr	r3, [pc, #228]	@ (8002c18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	015b      	lsls	r3, r3, #5
 8002b38:	0d1b      	lsrs	r3, r3, #20
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b42:	e055      	b.n	8002bf0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4a:	d051      	beq.n	8002bf0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b4c:	f7fe fb7c 	bl	8001248 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d902      	bls.n	8002b62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d13d      	bne.n	8002bde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002b70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b7a:	d111      	bne.n	8002ba0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b84:	d004      	beq.n	8002b90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b8e:	d107      	bne.n	8002ba0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ba8:	d10f      	bne.n	8002bca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e018      	b.n	8002c10 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	e002      	b.n	8002bf0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d19a      	bne.n	8002b44 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3720      	adds	r7, #32
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000000 	.word	0x20000000

08002c1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c30:	d111      	bne.n	8002c56 <SPI_EndRxTransaction+0x3a>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c3a:	d004      	beq.n	8002c46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c44:	d107      	bne.n	8002c56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c54:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c5e:	d12a      	bne.n	8002cb6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c68:	d012      	beq.n	8002c90 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2200      	movs	r2, #0
 8002c72:	2180      	movs	r1, #128	@ 0x80
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f7ff ff49 	bl	8002b0c <SPI_WaitFlagStateUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d02d      	beq.n	8002cdc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c84:	f043 0220 	orr.w	r2, r3, #32
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e026      	b.n	8002cde <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2200      	movs	r2, #0
 8002c98:	2101      	movs	r1, #1
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f7ff ff36 	bl	8002b0c <SPI_WaitFlagStateUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01a      	beq.n	8002cdc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e013      	b.n	8002cde <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f7ff ff23 	bl	8002b0c <SPI_WaitFlagStateUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d007      	beq.n	8002cdc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd0:	f043 0220 	orr.w	r2, r3, #32
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e000      	b.n	8002cde <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f7ff ff04 	bl	8002b0c <SPI_WaitFlagStateUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0e:	f043 0220 	orr.w	r2, r3, #32
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e032      	b.n	8002d80 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d88 <SPI_EndRxTxTransaction+0xa0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002d8c <SPI_EndRxTxTransaction+0xa4>)
 8002d20:	fba2 2303 	umull	r2, r3, r2, r3
 8002d24:	0d5b      	lsrs	r3, r3, #21
 8002d26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d38:	d112      	bne.n	8002d60 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2200      	movs	r2, #0
 8002d42:	2180      	movs	r1, #128	@ 0x80
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7ff fee1 	bl	8002b0c <SPI_WaitFlagStateUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d016      	beq.n	8002d7e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d54:	f043 0220 	orr.w	r2, r3, #32
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e00f      	b.n	8002d80 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d76:	2b80      	cmp	r3, #128	@ 0x80
 8002d78:	d0f2      	beq.n	8002d60 <SPI_EndRxTxTransaction+0x78>
 8002d7a:	e000      	b.n	8002d7e <SPI_EndRxTxTransaction+0x96>
        break;
 8002d7c:	bf00      	nop
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	165e9f81 	.word	0x165e9f81

08002d90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e042      	b.n	8002e28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fd fe32 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2224      	movs	r2, #36	@ 0x24
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f973 	bl	80030c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002df8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	@ 0x28
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d175      	bne.n	8002f3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_UART_Transmit+0x2c>
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e06e      	b.n	8002f3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2221      	movs	r2, #33	@ 0x21
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e6e:	f7fe f9eb 	bl	8001248 <HAL_GetTick>
 8002e72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	88fa      	ldrh	r2, [r7, #6]
 8002e7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e88:	d108      	bne.n	8002e9c <HAL_UART_Transmit+0x6c>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d104      	bne.n	8002e9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	e003      	b.n	8002ea4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ea4:	e02e      	b.n	8002f04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2200      	movs	r2, #0
 8002eae:	2180      	movs	r1, #128	@ 0x80
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f848 	bl	8002f46 <UART_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e03a      	b.n	8002f3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10b      	bne.n	8002ee6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002edc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	e007      	b.n	8002ef6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	781a      	ldrb	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1cb      	bne.n	8002ea6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2200      	movs	r2, #0
 8002f16:	2140      	movs	r1, #64	@ 0x40
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f814 	bl	8002f46 <UART_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e006      	b.n	8002f3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e000      	b.n	8002f3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
  }
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	603b      	str	r3, [r7, #0]
 8002f52:	4613      	mov	r3, r2
 8002f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f56:	e03b      	b.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5e:	d037      	beq.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f60:	f7fe f972 	bl	8001248 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	6a3a      	ldr	r2, [r7, #32]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d302      	bcc.n	8002f76 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e03a      	b.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d023      	beq.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b80      	cmp	r3, #128	@ 0x80
 8002f8c:	d020      	beq.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b40      	cmp	r3, #64	@ 0x40
 8002f92:	d01d      	beq.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d116      	bne.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f81d 	bl	8002ff8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e00f      	b.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d0b4      	beq.n	8002f58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b095      	sub	sp, #84	@ 0x54
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	330c      	adds	r3, #12
 8003006:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300a:	e853 3f00 	ldrex	r3, [r3]
 800300e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003012:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	330c      	adds	r3, #12
 800301e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003020:	643a      	str	r2, [r7, #64]	@ 0x40
 8003022:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003024:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003026:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003028:	e841 2300 	strex	r3, r2, [r1]
 800302c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800302e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1e5      	bne.n	8003000 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3314      	adds	r3, #20
 800303a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	e853 3f00 	ldrex	r3, [r3]
 8003042:	61fb      	str	r3, [r7, #28]
   return(result);
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3314      	adds	r3, #20
 8003052:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003054:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003056:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003058:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800305a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800305c:	e841 2300 	strex	r3, r2, [r1]
 8003060:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e5      	bne.n	8003034 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306c:	2b01      	cmp	r3, #1
 800306e:	d119      	bne.n	80030a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	330c      	adds	r3, #12
 8003076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	e853 3f00 	ldrex	r3, [r3]
 800307e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f023 0310 	bic.w	r3, r3, #16
 8003086:	647b      	str	r3, [r7, #68]	@ 0x44
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	330c      	adds	r3, #12
 800308e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003090:	61ba      	str	r2, [r7, #24]
 8003092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003094:	6979      	ldr	r1, [r7, #20]
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	e841 2300 	strex	r3, r2, [r1]
 800309c:	613b      	str	r3, [r7, #16]
   return(result);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1e5      	bne.n	8003070 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030b2:	bf00      	nop
 80030b4:	3754      	adds	r7, #84	@ 0x54
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c4:	b0c0      	sub	sp, #256	@ 0x100
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030dc:	68d9      	ldr	r1, [r3, #12]
 80030de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	ea40 0301 	orr.w	r3, r0, r1
 80030e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	431a      	orrs	r2, r3
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003118:	f021 010c 	bic.w	r1, r1, #12
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003126:	430b      	orrs	r3, r1
 8003128:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800312a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800313a:	6999      	ldr	r1, [r3, #24]
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	ea40 0301 	orr.w	r3, r0, r1
 8003146:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b8f      	ldr	r3, [pc, #572]	@ (800338c <UART_SetConfig+0x2cc>)
 8003150:	429a      	cmp	r2, r3
 8003152:	d005      	beq.n	8003160 <UART_SetConfig+0xa0>
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b8d      	ldr	r3, [pc, #564]	@ (8003390 <UART_SetConfig+0x2d0>)
 800315c:	429a      	cmp	r2, r3
 800315e:	d104      	bne.n	800316a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003160:	f7ff f822 	bl	80021a8 <HAL_RCC_GetPCLK2Freq>
 8003164:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003168:	e003      	b.n	8003172 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800316a:	f7ff f809 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 800316e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800317c:	f040 810c 	bne.w	8003398 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003184:	2200      	movs	r2, #0
 8003186:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800318a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800318e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003192:	4622      	mov	r2, r4
 8003194:	462b      	mov	r3, r5
 8003196:	1891      	adds	r1, r2, r2
 8003198:	65b9      	str	r1, [r7, #88]	@ 0x58
 800319a:	415b      	adcs	r3, r3
 800319c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800319e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031a2:	4621      	mov	r1, r4
 80031a4:	eb12 0801 	adds.w	r8, r2, r1
 80031a8:	4629      	mov	r1, r5
 80031aa:	eb43 0901 	adc.w	r9, r3, r1
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031c2:	4690      	mov	r8, r2
 80031c4:	4699      	mov	r9, r3
 80031c6:	4623      	mov	r3, r4
 80031c8:	eb18 0303 	adds.w	r3, r8, r3
 80031cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031d0:	462b      	mov	r3, r5
 80031d2:	eb49 0303 	adc.w	r3, r9, r3
 80031d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80031e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80031ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80031ee:	460b      	mov	r3, r1
 80031f0:	18db      	adds	r3, r3, r3
 80031f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80031f4:	4613      	mov	r3, r2
 80031f6:	eb42 0303 	adc.w	r3, r2, r3
 80031fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80031fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003200:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003204:	f7fd f84c 	bl	80002a0 <__aeabi_uldivmod>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4b61      	ldr	r3, [pc, #388]	@ (8003394 <UART_SetConfig+0x2d4>)
 800320e:	fba3 2302 	umull	r2, r3, r3, r2
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	011c      	lsls	r4, r3, #4
 8003216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800321a:	2200      	movs	r2, #0
 800321c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003220:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003224:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003228:	4642      	mov	r2, r8
 800322a:	464b      	mov	r3, r9
 800322c:	1891      	adds	r1, r2, r2
 800322e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003230:	415b      	adcs	r3, r3
 8003232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003234:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003238:	4641      	mov	r1, r8
 800323a:	eb12 0a01 	adds.w	sl, r2, r1
 800323e:	4649      	mov	r1, r9
 8003240:	eb43 0b01 	adc.w	fp, r3, r1
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003250:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003258:	4692      	mov	sl, r2
 800325a:	469b      	mov	fp, r3
 800325c:	4643      	mov	r3, r8
 800325e:	eb1a 0303 	adds.w	r3, sl, r3
 8003262:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003266:	464b      	mov	r3, r9
 8003268:	eb4b 0303 	adc.w	r3, fp, r3
 800326c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800327c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003280:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003284:	460b      	mov	r3, r1
 8003286:	18db      	adds	r3, r3, r3
 8003288:	643b      	str	r3, [r7, #64]	@ 0x40
 800328a:	4613      	mov	r3, r2
 800328c:	eb42 0303 	adc.w	r3, r2, r3
 8003290:	647b      	str	r3, [r7, #68]	@ 0x44
 8003292:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003296:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800329a:	f7fd f801 	bl	80002a0 <__aeabi_uldivmod>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4611      	mov	r1, r2
 80032a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003394 <UART_SetConfig+0x2d4>)
 80032a6:	fba3 2301 	umull	r2, r3, r3, r1
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	2264      	movs	r2, #100	@ 0x64
 80032ae:	fb02 f303 	mul.w	r3, r2, r3
 80032b2:	1acb      	subs	r3, r1, r3
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80032ba:	4b36      	ldr	r3, [pc, #216]	@ (8003394 <UART_SetConfig+0x2d4>)
 80032bc:	fba3 2302 	umull	r2, r3, r3, r2
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80032c8:	441c      	add	r4, r3
 80032ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ce:	2200      	movs	r2, #0
 80032d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80032d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80032dc:	4642      	mov	r2, r8
 80032de:	464b      	mov	r3, r9
 80032e0:	1891      	adds	r1, r2, r2
 80032e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80032e4:	415b      	adcs	r3, r3
 80032e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80032ec:	4641      	mov	r1, r8
 80032ee:	1851      	adds	r1, r2, r1
 80032f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80032f2:	4649      	mov	r1, r9
 80032f4:	414b      	adcs	r3, r1
 80032f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003304:	4659      	mov	r1, fp
 8003306:	00cb      	lsls	r3, r1, #3
 8003308:	4651      	mov	r1, sl
 800330a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800330e:	4651      	mov	r1, sl
 8003310:	00ca      	lsls	r2, r1, #3
 8003312:	4610      	mov	r0, r2
 8003314:	4619      	mov	r1, r3
 8003316:	4603      	mov	r3, r0
 8003318:	4642      	mov	r2, r8
 800331a:	189b      	adds	r3, r3, r2
 800331c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003320:	464b      	mov	r3, r9
 8003322:	460a      	mov	r2, r1
 8003324:	eb42 0303 	adc.w	r3, r2, r3
 8003328:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003338:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800333c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003340:	460b      	mov	r3, r1
 8003342:	18db      	adds	r3, r3, r3
 8003344:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003346:	4613      	mov	r3, r2
 8003348:	eb42 0303 	adc.w	r3, r2, r3
 800334c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800334e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003352:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003356:	f7fc ffa3 	bl	80002a0 <__aeabi_uldivmod>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4b0d      	ldr	r3, [pc, #52]	@ (8003394 <UART_SetConfig+0x2d4>)
 8003360:	fba3 1302 	umull	r1, r3, r3, r2
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	2164      	movs	r1, #100	@ 0x64
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	3332      	adds	r3, #50	@ 0x32
 8003372:	4a08      	ldr	r2, [pc, #32]	@ (8003394 <UART_SetConfig+0x2d4>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	f003 0207 	and.w	r2, r3, #7
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4422      	add	r2, r4
 8003386:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003388:	e106      	b.n	8003598 <UART_SetConfig+0x4d8>
 800338a:	bf00      	nop
 800338c:	40011000 	.word	0x40011000
 8003390:	40011400 	.word	0x40011400
 8003394:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800339c:	2200      	movs	r2, #0
 800339e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80033a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80033aa:	4642      	mov	r2, r8
 80033ac:	464b      	mov	r3, r9
 80033ae:	1891      	adds	r1, r2, r2
 80033b0:	6239      	str	r1, [r7, #32]
 80033b2:	415b      	adcs	r3, r3
 80033b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033ba:	4641      	mov	r1, r8
 80033bc:	1854      	adds	r4, r2, r1
 80033be:	4649      	mov	r1, r9
 80033c0:	eb43 0501 	adc.w	r5, r3, r1
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	00eb      	lsls	r3, r5, #3
 80033ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033d2:	00e2      	lsls	r2, r4, #3
 80033d4:	4614      	mov	r4, r2
 80033d6:	461d      	mov	r5, r3
 80033d8:	4643      	mov	r3, r8
 80033da:	18e3      	adds	r3, r4, r3
 80033dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033e0:	464b      	mov	r3, r9
 80033e2:	eb45 0303 	adc.w	r3, r5, r3
 80033e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003406:	4629      	mov	r1, r5
 8003408:	008b      	lsls	r3, r1, #2
 800340a:	4621      	mov	r1, r4
 800340c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003410:	4621      	mov	r1, r4
 8003412:	008a      	lsls	r2, r1, #2
 8003414:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003418:	f7fc ff42 	bl	80002a0 <__aeabi_uldivmod>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4b60      	ldr	r3, [pc, #384]	@ (80035a4 <UART_SetConfig+0x4e4>)
 8003422:	fba3 2302 	umull	r2, r3, r3, r2
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	011c      	lsls	r4, r3, #4
 800342a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800342e:	2200      	movs	r2, #0
 8003430:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003434:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003438:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800343c:	4642      	mov	r2, r8
 800343e:	464b      	mov	r3, r9
 8003440:	1891      	adds	r1, r2, r2
 8003442:	61b9      	str	r1, [r7, #24]
 8003444:	415b      	adcs	r3, r3
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800344c:	4641      	mov	r1, r8
 800344e:	1851      	adds	r1, r2, r1
 8003450:	6139      	str	r1, [r7, #16]
 8003452:	4649      	mov	r1, r9
 8003454:	414b      	adcs	r3, r1
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003464:	4659      	mov	r1, fp
 8003466:	00cb      	lsls	r3, r1, #3
 8003468:	4651      	mov	r1, sl
 800346a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800346e:	4651      	mov	r1, sl
 8003470:	00ca      	lsls	r2, r1, #3
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	4603      	mov	r3, r0
 8003478:	4642      	mov	r2, r8
 800347a:	189b      	adds	r3, r3, r2
 800347c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003480:	464b      	mov	r3, r9
 8003482:	460a      	mov	r2, r1
 8003484:	eb42 0303 	adc.w	r3, r2, r3
 8003488:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003496:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80034a4:	4649      	mov	r1, r9
 80034a6:	008b      	lsls	r3, r1, #2
 80034a8:	4641      	mov	r1, r8
 80034aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ae:	4641      	mov	r1, r8
 80034b0:	008a      	lsls	r2, r1, #2
 80034b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80034b6:	f7fc fef3 	bl	80002a0 <__aeabi_uldivmod>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4611      	mov	r1, r2
 80034c0:	4b38      	ldr	r3, [pc, #224]	@ (80035a4 <UART_SetConfig+0x4e4>)
 80034c2:	fba3 2301 	umull	r2, r3, r3, r1
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	2264      	movs	r2, #100	@ 0x64
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	1acb      	subs	r3, r1, r3
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	3332      	adds	r3, #50	@ 0x32
 80034d4:	4a33      	ldr	r2, [pc, #204]	@ (80035a4 <UART_SetConfig+0x4e4>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034e0:	441c      	add	r4, r3
 80034e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034e6:	2200      	movs	r2, #0
 80034e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80034ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80034ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80034f0:	4642      	mov	r2, r8
 80034f2:	464b      	mov	r3, r9
 80034f4:	1891      	adds	r1, r2, r2
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	415b      	adcs	r3, r3
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003500:	4641      	mov	r1, r8
 8003502:	1851      	adds	r1, r2, r1
 8003504:	6039      	str	r1, [r7, #0]
 8003506:	4649      	mov	r1, r9
 8003508:	414b      	adcs	r3, r1
 800350a:	607b      	str	r3, [r7, #4]
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003518:	4659      	mov	r1, fp
 800351a:	00cb      	lsls	r3, r1, #3
 800351c:	4651      	mov	r1, sl
 800351e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003522:	4651      	mov	r1, sl
 8003524:	00ca      	lsls	r2, r1, #3
 8003526:	4610      	mov	r0, r2
 8003528:	4619      	mov	r1, r3
 800352a:	4603      	mov	r3, r0
 800352c:	4642      	mov	r2, r8
 800352e:	189b      	adds	r3, r3, r2
 8003530:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003532:	464b      	mov	r3, r9
 8003534:	460a      	mov	r2, r1
 8003536:	eb42 0303 	adc.w	r3, r2, r3
 800353a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	663b      	str	r3, [r7, #96]	@ 0x60
 8003546:	667a      	str	r2, [r7, #100]	@ 0x64
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003554:	4649      	mov	r1, r9
 8003556:	008b      	lsls	r3, r1, #2
 8003558:	4641      	mov	r1, r8
 800355a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800355e:	4641      	mov	r1, r8
 8003560:	008a      	lsls	r2, r1, #2
 8003562:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003566:	f7fc fe9b 	bl	80002a0 <__aeabi_uldivmod>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4b0d      	ldr	r3, [pc, #52]	@ (80035a4 <UART_SetConfig+0x4e4>)
 8003570:	fba3 1302 	umull	r1, r3, r3, r2
 8003574:	095b      	lsrs	r3, r3, #5
 8003576:	2164      	movs	r1, #100	@ 0x64
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	3332      	adds	r3, #50	@ 0x32
 8003582:	4a08      	ldr	r2, [pc, #32]	@ (80035a4 <UART_SetConfig+0x4e4>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	f003 020f 	and.w	r2, r3, #15
 800358e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4422      	add	r2, r4
 8003596:	609a      	str	r2, [r3, #8]
}
 8003598:	bf00      	nop
 800359a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800359e:	46bd      	mov	sp, r7
 80035a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a4:	51eb851f 	.word	0x51eb851f

080035a8 <siprintf>:
 80035a8:	b40e      	push	{r1, r2, r3}
 80035aa:	b510      	push	{r4, lr}
 80035ac:	b09d      	sub	sp, #116	@ 0x74
 80035ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 80035b0:	9002      	str	r0, [sp, #8]
 80035b2:	9006      	str	r0, [sp, #24]
 80035b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80035b8:	480a      	ldr	r0, [pc, #40]	@ (80035e4 <siprintf+0x3c>)
 80035ba:	9107      	str	r1, [sp, #28]
 80035bc:	9104      	str	r1, [sp, #16]
 80035be:	490a      	ldr	r1, [pc, #40]	@ (80035e8 <siprintf+0x40>)
 80035c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80035c4:	9105      	str	r1, [sp, #20]
 80035c6:	2400      	movs	r4, #0
 80035c8:	a902      	add	r1, sp, #8
 80035ca:	6800      	ldr	r0, [r0, #0]
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80035d0:	f000 f994 	bl	80038fc <_svfiprintf_r>
 80035d4:	9b02      	ldr	r3, [sp, #8]
 80035d6:	701c      	strb	r4, [r3, #0]
 80035d8:	b01d      	add	sp, #116	@ 0x74
 80035da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035de:	b003      	add	sp, #12
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	2000000c 	.word	0x2000000c
 80035e8:	ffff0208 	.word	0xffff0208

080035ec <memset>:
 80035ec:	4402      	add	r2, r0
 80035ee:	4603      	mov	r3, r0
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d100      	bne.n	80035f6 <memset+0xa>
 80035f4:	4770      	bx	lr
 80035f6:	f803 1b01 	strb.w	r1, [r3], #1
 80035fa:	e7f9      	b.n	80035f0 <memset+0x4>

080035fc <__errno>:
 80035fc:	4b01      	ldr	r3, [pc, #4]	@ (8003604 <__errno+0x8>)
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	2000000c 	.word	0x2000000c

08003608 <__libc_init_array>:
 8003608:	b570      	push	{r4, r5, r6, lr}
 800360a:	4d0d      	ldr	r5, [pc, #52]	@ (8003640 <__libc_init_array+0x38>)
 800360c:	4c0d      	ldr	r4, [pc, #52]	@ (8003644 <__libc_init_array+0x3c>)
 800360e:	1b64      	subs	r4, r4, r5
 8003610:	10a4      	asrs	r4, r4, #2
 8003612:	2600      	movs	r6, #0
 8003614:	42a6      	cmp	r6, r4
 8003616:	d109      	bne.n	800362c <__libc_init_array+0x24>
 8003618:	4d0b      	ldr	r5, [pc, #44]	@ (8003648 <__libc_init_array+0x40>)
 800361a:	4c0c      	ldr	r4, [pc, #48]	@ (800364c <__libc_init_array+0x44>)
 800361c:	f000 fc64 	bl	8003ee8 <_init>
 8003620:	1b64      	subs	r4, r4, r5
 8003622:	10a4      	asrs	r4, r4, #2
 8003624:	2600      	movs	r6, #0
 8003626:	42a6      	cmp	r6, r4
 8003628:	d105      	bne.n	8003636 <__libc_init_array+0x2e>
 800362a:	bd70      	pop	{r4, r5, r6, pc}
 800362c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003630:	4798      	blx	r3
 8003632:	3601      	adds	r6, #1
 8003634:	e7ee      	b.n	8003614 <__libc_init_array+0xc>
 8003636:	f855 3b04 	ldr.w	r3, [r5], #4
 800363a:	4798      	blx	r3
 800363c:	3601      	adds	r6, #1
 800363e:	e7f2      	b.n	8003626 <__libc_init_array+0x1e>
 8003640:	08003fa8 	.word	0x08003fa8
 8003644:	08003fa8 	.word	0x08003fa8
 8003648:	08003fa8 	.word	0x08003fa8
 800364c:	08003fac 	.word	0x08003fac

08003650 <__retarget_lock_acquire_recursive>:
 8003650:	4770      	bx	lr

08003652 <__retarget_lock_release_recursive>:
 8003652:	4770      	bx	lr

08003654 <_free_r>:
 8003654:	b538      	push	{r3, r4, r5, lr}
 8003656:	4605      	mov	r5, r0
 8003658:	2900      	cmp	r1, #0
 800365a:	d041      	beq.n	80036e0 <_free_r+0x8c>
 800365c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003660:	1f0c      	subs	r4, r1, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	bfb8      	it	lt
 8003666:	18e4      	addlt	r4, r4, r3
 8003668:	f000 f8e0 	bl	800382c <__malloc_lock>
 800366c:	4a1d      	ldr	r2, [pc, #116]	@ (80036e4 <_free_r+0x90>)
 800366e:	6813      	ldr	r3, [r2, #0]
 8003670:	b933      	cbnz	r3, 8003680 <_free_r+0x2c>
 8003672:	6063      	str	r3, [r4, #4]
 8003674:	6014      	str	r4, [r2, #0]
 8003676:	4628      	mov	r0, r5
 8003678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800367c:	f000 b8dc 	b.w	8003838 <__malloc_unlock>
 8003680:	42a3      	cmp	r3, r4
 8003682:	d908      	bls.n	8003696 <_free_r+0x42>
 8003684:	6820      	ldr	r0, [r4, #0]
 8003686:	1821      	adds	r1, r4, r0
 8003688:	428b      	cmp	r3, r1
 800368a:	bf01      	itttt	eq
 800368c:	6819      	ldreq	r1, [r3, #0]
 800368e:	685b      	ldreq	r3, [r3, #4]
 8003690:	1809      	addeq	r1, r1, r0
 8003692:	6021      	streq	r1, [r4, #0]
 8003694:	e7ed      	b.n	8003672 <_free_r+0x1e>
 8003696:	461a      	mov	r2, r3
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	b10b      	cbz	r3, 80036a0 <_free_r+0x4c>
 800369c:	42a3      	cmp	r3, r4
 800369e:	d9fa      	bls.n	8003696 <_free_r+0x42>
 80036a0:	6811      	ldr	r1, [r2, #0]
 80036a2:	1850      	adds	r0, r2, r1
 80036a4:	42a0      	cmp	r0, r4
 80036a6:	d10b      	bne.n	80036c0 <_free_r+0x6c>
 80036a8:	6820      	ldr	r0, [r4, #0]
 80036aa:	4401      	add	r1, r0
 80036ac:	1850      	adds	r0, r2, r1
 80036ae:	4283      	cmp	r3, r0
 80036b0:	6011      	str	r1, [r2, #0]
 80036b2:	d1e0      	bne.n	8003676 <_free_r+0x22>
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	6053      	str	r3, [r2, #4]
 80036ba:	4408      	add	r0, r1
 80036bc:	6010      	str	r0, [r2, #0]
 80036be:	e7da      	b.n	8003676 <_free_r+0x22>
 80036c0:	d902      	bls.n	80036c8 <_free_r+0x74>
 80036c2:	230c      	movs	r3, #12
 80036c4:	602b      	str	r3, [r5, #0]
 80036c6:	e7d6      	b.n	8003676 <_free_r+0x22>
 80036c8:	6820      	ldr	r0, [r4, #0]
 80036ca:	1821      	adds	r1, r4, r0
 80036cc:	428b      	cmp	r3, r1
 80036ce:	bf04      	itt	eq
 80036d0:	6819      	ldreq	r1, [r3, #0]
 80036d2:	685b      	ldreq	r3, [r3, #4]
 80036d4:	6063      	str	r3, [r4, #4]
 80036d6:	bf04      	itt	eq
 80036d8:	1809      	addeq	r1, r1, r0
 80036da:	6021      	streq	r1, [r4, #0]
 80036dc:	6054      	str	r4, [r2, #4]
 80036de:	e7ca      	b.n	8003676 <_free_r+0x22>
 80036e0:	bd38      	pop	{r3, r4, r5, pc}
 80036e2:	bf00      	nop
 80036e4:	20000264 	.word	0x20000264

080036e8 <sbrk_aligned>:
 80036e8:	b570      	push	{r4, r5, r6, lr}
 80036ea:	4e0f      	ldr	r6, [pc, #60]	@ (8003728 <sbrk_aligned+0x40>)
 80036ec:	460c      	mov	r4, r1
 80036ee:	6831      	ldr	r1, [r6, #0]
 80036f0:	4605      	mov	r5, r0
 80036f2:	b911      	cbnz	r1, 80036fa <sbrk_aligned+0x12>
 80036f4:	f000 fba4 	bl	8003e40 <_sbrk_r>
 80036f8:	6030      	str	r0, [r6, #0]
 80036fa:	4621      	mov	r1, r4
 80036fc:	4628      	mov	r0, r5
 80036fe:	f000 fb9f 	bl	8003e40 <_sbrk_r>
 8003702:	1c43      	adds	r3, r0, #1
 8003704:	d103      	bne.n	800370e <sbrk_aligned+0x26>
 8003706:	f04f 34ff 	mov.w	r4, #4294967295
 800370a:	4620      	mov	r0, r4
 800370c:	bd70      	pop	{r4, r5, r6, pc}
 800370e:	1cc4      	adds	r4, r0, #3
 8003710:	f024 0403 	bic.w	r4, r4, #3
 8003714:	42a0      	cmp	r0, r4
 8003716:	d0f8      	beq.n	800370a <sbrk_aligned+0x22>
 8003718:	1a21      	subs	r1, r4, r0
 800371a:	4628      	mov	r0, r5
 800371c:	f000 fb90 	bl	8003e40 <_sbrk_r>
 8003720:	3001      	adds	r0, #1
 8003722:	d1f2      	bne.n	800370a <sbrk_aligned+0x22>
 8003724:	e7ef      	b.n	8003706 <sbrk_aligned+0x1e>
 8003726:	bf00      	nop
 8003728:	20000260 	.word	0x20000260

0800372c <_malloc_r>:
 800372c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003730:	1ccd      	adds	r5, r1, #3
 8003732:	f025 0503 	bic.w	r5, r5, #3
 8003736:	3508      	adds	r5, #8
 8003738:	2d0c      	cmp	r5, #12
 800373a:	bf38      	it	cc
 800373c:	250c      	movcc	r5, #12
 800373e:	2d00      	cmp	r5, #0
 8003740:	4606      	mov	r6, r0
 8003742:	db01      	blt.n	8003748 <_malloc_r+0x1c>
 8003744:	42a9      	cmp	r1, r5
 8003746:	d904      	bls.n	8003752 <_malloc_r+0x26>
 8003748:	230c      	movs	r3, #12
 800374a:	6033      	str	r3, [r6, #0]
 800374c:	2000      	movs	r0, #0
 800374e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003752:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003828 <_malloc_r+0xfc>
 8003756:	f000 f869 	bl	800382c <__malloc_lock>
 800375a:	f8d8 3000 	ldr.w	r3, [r8]
 800375e:	461c      	mov	r4, r3
 8003760:	bb44      	cbnz	r4, 80037b4 <_malloc_r+0x88>
 8003762:	4629      	mov	r1, r5
 8003764:	4630      	mov	r0, r6
 8003766:	f7ff ffbf 	bl	80036e8 <sbrk_aligned>
 800376a:	1c43      	adds	r3, r0, #1
 800376c:	4604      	mov	r4, r0
 800376e:	d158      	bne.n	8003822 <_malloc_r+0xf6>
 8003770:	f8d8 4000 	ldr.w	r4, [r8]
 8003774:	4627      	mov	r7, r4
 8003776:	2f00      	cmp	r7, #0
 8003778:	d143      	bne.n	8003802 <_malloc_r+0xd6>
 800377a:	2c00      	cmp	r4, #0
 800377c:	d04b      	beq.n	8003816 <_malloc_r+0xea>
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	4639      	mov	r1, r7
 8003782:	4630      	mov	r0, r6
 8003784:	eb04 0903 	add.w	r9, r4, r3
 8003788:	f000 fb5a 	bl	8003e40 <_sbrk_r>
 800378c:	4581      	cmp	r9, r0
 800378e:	d142      	bne.n	8003816 <_malloc_r+0xea>
 8003790:	6821      	ldr	r1, [r4, #0]
 8003792:	1a6d      	subs	r5, r5, r1
 8003794:	4629      	mov	r1, r5
 8003796:	4630      	mov	r0, r6
 8003798:	f7ff ffa6 	bl	80036e8 <sbrk_aligned>
 800379c:	3001      	adds	r0, #1
 800379e:	d03a      	beq.n	8003816 <_malloc_r+0xea>
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	442b      	add	r3, r5
 80037a4:	6023      	str	r3, [r4, #0]
 80037a6:	f8d8 3000 	ldr.w	r3, [r8]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	bb62      	cbnz	r2, 8003808 <_malloc_r+0xdc>
 80037ae:	f8c8 7000 	str.w	r7, [r8]
 80037b2:	e00f      	b.n	80037d4 <_malloc_r+0xa8>
 80037b4:	6822      	ldr	r2, [r4, #0]
 80037b6:	1b52      	subs	r2, r2, r5
 80037b8:	d420      	bmi.n	80037fc <_malloc_r+0xd0>
 80037ba:	2a0b      	cmp	r2, #11
 80037bc:	d917      	bls.n	80037ee <_malloc_r+0xc2>
 80037be:	1961      	adds	r1, r4, r5
 80037c0:	42a3      	cmp	r3, r4
 80037c2:	6025      	str	r5, [r4, #0]
 80037c4:	bf18      	it	ne
 80037c6:	6059      	strne	r1, [r3, #4]
 80037c8:	6863      	ldr	r3, [r4, #4]
 80037ca:	bf08      	it	eq
 80037cc:	f8c8 1000 	streq.w	r1, [r8]
 80037d0:	5162      	str	r2, [r4, r5]
 80037d2:	604b      	str	r3, [r1, #4]
 80037d4:	4630      	mov	r0, r6
 80037d6:	f000 f82f 	bl	8003838 <__malloc_unlock>
 80037da:	f104 000b 	add.w	r0, r4, #11
 80037de:	1d23      	adds	r3, r4, #4
 80037e0:	f020 0007 	bic.w	r0, r0, #7
 80037e4:	1ac2      	subs	r2, r0, r3
 80037e6:	bf1c      	itt	ne
 80037e8:	1a1b      	subne	r3, r3, r0
 80037ea:	50a3      	strne	r3, [r4, r2]
 80037ec:	e7af      	b.n	800374e <_malloc_r+0x22>
 80037ee:	6862      	ldr	r2, [r4, #4]
 80037f0:	42a3      	cmp	r3, r4
 80037f2:	bf0c      	ite	eq
 80037f4:	f8c8 2000 	streq.w	r2, [r8]
 80037f8:	605a      	strne	r2, [r3, #4]
 80037fa:	e7eb      	b.n	80037d4 <_malloc_r+0xa8>
 80037fc:	4623      	mov	r3, r4
 80037fe:	6864      	ldr	r4, [r4, #4]
 8003800:	e7ae      	b.n	8003760 <_malloc_r+0x34>
 8003802:	463c      	mov	r4, r7
 8003804:	687f      	ldr	r7, [r7, #4]
 8003806:	e7b6      	b.n	8003776 <_malloc_r+0x4a>
 8003808:	461a      	mov	r2, r3
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	42a3      	cmp	r3, r4
 800380e:	d1fb      	bne.n	8003808 <_malloc_r+0xdc>
 8003810:	2300      	movs	r3, #0
 8003812:	6053      	str	r3, [r2, #4]
 8003814:	e7de      	b.n	80037d4 <_malloc_r+0xa8>
 8003816:	230c      	movs	r3, #12
 8003818:	6033      	str	r3, [r6, #0]
 800381a:	4630      	mov	r0, r6
 800381c:	f000 f80c 	bl	8003838 <__malloc_unlock>
 8003820:	e794      	b.n	800374c <_malloc_r+0x20>
 8003822:	6005      	str	r5, [r0, #0]
 8003824:	e7d6      	b.n	80037d4 <_malloc_r+0xa8>
 8003826:	bf00      	nop
 8003828:	20000264 	.word	0x20000264

0800382c <__malloc_lock>:
 800382c:	4801      	ldr	r0, [pc, #4]	@ (8003834 <__malloc_lock+0x8>)
 800382e:	f7ff bf0f 	b.w	8003650 <__retarget_lock_acquire_recursive>
 8003832:	bf00      	nop
 8003834:	2000025c 	.word	0x2000025c

08003838 <__malloc_unlock>:
 8003838:	4801      	ldr	r0, [pc, #4]	@ (8003840 <__malloc_unlock+0x8>)
 800383a:	f7ff bf0a 	b.w	8003652 <__retarget_lock_release_recursive>
 800383e:	bf00      	nop
 8003840:	2000025c 	.word	0x2000025c

08003844 <__ssputs_r>:
 8003844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003848:	688e      	ldr	r6, [r1, #8]
 800384a:	461f      	mov	r7, r3
 800384c:	42be      	cmp	r6, r7
 800384e:	680b      	ldr	r3, [r1, #0]
 8003850:	4682      	mov	sl, r0
 8003852:	460c      	mov	r4, r1
 8003854:	4690      	mov	r8, r2
 8003856:	d82d      	bhi.n	80038b4 <__ssputs_r+0x70>
 8003858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800385c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003860:	d026      	beq.n	80038b0 <__ssputs_r+0x6c>
 8003862:	6965      	ldr	r5, [r4, #20]
 8003864:	6909      	ldr	r1, [r1, #16]
 8003866:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800386a:	eba3 0901 	sub.w	r9, r3, r1
 800386e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003872:	1c7b      	adds	r3, r7, #1
 8003874:	444b      	add	r3, r9
 8003876:	106d      	asrs	r5, r5, #1
 8003878:	429d      	cmp	r5, r3
 800387a:	bf38      	it	cc
 800387c:	461d      	movcc	r5, r3
 800387e:	0553      	lsls	r3, r2, #21
 8003880:	d527      	bpl.n	80038d2 <__ssputs_r+0x8e>
 8003882:	4629      	mov	r1, r5
 8003884:	f7ff ff52 	bl	800372c <_malloc_r>
 8003888:	4606      	mov	r6, r0
 800388a:	b360      	cbz	r0, 80038e6 <__ssputs_r+0xa2>
 800388c:	6921      	ldr	r1, [r4, #16]
 800388e:	464a      	mov	r2, r9
 8003890:	f000 fae6 	bl	8003e60 <memcpy>
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800389a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800389e:	81a3      	strh	r3, [r4, #12]
 80038a0:	6126      	str	r6, [r4, #16]
 80038a2:	6165      	str	r5, [r4, #20]
 80038a4:	444e      	add	r6, r9
 80038a6:	eba5 0509 	sub.w	r5, r5, r9
 80038aa:	6026      	str	r6, [r4, #0]
 80038ac:	60a5      	str	r5, [r4, #8]
 80038ae:	463e      	mov	r6, r7
 80038b0:	42be      	cmp	r6, r7
 80038b2:	d900      	bls.n	80038b6 <__ssputs_r+0x72>
 80038b4:	463e      	mov	r6, r7
 80038b6:	6820      	ldr	r0, [r4, #0]
 80038b8:	4632      	mov	r2, r6
 80038ba:	4641      	mov	r1, r8
 80038bc:	f000 faa6 	bl	8003e0c <memmove>
 80038c0:	68a3      	ldr	r3, [r4, #8]
 80038c2:	1b9b      	subs	r3, r3, r6
 80038c4:	60a3      	str	r3, [r4, #8]
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	4433      	add	r3, r6
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	2000      	movs	r0, #0
 80038ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d2:	462a      	mov	r2, r5
 80038d4:	f000 fad2 	bl	8003e7c <_realloc_r>
 80038d8:	4606      	mov	r6, r0
 80038da:	2800      	cmp	r0, #0
 80038dc:	d1e0      	bne.n	80038a0 <__ssputs_r+0x5c>
 80038de:	6921      	ldr	r1, [r4, #16]
 80038e0:	4650      	mov	r0, sl
 80038e2:	f7ff feb7 	bl	8003654 <_free_r>
 80038e6:	230c      	movs	r3, #12
 80038e8:	f8ca 3000 	str.w	r3, [sl]
 80038ec:	89a3      	ldrh	r3, [r4, #12]
 80038ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038f2:	81a3      	strh	r3, [r4, #12]
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	e7e9      	b.n	80038ce <__ssputs_r+0x8a>
	...

080038fc <_svfiprintf_r>:
 80038fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003900:	4698      	mov	r8, r3
 8003902:	898b      	ldrh	r3, [r1, #12]
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	b09d      	sub	sp, #116	@ 0x74
 8003908:	4607      	mov	r7, r0
 800390a:	460d      	mov	r5, r1
 800390c:	4614      	mov	r4, r2
 800390e:	d510      	bpl.n	8003932 <_svfiprintf_r+0x36>
 8003910:	690b      	ldr	r3, [r1, #16]
 8003912:	b973      	cbnz	r3, 8003932 <_svfiprintf_r+0x36>
 8003914:	2140      	movs	r1, #64	@ 0x40
 8003916:	f7ff ff09 	bl	800372c <_malloc_r>
 800391a:	6028      	str	r0, [r5, #0]
 800391c:	6128      	str	r0, [r5, #16]
 800391e:	b930      	cbnz	r0, 800392e <_svfiprintf_r+0x32>
 8003920:	230c      	movs	r3, #12
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	b01d      	add	sp, #116	@ 0x74
 800392a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392e:	2340      	movs	r3, #64	@ 0x40
 8003930:	616b      	str	r3, [r5, #20]
 8003932:	2300      	movs	r3, #0
 8003934:	9309      	str	r3, [sp, #36]	@ 0x24
 8003936:	2320      	movs	r3, #32
 8003938:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800393c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003940:	2330      	movs	r3, #48	@ 0x30
 8003942:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ae0 <_svfiprintf_r+0x1e4>
 8003946:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800394a:	f04f 0901 	mov.w	r9, #1
 800394e:	4623      	mov	r3, r4
 8003950:	469a      	mov	sl, r3
 8003952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003956:	b10a      	cbz	r2, 800395c <_svfiprintf_r+0x60>
 8003958:	2a25      	cmp	r2, #37	@ 0x25
 800395a:	d1f9      	bne.n	8003950 <_svfiprintf_r+0x54>
 800395c:	ebba 0b04 	subs.w	fp, sl, r4
 8003960:	d00b      	beq.n	800397a <_svfiprintf_r+0x7e>
 8003962:	465b      	mov	r3, fp
 8003964:	4622      	mov	r2, r4
 8003966:	4629      	mov	r1, r5
 8003968:	4638      	mov	r0, r7
 800396a:	f7ff ff6b 	bl	8003844 <__ssputs_r>
 800396e:	3001      	adds	r0, #1
 8003970:	f000 80a7 	beq.w	8003ac2 <_svfiprintf_r+0x1c6>
 8003974:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003976:	445a      	add	r2, fp
 8003978:	9209      	str	r2, [sp, #36]	@ 0x24
 800397a:	f89a 3000 	ldrb.w	r3, [sl]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 809f 	beq.w	8003ac2 <_svfiprintf_r+0x1c6>
 8003984:	2300      	movs	r3, #0
 8003986:	f04f 32ff 	mov.w	r2, #4294967295
 800398a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800398e:	f10a 0a01 	add.w	sl, sl, #1
 8003992:	9304      	str	r3, [sp, #16]
 8003994:	9307      	str	r3, [sp, #28]
 8003996:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800399a:	931a      	str	r3, [sp, #104]	@ 0x68
 800399c:	4654      	mov	r4, sl
 800399e:	2205      	movs	r2, #5
 80039a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039a4:	484e      	ldr	r0, [pc, #312]	@ (8003ae0 <_svfiprintf_r+0x1e4>)
 80039a6:	f7fc fc2b 	bl	8000200 <memchr>
 80039aa:	9a04      	ldr	r2, [sp, #16]
 80039ac:	b9d8      	cbnz	r0, 80039e6 <_svfiprintf_r+0xea>
 80039ae:	06d0      	lsls	r0, r2, #27
 80039b0:	bf44      	itt	mi
 80039b2:	2320      	movmi	r3, #32
 80039b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039b8:	0711      	lsls	r1, r2, #28
 80039ba:	bf44      	itt	mi
 80039bc:	232b      	movmi	r3, #43	@ 0x2b
 80039be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039c2:	f89a 3000 	ldrb.w	r3, [sl]
 80039c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80039c8:	d015      	beq.n	80039f6 <_svfiprintf_r+0xfa>
 80039ca:	9a07      	ldr	r2, [sp, #28]
 80039cc:	4654      	mov	r4, sl
 80039ce:	2000      	movs	r0, #0
 80039d0:	f04f 0c0a 	mov.w	ip, #10
 80039d4:	4621      	mov	r1, r4
 80039d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039da:	3b30      	subs	r3, #48	@ 0x30
 80039dc:	2b09      	cmp	r3, #9
 80039de:	d94b      	bls.n	8003a78 <_svfiprintf_r+0x17c>
 80039e0:	b1b0      	cbz	r0, 8003a10 <_svfiprintf_r+0x114>
 80039e2:	9207      	str	r2, [sp, #28]
 80039e4:	e014      	b.n	8003a10 <_svfiprintf_r+0x114>
 80039e6:	eba0 0308 	sub.w	r3, r0, r8
 80039ea:	fa09 f303 	lsl.w	r3, r9, r3
 80039ee:	4313      	orrs	r3, r2
 80039f0:	9304      	str	r3, [sp, #16]
 80039f2:	46a2      	mov	sl, r4
 80039f4:	e7d2      	b.n	800399c <_svfiprintf_r+0xa0>
 80039f6:	9b03      	ldr	r3, [sp, #12]
 80039f8:	1d19      	adds	r1, r3, #4
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	9103      	str	r1, [sp, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bfbb      	ittet	lt
 8003a02:	425b      	neglt	r3, r3
 8003a04:	f042 0202 	orrlt.w	r2, r2, #2
 8003a08:	9307      	strge	r3, [sp, #28]
 8003a0a:	9307      	strlt	r3, [sp, #28]
 8003a0c:	bfb8      	it	lt
 8003a0e:	9204      	strlt	r2, [sp, #16]
 8003a10:	7823      	ldrb	r3, [r4, #0]
 8003a12:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a14:	d10a      	bne.n	8003a2c <_svfiprintf_r+0x130>
 8003a16:	7863      	ldrb	r3, [r4, #1]
 8003a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a1a:	d132      	bne.n	8003a82 <_svfiprintf_r+0x186>
 8003a1c:	9b03      	ldr	r3, [sp, #12]
 8003a1e:	1d1a      	adds	r2, r3, #4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	9203      	str	r2, [sp, #12]
 8003a24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a28:	3402      	adds	r4, #2
 8003a2a:	9305      	str	r3, [sp, #20]
 8003a2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003af0 <_svfiprintf_r+0x1f4>
 8003a30:	7821      	ldrb	r1, [r4, #0]
 8003a32:	2203      	movs	r2, #3
 8003a34:	4650      	mov	r0, sl
 8003a36:	f7fc fbe3 	bl	8000200 <memchr>
 8003a3a:	b138      	cbz	r0, 8003a4c <_svfiprintf_r+0x150>
 8003a3c:	9b04      	ldr	r3, [sp, #16]
 8003a3e:	eba0 000a 	sub.w	r0, r0, sl
 8003a42:	2240      	movs	r2, #64	@ 0x40
 8003a44:	4082      	lsls	r2, r0
 8003a46:	4313      	orrs	r3, r2
 8003a48:	3401      	adds	r4, #1
 8003a4a:	9304      	str	r3, [sp, #16]
 8003a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a50:	4824      	ldr	r0, [pc, #144]	@ (8003ae4 <_svfiprintf_r+0x1e8>)
 8003a52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a56:	2206      	movs	r2, #6
 8003a58:	f7fc fbd2 	bl	8000200 <memchr>
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	d036      	beq.n	8003ace <_svfiprintf_r+0x1d2>
 8003a60:	4b21      	ldr	r3, [pc, #132]	@ (8003ae8 <_svfiprintf_r+0x1ec>)
 8003a62:	bb1b      	cbnz	r3, 8003aac <_svfiprintf_r+0x1b0>
 8003a64:	9b03      	ldr	r3, [sp, #12]
 8003a66:	3307      	adds	r3, #7
 8003a68:	f023 0307 	bic.w	r3, r3, #7
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	9303      	str	r3, [sp, #12]
 8003a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a72:	4433      	add	r3, r6
 8003a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a76:	e76a      	b.n	800394e <_svfiprintf_r+0x52>
 8003a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a7c:	460c      	mov	r4, r1
 8003a7e:	2001      	movs	r0, #1
 8003a80:	e7a8      	b.n	80039d4 <_svfiprintf_r+0xd8>
 8003a82:	2300      	movs	r3, #0
 8003a84:	3401      	adds	r4, #1
 8003a86:	9305      	str	r3, [sp, #20]
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f04f 0c0a 	mov.w	ip, #10
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a94:	3a30      	subs	r2, #48	@ 0x30
 8003a96:	2a09      	cmp	r2, #9
 8003a98:	d903      	bls.n	8003aa2 <_svfiprintf_r+0x1a6>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0c6      	beq.n	8003a2c <_svfiprintf_r+0x130>
 8003a9e:	9105      	str	r1, [sp, #20]
 8003aa0:	e7c4      	b.n	8003a2c <_svfiprintf_r+0x130>
 8003aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e7f0      	b.n	8003a8e <_svfiprintf_r+0x192>
 8003aac:	ab03      	add	r3, sp, #12
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	462a      	mov	r2, r5
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8003aec <_svfiprintf_r+0x1f0>)
 8003ab4:	a904      	add	r1, sp, #16
 8003ab6:	4638      	mov	r0, r7
 8003ab8:	f3af 8000 	nop.w
 8003abc:	1c42      	adds	r2, r0, #1
 8003abe:	4606      	mov	r6, r0
 8003ac0:	d1d6      	bne.n	8003a70 <_svfiprintf_r+0x174>
 8003ac2:	89ab      	ldrh	r3, [r5, #12]
 8003ac4:	065b      	lsls	r3, r3, #25
 8003ac6:	f53f af2d 	bmi.w	8003924 <_svfiprintf_r+0x28>
 8003aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003acc:	e72c      	b.n	8003928 <_svfiprintf_r+0x2c>
 8003ace:	ab03      	add	r3, sp, #12
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	462a      	mov	r2, r5
 8003ad4:	4b05      	ldr	r3, [pc, #20]	@ (8003aec <_svfiprintf_r+0x1f0>)
 8003ad6:	a904      	add	r1, sp, #16
 8003ad8:	4638      	mov	r0, r7
 8003ada:	f000 f879 	bl	8003bd0 <_printf_i>
 8003ade:	e7ed      	b.n	8003abc <_svfiprintf_r+0x1c0>
 8003ae0:	08003f6c 	.word	0x08003f6c
 8003ae4:	08003f76 	.word	0x08003f76
 8003ae8:	00000000 	.word	0x00000000
 8003aec:	08003845 	.word	0x08003845
 8003af0:	08003f72 	.word	0x08003f72

08003af4 <_printf_common>:
 8003af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003af8:	4616      	mov	r6, r2
 8003afa:	4698      	mov	r8, r3
 8003afc:	688a      	ldr	r2, [r1, #8]
 8003afe:	690b      	ldr	r3, [r1, #16]
 8003b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b04:	4293      	cmp	r3, r2
 8003b06:	bfb8      	it	lt
 8003b08:	4613      	movlt	r3, r2
 8003b0a:	6033      	str	r3, [r6, #0]
 8003b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b10:	4607      	mov	r7, r0
 8003b12:	460c      	mov	r4, r1
 8003b14:	b10a      	cbz	r2, 8003b1a <_printf_common+0x26>
 8003b16:	3301      	adds	r3, #1
 8003b18:	6033      	str	r3, [r6, #0]
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	0699      	lsls	r1, r3, #26
 8003b1e:	bf42      	ittt	mi
 8003b20:	6833      	ldrmi	r3, [r6, #0]
 8003b22:	3302      	addmi	r3, #2
 8003b24:	6033      	strmi	r3, [r6, #0]
 8003b26:	6825      	ldr	r5, [r4, #0]
 8003b28:	f015 0506 	ands.w	r5, r5, #6
 8003b2c:	d106      	bne.n	8003b3c <_printf_common+0x48>
 8003b2e:	f104 0a19 	add.w	sl, r4, #25
 8003b32:	68e3      	ldr	r3, [r4, #12]
 8003b34:	6832      	ldr	r2, [r6, #0]
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	42ab      	cmp	r3, r5
 8003b3a:	dc26      	bgt.n	8003b8a <_printf_common+0x96>
 8003b3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b40:	6822      	ldr	r2, [r4, #0]
 8003b42:	3b00      	subs	r3, #0
 8003b44:	bf18      	it	ne
 8003b46:	2301      	movne	r3, #1
 8003b48:	0692      	lsls	r2, r2, #26
 8003b4a:	d42b      	bmi.n	8003ba4 <_printf_common+0xb0>
 8003b4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b50:	4641      	mov	r1, r8
 8003b52:	4638      	mov	r0, r7
 8003b54:	47c8      	blx	r9
 8003b56:	3001      	adds	r0, #1
 8003b58:	d01e      	beq.n	8003b98 <_printf_common+0xa4>
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	6922      	ldr	r2, [r4, #16]
 8003b5e:	f003 0306 	and.w	r3, r3, #6
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	bf02      	ittt	eq
 8003b66:	68e5      	ldreq	r5, [r4, #12]
 8003b68:	6833      	ldreq	r3, [r6, #0]
 8003b6a:	1aed      	subeq	r5, r5, r3
 8003b6c:	68a3      	ldr	r3, [r4, #8]
 8003b6e:	bf0c      	ite	eq
 8003b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b74:	2500      	movne	r5, #0
 8003b76:	4293      	cmp	r3, r2
 8003b78:	bfc4      	itt	gt
 8003b7a:	1a9b      	subgt	r3, r3, r2
 8003b7c:	18ed      	addgt	r5, r5, r3
 8003b7e:	2600      	movs	r6, #0
 8003b80:	341a      	adds	r4, #26
 8003b82:	42b5      	cmp	r5, r6
 8003b84:	d11a      	bne.n	8003bbc <_printf_common+0xc8>
 8003b86:	2000      	movs	r0, #0
 8003b88:	e008      	b.n	8003b9c <_printf_common+0xa8>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	4652      	mov	r2, sl
 8003b8e:	4641      	mov	r1, r8
 8003b90:	4638      	mov	r0, r7
 8003b92:	47c8      	blx	r9
 8003b94:	3001      	adds	r0, #1
 8003b96:	d103      	bne.n	8003ba0 <_printf_common+0xac>
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba0:	3501      	adds	r5, #1
 8003ba2:	e7c6      	b.n	8003b32 <_printf_common+0x3e>
 8003ba4:	18e1      	adds	r1, r4, r3
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	2030      	movs	r0, #48	@ 0x30
 8003baa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003bae:	4422      	add	r2, r4
 8003bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003bb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003bb8:	3302      	adds	r3, #2
 8003bba:	e7c7      	b.n	8003b4c <_printf_common+0x58>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	4622      	mov	r2, r4
 8003bc0:	4641      	mov	r1, r8
 8003bc2:	4638      	mov	r0, r7
 8003bc4:	47c8      	blx	r9
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	d0e6      	beq.n	8003b98 <_printf_common+0xa4>
 8003bca:	3601      	adds	r6, #1
 8003bcc:	e7d9      	b.n	8003b82 <_printf_common+0x8e>
	...

08003bd0 <_printf_i>:
 8003bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd4:	7e0f      	ldrb	r7, [r1, #24]
 8003bd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bd8:	2f78      	cmp	r7, #120	@ 0x78
 8003bda:	4691      	mov	r9, r2
 8003bdc:	4680      	mov	r8, r0
 8003bde:	460c      	mov	r4, r1
 8003be0:	469a      	mov	sl, r3
 8003be2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003be6:	d807      	bhi.n	8003bf8 <_printf_i+0x28>
 8003be8:	2f62      	cmp	r7, #98	@ 0x62
 8003bea:	d80a      	bhi.n	8003c02 <_printf_i+0x32>
 8003bec:	2f00      	cmp	r7, #0
 8003bee:	f000 80d1 	beq.w	8003d94 <_printf_i+0x1c4>
 8003bf2:	2f58      	cmp	r7, #88	@ 0x58
 8003bf4:	f000 80b8 	beq.w	8003d68 <_printf_i+0x198>
 8003bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c00:	e03a      	b.n	8003c78 <_printf_i+0xa8>
 8003c02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c06:	2b15      	cmp	r3, #21
 8003c08:	d8f6      	bhi.n	8003bf8 <_printf_i+0x28>
 8003c0a:	a101      	add	r1, pc, #4	@ (adr r1, 8003c10 <_printf_i+0x40>)
 8003c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c10:	08003c69 	.word	0x08003c69
 8003c14:	08003c7d 	.word	0x08003c7d
 8003c18:	08003bf9 	.word	0x08003bf9
 8003c1c:	08003bf9 	.word	0x08003bf9
 8003c20:	08003bf9 	.word	0x08003bf9
 8003c24:	08003bf9 	.word	0x08003bf9
 8003c28:	08003c7d 	.word	0x08003c7d
 8003c2c:	08003bf9 	.word	0x08003bf9
 8003c30:	08003bf9 	.word	0x08003bf9
 8003c34:	08003bf9 	.word	0x08003bf9
 8003c38:	08003bf9 	.word	0x08003bf9
 8003c3c:	08003d7b 	.word	0x08003d7b
 8003c40:	08003ca7 	.word	0x08003ca7
 8003c44:	08003d35 	.word	0x08003d35
 8003c48:	08003bf9 	.word	0x08003bf9
 8003c4c:	08003bf9 	.word	0x08003bf9
 8003c50:	08003d9d 	.word	0x08003d9d
 8003c54:	08003bf9 	.word	0x08003bf9
 8003c58:	08003ca7 	.word	0x08003ca7
 8003c5c:	08003bf9 	.word	0x08003bf9
 8003c60:	08003bf9 	.word	0x08003bf9
 8003c64:	08003d3d 	.word	0x08003d3d
 8003c68:	6833      	ldr	r3, [r6, #0]
 8003c6a:	1d1a      	adds	r2, r3, #4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6032      	str	r2, [r6, #0]
 8003c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e09c      	b.n	8003db6 <_printf_i+0x1e6>
 8003c7c:	6833      	ldr	r3, [r6, #0]
 8003c7e:	6820      	ldr	r0, [r4, #0]
 8003c80:	1d19      	adds	r1, r3, #4
 8003c82:	6031      	str	r1, [r6, #0]
 8003c84:	0606      	lsls	r6, r0, #24
 8003c86:	d501      	bpl.n	8003c8c <_printf_i+0xbc>
 8003c88:	681d      	ldr	r5, [r3, #0]
 8003c8a:	e003      	b.n	8003c94 <_printf_i+0xc4>
 8003c8c:	0645      	lsls	r5, r0, #25
 8003c8e:	d5fb      	bpl.n	8003c88 <_printf_i+0xb8>
 8003c90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c94:	2d00      	cmp	r5, #0
 8003c96:	da03      	bge.n	8003ca0 <_printf_i+0xd0>
 8003c98:	232d      	movs	r3, #45	@ 0x2d
 8003c9a:	426d      	negs	r5, r5
 8003c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ca0:	4858      	ldr	r0, [pc, #352]	@ (8003e04 <_printf_i+0x234>)
 8003ca2:	230a      	movs	r3, #10
 8003ca4:	e011      	b.n	8003cca <_printf_i+0xfa>
 8003ca6:	6821      	ldr	r1, [r4, #0]
 8003ca8:	6833      	ldr	r3, [r6, #0]
 8003caa:	0608      	lsls	r0, r1, #24
 8003cac:	f853 5b04 	ldr.w	r5, [r3], #4
 8003cb0:	d402      	bmi.n	8003cb8 <_printf_i+0xe8>
 8003cb2:	0649      	lsls	r1, r1, #25
 8003cb4:	bf48      	it	mi
 8003cb6:	b2ad      	uxthmi	r5, r5
 8003cb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cba:	4852      	ldr	r0, [pc, #328]	@ (8003e04 <_printf_i+0x234>)
 8003cbc:	6033      	str	r3, [r6, #0]
 8003cbe:	bf14      	ite	ne
 8003cc0:	230a      	movne	r3, #10
 8003cc2:	2308      	moveq	r3, #8
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cca:	6866      	ldr	r6, [r4, #4]
 8003ccc:	60a6      	str	r6, [r4, #8]
 8003cce:	2e00      	cmp	r6, #0
 8003cd0:	db05      	blt.n	8003cde <_printf_i+0x10e>
 8003cd2:	6821      	ldr	r1, [r4, #0]
 8003cd4:	432e      	orrs	r6, r5
 8003cd6:	f021 0104 	bic.w	r1, r1, #4
 8003cda:	6021      	str	r1, [r4, #0]
 8003cdc:	d04b      	beq.n	8003d76 <_printf_i+0x1a6>
 8003cde:	4616      	mov	r6, r2
 8003ce0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ce4:	fb03 5711 	mls	r7, r3, r1, r5
 8003ce8:	5dc7      	ldrb	r7, [r0, r7]
 8003cea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003cee:	462f      	mov	r7, r5
 8003cf0:	42bb      	cmp	r3, r7
 8003cf2:	460d      	mov	r5, r1
 8003cf4:	d9f4      	bls.n	8003ce0 <_printf_i+0x110>
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d10b      	bne.n	8003d12 <_printf_i+0x142>
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	07df      	lsls	r7, r3, #31
 8003cfe:	d508      	bpl.n	8003d12 <_printf_i+0x142>
 8003d00:	6923      	ldr	r3, [r4, #16]
 8003d02:	6861      	ldr	r1, [r4, #4]
 8003d04:	4299      	cmp	r1, r3
 8003d06:	bfde      	ittt	le
 8003d08:	2330      	movle	r3, #48	@ 0x30
 8003d0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d12:	1b92      	subs	r2, r2, r6
 8003d14:	6122      	str	r2, [r4, #16]
 8003d16:	f8cd a000 	str.w	sl, [sp]
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	aa03      	add	r2, sp, #12
 8003d1e:	4621      	mov	r1, r4
 8003d20:	4640      	mov	r0, r8
 8003d22:	f7ff fee7 	bl	8003af4 <_printf_common>
 8003d26:	3001      	adds	r0, #1
 8003d28:	d14a      	bne.n	8003dc0 <_printf_i+0x1f0>
 8003d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2e:	b004      	add	sp, #16
 8003d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	f043 0320 	orr.w	r3, r3, #32
 8003d3a:	6023      	str	r3, [r4, #0]
 8003d3c:	4832      	ldr	r0, [pc, #200]	@ (8003e08 <_printf_i+0x238>)
 8003d3e:	2778      	movs	r7, #120	@ 0x78
 8003d40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	6831      	ldr	r1, [r6, #0]
 8003d48:	061f      	lsls	r7, r3, #24
 8003d4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d4e:	d402      	bmi.n	8003d56 <_printf_i+0x186>
 8003d50:	065f      	lsls	r7, r3, #25
 8003d52:	bf48      	it	mi
 8003d54:	b2ad      	uxthmi	r5, r5
 8003d56:	6031      	str	r1, [r6, #0]
 8003d58:	07d9      	lsls	r1, r3, #31
 8003d5a:	bf44      	itt	mi
 8003d5c:	f043 0320 	orrmi.w	r3, r3, #32
 8003d60:	6023      	strmi	r3, [r4, #0]
 8003d62:	b11d      	cbz	r5, 8003d6c <_printf_i+0x19c>
 8003d64:	2310      	movs	r3, #16
 8003d66:	e7ad      	b.n	8003cc4 <_printf_i+0xf4>
 8003d68:	4826      	ldr	r0, [pc, #152]	@ (8003e04 <_printf_i+0x234>)
 8003d6a:	e7e9      	b.n	8003d40 <_printf_i+0x170>
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	f023 0320 	bic.w	r3, r3, #32
 8003d72:	6023      	str	r3, [r4, #0]
 8003d74:	e7f6      	b.n	8003d64 <_printf_i+0x194>
 8003d76:	4616      	mov	r6, r2
 8003d78:	e7bd      	b.n	8003cf6 <_printf_i+0x126>
 8003d7a:	6833      	ldr	r3, [r6, #0]
 8003d7c:	6825      	ldr	r5, [r4, #0]
 8003d7e:	6961      	ldr	r1, [r4, #20]
 8003d80:	1d18      	adds	r0, r3, #4
 8003d82:	6030      	str	r0, [r6, #0]
 8003d84:	062e      	lsls	r6, r5, #24
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	d501      	bpl.n	8003d8e <_printf_i+0x1be>
 8003d8a:	6019      	str	r1, [r3, #0]
 8003d8c:	e002      	b.n	8003d94 <_printf_i+0x1c4>
 8003d8e:	0668      	lsls	r0, r5, #25
 8003d90:	d5fb      	bpl.n	8003d8a <_printf_i+0x1ba>
 8003d92:	8019      	strh	r1, [r3, #0]
 8003d94:	2300      	movs	r3, #0
 8003d96:	6123      	str	r3, [r4, #16]
 8003d98:	4616      	mov	r6, r2
 8003d9a:	e7bc      	b.n	8003d16 <_printf_i+0x146>
 8003d9c:	6833      	ldr	r3, [r6, #0]
 8003d9e:	1d1a      	adds	r2, r3, #4
 8003da0:	6032      	str	r2, [r6, #0]
 8003da2:	681e      	ldr	r6, [r3, #0]
 8003da4:	6862      	ldr	r2, [r4, #4]
 8003da6:	2100      	movs	r1, #0
 8003da8:	4630      	mov	r0, r6
 8003daa:	f7fc fa29 	bl	8000200 <memchr>
 8003dae:	b108      	cbz	r0, 8003db4 <_printf_i+0x1e4>
 8003db0:	1b80      	subs	r0, r0, r6
 8003db2:	6060      	str	r0, [r4, #4]
 8003db4:	6863      	ldr	r3, [r4, #4]
 8003db6:	6123      	str	r3, [r4, #16]
 8003db8:	2300      	movs	r3, #0
 8003dba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dbe:	e7aa      	b.n	8003d16 <_printf_i+0x146>
 8003dc0:	6923      	ldr	r3, [r4, #16]
 8003dc2:	4632      	mov	r2, r6
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	4640      	mov	r0, r8
 8003dc8:	47d0      	blx	sl
 8003dca:	3001      	adds	r0, #1
 8003dcc:	d0ad      	beq.n	8003d2a <_printf_i+0x15a>
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	079b      	lsls	r3, r3, #30
 8003dd2:	d413      	bmi.n	8003dfc <_printf_i+0x22c>
 8003dd4:	68e0      	ldr	r0, [r4, #12]
 8003dd6:	9b03      	ldr	r3, [sp, #12]
 8003dd8:	4298      	cmp	r0, r3
 8003dda:	bfb8      	it	lt
 8003ddc:	4618      	movlt	r0, r3
 8003dde:	e7a6      	b.n	8003d2e <_printf_i+0x15e>
 8003de0:	2301      	movs	r3, #1
 8003de2:	4632      	mov	r2, r6
 8003de4:	4649      	mov	r1, r9
 8003de6:	4640      	mov	r0, r8
 8003de8:	47d0      	blx	sl
 8003dea:	3001      	adds	r0, #1
 8003dec:	d09d      	beq.n	8003d2a <_printf_i+0x15a>
 8003dee:	3501      	adds	r5, #1
 8003df0:	68e3      	ldr	r3, [r4, #12]
 8003df2:	9903      	ldr	r1, [sp, #12]
 8003df4:	1a5b      	subs	r3, r3, r1
 8003df6:	42ab      	cmp	r3, r5
 8003df8:	dcf2      	bgt.n	8003de0 <_printf_i+0x210>
 8003dfa:	e7eb      	b.n	8003dd4 <_printf_i+0x204>
 8003dfc:	2500      	movs	r5, #0
 8003dfe:	f104 0619 	add.w	r6, r4, #25
 8003e02:	e7f5      	b.n	8003df0 <_printf_i+0x220>
 8003e04:	08003f7d 	.word	0x08003f7d
 8003e08:	08003f8e 	.word	0x08003f8e

08003e0c <memmove>:
 8003e0c:	4288      	cmp	r0, r1
 8003e0e:	b510      	push	{r4, lr}
 8003e10:	eb01 0402 	add.w	r4, r1, r2
 8003e14:	d902      	bls.n	8003e1c <memmove+0x10>
 8003e16:	4284      	cmp	r4, r0
 8003e18:	4623      	mov	r3, r4
 8003e1a:	d807      	bhi.n	8003e2c <memmove+0x20>
 8003e1c:	1e43      	subs	r3, r0, #1
 8003e1e:	42a1      	cmp	r1, r4
 8003e20:	d008      	beq.n	8003e34 <memmove+0x28>
 8003e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e2a:	e7f8      	b.n	8003e1e <memmove+0x12>
 8003e2c:	4402      	add	r2, r0
 8003e2e:	4601      	mov	r1, r0
 8003e30:	428a      	cmp	r2, r1
 8003e32:	d100      	bne.n	8003e36 <memmove+0x2a>
 8003e34:	bd10      	pop	{r4, pc}
 8003e36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e3e:	e7f7      	b.n	8003e30 <memmove+0x24>

08003e40 <_sbrk_r>:
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	4d06      	ldr	r5, [pc, #24]	@ (8003e5c <_sbrk_r+0x1c>)
 8003e44:	2300      	movs	r3, #0
 8003e46:	4604      	mov	r4, r0
 8003e48:	4608      	mov	r0, r1
 8003e4a:	602b      	str	r3, [r5, #0]
 8003e4c:	f7fc fe60 	bl	8000b10 <_sbrk>
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	d102      	bne.n	8003e5a <_sbrk_r+0x1a>
 8003e54:	682b      	ldr	r3, [r5, #0]
 8003e56:	b103      	cbz	r3, 8003e5a <_sbrk_r+0x1a>
 8003e58:	6023      	str	r3, [r4, #0]
 8003e5a:	bd38      	pop	{r3, r4, r5, pc}
 8003e5c:	20000258 	.word	0x20000258

08003e60 <memcpy>:
 8003e60:	440a      	add	r2, r1
 8003e62:	4291      	cmp	r1, r2
 8003e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e68:	d100      	bne.n	8003e6c <memcpy+0xc>
 8003e6a:	4770      	bx	lr
 8003e6c:	b510      	push	{r4, lr}
 8003e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e76:	4291      	cmp	r1, r2
 8003e78:	d1f9      	bne.n	8003e6e <memcpy+0xe>
 8003e7a:	bd10      	pop	{r4, pc}

08003e7c <_realloc_r>:
 8003e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e80:	4607      	mov	r7, r0
 8003e82:	4614      	mov	r4, r2
 8003e84:	460d      	mov	r5, r1
 8003e86:	b921      	cbnz	r1, 8003e92 <_realloc_r+0x16>
 8003e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	f7ff bc4d 	b.w	800372c <_malloc_r>
 8003e92:	b92a      	cbnz	r2, 8003ea0 <_realloc_r+0x24>
 8003e94:	f7ff fbde 	bl	8003654 <_free_r>
 8003e98:	4625      	mov	r5, r4
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ea0:	f000 f81a 	bl	8003ed8 <_malloc_usable_size_r>
 8003ea4:	4284      	cmp	r4, r0
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	d802      	bhi.n	8003eb0 <_realloc_r+0x34>
 8003eaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003eae:	d8f4      	bhi.n	8003e9a <_realloc_r+0x1e>
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	f7ff fc3a 	bl	800372c <_malloc_r>
 8003eb8:	4680      	mov	r8, r0
 8003eba:	b908      	cbnz	r0, 8003ec0 <_realloc_r+0x44>
 8003ebc:	4645      	mov	r5, r8
 8003ebe:	e7ec      	b.n	8003e9a <_realloc_r+0x1e>
 8003ec0:	42b4      	cmp	r4, r6
 8003ec2:	4622      	mov	r2, r4
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	bf28      	it	cs
 8003ec8:	4632      	movcs	r2, r6
 8003eca:	f7ff ffc9 	bl	8003e60 <memcpy>
 8003ece:	4629      	mov	r1, r5
 8003ed0:	4638      	mov	r0, r7
 8003ed2:	f7ff fbbf 	bl	8003654 <_free_r>
 8003ed6:	e7f1      	b.n	8003ebc <_realloc_r+0x40>

08003ed8 <_malloc_usable_size_r>:
 8003ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003edc:	1f18      	subs	r0, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bfbc      	itt	lt
 8003ee2:	580b      	ldrlt	r3, [r1, r0]
 8003ee4:	18c0      	addlt	r0, r0, r3
 8003ee6:	4770      	bx	lr

08003ee8 <_init>:
 8003ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eea:	bf00      	nop
 8003eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eee:	bc08      	pop	{r3}
 8003ef0:	469e      	mov	lr, r3
 8003ef2:	4770      	bx	lr

08003ef4 <_fini>:
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	bf00      	nop
 8003ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efa:	bc08      	pop	{r3}
 8003efc:	469e      	mov	lr, r3
 8003efe:	4770      	bx	lr
