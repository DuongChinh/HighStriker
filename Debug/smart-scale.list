
smart-scale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000996c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08009b20  08009b20  0000ab20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a09c  0800a09c  0000c1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a09c  0800a09c  0000b09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0a4  0800a0a4  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0a4  0800a0a4  0000b0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0a8  0800a0a8  0000b0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800a0ac  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1e0  2**0
                  CONTENTS
 10 .bss          00000324  200001e0  200001e0  0000c1e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000504  20000504  0000c1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001072e  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f3  00000000  00000000  0001c93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  0001f038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cba  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002567a  00000000  00000000  00020d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012335  00000000  00000000  000463cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df6c1  00000000  00000000  00058701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00137dc2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a34  00000000  00000000  00137e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0013d83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009b04 	.word	0x08009b04

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08009b04 	.word	0x08009b04

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <Set7SegDisplayWithDecimal>:
    ShowDecimalPoint = 1; // Hiển thị dấu thập phân ở digit đầu tiên
}

// Hàm hiển thị số với dấu thập phân tùy chọn
void Set7SegDisplayWithDecimal(int val, int show_decimal)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
    if(val > 99) val = 99;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b63      	cmp	r3, #99	@ 0x63
 800104e:	dd01      	ble.n	8001054 <Set7SegDisplayWithDecimal+0x14>
 8001050:	2363      	movs	r3, #99	@ 0x63
 8001052:	607b      	str	r3, [r7, #4]
    if(val < 0) val = 0;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	da01      	bge.n	800105e <Set7SegDisplayWithDecimal+0x1e>
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]

    DisplayValue = val;
 800105e:	4a07      	ldr	r2, [pc, #28]	@ (800107c <Set7SegDisplayWithDecimal+0x3c>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6013      	str	r3, [r2, #0]
    pos = 0;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <Set7SegDisplayWithDecimal+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
    ShowDecimalPoint = show_decimal;
 800106a:	4a06      	ldr	r2, [pc, #24]	@ (8001084 <Set7SegDisplayWithDecimal+0x44>)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	200001fc 	.word	0x200001fc
 8001080:	20000200 	.word	0x20000200
 8001084:	20000204 	.word	0x20000204

08001088 <Run7SegDisplay>:

void Run7SegDisplay()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
    unsigned char val;
    int show_decimal_now = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]

    pos++;
 8001092:	4b73      	ldr	r3, [pc, #460]	@ (8001260 <Run7SegDisplay+0x1d8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a71      	ldr	r2, [pc, #452]	@ (8001260 <Run7SegDisplay+0x1d8>)
 800109a:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(PORT_7SEG_CONTROL0, PIN_7SEG_CONTROL0, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2104      	movs	r1, #4
 80010a0:	4870      	ldr	r0, [pc, #448]	@ (8001264 <Run7SegDisplay+0x1dc>)
 80010a2:	f001 ff91 	bl	8002fc8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2108      	movs	r1, #8
 80010aa:	486e      	ldr	r0, [pc, #440]	@ (8001264 <Run7SegDisplay+0x1dc>)
 80010ac:	f001 ff8c 	bl	8002fc8 <HAL_GPIO_WritePin>

    if (pos & 0x1) {
 80010b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001260 <Run7SegDisplay+0x1d8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d012      	beq.n	80010e2 <Run7SegDisplay+0x5a>
        // Digit đầu tiên (bên phải) - hàng đơn vị
        val = Mask[DisplayValue % 10];
 80010bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001268 <Run7SegDisplay+0x1e0>)
 80010be:	6819      	ldr	r1, [r3, #0]
 80010c0:	4b6a      	ldr	r3, [pc, #424]	@ (800126c <Run7SegDisplay+0x1e4>)
 80010c2:	fb83 2301 	smull	r2, r3, r3, r1
 80010c6:	109a      	asrs	r2, r3, #2
 80010c8:	17cb      	asrs	r3, r1, #31
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	1aca      	subs	r2, r1, r3
 80010d6:	4b66      	ldr	r3, [pc, #408]	@ (8001270 <Run7SegDisplay+0x1e8>)
 80010d8:	5c9b      	ldrb	r3, [r3, r2]
 80010da:	71fb      	strb	r3, [r7, #7]
        show_decimal_now = 0; // Không hiển thị dấu thập phân ở digit này
 80010dc:	2300      	movs	r3, #0
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	e01b      	b.n	800111a <Run7SegDisplay+0x92>
    } else {
        // Digit thứ hai (bên trái) - hàng chục
        val = Mask[(DisplayValue / 10) % 10];
 80010e2:	4b61      	ldr	r3, [pc, #388]	@ (8001268 <Run7SegDisplay+0x1e0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a61      	ldr	r2, [pc, #388]	@ (800126c <Run7SegDisplay+0x1e4>)
 80010e8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ec:	1092      	asrs	r2, r2, #2
 80010ee:	17db      	asrs	r3, r3, #31
 80010f0:	1ad1      	subs	r1, r2, r3
 80010f2:	4b5e      	ldr	r3, [pc, #376]	@ (800126c <Run7SegDisplay+0x1e4>)
 80010f4:	fb83 2301 	smull	r2, r3, r3, r1
 80010f8:	109a      	asrs	r2, r3, #2
 80010fa:	17cb      	asrs	r3, r1, #31
 80010fc:	1ad2      	subs	r2, r2, r3
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	1aca      	subs	r2, r1, r3
 8001108:	4b59      	ldr	r3, [pc, #356]	@ (8001270 <Run7SegDisplay+0x1e8>)
 800110a:	5c9b      	ldrb	r3, [r3, r2]
 800110c:	71fb      	strb	r3, [r7, #7]
        // Hiển thị dấu thập phân ở digit này nếu cần (sau số hàng chục)
        if(ShowDecimalPoint) {
 800110e:	4b59      	ldr	r3, [pc, #356]	@ (8001274 <Run7SegDisplay+0x1ec>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <Run7SegDisplay+0x92>
            show_decimal_now = 1;
 8001116:	2301      	movs	r3, #1
 8001118:	603b      	str	r3, [r7, #0]
        }
    }

    // Thiết lập segment P (decimal point)
    if (show_decimal_now)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <Run7SegDisplay+0xa6>
        HAL_GPIO_WritePin(PORT_7SEG_P, PIN_7SEG_P, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001126:	4854      	ldr	r0, [pc, #336]	@ (8001278 <Run7SegDisplay+0x1f0>)
 8001128:	f001 ff4e 	bl	8002fc8 <HAL_GPIO_WritePin>
 800112c:	e005      	b.n	800113a <Run7SegDisplay+0xb2>
    else
        HAL_GPIO_WritePin(PORT_7SEG_P, PIN_7SEG_P, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001134:	4850      	ldr	r0, [pc, #320]	@ (8001278 <Run7SegDisplay+0x1f0>)
 8001136:	f001 ff47 	bl	8002fc8 <HAL_GPIO_WritePin>

    // Thiết lập các segment khác (G, F, E, D, C, B, A)
    if (val & 0x40)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <Run7SegDisplay+0xca>
        HAL_GPIO_WritePin(PORT_7SEG_G, PIN_7SEG_G, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800114a:	484b      	ldr	r0, [pc, #300]	@ (8001278 <Run7SegDisplay+0x1f0>)
 800114c:	f001 ff3c 	bl	8002fc8 <HAL_GPIO_WritePin>
 8001150:	e005      	b.n	800115e <Run7SegDisplay+0xd6>
    else
        HAL_GPIO_WritePin(PORT_7SEG_G, PIN_7SEG_G, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001158:	4847      	ldr	r0, [pc, #284]	@ (8001278 <Run7SegDisplay+0x1f0>)
 800115a:	f001 ff35 	bl	8002fc8 <HAL_GPIO_WritePin>

    if (val & 0x20)
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 0320 	and.w	r3, r3, #32
 8001164:	2b00      	cmp	r3, #0
 8001166:	d006      	beq.n	8001176 <Run7SegDisplay+0xee>
        HAL_GPIO_WritePin(PORT_7SEG_F, PIN_7SEG_F, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800116e:	4842      	ldr	r0, [pc, #264]	@ (8001278 <Run7SegDisplay+0x1f0>)
 8001170:	f001 ff2a 	bl	8002fc8 <HAL_GPIO_WritePin>
 8001174:	e005      	b.n	8001182 <Run7SegDisplay+0xfa>
    else
        HAL_GPIO_WritePin(PORT_7SEG_F, PIN_7SEG_F, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800117c:	483e      	ldr	r0, [pc, #248]	@ (8001278 <Run7SegDisplay+0x1f0>)
 800117e:	f001 ff23 	bl	8002fc8 <HAL_GPIO_WritePin>

    if (val & 0x10)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 0310 	and.w	r3, r3, #16
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <Run7SegDisplay+0x112>
        HAL_GPIO_WritePin(PORT_7SEG_E, PIN_7SEG_E, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001192:	4839      	ldr	r0, [pc, #228]	@ (8001278 <Run7SegDisplay+0x1f0>)
 8001194:	f001 ff18 	bl	8002fc8 <HAL_GPIO_WritePin>
 8001198:	e005      	b.n	80011a6 <Run7SegDisplay+0x11e>
    else
        HAL_GPIO_WritePin(PORT_7SEG_E, PIN_7SEG_E, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011a0:	4835      	ldr	r0, [pc, #212]	@ (8001278 <Run7SegDisplay+0x1f0>)
 80011a2:	f001 ff11 	bl	8002fc8 <HAL_GPIO_WritePin>

    if (val & 0x8)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <Run7SegDisplay+0x136>
        HAL_GPIO_WritePin(PORT_7SEG_D, PIN_7SEG_D, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011b6:	4830      	ldr	r0, [pc, #192]	@ (8001278 <Run7SegDisplay+0x1f0>)
 80011b8:	f001 ff06 	bl	8002fc8 <HAL_GPIO_WritePin>
 80011bc:	e005      	b.n	80011ca <Run7SegDisplay+0x142>
    else
        HAL_GPIO_WritePin(PORT_7SEG_D, PIN_7SEG_D, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011c4:	482c      	ldr	r0, [pc, #176]	@ (8001278 <Run7SegDisplay+0x1f0>)
 80011c6:	f001 feff 	bl	8002fc8 <HAL_GPIO_WritePin>

    if (val & 0x4)
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <Run7SegDisplay+0x15a>
        HAL_GPIO_WritePin(PORT_7SEG_C, PIN_7SEG_C, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011da:	4827      	ldr	r0, [pc, #156]	@ (8001278 <Run7SegDisplay+0x1f0>)
 80011dc:	f001 fef4 	bl	8002fc8 <HAL_GPIO_WritePin>
 80011e0:	e005      	b.n	80011ee <Run7SegDisplay+0x166>
    else
        HAL_GPIO_WritePin(PORT_7SEG_C, PIN_7SEG_C, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011e8:	4823      	ldr	r0, [pc, #140]	@ (8001278 <Run7SegDisplay+0x1f0>)
 80011ea:	f001 feed 	bl	8002fc8 <HAL_GPIO_WritePin>

    if (val & 0x2)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <Run7SegDisplay+0x17e>
        HAL_GPIO_WritePin(PORT_7SEG_B, PIN_7SEG_B, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011fe:	481e      	ldr	r0, [pc, #120]	@ (8001278 <Run7SegDisplay+0x1f0>)
 8001200:	f001 fee2 	bl	8002fc8 <HAL_GPIO_WritePin>
 8001204:	e005      	b.n	8001212 <Run7SegDisplay+0x18a>
    else
        HAL_GPIO_WritePin(PORT_7SEG_B, PIN_7SEG_B, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800120c:	481a      	ldr	r0, [pc, #104]	@ (8001278 <Run7SegDisplay+0x1f0>)
 800120e:	f001 fedb 	bl	8002fc8 <HAL_GPIO_WritePin>

    if (val & 0x1)
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <Run7SegDisplay+0x1a2>
        HAL_GPIO_WritePin(PORT_7SEG_A, PIN_7SEG_A, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001222:	4815      	ldr	r0, [pc, #84]	@ (8001278 <Run7SegDisplay+0x1f0>)
 8001224:	f001 fed0 	bl	8002fc8 <HAL_GPIO_WritePin>
 8001228:	e005      	b.n	8001236 <Run7SegDisplay+0x1ae>
    else
        HAL_GPIO_WritePin(PORT_7SEG_A, PIN_7SEG_A, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001230:	4811      	ldr	r0, [pc, #68]	@ (8001278 <Run7SegDisplay+0x1f0>)
 8001232:	f001 fec9 	bl	8002fc8 <HAL_GPIO_WritePin>

    // Kích hoạt digit tương ứng
    if (pos & 0x1)
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <Run7SegDisplay+0x1d8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <Run7SegDisplay+0x1c6>
        HAL_GPIO_WritePin(PORT_7SEG_CONTROL0, PIN_7SEG_CONTROL0, GPIO_PIN_SET);
 8001242:	2201      	movs	r2, #1
 8001244:	2104      	movs	r1, #4
 8001246:	4807      	ldr	r0, [pc, #28]	@ (8001264 <Run7SegDisplay+0x1dc>)
 8001248:	f001 febe 	bl	8002fc8 <HAL_GPIO_WritePin>
    else
        HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_SET);
}
 800124c:	e004      	b.n	8001258 <Run7SegDisplay+0x1d0>
        HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_SET);
 800124e:	2201      	movs	r2, #1
 8001250:	2108      	movs	r1, #8
 8001252:	4804      	ldr	r0, [pc, #16]	@ (8001264 <Run7SegDisplay+0x1dc>)
 8001254:	f001 feb8 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000200 	.word	0x20000200
 8001264:	40021800 	.word	0x40021800
 8001268:	200001fc 	.word	0x200001fc
 800126c:	66666667 	.word	0x66666667
 8001270:	20000000 	.word	0x20000000
 8001274:	20000204 	.word	0x20000204
 8001278:	40021000 	.word	0x40021000

0800127c <hx711_init>:
 */

#include <HX711.h>

//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	4613      	mov	r3, r2
 800128a:	80fb      	strh	r3, [r7, #6]
  // Setup the pin connections with the STM Board
  hx711->clk_gpio = clk_gpio;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	88fa      	ldrh	r2, [r7, #6]
 8001296:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80012a2:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	68b8      	ldr	r0, [r7, #8]
 80012cc:	f001 fcb8 	bl	8002c40 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d8:	2302      	movs	r3, #2
 80012da:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 80012dc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80012de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	6838      	ldr	r0, [r7, #0]
 80012e8:	f001 fcaa 	bl	8002c40 <HAL_GPIO_Init>

}
 80012ec:	bf00      	nop
 80012ee:	3728      	adds	r7, #40	@ 0x28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <set_scale>:

//#############################################################################################
void set_scale(hx711_t *hx711, float Ascale, float Bscale){
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001300:	edc7 0a01 	vstr	s1, [r7, #4]
  // Set the scale. To calibrate the cell, run the program with a scale of 1, call the tare function and then the get_units function. 
  // Divide the obtained weight by the real weight. The result is the parameter to pass to scale
	hx711->Ascale = Ascale;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	611a      	str	r2, [r3, #16]
	hx711->Bscale = Bscale;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	61da      	str	r2, [r3, #28]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <set_gain>:

//#############################################################################################
void set_gain(hx711_t *hx711, uint8_t Again, uint8_t Bgain){
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
 8001328:	4613      	mov	r3, r2
 800132a:	70bb      	strb	r3, [r7, #2]
  // Define A channel's gain
	switch (Again) {
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	2b40      	cmp	r3, #64	@ 0x40
 8001330:	d005      	beq.n	800133e <set_gain+0x22>
 8001332:	2b80      	cmp	r3, #128	@ 0x80
 8001334:	d107      	bne.n	8001346 <set_gain+0x2a>
			case 128:		// channel A, gain factor 128
				hx711->Again = 1;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	751a      	strb	r2, [r3, #20]
				break;
 800133c:	e003      	b.n	8001346 <set_gain+0x2a>
			case 64:		// channel A, gain factor 64
				hx711->Again = 3;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2203      	movs	r2, #3
 8001342:	751a      	strb	r2, [r3, #20]
				break;
 8001344:	bf00      	nop
		}
	hx711->Bgain = 2;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2202      	movs	r2, #2
 800134a:	f883 2020 	strb.w	r2, [r3, #32]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <set_offset>:

//#############################################################################################
void set_offset(hx711_t *hx711, long offset, uint8_t channel){
 800135a:	b480      	push	{r7}
 800135c:	b085      	sub	sp, #20
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	4613      	mov	r3, r2
 8001366:	71fb      	strb	r3, [r7, #7]
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d103      	bne.n	8001376 <set_offset+0x1c>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	60da      	str	r2, [r3, #12]
	else hx711->Boffset = offset;
}
 8001374:	e002      	b.n	800137c <set_offset+0x22>
	else hx711->Boffset = offset;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	619a      	str	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <shiftIn>:

//############################################################################################
uint8_t shiftIn(hx711_t *hx711, uint8_t bitOrder) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]
    uint8_t i;

    for(i = 0; i < 8; ++i) {
 8001398:	2300      	movs	r3, #0
 800139a:	73bb      	strb	r3, [r7, #14]
 800139c:	e03e      	b.n	800141c <shiftIn+0x94>
    	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	891b      	ldrh	r3, [r3, #8]
 80013a6:	2201      	movs	r2, #1
 80013a8:	4619      	mov	r1, r3
 80013aa:	f001 fe0d 	bl	8002fc8 <HAL_GPIO_WritePin>
        if(bitOrder == 0)
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d113      	bne.n	80013dc <shiftIn+0x54>
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << i;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	895b      	ldrh	r3, [r3, #10]
 80013bc:	4619      	mov	r1, r3
 80013be:	4610      	mov	r0, r2
 80013c0:	f001 fdea 	bl	8002f98 <HAL_GPIO_ReadPin>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	7bbb      	ldrb	r3, [r7, #14]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	e014      	b.n	8001406 <shiftIn+0x7e>
        else
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << (7 - i);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	895b      	ldrh	r3, [r3, #10]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4610      	mov	r0, r2
 80013e8:	f001 fdd6 	bl	8002f98 <HAL_GPIO_ReadPin>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	b25a      	sxtb	r2, r3
 80013fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001400:	4313      	orrs	r3, r2
 8001402:	b25b      	sxtb	r3, r3
 8001404:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	891b      	ldrh	r3, [r3, #8]
 800140e:	2200      	movs	r2, #0
 8001410:	4619      	mov	r1, r3
 8001412:	f001 fdd9 	bl	8002fc8 <HAL_GPIO_WritePin>
    for(i = 0; i < 8; ++i) {
 8001416:	7bbb      	ldrb	r3, [r7, #14]
 8001418:	3301      	adds	r3, #1
 800141a:	73bb      	strb	r3, [r7, #14]
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	2b07      	cmp	r3, #7
 8001420:	d9bd      	bls.n	800139e <shiftIn+0x16>
    }
    return value;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <is_ready>:

//############################################################################################
bool is_ready(hx711_t *hx711) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET){
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	895b      	ldrh	r3, [r3, #10]
 800143c:	4619      	mov	r1, r3
 800143e:	4610      	mov	r0, r2
 8001440:	f001 fdaa 	bl	8002f98 <HAL_GPIO_ReadPin>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <is_ready+0x22>
		return 1;
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <is_ready+0x24>
	}
	return 0;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <wait_ready>:

//############################################################################################
void wait_ready(hx711_t *hx711) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	// Wait for the chip to become ready.
	while (!is_ready(hx711)) {
 8001460:	e002      	b.n	8001468 <wait_ready+0x10>
		HAL_Delay(0);
 8001462:	2000      	movs	r0, #0
 8001464:	f001 fab6 	bl	80029d4 <HAL_Delay>
	while (!is_ready(hx711)) {
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ffdf 	bl	800142c <is_ready>
 800146e:	4603      	mov	r3, r0
 8001470:	f083 0301 	eor.w	r3, r3, #1
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f3      	bne.n	8001462 <wait_ready+0xa>
	}
}
 800147a:	bf00      	nop
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <read>:

//############################################################################################
long read(hx711_t *hx711, uint8_t channel){
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	70fb      	strb	r3, [r7, #3]
	wait_ready(hx711);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ffe1 	bl	8001458 <wait_ready>
	unsigned long value = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = { 0 };
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	2100      	movs	r1, #0
 80014a0:	460a      	mov	r2, r1
 80014a2:	801a      	strh	r2, [r3, #0]
 80014a4:	460a      	mov	r2, r1
 80014a6:	709a      	strb	r2, [r3, #2]
	uint8_t filler = 0x00;
 80014a8:	2300      	movs	r3, #0
 80014aa:	75fb      	strb	r3, [r7, #23]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ac:	b672      	cpsid	i
}
 80014ae:	bf00      	nop

	noInterrupts();

	data[2] = shiftIn(hx711, 1);
 80014b0:	2101      	movs	r1, #1
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ff68 	bl	8001388 <shiftIn>
 80014b8:	4603      	mov	r3, r0
 80014ba:	72bb      	strb	r3, [r7, #10]
	data[1] = shiftIn(hx711, 1);
 80014bc:	2101      	movs	r1, #1
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ff62 	bl	8001388 <shiftIn>
 80014c4:	4603      	mov	r3, r0
 80014c6:	727b      	strb	r3, [r7, #9]
	data[0] = shiftIn(hx711, 1);
 80014c8:	2101      	movs	r1, #1
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ff5c 	bl	8001388 <shiftIn>
 80014d0:	4603      	mov	r3, r0
 80014d2:	723b      	strb	r3, [r7, #8]

	uint8_t gain = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	75bb      	strb	r3, [r7, #22]
	if(channel == 0) gain = hx711->Again;
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d103      	bne.n	80014e6 <read+0x62>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7d1b      	ldrb	r3, [r3, #20]
 80014e2:	75bb      	strb	r3, [r7, #22]
 80014e4:	e003      	b.n	80014ee <read+0x6a>
	else gain = hx711->Bgain;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ec:	75bb      	strb	r3, [r7, #22]

	for (unsigned int i = 0; i < gain; i++) {
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	e012      	b.n	800151a <read+0x96>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	891b      	ldrh	r3, [r3, #8]
 80014fc:	2201      	movs	r2, #1
 80014fe:	4619      	mov	r1, r3
 8001500:	f001 fd62 	bl	8002fc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	891b      	ldrh	r3, [r3, #8]
 800150c:	2200      	movs	r2, #0
 800150e:	4619      	mov	r1, r3
 8001510:	f001 fd5a 	bl	8002fc8 <HAL_GPIO_WritePin>
	for (unsigned int i = 0; i < gain; i++) {
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	3301      	adds	r3, #1
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	7dbb      	ldrb	r3, [r7, #22]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	429a      	cmp	r2, r3
 8001520:	d3e8      	bcc.n	80014f4 <read+0x70>
  __ASM volatile ("cpsie i" : : : "memory");
 8001522:	b662      	cpsie	i
}
 8001524:	bf00      	nop
	}

	interrupts();

	// Replicate the most significant bit to pad out a 32-bit signed integer
	if (data[2] & 0x80) {
 8001526:	7abb      	ldrb	r3, [r7, #10]
 8001528:	b25b      	sxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	da02      	bge.n	8001534 <read+0xb0>
		filler = 0xFF;
 800152e:	23ff      	movs	r3, #255	@ 0xff
 8001530:	75fb      	strb	r3, [r7, #23]
 8001532:	e001      	b.n	8001538 <read+0xb4>
	} else {
		filler = 0x00;
 8001534:	2300      	movs	r3, #0
 8001536:	75fb      	strb	r3, [r7, #23]
	}

	// Construct a 32-bit signed integer
	value = ( (unsigned long)(filler) << 24
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	061a      	lsls	r2, r3, #24
			| (unsigned long)(data[2]) << 16
 800153c:	7abb      	ldrb	r3, [r7, #10]
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	431a      	orrs	r2, r3
			| (unsigned long)(data[1]) << 8
 8001542:	7a7b      	ldrb	r3, [r7, #9]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	4313      	orrs	r3, r2
			| (unsigned long)(data[0]) );
 8001548:	7a3a      	ldrb	r2, [r7, #8]
	value = ( (unsigned long)(filler) << 24
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]

	return (long)(value);
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <read_average>:

//############################################################################################
long read_average(hx711_t *hx711, int8_t times, uint8_t channel) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
 8001564:	4613      	mov	r3, r2
 8001566:	70bb      	strb	r3, [r7, #2]
	long sum = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
	for (int8_t i = 0; i < times; i++) {
 800156c:	2300      	movs	r3, #0
 800156e:	72fb      	strb	r3, [r7, #11]
 8001570:	e011      	b.n	8001596 <read_average+0x3e>
		sum += read(hx711, channel);
 8001572:	78bb      	ldrb	r3, [r7, #2]
 8001574:	4619      	mov	r1, r3
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ff84 	bl	8001484 <read>
 800157c:	4602      	mov	r2, r0
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4413      	add	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]
		HAL_Delay(0);
 8001584:	2000      	movs	r0, #0
 8001586:	f001 fa25 	bl	80029d4 <HAL_Delay>
	for (int8_t i = 0; i < times; i++) {
 800158a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	3301      	adds	r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	72fb      	strb	r3, [r7, #11]
 8001596:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800159a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbe7      	blt.n	8001572 <read_average+0x1a>
	}
	return sum / times;
 80015a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <get_value>:

//############################################################################################
double get_value(hx711_t *hx711, int8_t times, uint8_t channel) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	70fb      	strb	r3, [r7, #3]
 80015c0:	4613      	mov	r3, r2
 80015c2:	70bb      	strb	r3, [r7, #2]
	long offset = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) offset = hx711->Aoffset;
 80015c8:	78bb      	ldrb	r3, [r7, #2]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d103      	bne.n	80015d6 <get_value+0x22>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	e002      	b.n	80015dc <get_value+0x28>
	else offset = hx711->Boffset;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	60fb      	str	r3, [r7, #12]
	return read_average(hx711, times, channel) - offset;
 80015dc:	78ba      	ldrb	r2, [r7, #2]
 80015de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015e2:	4619      	mov	r1, r3
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ffb7 	bl	8001558 <read_average>
 80015ea:	4602      	mov	r2, r0
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ffa7 	bl	8000544 <__aeabi_i2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	ec43 2b17 	vmov	d7, r2, r3
}
 80015fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001602:	eef0 0a67 	vmov.f32	s1, s15
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <tare>:

//############################################################################################
void tare(hx711_t *hx711, uint8_t times, uint8_t channel) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	70fb      	strb	r3, [r7, #3]
 8001618:	4613      	mov	r3, r2
 800161a:	70bb      	strb	r3, [r7, #2]
	read(hx711, channel); // Change channel
 800161c:	78bb      	ldrb	r3, [r7, #2]
 800161e:	4619      	mov	r1, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff2f 	bl	8001484 <read>
	double sum = read_average(hx711, times, channel);
 8001626:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800162a:	78ba      	ldrb	r2, [r7, #2]
 800162c:	4619      	mov	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ff92 	bl	8001558 <read_average>
 8001634:	4603      	mov	r3, r0
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff84 	bl	8000544 <__aeabi_i2d>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	e9c7 2302 	strd	r2, r3, [r7, #8]
	set_offset(hx711, sum, channel);
 8001644:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001648:	f7ff fa96 	bl	8000b78 <__aeabi_d2iz>
 800164c:	4601      	mov	r1, r0
 800164e:	78bb      	ldrb	r3, [r7, #2]
 8001650:	461a      	mov	r2, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fe81 	bl	800135a <set_offset>
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <tare_all>:

//############################################################################################
void tare_all(hx711_t *hx711, uint8_t times) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
	tare(hx711, times, CHANNEL_A);
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	2200      	movs	r2, #0
 8001670:	4619      	mov	r1, r3
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffca 	bl	800160c <tare>
	tare(hx711, times, CHANNEL_B);
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	2201      	movs	r2, #1
 800167c:	4619      	mov	r1, r3
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffc4 	bl	800160c <tare>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <get_weight>:

//############################################################################################
float get_weight(hx711_t *hx711, int8_t times, uint8_t channel) {
 800168c:	b5b0      	push	{r4, r5, r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	70fb      	strb	r3, [r7, #3]
 8001698:	4613      	mov	r3, r2
 800169a:	70bb      	strb	r3, [r7, #2]
  // Read load cell
	read(hx711, channel);
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	4619      	mov	r1, r3
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff feef 	bl	8001484 <read>
	float scale = 0;
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) scale = hx711->Ascale;
 80016ac:	78bb      	ldrb	r3, [r7, #2]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d103      	bne.n	80016ba <get_weight+0x2e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	e002      	b.n	80016c0 <get_weight+0x34>
	else scale = hx711->Bscale;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	60fb      	str	r3, [r7, #12]
	return get_value(hx711, times, channel) / scale;
 80016c0:	78ba      	ldrb	r2, [r7, #2]
 80016c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff73 	bl	80015b4 <get_value>
 80016ce:	ec55 4b10 	vmov	r4, r5, d0
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f7fe ff48 	bl	8000568 <__aeabi_f2d>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4620      	mov	r0, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	f7ff f8c4 	bl	800086c <__aeabi_ddiv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fa8c 	bl	8000c08 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	ee07 3a90 	vmov	s15, r3
}
 80016f6:	eeb0 0a67 	vmov.f32	s0, s15
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bdb0      	pop	{r4, r5, r7, pc}

08001700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001706:	f001 f8f3 	bl	80028f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800170a:	f000 f877 	bl	80017fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800170e:	f000 f97b 	bl	8001a08 <MX_GPIO_Init>
  MX_SPI4_Init();
 8001712:	f000 f8e3 	bl	80018dc <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8001716:	f000 f94d 	bl	80019b4 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800171a:	f000 f915 	bl	8001948 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //led 7 segment
  HAL_TIM_Base_Start_IT(&htim6);
 800171e:	4834      	ldr	r0, [pc, #208]	@ (80017f0 <main+0xf0>)
 8001720:	f002 ff84 	bl	800462c <HAL_TIM_Base_Start_IT>

  // Initialize scale system
  scale_init();
 8001724:	f000 fa0c 	bl	8001b40 <scale_init>

  //RFID
  TM_MFRC522_Init();
 8001728:	f000 fdf4 	bl	8002314 <TM_MFRC522_Init>
  scale_send_uart_data("Smart Scale System Initialized\r\n");
 800172c:	4831      	ldr	r0, [pc, #196]	@ (80017f4 <main+0xf4>)
 800172e:	f000 fbbf 	bl	8001eb0 <scale_send_uart_data>

  HAL_Delay(1000);
 8001732:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001736:	f001 f94d 	bl	80029d4 <HAL_Delay>
  scale_state.system_ready = 1;
 800173a:	4b2f      	ldr	r3, [pc, #188]	@ (80017f8 <main+0xf8>)
 800173c:	2201      	movs	r2, #1
 800173e:	725a      	strb	r2, [r3, #9]
  scale_state.last_measurement_time = HAL_GetTick();
 8001740:	f001 f93c 	bl	80029bc <HAL_GetTick>
 8001744:	4603      	mov	r3, r0
 8001746:	4a2c      	ldr	r2, [pc, #176]	@ (80017f8 <main+0xf8>)
 8001748:	60d3      	str	r3, [r2, #12]
  scale_state.last_display_time = HAL_GetTick();
 800174a:	f001 f937 	bl	80029bc <HAL_GetTick>
 800174e:	4603      	mov	r3, r0
 8001750:	4a29      	ldr	r2, [pc, #164]	@ (80017f8 <main+0xf8>)
 8001752:	6113      	str	r3, [r2, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t current_time = HAL_GetTick();
 8001754:	f001 f932 	bl	80029bc <HAL_GetTick>
 8001758:	60f8      	str	r0, [r7, #12]

	  // Periodic weight measurement
	  if (current_time - scale_state.last_measurement_time >= MEASUREMENT_INTERVAL) {
 800175a:	4b27      	ldr	r3, [pc, #156]	@ (80017f8 <main+0xf8>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b63      	cmp	r3, #99	@ 0x63
 8001764:	d93f      	bls.n	80017e6 <main+0xe6>
		  scale_state.last_measurement_time = current_time;
 8001766:	4a24      	ldr	r2, [pc, #144]	@ (80017f8 <main+0xf8>)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	60d3      	str	r3, [r2, #12]
		  // Read and filter weight
		  float raw_weight = scale_read_weight();
 800176c:	f000 fa74 	bl	8001c58 <scale_read_weight>
 8001770:	ed87 0a02 	vstr	s0, [r7, #8]
		  float filtered_weight = scale_filter_weight(raw_weight);
 8001774:	ed97 0a02 	vldr	s0, [r7, #8]
 8001778:	f000 faa6 	bl	8001cc8 <scale_filter_weight>
 800177c:	ed87 0a01 	vstr	s0, [r7, #4]

		  // Debug: Always send raw readings via UART
//		  scale_send_uart_data("DEBUG - Raw: %.3f, Filtered: %.3f\r\n", raw_weight, filtered_weight);

		  // Update current weight regardless of stability for debugging
		  scale_state.current_weight = filtered_weight;
 8001780:	4a1d      	ldr	r2, [pc, #116]	@ (80017f8 <main+0xf8>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]

		  // Check weight stability
		  if (scale_is_weight_stable(filtered_weight)) {
 8001786:	ed97 0a01 	vldr	s0, [r7, #4]
 800178a:	f000 fad3 	bl	8001d34 <scale_is_weight_stable>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d018      	beq.n	80017c6 <main+0xc6>
			  // Weight is stable, update display
			  if (current_time - scale_state.last_display_time >= DISPLAY_UPDATE_INTERVAL) {
 8001794:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <main+0xf8>)
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017a0:	d321      	bcc.n	80017e6 <main+0xe6>
				  scale_state.last_display_time = current_time;
 80017a2:	4a15      	ldr	r2, [pc, #84]	@ (80017f8 <main+0xf8>)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6113      	str	r3, [r2, #16]
				  scale_display_weight(scale_state.current_weight);
 80017a8:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <main+0xf8>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	eeb0 0a67 	vmov.f32	s0, s15
 80017b2:	f000 fafb 	bl	8001dac <scale_display_weight>
				  scale_process_rfid(scale_state.current_weight);
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <main+0xf8>)
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	eeb0 0a67 	vmov.f32	s0, s15
 80017c0:	f000 fb2c 	bl	8001e1c <scale_process_rfid>
 80017c4:	e00f      	b.n	80017e6 <main+0xe6>
			  }
		  } else {
			  // Weight is not stable, but still update display more frequently for debugging
			  if (current_time - scale_state.last_display_time >= (DISPLAY_UPDATE_INTERVAL / 2)) {
 80017c6:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <main+0xf8>)
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2bf9      	cmp	r3, #249	@ 0xf9
 80017d0:	d909      	bls.n	80017e6 <main+0xe6>
				  scale_state.last_display_time = current_time;
 80017d2:	4a09      	ldr	r2, [pc, #36]	@ (80017f8 <main+0xf8>)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6113      	str	r3, [r2, #16]
				  scale_display_weight(scale_state.current_weight);
 80017d8:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <main+0xf8>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	eeb0 0a67 	vmov.f32	s0, s15
 80017e2:	f000 fae3 	bl	8001dac <scale_display_weight>
			  }
		  }
	  }
	  // Small delay to prevent excessive CPU usage
	  HAL_Delay(10);
 80017e6:	200a      	movs	r0, #10
 80017e8:	f001 f8f4 	bl	80029d4 <HAL_Delay>
  {
 80017ec:	e7b2      	b.n	8001754 <main+0x54>
 80017ee:	bf00      	nop
 80017f0:	20000260 	.word	0x20000260
 80017f4:	08009b20 	.word	0x08009b20
 80017f8:	200002f0 	.word	0x200002f0

080017fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b094      	sub	sp, #80	@ 0x50
 8001800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001802:	f107 0320 	add.w	r3, r7, #32
 8001806:	2230      	movs	r2, #48	@ 0x30
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f004 fda0 	bl	8006350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	4b2b      	ldr	r3, [pc, #172]	@ (80018d4 <SystemClock_Config+0xd8>)
 8001826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001828:	4a2a      	ldr	r2, [pc, #168]	@ (80018d4 <SystemClock_Config+0xd8>)
 800182a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800182e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001830:	4b28      	ldr	r3, [pc, #160]	@ (80018d4 <SystemClock_Config+0xd8>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <SystemClock_Config+0xdc>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a24      	ldr	r2, [pc, #144]	@ (80018d8 <SystemClock_Config+0xdc>)
 8001846:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <SystemClock_Config+0xdc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001858:	2301      	movs	r3, #1
 800185a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800185c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001862:	2302      	movs	r3, #2
 8001864:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001866:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800186a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800186c:	2304      	movs	r3, #4
 800186e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001870:	23b4      	movs	r3, #180	@ 0xb4
 8001872:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001874:	2302      	movs	r3, #2
 8001876:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001878:	2304      	movs	r3, #4
 800187a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187c:	f107 0320 	add.w	r3, r7, #32
 8001880:	4618      	mov	r0, r3
 8001882:	f001 fc0b 	bl	800309c <HAL_RCC_OscConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800188c:	f000 fb38 	bl	8001f00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001890:	f001 fbb4 	bl	8002ffc <HAL_PWREx_EnableOverDrive>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800189a:	f000 fb31 	bl	8001f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189e:	230f      	movs	r3, #15
 80018a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a2:	2302      	movs	r3, #2
 80018a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80018b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	2105      	movs	r1, #5
 80018bc:	4618      	mov	r0, r3
 80018be:	f001 fe65 	bl	800358c <HAL_RCC_ClockConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80018c8:	f000 fb1a 	bl	8001f00 <Error_Handler>
  }
}
 80018cc:	bf00      	nop
 80018ce:	3750      	adds	r7, #80	@ 0x50
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40007000 	.word	0x40007000

080018dc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80018e0:	4b17      	ldr	r3, [pc, #92]	@ (8001940 <MX_SPI4_Init+0x64>)
 80018e2:	4a18      	ldr	r2, [pc, #96]	@ (8001944 <MX_SPI4_Init+0x68>)
 80018e4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80018e6:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <MX_SPI4_Init+0x64>)
 80018e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018ec:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80018ee:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <MX_SPI4_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f4:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <MX_SPI4_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018fa:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <MX_SPI4_Init+0x64>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001900:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <MX_SPI4_Init+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <MX_SPI4_Init+0x64>)
 8001908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800190c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800190e:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <MX_SPI4_Init+0x64>)
 8001910:	2218      	movs	r2, #24
 8001912:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001914:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <MX_SPI4_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <MX_SPI4_Init+0x64>)
 800191c:	2200      	movs	r2, #0
 800191e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001920:	4b07      	ldr	r3, [pc, #28]	@ (8001940 <MX_SPI4_Init+0x64>)
 8001922:	2200      	movs	r2, #0
 8001924:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001926:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <MX_SPI4_Init+0x64>)
 8001928:	220a      	movs	r2, #10
 800192a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800192c:	4804      	ldr	r0, [pc, #16]	@ (8001940 <MX_SPI4_Init+0x64>)
 800192e:	f002 f84d 	bl	80039cc <HAL_SPI_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001938:	f000 fae2 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000208 	.word	0x20000208
 8001944:	40013400 	.word	0x40013400

08001948 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194e:	463b      	mov	r3, r7
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001956:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <MX_TIM6_Init+0x64>)
 8001958:	4a15      	ldr	r2, [pc, #84]	@ (80019b0 <MX_TIM6_Init+0x68>)
 800195a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800195c:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <MX_TIM6_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001962:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <MX_TIM6_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001968:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <MX_TIM6_Init+0x64>)
 800196a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800196e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <MX_TIM6_Init+0x64>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001976:	480d      	ldr	r0, [pc, #52]	@ (80019ac <MX_TIM6_Init+0x64>)
 8001978:	f002 fe08 	bl	800458c <HAL_TIM_Base_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001982:	f000 fabd 	bl	8001f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800198e:	463b      	mov	r3, r7
 8001990:	4619      	mov	r1, r3
 8001992:	4806      	ldr	r0, [pc, #24]	@ (80019ac <MX_TIM6_Init+0x64>)
 8001994:	f003 f878 	bl	8004a88 <HAL_TIMEx_MasterConfigSynchronization>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800199e:	f000 faaf 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000260 	.word	0x20000260
 80019b0:	40001000 	.word	0x40001000

080019b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	@ (8001a04 <MX_USART1_UART_Init+0x50>)
 80019bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019be:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019da:	220c      	movs	r2, #12
 80019dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019de:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019ec:	f003 f8dc 	bl	8004ba8 <HAL_UART_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019f6:	f000 fa83 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200002a8 	.word	0x200002a8
 8001a04:	40011000 	.word	0x40011000

08001a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	@ 0x28
 8001a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	4b43      	ldr	r3, [pc, #268]	@ (8001b30 <MX_GPIO_Init+0x128>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a42      	ldr	r2, [pc, #264]	@ (8001b30 <MX_GPIO_Init+0x128>)
 8001a28:	f043 0310 	orr.w	r3, r3, #16
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b40      	ldr	r3, [pc, #256]	@ (8001b30 <MX_GPIO_Init+0x128>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b30 <MX_GPIO_Init+0x128>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a3b      	ldr	r2, [pc, #236]	@ (8001b30 <MX_GPIO_Init+0x128>)
 8001a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b39      	ldr	r3, [pc, #228]	@ (8001b30 <MX_GPIO_Init+0x128>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	4b35      	ldr	r3, [pc, #212]	@ (8001b30 <MX_GPIO_Init+0x128>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a34      	ldr	r2, [pc, #208]	@ (8001b30 <MX_GPIO_Init+0x128>)
 8001a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b32      	ldr	r3, [pc, #200]	@ (8001b30 <MX_GPIO_Init+0x128>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	4b2e      	ldr	r3, [pc, #184]	@ (8001b30 <MX_GPIO_Init+0x128>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b30 <MX_GPIO_Init+0x128>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b2b      	ldr	r3, [pc, #172]	@ (8001b30 <MX_GPIO_Init+0x128>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f64f 7110 	movw	r1, #65296	@ 0xff10
 8001a94:	4827      	ldr	r0, [pc, #156]	@ (8001b34 <MX_GPIO_Init+0x12c>)
 8001a96:	f001 fa97 	bl	8002fc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f246 010c 	movw	r1, #24588	@ 0x600c
 8001aa0:	4825      	ldr	r0, [pc, #148]	@ (8001b38 <MX_GPIO_Init+0x130>)
 8001aa2:	f001 fa91 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001aac:	4823      	ldr	r0, [pc, #140]	@ (8001b3c <MX_GPIO_Init+0x134>)
 8001aae:	f001 fa8b 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001ab2:	f64f 7310 	movw	r3, #65296	@ 0xff10
 8001ab6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	481a      	ldr	r0, [pc, #104]	@ (8001b34 <MX_GPIO_Init+0x12c>)
 8001acc:	f001 f8b8 	bl	8002c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_14;
 8001ad0:	f246 030c 	movw	r3, #24588	@ 0x600c
 8001ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4813      	ldr	r0, [pc, #76]	@ (8001b38 <MX_GPIO_Init+0x130>)
 8001aea:	f001 f8a9 	bl	8002c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001aee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4619      	mov	r1, r3
 8001b02:	480e      	ldr	r0, [pc, #56]	@ (8001b3c <MX_GPIO_Init+0x134>)
 8001b04:	f001 f89c 	bl	8002c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4806      	ldr	r0, [pc, #24]	@ (8001b3c <MX_GPIO_Init+0x134>)
 8001b22:	f001 f88d 	bl	8002c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b26:	bf00      	nop
 8001b28:	3728      	adds	r7, #40	@ 0x28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40021800 	.word	0x40021800
 8001b3c:	40020000 	.word	0x40020000

08001b40 <scale_init>:

/* USER CODE BEGIN 4 */
void scale_init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af02      	add	r7, sp, #8
    scale_send_uart_data("Initializing HX711 load cell...\r\n");
 8001b46:	482e      	ldr	r0, [pc, #184]	@ (8001c00 <scale_init+0xc0>)
 8001b48:	f000 f9b2 	bl	8001eb0 <scale_send_uart_data>

    // Initialize HX711
    hx711_init(&hx711, HX711_SCK_PORT, HX711_SCK_PIN, HX711_DT_PORT, HX711_DT_PIN);
 8001b4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	4b2c      	ldr	r3, [pc, #176]	@ (8001c04 <scale_init+0xc4>)
 8001b54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b58:	492a      	ldr	r1, [pc, #168]	@ (8001c04 <scale_init+0xc4>)
 8001b5a:	482b      	ldr	r0, [pc, #172]	@ (8001c08 <scale_init+0xc8>)
 8001b5c:	f7ff fb8e 	bl	800127c <hx711_init>

    // Configure HX711 settings
    set_gain(&hx711, 128, 32);  // Channel A: 128 gain, Channel B: 32 gain
 8001b60:	2220      	movs	r2, #32
 8001b62:	2180      	movs	r1, #128	@ 0x80
 8001b64:	4828      	ldr	r0, [pc, #160]	@ (8001c08 <scale_init+0xc8>)
 8001b66:	f7ff fbd9 	bl	800131c <set_gain>

    // Debug: Test if HX711 is responding
	if (is_ready(&hx711)) {
 8001b6a:	4827      	ldr	r0, [pc, #156]	@ (8001c08 <scale_init+0xc8>)
 8001b6c:	f7ff fc5e 	bl	800142c <is_ready>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d023      	beq.n	8001bbe <scale_init+0x7e>
		scale_send_uart_data("HX711 is ready!\r\n");
 8001b76:	4825      	ldr	r0, [pc, #148]	@ (8001c0c <scale_init+0xcc>)
 8001b78:	f000 f99a 	bl	8001eb0 <scale_send_uart_data>

		// Read some raw values for debugging
		for (int i = 0; i < 5; i++) {
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	e019      	b.n	8001bb6 <scale_init+0x76>
			long raw = get_value(&hx711, 1, CHANNEL_A);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2101      	movs	r1, #1
 8001b86:	4820      	ldr	r0, [pc, #128]	@ (8001c08 <scale_init+0xc8>)
 8001b88:	f7ff fd14 	bl	80015b4 <get_value>
 8001b8c:	ec53 2b10 	vmov	r2, r3, d0
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f7fe fff0 	bl	8000b78 <__aeabi_d2iz>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	603b      	str	r3, [r7, #0]
			scale_send_uart_data("Raw reading %d: %ld\r\n", i+1, raw);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	481a      	ldr	r0, [pc, #104]	@ (8001c10 <scale_init+0xd0>)
 8001ba6:	f000 f983 	bl	8001eb0 <scale_send_uart_data>
			HAL_Delay(100);
 8001baa:	2064      	movs	r0, #100	@ 0x64
 8001bac:	f000 ff12 	bl	80029d4 <HAL_Delay>
		for (int i = 0; i < 5; i++) {
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	dde2      	ble.n	8001b82 <scale_init+0x42>
 8001bbc:	e002      	b.n	8001bc4 <scale_init+0x84>
		}
	} else {
		scale_send_uart_data("HX711 is NOT ready!\r\n");
 8001bbe:	4815      	ldr	r0, [pc, #84]	@ (8001c14 <scale_init+0xd4>)
 8001bc0:	f000 f976 	bl	8001eb0 <scale_send_uart_data>
	}

    // Set initial scale factor (you may need to adjust this)
    set_scale(&hx711, SCALE_FACTOR, SCALE_FACTOR);
 8001bc4:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8001c18 <scale_init+0xd8>
 8001bc8:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001c18 <scale_init+0xd8>
 8001bcc:	480e      	ldr	r0, [pc, #56]	@ (8001c08 <scale_init+0xc8>)
 8001bce:	f7ff fb91 	bl	80012f4 <set_scale>

    // Perform initial calibration
    scale_calibrate();
 8001bd2:	f000 f829 	bl	8001c28 <scale_calibrate>

    // Initialize state variables
    scale_state.current_weight = 0.0f;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <scale_init+0xdc>)
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
    scale_state.previous_weight = 0.0f;
 8001bde:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <scale_init+0xdc>)
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	605a      	str	r2, [r3, #4]
    scale_state.weight_stable_count = 0;
 8001be6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <scale_init+0xdc>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	721a      	strb	r2, [r3, #8]
    scale_state.weight_threshold = WEIGHT_STABILITY_THRESHOLD;
 8001bec:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <scale_init+0xdc>)
 8001bee:	4a0c      	ldr	r2, [pc, #48]	@ (8001c20 <scale_init+0xe0>)
 8001bf0:	615a      	str	r2, [r3, #20]

    scale_send_uart_data("Scale initialization complete\r\n");
 8001bf2:	480c      	ldr	r0, [pc, #48]	@ (8001c24 <scale_init+0xe4>)
 8001bf4:	f000 f95c 	bl	8001eb0 <scale_send_uart_data>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	08009b44 	.word	0x08009b44
 8001c04:	40020000 	.word	0x40020000
 8001c08:	20000308 	.word	0x20000308
 8001c0c:	08009b68 	.word	0x08009b68
 8001c10:	08009b7c 	.word	0x08009b7c
 8001c14:	08009b94 	.word	0x08009b94
 8001c18:	463b8000 	.word	0x463b8000
 8001c1c:	200002f0 	.word	0x200002f0
 8001c20:	3c23d70a 	.word	0x3c23d70a
 8001c24:	08009bac 	.word	0x08009bac

08001c28 <scale_calibrate>:

/**
 * @brief Calibrate the scale (tare)
 */
void scale_calibrate(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
    scale_send_uart_data("Calibrating scale... Please ensure scale is empty\r\n");
 8001c2c:	4807      	ldr	r0, [pc, #28]	@ (8001c4c <scale_calibrate+0x24>)
 8001c2e:	f000 f93f 	bl	8001eb0 <scale_send_uart_data>
    HAL_Delay(2000);  // Give user time to clear scale
 8001c32:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c36:	f000 fecd 	bl	80029d4 <HAL_Delay>

    // Perform tare operation
    tare_all(&hx711, 10);
 8001c3a:	210a      	movs	r1, #10
 8001c3c:	4804      	ldr	r0, [pc, #16]	@ (8001c50 <scale_calibrate+0x28>)
 8001c3e:	f7ff fd0f 	bl	8001660 <tare_all>

    scale_send_uart_data("Scale calibration complete\r\n");
 8001c42:	4804      	ldr	r0, [pc, #16]	@ (8001c54 <scale_calibrate+0x2c>)
 8001c44:	f000 f934 	bl	8001eb0 <scale_send_uart_data>
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	08009bcc 	.word	0x08009bcc
 8001c50:	20000308 	.word	0x20000308
 8001c54:	08009c00 	.word	0x08009c00

08001c58 <scale_read_weight>:
/**
 * @brief Read raw weight from HX711
 * @return Raw weight value in kg
 */
float scale_read_weight(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
	// Debug: Check if HX711 is ready
	if (!is_ready(&hx711)) {
 8001c5e:	4819      	ldr	r0, [pc, #100]	@ (8001cc4 <scale_read_weight+0x6c>)
 8001c60:	f7ff fbe4 	bl	800142c <is_ready>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f083 0301 	eor.w	r3, r3, #1
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <scale_read_weight+0x1e>
//		scale_send_uart_data("DEBUG - HX711 not ready!\r\n");
		return 0.0f;
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	e01e      	b.n	8001cb4 <scale_read_weight+0x5c>
	}

	// Get raw value first for debugging
	long raw_value = get_value(&hx711, 1, CHANNEL_A);  // Single reading for faster response
 8001c76:	2200      	movs	r2, #0
 8001c78:	2101      	movs	r1, #1
 8001c7a:	4812      	ldr	r0, [pc, #72]	@ (8001cc4 <scale_read_weight+0x6c>)
 8001c7c:	f7ff fc9a 	bl	80015b4 <get_value>
 8001c80:	ec53 2b10 	vmov	r2, r3, d0
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f7fe ff76 	bl	8000b78 <__aeabi_d2iz>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	603b      	str	r3, [r7, #0]
//	scale_send_uart_data("DEBUG - Raw ADC: %ld\r\n", raw_value);

	// Get weight using library function
	float weight = get_weight(&hx711, 1, CHANNEL_A);  // Single reading for faster response
 8001c90:	2200      	movs	r2, #0
 8001c92:	2101      	movs	r1, #1
 8001c94:	480b      	ldr	r0, [pc, #44]	@ (8001cc4 <scale_read_weight+0x6c>)
 8001c96:	f7ff fcf9 	bl	800168c <get_weight>
 8001c9a:	ed87 0a01 	vstr	s0, [r7, #4]

	// Debug: Show weight before filtering
//	scale_send_uart_data("DEBUG - Weight before filter: %.3f\r\n", weight);

	// Ensure weight is not negative (noise or drift)
	if (weight < 0.0f) {
 8001c9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001caa:	d502      	bpl.n	8001cb2 <scale_read_weight+0x5a>
		weight = 0.0f;
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
	}

	return weight;
 8001cb2:	687b      	ldr	r3, [r7, #4]
}
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000308 	.word	0x20000308

08001cc8 <scale_filter_weight>:
 * @brief Apply low-pass filter to weight reading
 * @param raw_weight: Raw weight reading
 * @return Filtered weight
 */
float scale_filter_weight(float raw_weight)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	ed87 0a01 	vstr	s0, [r7, #4]
    static float filtered_weight = 0.0f;
    static uint8_t first_reading = 1;

    if (first_reading) {
 8001cd2:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <scale_filter_weight+0x5c>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <scale_filter_weight+0x20>
        filtered_weight = raw_weight;
 8001cda:	4a13      	ldr	r2, [pc, #76]	@ (8001d28 <scale_filter_weight+0x60>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6013      	str	r3, [r2, #0]
        first_reading = 0;
 8001ce0:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <scale_filter_weight+0x5c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
 8001ce6:	e011      	b.n	8001d0c <scale_filter_weight+0x44>
    } else {
        // Simple low-pass filter: y[n] = α * x[n] + (1-α) * y[n-1]
        filtered_weight = WEIGHT_FILTER_ALPHA * raw_weight + (1.0f - WEIGHT_FILTER_ALPHA) * filtered_weight;
 8001ce8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cec:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001d2c <scale_filter_weight+0x64>
 8001cf0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <scale_filter_weight+0x60>)
 8001cf6:	edd3 7a00 	vldr	s15, [r3]
 8001cfa:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001d30 <scale_filter_weight+0x68>
 8001cfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <scale_filter_weight+0x60>)
 8001d08:	edc3 7a00 	vstr	s15, [r3]
    }

    return filtered_weight;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <scale_filter_weight+0x60>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	ee07 3a90 	vmov	s15, r3
}
 8001d14:	eeb0 0a67 	vmov.f32	s0, s15
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	2000000a 	.word	0x2000000a
 8001d28:	200003ac 	.word	0x200003ac
 8001d2c:	3f4ccccd 	.word	0x3f4ccccd
 8001d30:	3e4ccccc 	.word	0x3e4ccccc

08001d34 <scale_is_weight_stable>:
 * @brief Check if weight reading is stable
 * @param weight: Current weight reading
 * @return 1 if stable, 0 if not stable
 */
uint8_t scale_is_weight_stable(float weight)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	ed87 0a01 	vstr	s0, [r7, #4]
    float weight_diff = fabsf(weight - scale_state.previous_weight);
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <scale_is_weight_stable+0x74>)
 8001d40:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d44:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4c:	eef0 7ae7 	vabs.f32	s15, s15
 8001d50:	edc7 7a03 	vstr	s15, [r7, #12]

    if (weight_diff < scale_state.weight_threshold) {
 8001d54:	4b14      	ldr	r3, [pc, #80]	@ (8001da8 <scale_is_weight_stable+0x74>)
 8001d56:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d66:	d511      	bpl.n	8001d8c <scale_is_weight_stable+0x58>
        scale_state.weight_stable_count++;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	@ (8001da8 <scale_is_weight_stable+0x74>)
 8001d6a:	7a1b      	ldrb	r3, [r3, #8]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <scale_is_weight_stable+0x74>)
 8001d72:	721a      	strb	r2, [r3, #8]
        if (scale_state.weight_stable_count >= WEIGHT_STABILITY_COUNT) {
 8001d74:	4b0c      	ldr	r3, [pc, #48]	@ (8001da8 <scale_is_weight_stable+0x74>)
 8001d76:	7a1b      	ldrb	r3, [r3, #8]
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d90d      	bls.n	8001d98 <scale_is_weight_stable+0x64>
            scale_state.weight_stable_count = WEIGHT_STABILITY_COUNT;  // Cap the counter
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <scale_is_weight_stable+0x74>)
 8001d7e:	2205      	movs	r2, #5
 8001d80:	721a      	strb	r2, [r3, #8]
            scale_state.previous_weight = weight;
 8001d82:	4a09      	ldr	r2, [pc, #36]	@ (8001da8 <scale_is_weight_stable+0x74>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6053      	str	r3, [r2, #4]
            return 1;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e006      	b.n	8001d9a <scale_is_weight_stable+0x66>
        }
    } else {
        scale_state.weight_stable_count = 0;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <scale_is_weight_stable+0x74>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	721a      	strb	r2, [r3, #8]
        scale_state.previous_weight = weight;
 8001d92:	4a05      	ldr	r2, [pc, #20]	@ (8001da8 <scale_is_weight_stable+0x74>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6053      	str	r3, [r2, #4]
    }

    return 0;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	200002f0 	.word	0x200002f0

08001dac <scale_display_weight>:
/**
 * @brief Display weight on 7-segment display and send via UART
 * @param weight: Weight to display in kg
 */
void scale_display_weight(float weight)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (weight < 0.0f) weight = 0.0f;
 8001db6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	d502      	bpl.n	8001dca <scale_display_weight+0x1e>
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
	if (weight > 9.9f) weight = 9.9f;
 8001dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dce:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001e14 <scale_display_weight+0x68>
 8001dd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dda:	dd01      	ble.n	8001de0 <scale_display_weight+0x34>
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e18 <scale_display_weight+0x6c>)
 8001dde:	607b      	str	r3, [r7, #4]

	// Chuyển đổi sang số nguyên để hiển thị (VD: 2.5kg -> 25)
	int display_value = (int)(weight * 10 + 0.5f);  // +0.5 để làm tròn
 8001de0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001de4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001df0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001df8:	ee17 3a90 	vmov	r3, s15
 8001dfc:	60fb      	str	r3, [r7, #12]

	// Hiển thị trên LED 7 đoạn với 1 chữ số thập phân
	Set7SegDisplayWithDecimal(display_value, 1);  // Hiển thị với 1 chữ số sau dấu phẩy
 8001dfe:	2101      	movs	r1, #1
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f7ff f91d 	bl	8001040 <Set7SegDisplayWithDecimal>

	// Gọi hàm chạy hiển thị LED 7 đoạn
	Run7SegDisplay();
 8001e06:	f7ff f93f 	bl	8001088 <Run7SegDisplay>

    // Send weight data via UART
//    scale_send_uart_data("Weight: %.3f kg (%.0f g)\r\n", weight, weight * 1000);
//    scale_send_uart_data("Weight: %d (display_value) = %.1f kg\r\n", display_value, weight);
}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	411e6666 	.word	0x411e6666
 8001e18:	411e6666 	.word	0x411e6666

08001e1c <scale_process_rfid>:
/**
 * @brief Process RFID reading and combine with weight data
 * @param weight: Current stable weight
 */
void scale_process_rfid(float weight)
{
 8001e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e20:	b089      	sub	sp, #36	@ 0x24
 8001e22:	af04      	add	r7, sp, #16
 8001e24:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t CardID[5];

    if (TM_MFRC522_Check(CardID) == MI_OK) {
 8001e28:	f107 0308 	add.w	r3, r7, #8
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 fa97 	bl	8002360 <TM_MFRC522_Check>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d125      	bne.n	8001e84 <scale_process_rfid+0x68>
        // Card detected - turn on green LED
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);   // Green LED ON
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e3e:	481a      	ldr	r0, [pc, #104]	@ (8001ea8 <scale_process_rfid+0x8c>)
 8001e40:	f001 f8c2 	bl	8002fc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET); // Red LED OFF
 8001e44:	2200      	movs	r2, #0
 8001e46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e4a:	4817      	ldr	r0, [pc, #92]	@ (8001ea8 <scale_process_rfid+0x8c>)
 8001e4c:	f001 f8bc 	bl	8002fc8 <HAL_GPIO_WritePin>

        // Send combined data
        scale_send_uart_data("RFID: %02X%02X%02X%02X%02X | Weight: %.3f kg\r\n",
                           CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], weight);
 8001e50:	7a3b      	ldrb	r3, [r7, #8]
        scale_send_uart_data("RFID: %02X%02X%02X%02X%02X | Weight: %.3f kg\r\n",
 8001e52:	461e      	mov	r6, r3
                           CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], weight);
 8001e54:	7a7b      	ldrb	r3, [r7, #9]
        scale_send_uart_data("RFID: %02X%02X%02X%02X%02X | Weight: %.3f kg\r\n",
 8001e56:	4698      	mov	r8, r3
                           CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], weight);
 8001e58:	7abb      	ldrb	r3, [r7, #10]
        scale_send_uart_data("RFID: %02X%02X%02X%02X%02X | Weight: %.3f kg\r\n",
 8001e5a:	4699      	mov	r9, r3
                           CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], weight);
 8001e5c:	7afb      	ldrb	r3, [r7, #11]
        scale_send_uart_data("RFID: %02X%02X%02X%02X%02X | Weight: %.3f kg\r\n",
 8001e5e:	461c      	mov	r4, r3
                           CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], weight);
 8001e60:	7b3b      	ldrb	r3, [r7, #12]
        scale_send_uart_data("RFID: %02X%02X%02X%02X%02X | Weight: %.3f kg\r\n",
 8001e62:	461d      	mov	r5, r3
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7fe fb7f 	bl	8000568 <__aeabi_f2d>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e72:	9501      	str	r5, [sp, #4]
 8001e74:	9400      	str	r4, [sp, #0]
 8001e76:	464b      	mov	r3, r9
 8001e78:	4642      	mov	r2, r8
 8001e7a:	4631      	mov	r1, r6
 8001e7c:	480b      	ldr	r0, [pc, #44]	@ (8001eac <scale_process_rfid+0x90>)
 8001e7e:	f000 f817 	bl	8001eb0 <scale_send_uart_data>
    } else {
        // No card detected - turn on red LED
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);   // Red LED ON
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET); // Green LED OFF
    }
}
 8001e82:	e00b      	b.n	8001e9c <scale_process_rfid+0x80>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);   // Red LED ON
 8001e84:	2201      	movs	r2, #1
 8001e86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e8a:	4807      	ldr	r0, [pc, #28]	@ (8001ea8 <scale_process_rfid+0x8c>)
 8001e8c:	f001 f89c 	bl	8002fc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET); // Green LED OFF
 8001e90:	2200      	movs	r2, #0
 8001e92:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e96:	4804      	ldr	r0, [pc, #16]	@ (8001ea8 <scale_process_rfid+0x8c>)
 8001e98:	f001 f896 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40021800 	.word	0x40021800
 8001eac:	08009c20 	.word	0x08009c20

08001eb0 <scale_send_uart_data>:
 * @brief Send formatted data via UART
 * @param format: Printf-style format string
 * @param ...: Variable arguments
 */
void scale_send_uart_data(const char* format, ...)
{
 8001eb0:	b40f      	push	{r0, r1, r2, r3}
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	603b      	str	r3, [r7, #0]

    int len = vsnprintf(uart_buffer, sizeof(uart_buffer), format, args);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	2180      	movs	r1, #128	@ 0x80
 8001ec4:	480c      	ldr	r0, [pc, #48]	@ (8001ef8 <scale_send_uart_data+0x48>)
 8001ec6:	f004 fa35 	bl	8006334 <vsniprintf>
 8001eca:	6078      	str	r0, [r7, #4]

    va_end(args);

    if (len > 0 && len < sizeof(uart_buffer)) {
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	dd0a      	ble.n	8001ee8 <scale_send_uart_data+0x38>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ed6:	d807      	bhi.n	8001ee8 <scale_send_uart_data+0x38>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, len, 1000);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ee0:	4905      	ldr	r1, [pc, #20]	@ (8001ef8 <scale_send_uart_data+0x48>)
 8001ee2:	4806      	ldr	r0, [pc, #24]	@ (8001efc <scale_send_uart_data+0x4c>)
 8001ee4:	f002 feb0 	bl	8004c48 <HAL_UART_Transmit>
    }
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ef2:	b004      	add	sp, #16
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	2000032c 	.word	0x2000032c
 8001efc:	200002a8 	.word	0x200002a8

08001f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f04:	b672      	cpsid	i
}
 8001f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <Error_Handler+0x8>

08001f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <HAL_MspInit+0x4c>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f58 <HAL_MspInit+0x4c>)
 8001f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f22:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <HAL_MspInit+0x4c>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <HAL_MspInit+0x4c>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	4a08      	ldr	r2, [pc, #32]	@ (8001f58 <HAL_MspInit+0x4c>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3e:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <HAL_MspInit+0x4c>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800

08001f5c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	@ 0x28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a19      	ldr	r2, [pc, #100]	@ (8001fe0 <HAL_SPI_MspInit+0x84>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d12b      	bne.n	8001fd6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <HAL_SPI_MspInit+0x88>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f86:	4a17      	ldr	r2, [pc, #92]	@ (8001fe4 <HAL_SPI_MspInit+0x88>)
 8001f88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <HAL_SPI_MspInit+0x88>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <HAL_SPI_MspInit+0x88>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	4a10      	ldr	r2, [pc, #64]	@ (8001fe4 <HAL_SPI_MspInit+0x88>)
 8001fa4:	f043 0310 	orr.w	r3, r3, #16
 8001fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001faa:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <HAL_SPI_MspInit+0x88>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001fb6:	2364      	movs	r3, #100	@ 0x64
 8001fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001fc6:	2305      	movs	r3, #5
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <HAL_SPI_MspInit+0x8c>)
 8001fd2:	f000 fe35 	bl	8002c40 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	@ 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40013400 	.word	0x40013400
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40021000 	.word	0x40021000

08001fec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8002034 <HAL_TIM_Base_MspInit+0x48>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d115      	bne.n	800202a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b0d      	ldr	r3, [pc, #52]	@ (8002038 <HAL_TIM_Base_MspInit+0x4c>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	4a0c      	ldr	r2, [pc, #48]	@ (8002038 <HAL_TIM_Base_MspInit+0x4c>)
 8002008:	f043 0310 	orr.w	r3, r3, #16
 800200c:	6413      	str	r3, [r2, #64]	@ 0x40
 800200e:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <HAL_TIM_Base_MspInit+0x4c>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	2036      	movs	r0, #54	@ 0x36
 8002020:	f000 fdd7 	bl	8002bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002024:	2036      	movs	r0, #54	@ 0x36
 8002026:	f000 fdf0 	bl	8002c0a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40001000 	.word	0x40001000
 8002038:	40023800 	.word	0x40023800

0800203c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	@ 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a19      	ldr	r2, [pc, #100]	@ (80020c0 <HAL_UART_MspInit+0x84>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d12c      	bne.n	80020b8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <HAL_UART_MspInit+0x88>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	4a17      	ldr	r2, [pc, #92]	@ (80020c4 <HAL_UART_MspInit+0x88>)
 8002068:	f043 0310 	orr.w	r3, r3, #16
 800206c:	6453      	str	r3, [r2, #68]	@ 0x44
 800206e:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <HAL_UART_MspInit+0x88>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <HAL_UART_MspInit+0x88>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	4a10      	ldr	r2, [pc, #64]	@ (80020c4 <HAL_UART_MspInit+0x88>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6313      	str	r3, [r2, #48]	@ 0x30
 800208a:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <HAL_UART_MspInit+0x88>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002096:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800209a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020a8:	2307      	movs	r3, #7
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	4805      	ldr	r0, [pc, #20]	@ (80020c8 <HAL_UART_MspInit+0x8c>)
 80020b4:	f000 fdc4 	bl	8002c40 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80020b8:	bf00      	nop
 80020ba:	3728      	adds	r7, #40	@ 0x28
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40011000 	.word	0x40011000
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40020000 	.word	0x40020000

080020cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <NMI_Handler+0x4>

080020d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <HardFault_Handler+0x4>

080020dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <MemManage_Handler+0x4>

080020e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <BusFault_Handler+0x4>

080020ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <UsageFault_Handler+0x4>

080020f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002122:	f000 fc37 	bl	8002994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002130:	4802      	ldr	r0, [pc, #8]	@ (800213c <TIM6_DAC_IRQHandler+0x10>)
 8002132:	f002 faeb 	bl	800470c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000260 	.word	0x20000260

08002140 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
extern void Run7SegDisplay();

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a04      	ldr	r2, [pc, #16]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d101      	bne.n	8002156 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        Run7SegDisplay();  // Quét LED 7 thanh định kỳ
 8002152:	f7fe ff99 	bl	8001088 <Run7SegDisplay>
    }
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40001000 	.word	0x40001000

08002164 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return 1;
 8002168:	2301      	movs	r3, #1
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_kill>:

int _kill(int pid, int sig)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800217e:	f004 f939 	bl	80063f4 <__errno>
 8002182:	4603      	mov	r3, r0
 8002184:	2216      	movs	r2, #22
 8002186:	601a      	str	r2, [r3, #0]
  return -1;
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <_exit>:

void _exit (int status)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800219c:	f04f 31ff 	mov.w	r1, #4294967295
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ffe7 	bl	8002174 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021a6:	bf00      	nop
 80021a8:	e7fd      	b.n	80021a6 <_exit+0x12>

080021aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	e00a      	b.n	80021d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021bc:	f3af 8000 	nop.w
 80021c0:	4601      	mov	r1, r0
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	60ba      	str	r2, [r7, #8]
 80021c8:	b2ca      	uxtb	r2, r1
 80021ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	3301      	adds	r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	dbf0      	blt.n	80021bc <_read+0x12>
  }

  return len;
 80021da:	687b      	ldr	r3, [r7, #4]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	e009      	b.n	800220a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	60ba      	str	r2, [r7, #8]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3301      	adds	r3, #1
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	429a      	cmp	r2, r3
 8002210:	dbf1      	blt.n	80021f6 <_write+0x12>
  }
  return len;
 8002212:	687b      	ldr	r3, [r7, #4]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_close>:

int _close(int file)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002244:	605a      	str	r2, [r3, #4]
  return 0;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <_isatty>:

int _isatty(int file)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800225c:	2301      	movs	r3, #1
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800226a:	b480      	push	{r7}
 800226c:	b085      	sub	sp, #20
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800228c:	4a14      	ldr	r2, [pc, #80]	@ (80022e0 <_sbrk+0x5c>)
 800228e:	4b15      	ldr	r3, [pc, #84]	@ (80022e4 <_sbrk+0x60>)
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002298:	4b13      	ldr	r3, [pc, #76]	@ (80022e8 <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a0:	4b11      	ldr	r3, [pc, #68]	@ (80022e8 <_sbrk+0x64>)
 80022a2:	4a12      	ldr	r2, [pc, #72]	@ (80022ec <_sbrk+0x68>)
 80022a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <_sbrk+0x64>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d207      	bcs.n	80022c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b4:	f004 f89e 	bl	80063f4 <__errno>
 80022b8:	4603      	mov	r3, r0
 80022ba:	220c      	movs	r2, #12
 80022bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	e009      	b.n	80022d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c4:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <_sbrk+0x64>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ca:	4b07      	ldr	r3, [pc, #28]	@ (80022e8 <_sbrk+0x64>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	4a05      	ldr	r2, [pc, #20]	@ (80022e8 <_sbrk+0x64>)
 80022d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022d6:	68fb      	ldr	r3, [r7, #12]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20030000 	.word	0x20030000
 80022e4:	00000400 	.word	0x00000400
 80022e8:	200003b0 	.word	0x200003b0
 80022ec:	20000508 	.word	0x20000508

080022f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <SystemInit+0x20>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fa:	4a05      	ldr	r2, [pc, #20]	@ (8002310 <SystemInit+0x20>)
 80022fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002300:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <TM_MFRC522_Init>:
 */
#include "tm_stm32f4_mfrc522.h"

extern SPI_HandleTypeDef hspi4;

void TM_MFRC522_Init(void) {
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
	TM_MFRC522_InitPins();
 8002318:	f000 f83c 	bl	8002394 <TM_MFRC522_InitPins>
	//TM_SPI_Init(MFRC522_SPI, MFRC522_SPI_PINSPACK);

	TM_MFRC522_Reset();
 800231c:	f000 f921 	bl	8002562 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8002320:	218d      	movs	r1, #141	@ 0x8d
 8002322:	202a      	movs	r0, #42	@ 0x2a
 8002324:	f000 f842 	bl	80023ac <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8002328:	213e      	movs	r1, #62	@ 0x3e
 800232a:	202b      	movs	r0, #43	@ 0x2b
 800232c:	f000 f83e 	bl	80023ac <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8002330:	211e      	movs	r1, #30
 8002332:	202d      	movs	r0, #45	@ 0x2d
 8002334:	f000 f83a 	bl	80023ac <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8002338:	2100      	movs	r1, #0
 800233a:	202c      	movs	r0, #44	@ 0x2c
 800233c:	f000 f836 	bl	80023ac <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8002340:	2170      	movs	r1, #112	@ 0x70
 8002342:	2026      	movs	r0, #38	@ 0x26
 8002344:	f000 f832 	bl	80023ac <TM_MFRC522_WriteRegister>
	
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8002348:	2140      	movs	r1, #64	@ 0x40
 800234a:	2015      	movs	r0, #21
 800234c:	f000 f82e 	bl	80023ac <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8002350:	213d      	movs	r1, #61	@ 0x3d
 8002352:	2011      	movs	r0, #17
 8002354:	f000 f82a 	bl	80023ac <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8002358:	f000 f8ee 	bl	8002538 <TM_MFRC522_AntennaOn>
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}

08002360 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type
	status = TM_MFRC522_Request(PICC_REQIDL, id);	
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	2026      	movs	r0, #38	@ 0x26
 800236c:	f000 f901 	bl	8002572 <TM_MFRC522_Request>
 8002370:	4603      	mov	r3, r0
 8002372:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d104      	bne.n	8002384 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);	
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f9ed 	bl	800275a <TM_MFRC522_Anticoll>
 8002380:	4603      	mov	r3, r0
 8002382:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
 8002384:	f000 fa6f 	bl	8002866 <TM_MFRC522_Halt>

	return status;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <TM_MFRC522_InitPins>:
		}
	}
	return MI_OK;
}

void TM_MFRC522_InitPins(void) {
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	//CS pin
//	GPIO_InitStruct.GPIO_Pin = MFRC522_CS_PIN;
//	GPIO_Init(MFRC522_CS_PORT, &GPIO_InitStruct);

	MFRC522_CS_HIGH;
 8002398:	2201      	movs	r2, #1
 800239a:	2110      	movs	r1, #16
 800239c:	4802      	ldr	r0, [pc, #8]	@ (80023a8 <TM_MFRC522_InitPins+0x14>)
 800239e:	f000 fe13 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000

080023ac <TM_MFRC522_WriteRegister>:

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	460a      	mov	r2, r1
 80023b6:	71fb      	strb	r3, [r7, #7]
 80023b8:	4613      	mov	r3, r2
 80023ba:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 80023bc:	2200      	movs	r2, #0
 80023be:	2110      	movs	r1, #16
 80023c0:	481a      	ldr	r0, [pc, #104]	@ (800242c <TM_MFRC522_WriteRegister+0x80>)
 80023c2:	f000 fe01 	bl	8002fc8 <HAL_GPIO_WritePin>
	//Send address
	uint8_t buf = (addr << 1) & 0x7E;
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef ret = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 80023d8:	f107 010e 	add.w	r1, r7, #14
 80023dc:	230a      	movs	r3, #10
 80023de:	2201      	movs	r2, #1
 80023e0:	4813      	ldr	r0, [pc, #76]	@ (8002430 <TM_MFRC522_WriteRegister+0x84>)
 80023e2:	f001 fb7c 	bl	8003ade <HAL_SPI_Transmit>
 80023e6:	4603      	mov	r3, r0
 80023e8:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 80023ea:	bf00      	nop
 80023ec:	4810      	ldr	r0, [pc, #64]	@ (8002430 <TM_MFRC522_WriteRegister+0x84>)
 80023ee:	f001 ff7c 	bl	80042ea <HAL_SPI_GetState>
 80023f2:	4603      	mov	r3, r0
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d0f7      	beq.n	80023ec <TM_MFRC522_WriteRegister+0x40>
	//Send data	
	HAL_SPI_Transmit(&hspi4, &val, 1, 10);
 80023fc:	1db9      	adds	r1, r7, #6
 80023fe:	230a      	movs	r3, #10
 8002400:	2201      	movs	r2, #1
 8002402:	480b      	ldr	r0, [pc, #44]	@ (8002430 <TM_MFRC522_WriteRegister+0x84>)
 8002404:	f001 fb6b 	bl	8003ade <HAL_SPI_Transmit>
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8002408:	bf00      	nop
 800240a:	4809      	ldr	r0, [pc, #36]	@ (8002430 <TM_MFRC522_WriteRegister+0x84>)
 800240c:	f001 ff6d 	bl	80042ea <HAL_SPI_GetState>
 8002410:	4603      	mov	r3, r0
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d0f7      	beq.n	800240a <TM_MFRC522_WriteRegister+0x5e>
	//CS high
	MFRC522_CS_HIGH;
 800241a:	2201      	movs	r2, #1
 800241c:	2110      	movs	r1, #16
 800241e:	4803      	ldr	r0, [pc, #12]	@ (800242c <TM_MFRC522_WriteRegister+0x80>)
 8002420:	f000 fdd2 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	20000208 	.word	0x20000208

08002434 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 800243e:	2200      	movs	r2, #0
 8002440:	2110      	movs	r1, #16
 8002442:	481f      	ldr	r0, [pc, #124]	@ (80024c0 <TM_MFRC522_ReadRegister+0x8c>)
 8002444:	f000 fdc0 	bl	8002fc8 <HAL_GPIO_WritePin>

	uint8_t buf = ((addr << 1) & 0x7E) | 0x80;
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	b25b      	sxtb	r3, r3
 8002450:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8002454:	b25b      	sxtb	r3, r3
 8002456:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800245a:	b25b      	sxtb	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8002464:	f107 010d 	add.w	r1, r7, #13
 8002468:	230a      	movs	r3, #10
 800246a:	2201      	movs	r2, #1
 800246c:	4815      	ldr	r0, [pc, #84]	@ (80024c4 <TM_MFRC522_ReadRegister+0x90>)
 800246e:	f001 fb36 	bl	8003ade <HAL_SPI_Transmit>
 8002472:	4603      	mov	r3, r0
 8002474:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8002476:	bf00      	nop
 8002478:	4812      	ldr	r0, [pc, #72]	@ (80024c4 <TM_MFRC522_ReadRegister+0x90>)
 800247a:	f001 ff36 	bl	80042ea <HAL_SPI_GetState>
 800247e:	4603      	mov	r3, r0
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d0f7      	beq.n	8002478 <TM_MFRC522_ReadRegister+0x44>
	ret = HAL_SPI_Receive(&hspi4, &val, 1, 10);
 8002488:	f107 010e 	add.w	r1, r7, #14
 800248c:	230a      	movs	r3, #10
 800248e:	2201      	movs	r2, #1
 8002490:	480c      	ldr	r0, [pc, #48]	@ (80024c4 <TM_MFRC522_ReadRegister+0x90>)
 8002492:	f001 fc68 	bl	8003d66 <HAL_SPI_Receive>
 8002496:	4603      	mov	r3, r0
 8002498:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 800249a:	bf00      	nop
 800249c:	4809      	ldr	r0, [pc, #36]	@ (80024c4 <TM_MFRC522_ReadRegister+0x90>)
 800249e:	f001 ff24 	bl	80042ea <HAL_SPI_GetState>
 80024a2:	4603      	mov	r3, r0
 80024a4:	73fb      	strb	r3, [r7, #15]
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d0f7      	beq.n	800249c <TM_MFRC522_ReadRegister+0x68>
	//CS high
	MFRC522_CS_HIGH;
 80024ac:	2201      	movs	r2, #1
 80024ae:	2110      	movs	r1, #16
 80024b0:	4803      	ldr	r0, [pc, #12]	@ (80024c0 <TM_MFRC522_ReadRegister+0x8c>)
 80024b2:	f000 fd89 	bl	8002fc8 <HAL_GPIO_WritePin>

	return val;	
 80024b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000
 80024c4:	20000208 	.word	0x20000208

080024c8 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	460a      	mov	r2, r1
 80024d2:	71fb      	strb	r3, [r7, #7]
 80024d4:	4613      	mov	r3, r2
 80024d6:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff ffaa 	bl	8002434 <TM_MFRC522_ReadRegister>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	79bb      	ldrb	r3, [r7, #6]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	4611      	mov	r1, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff ff5c 	bl	80023ac <TM_MFRC522_WriteRegister>
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	460a      	mov	r2, r1
 8002506:	71fb      	strb	r3, [r7, #7]
 8002508:	4613      	mov	r3, r2
 800250a:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ff90 	bl	8002434 <TM_MFRC522_ReadRegister>
 8002514:	4603      	mov	r3, r0
 8002516:	b25a      	sxtb	r2, r3
 8002518:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800251c:	43db      	mvns	r3, r3
 800251e:	b25b      	sxtb	r3, r3
 8002520:	4013      	ands	r3, r2
 8002522:	b25b      	sxtb	r3, r3
 8002524:	b2da      	uxtb	r2, r3
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ff3e 	bl	80023ac <TM_MFRC522_WriteRegister>
} 
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 800253e:	2014      	movs	r0, #20
 8002540:	f7ff ff78 	bl	8002434 <TM_MFRC522_ReadRegister>
 8002544:	4603      	mov	r3, r0
 8002546:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d103      	bne.n	800255a <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8002552:	2103      	movs	r1, #3
 8002554:	2014      	movs	r0, #20
 8002556:	f7ff ffb7 	bl	80024c8 <TM_MFRC522_SetBitMask>
	}
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8002562:	b580      	push	{r7, lr}
 8002564:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8002566:	210f      	movs	r1, #15
 8002568:	2001      	movs	r0, #1
 800256a:	f7ff ff1f 	bl	80023ac <TM_MFRC522_WriteRegister>
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}

08002572 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af02      	add	r7, sp, #8
 8002578:	4603      	mov	r3, r0
 800257a:	6039      	str	r1, [r7, #0]
 800257c:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 800257e:	2107      	movs	r1, #7
 8002580:	200d      	movs	r0, #13
 8002582:	f7ff ff13 	bl	80023ac <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	79fa      	ldrb	r2, [r7, #7]
 800258a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800258c:	f107 030c 	add.w	r3, r7, #12
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2201      	movs	r2, #1
 8002596:	6839      	ldr	r1, [r7, #0]
 8002598:	200c      	movs	r0, #12
 800259a:	f000 f80f 	bl	80025bc <TM_MFRC522_ToCard>
 800259e:	4603      	mov	r3, r0
 80025a0:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10)) {    
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <TM_MFRC522_Request+0x3c>
 80025a8:	89bb      	ldrh	r3, [r7, #12]
 80025aa:	2b10      	cmp	r3, #16
 80025ac:	d001      	beq.n	80025b2 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 80025ae:	2302      	movs	r3, #2
 80025b0:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	4613      	mov	r3, r2
 80025cc:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 80025ce:	2302      	movs	r3, #2
 80025d0:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80025d2:	2300      	movs	r3, #0
 80025d4:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80025d6:	2300      	movs	r3, #0
 80025d8:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b0c      	cmp	r3, #12
 80025de:	d006      	beq.n	80025ee <TM_MFRC522_ToCard+0x32>
 80025e0:	2b0e      	cmp	r3, #14
 80025e2:	d109      	bne.n	80025f8 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80025e4:	2312      	movs	r3, #18
 80025e6:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80025e8:	2310      	movs	r3, #16
 80025ea:	757b      	strb	r3, [r7, #21]
			break;
 80025ec:	e005      	b.n	80025fa <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80025ee:	2377      	movs	r3, #119	@ 0x77
 80025f0:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80025f2:	2330      	movs	r3, #48	@ 0x30
 80025f4:	757b      	strb	r3, [r7, #21]
			break;
 80025f6:	e000      	b.n	80025fa <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80025f8:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80025fa:	7dbb      	ldrb	r3, [r7, #22]
 80025fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002600:	b2db      	uxtb	r3, r3
 8002602:	4619      	mov	r1, r3
 8002604:	2002      	movs	r0, #2
 8002606:	f7ff fed1 	bl	80023ac <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 800260a:	2180      	movs	r1, #128	@ 0x80
 800260c:	2004      	movs	r0, #4
 800260e:	f7ff ff75 	bl	80024fc <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8002612:	2180      	movs	r1, #128	@ 0x80
 8002614:	200a      	movs	r0, #10
 8002616:	f7ff ff57 	bl	80024c8 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800261a:	2100      	movs	r1, #0
 800261c:	2001      	movs	r0, #1
 800261e:	f7ff fec5 	bl	80023ac <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 8002622:	2300      	movs	r3, #0
 8002624:	827b      	strh	r3, [r7, #18]
 8002626:	e00a      	b.n	800263e <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 8002628:	8a7b      	ldrh	r3, [r7, #18]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	4413      	add	r3, r2
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4619      	mov	r1, r3
 8002632:	2009      	movs	r0, #9
 8002634:	f7ff feba 	bl	80023ac <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 8002638:	8a7b      	ldrh	r3, [r7, #18]
 800263a:	3301      	adds	r3, #1
 800263c:	827b      	strh	r3, [r7, #18]
 800263e:	7bbb      	ldrb	r3, [r7, #14]
 8002640:	b29b      	uxth	r3, r3
 8002642:	8a7a      	ldrh	r2, [r7, #18]
 8002644:	429a      	cmp	r2, r3
 8002646:	d3ef      	bcc.n	8002628 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	4619      	mov	r1, r3
 800264c:	2001      	movs	r0, #1
 800264e:	f7ff fead 	bl	80023ac <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d103      	bne.n	8002660 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 8002658:	2180      	movs	r1, #128	@ 0x80
 800265a:	200d      	movs	r0, #13
 800265c:	f7ff ff34 	bl	80024c8 <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8002660:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002664:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8002666:	2004      	movs	r0, #4
 8002668:	f7ff fee4 	bl	8002434 <TM_MFRC522_ReadRegister>
 800266c:	4603      	mov	r3, r0
 800266e:	753b      	strb	r3, [r7, #20]
		i--;
 8002670:	8a7b      	ldrh	r3, [r7, #18]
 8002672:	3b01      	subs	r3, #1
 8002674:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002676:	8a7b      	ldrh	r3, [r7, #18]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <TM_MFRC522_ToCard+0xd6>
 800267c:	7d3b      	ldrb	r3, [r7, #20]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d105      	bne.n	8002692 <TM_MFRC522_ToCard+0xd6>
 8002686:	7d3a      	ldrb	r2, [r7, #20]
 8002688:	7d7b      	ldrb	r3, [r7, #21]
 800268a:	4013      	ands	r3, r2
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0e9      	beq.n	8002666 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8002692:	2180      	movs	r1, #128	@ 0x80
 8002694:	200d      	movs	r0, #13
 8002696:	f7ff ff31 	bl	80024fc <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 800269a:	8a7b      	ldrh	r3, [r7, #18]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d057      	beq.n	8002750 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 80026a0:	2006      	movs	r0, #6
 80026a2:	f7ff fec7 	bl	8002434 <TM_MFRC522_ReadRegister>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f003 031b 	and.w	r3, r3, #27
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d14d      	bne.n	800274c <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 80026b4:	7d3a      	ldrb	r2, [r7, #20]
 80026b6:	7dbb      	ldrb	r3, [r7, #22]
 80026b8:	4013      	ands	r3, r2
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 80026c4:	2301      	movs	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d140      	bne.n	8002750 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 80026ce:	200a      	movs	r0, #10
 80026d0:	f7ff feb0 	bl	8002434 <TM_MFRC522_ReadRegister>
 80026d4:	4603      	mov	r3, r0
 80026d6:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80026d8:	200c      	movs	r0, #12
 80026da:	f7ff feab 	bl	8002434 <TM_MFRC522_ReadRegister>
 80026de:	4603      	mov	r3, r0
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 80026e6:	7c7b      	ldrb	r3, [r7, #17]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00b      	beq.n	8002704 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 80026ec:	7d3b      	ldrb	r3, [r7, #20]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	7c7b      	ldrb	r3, [r7, #17]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002700:	801a      	strh	r2, [r3, #0]
 8002702:	e005      	b.n	8002710 <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 8002704:	7d3b      	ldrb	r3, [r7, #20]
 8002706:	b29b      	uxth	r3, r3
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	b29a      	uxth	r2, r3
 800270c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270e:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 8002710:	7d3b      	ldrb	r3, [r7, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 8002716:	2301      	movs	r3, #1
 8002718:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 800271a:	7d3b      	ldrb	r3, [r7, #20]
 800271c:	2b10      	cmp	r3, #16
 800271e:	d901      	bls.n	8002724 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 8002720:	2310      	movs	r3, #16
 8002722:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 8002724:	2300      	movs	r3, #0
 8002726:	827b      	strh	r3, [r7, #18]
 8002728:	e00a      	b.n	8002740 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 800272a:	8a7b      	ldrh	r3, [r7, #18]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	18d4      	adds	r4, r2, r3
 8002730:	2009      	movs	r0, #9
 8002732:	f7ff fe7f 	bl	8002434 <TM_MFRC522_ReadRegister>
 8002736:	4603      	mov	r3, r0
 8002738:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 800273a:	8a7b      	ldrh	r3, [r7, #18]
 800273c:	3301      	adds	r3, #1
 800273e:	827b      	strh	r3, [r7, #18]
 8002740:	7d3b      	ldrb	r3, [r7, #20]
 8002742:	b29b      	uxth	r3, r3
 8002744:	8a7a      	ldrh	r2, [r7, #18]
 8002746:	429a      	cmp	r2, r3
 8002748:	d3ef      	bcc.n	800272a <TM_MFRC522_ToCard+0x16e>
 800274a:	e001      	b.n	8002750 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 800274c:	2302      	movs	r3, #2
 800274e:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8002750:	7dfb      	ldrb	r3, [r7, #23]
}
 8002752:	4618      	mov	r0, r3
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	bd90      	pop	{r4, r7, pc}

0800275a <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af02      	add	r7, sp, #8
 8002760:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8002766:	2100      	movs	r1, #0
 8002768:	200d      	movs	r0, #13
 800276a:	f7ff fe1f 	bl	80023ac <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2293      	movs	r2, #147	@ 0x93
 8002772:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3301      	adds	r3, #1
 8002778:	2220      	movs	r2, #32
 800277a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800277c:	f107 030a 	add.w	r3, r7, #10
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2202      	movs	r2, #2
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	200c      	movs	r0, #12
 800278a:	f7ff ff17 	bl	80025bc <TM_MFRC522_ToCard>
 800278e:	4603      	mov	r3, r0
 8002790:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d118      	bne.n	80027ca <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 8002798:	2300      	movs	r3, #0
 800279a:	73bb      	strb	r3, [r7, #14]
 800279c:	e009      	b.n	80027b2 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 800279e:	7bbb      	ldrb	r3, [r7, #14]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	4413      	add	r3, r2
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	7b7b      	ldrb	r3, [r7, #13]
 80027a8:	4053      	eors	r3, r2
 80027aa:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 80027ac:	7bbb      	ldrb	r3, [r7, #14]
 80027ae:	3301      	adds	r3, #1
 80027b0:	73bb      	strb	r3, [r7, #14]
 80027b2:	7bbb      	ldrb	r3, [r7, #14]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d9f2      	bls.n	800279e <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 80027b8:	7bbb      	ldrb	r3, [r7, #14]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	7b7a      	ldrb	r2, [r7, #13]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d001      	beq.n	80027ca <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 80027c6:	2302      	movs	r3, #2
 80027c8:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
} 
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	460b      	mov	r3, r1
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);				//CRCIrq = 0
 80027e2:	2104      	movs	r1, #4
 80027e4:	2005      	movs	r0, #5
 80027e6:	f7ff fe89 	bl	80024fc <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 80027ea:	2180      	movs	r1, #128	@ 0x80
 80027ec:	200a      	movs	r0, #10
 80027ee:	f7ff fe6b 	bl	80024c8 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {   
 80027f2:	2300      	movs	r3, #0
 80027f4:	75fb      	strb	r3, [r7, #23]
 80027f6:	e00a      	b.n	800280e <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));   
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4413      	add	r3, r2
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	2009      	movs	r0, #9
 8002804:	f7ff fdd2 	bl	80023ac <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {   
 8002808:	7dfb      	ldrb	r3, [r7, #23]
 800280a:	3301      	adds	r3, #1
 800280c:	75fb      	strb	r3, [r7, #23]
 800280e:	7dfa      	ldrb	r2, [r7, #23]
 8002810:	7afb      	ldrb	r3, [r7, #11]
 8002812:	429a      	cmp	r2, r3
 8002814:	d3f0      	bcc.n	80027f8 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8002816:	2103      	movs	r1, #3
 8002818:	2001      	movs	r0, #1
 800281a:	f7ff fdc7 	bl	80023ac <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 800281e:	23ff      	movs	r3, #255	@ 0xff
 8002820:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8002822:	2005      	movs	r0, #5
 8002824:	f7ff fe06 	bl	8002434 <TM_MFRC522_ReadRegister>
 8002828:	4603      	mov	r3, r0
 800282a:	75bb      	strb	r3, [r7, #22]
		i--;
 800282c:	7dfb      	ldrb	r3, [r7, #23]
 800282e:	3b01      	subs	r3, #1
 8002830:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <TM_MFRC522_CalculateCRC+0x6e>
 8002838:	7dbb      	ldrb	r3, [r7, #22]
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ef      	beq.n	8002822 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8002842:	2022      	movs	r0, #34	@ 0x22
 8002844:	f7ff fdf6 	bl	8002434 <TM_MFRC522_ReadRegister>
 8002848:	4603      	mov	r3, r0
 800284a:	461a      	mov	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	1c5c      	adds	r4, r3, #1
 8002854:	2021      	movs	r0, #33	@ 0x21
 8002856:	f7ff fded 	bl	8002434 <TM_MFRC522_ReadRegister>
 800285a:	4603      	mov	r3, r0
 800285c:	7023      	strb	r3, [r4, #0]
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	bd90      	pop	{r4, r7, pc}

08002866 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 800286c:	2350      	movs	r3, #80	@ 0x50
 800286e:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8002874:	463b      	mov	r3, r7
 8002876:	1c9a      	adds	r2, r3, #2
 8002878:	463b      	mov	r3, r7
 800287a:	2102      	movs	r1, #2
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ffa9 	bl	80027d4 <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8002882:	463a      	mov	r2, r7
 8002884:	4639      	mov	r1, r7
 8002886:	1dbb      	adds	r3, r7, #6
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	2204      	movs	r2, #4
 800288e:	200c      	movs	r0, #12
 8002890:	f7ff fe94 	bl	80025bc <TM_MFRC522_ToCard>
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <Reset_Handler>:
 800289c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028d4 <LoopFillZerobss+0xe>
 80028a0:	f7ff fd26 	bl	80022f0 <SystemInit>
 80028a4:	480c      	ldr	r0, [pc, #48]	@ (80028d8 <LoopFillZerobss+0x12>)
 80028a6:	490d      	ldr	r1, [pc, #52]	@ (80028dc <LoopFillZerobss+0x16>)
 80028a8:	4a0d      	ldr	r2, [pc, #52]	@ (80028e0 <LoopFillZerobss+0x1a>)
 80028aa:	2300      	movs	r3, #0
 80028ac:	e002      	b.n	80028b4 <LoopCopyDataInit>

080028ae <CopyDataInit>:
 80028ae:	58d4      	ldr	r4, [r2, r3]
 80028b0:	50c4      	str	r4, [r0, r3]
 80028b2:	3304      	adds	r3, #4

080028b4 <LoopCopyDataInit>:
 80028b4:	18c4      	adds	r4, r0, r3
 80028b6:	428c      	cmp	r4, r1
 80028b8:	d3f9      	bcc.n	80028ae <CopyDataInit>
 80028ba:	4a0a      	ldr	r2, [pc, #40]	@ (80028e4 <LoopFillZerobss+0x1e>)
 80028bc:	4c0a      	ldr	r4, [pc, #40]	@ (80028e8 <LoopFillZerobss+0x22>)
 80028be:	2300      	movs	r3, #0
 80028c0:	e001      	b.n	80028c6 <LoopFillZerobss>

080028c2 <FillZerobss>:
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	3204      	adds	r2, #4

080028c6 <LoopFillZerobss>:
 80028c6:	42a2      	cmp	r2, r4
 80028c8:	d3fb      	bcc.n	80028c2 <FillZerobss>
 80028ca:	f003 fd99 	bl	8006400 <__libc_init_array>
 80028ce:	f7fe ff17 	bl	8001700 <main>
 80028d2:	4770      	bx	lr
 80028d4:	20030000 	.word	0x20030000
 80028d8:	20000000 	.word	0x20000000
 80028dc:	200001e0 	.word	0x200001e0
 80028e0:	0800a0ac 	.word	0x0800a0ac
 80028e4:	200001e0 	.word	0x200001e0
 80028e8:	20000504 	.word	0x20000504

080028ec <ADC_IRQHandler>:
 80028ec:	e7fe      	b.n	80028ec <ADC_IRQHandler>
	...

080028f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <HAL_Init+0x40>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002930 <HAL_Init+0x40>)
 80028fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002900:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <HAL_Init+0x40>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0a      	ldr	r2, [pc, #40]	@ (8002930 <HAL_Init+0x40>)
 8002906:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800290a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800290c:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <HAL_Init+0x40>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a07      	ldr	r2, [pc, #28]	@ (8002930 <HAL_Init+0x40>)
 8002912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002918:	2003      	movs	r0, #3
 800291a:	f000 f94f 	bl	8002bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800291e:	200f      	movs	r0, #15
 8002920:	f000 f808 	bl	8002934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002924:	f7ff faf2 	bl	8001f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023c00 	.word	0x40023c00

08002934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800293c:	4b12      	ldr	r3, [pc, #72]	@ (8002988 <HAL_InitTick+0x54>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_InitTick+0x58>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800294a:	fbb3 f3f1 	udiv	r3, r3, r1
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f967 	bl	8002c26 <HAL_SYSTICK_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e00e      	b.n	8002980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b0f      	cmp	r3, #15
 8002966:	d80a      	bhi.n	800297e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002968:	2200      	movs	r2, #0
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	f04f 30ff 	mov.w	r0, #4294967295
 8002970:	f000 f92f 	bl	8002bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002974:	4a06      	ldr	r2, [pc, #24]	@ (8002990 <HAL_InitTick+0x5c>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	2000000c 	.word	0x2000000c
 800298c:	20000014 	.word	0x20000014
 8002990:	20000010 	.word	0x20000010

08002994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002998:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_IncTick+0x20>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_IncTick+0x24>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	4a04      	ldr	r2, [pc, #16]	@ (80029b8 <HAL_IncTick+0x24>)
 80029a6:	6013      	str	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	20000014 	.word	0x20000014
 80029b8:	200003b4 	.word	0x200003b4

080029bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return uwTick;
 80029c0:	4b03      	ldr	r3, [pc, #12]	@ (80029d0 <HAL_GetTick+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	200003b4 	.word	0x200003b4

080029d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029dc:	f7ff ffee 	bl	80029bc <HAL_GetTick>
 80029e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d005      	beq.n	80029fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <HAL_Delay+0x44>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4413      	add	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029fa:	bf00      	nop
 80029fc:	f7ff ffde 	bl	80029bc <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d8f7      	bhi.n	80029fc <HAL_Delay+0x28>
  {
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000014 	.word	0x20000014

08002a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <__NVIC_SetPriorityGrouping+0x44>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a4e:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <__NVIC_SetPriorityGrouping+0x44>)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	60d3      	str	r3, [r2, #12]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <__NVIC_GetPriorityGrouping+0x18>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	0a1b      	lsrs	r3, r3, #8
 8002a6e:	f003 0307 	and.w	r3, r3, #7
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	db0b      	blt.n	8002aaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	f003 021f 	and.w	r2, r3, #31
 8002a98:	4907      	ldr	r1, [pc, #28]	@ (8002ab8 <__NVIC_EnableIRQ+0x38>)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8002aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000e100 	.word	0xe000e100

08002abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	6039      	str	r1, [r7, #0]
 8002ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	db0a      	blt.n	8002ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	490c      	ldr	r1, [pc, #48]	@ (8002b08 <__NVIC_SetPriority+0x4c>)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	0112      	lsls	r2, r2, #4
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	440b      	add	r3, r1
 8002ae0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae4:	e00a      	b.n	8002afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	4908      	ldr	r1, [pc, #32]	@ (8002b0c <__NVIC_SetPriority+0x50>)
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	3b04      	subs	r3, #4
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	440b      	add	r3, r1
 8002afa:	761a      	strb	r2, [r3, #24]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000e100 	.word	0xe000e100
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b089      	sub	sp, #36	@ 0x24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f1c3 0307 	rsb	r3, r3, #7
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	bf28      	it	cs
 8002b2e:	2304      	movcs	r3, #4
 8002b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3304      	adds	r3, #4
 8002b36:	2b06      	cmp	r3, #6
 8002b38:	d902      	bls.n	8002b40 <NVIC_EncodePriority+0x30>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3b03      	subs	r3, #3
 8002b3e:	e000      	b.n	8002b42 <NVIC_EncodePriority+0x32>
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	f04f 32ff 	mov.w	r2, #4294967295
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	401a      	ands	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b58:	f04f 31ff 	mov.w	r1, #4294967295
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b62:	43d9      	mvns	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	4313      	orrs	r3, r2
         );
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3724      	adds	r7, #36	@ 0x24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b88:	d301      	bcc.n	8002b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e00f      	b.n	8002bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb8 <SysTick_Config+0x40>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b96:	210f      	movs	r1, #15
 8002b98:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9c:	f7ff ff8e 	bl	8002abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <SysTick_Config+0x40>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ba6:	4b04      	ldr	r3, [pc, #16]	@ (8002bb8 <SysTick_Config+0x40>)
 8002ba8:	2207      	movs	r2, #7
 8002baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	e000e010 	.word	0xe000e010

08002bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff ff29 	bl	8002a1c <__NVIC_SetPriorityGrouping>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002be4:	f7ff ff3e 	bl	8002a64 <__NVIC_GetPriorityGrouping>
 8002be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	6978      	ldr	r0, [r7, #20]
 8002bf0:	f7ff ff8e 	bl	8002b10 <NVIC_EncodePriority>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff5d 	bl	8002abc <__NVIC_SetPriority>
}
 8002c02:	bf00      	nop
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	4603      	mov	r3, r0
 8002c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff31 	bl	8002a80 <__NVIC_EnableIRQ>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ffa2 	bl	8002b78 <SysTick_Config>
 8002c34:	4603      	mov	r3, r0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	@ 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	e177      	b.n	8002f4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	f040 8166 	bne.w	8002f46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d005      	beq.n	8002c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d130      	bne.n	8002cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cc8:	2201      	movs	r2, #1
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 0201 	and.w	r2, r3, #1
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d017      	beq.n	8002d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d123      	bne.n	8002d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	08da      	lsrs	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3208      	adds	r2, #8
 8002d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	220f      	movs	r2, #15
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	08da      	lsrs	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3208      	adds	r2, #8
 8002d7e:	69b9      	ldr	r1, [r7, #24]
 8002d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	2203      	movs	r2, #3
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0203 	and.w	r2, r3, #3
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80c0 	beq.w	8002f46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b66      	ldr	r3, [pc, #408]	@ (8002f64 <HAL_GPIO_Init+0x324>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dce:	4a65      	ldr	r2, [pc, #404]	@ (8002f64 <HAL_GPIO_Init+0x324>)
 8002dd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dd6:	4b63      	ldr	r3, [pc, #396]	@ (8002f64 <HAL_GPIO_Init+0x324>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002de2:	4a61      	ldr	r2, [pc, #388]	@ (8002f68 <HAL_GPIO_Init+0x328>)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	3302      	adds	r3, #2
 8002dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	220f      	movs	r2, #15
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a58      	ldr	r2, [pc, #352]	@ (8002f6c <HAL_GPIO_Init+0x32c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d037      	beq.n	8002e7e <HAL_GPIO_Init+0x23e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a57      	ldr	r2, [pc, #348]	@ (8002f70 <HAL_GPIO_Init+0x330>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d031      	beq.n	8002e7a <HAL_GPIO_Init+0x23a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a56      	ldr	r2, [pc, #344]	@ (8002f74 <HAL_GPIO_Init+0x334>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d02b      	beq.n	8002e76 <HAL_GPIO_Init+0x236>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a55      	ldr	r2, [pc, #340]	@ (8002f78 <HAL_GPIO_Init+0x338>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d025      	beq.n	8002e72 <HAL_GPIO_Init+0x232>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a54      	ldr	r2, [pc, #336]	@ (8002f7c <HAL_GPIO_Init+0x33c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d01f      	beq.n	8002e6e <HAL_GPIO_Init+0x22e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a53      	ldr	r2, [pc, #332]	@ (8002f80 <HAL_GPIO_Init+0x340>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d019      	beq.n	8002e6a <HAL_GPIO_Init+0x22a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a52      	ldr	r2, [pc, #328]	@ (8002f84 <HAL_GPIO_Init+0x344>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d013      	beq.n	8002e66 <HAL_GPIO_Init+0x226>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a51      	ldr	r2, [pc, #324]	@ (8002f88 <HAL_GPIO_Init+0x348>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00d      	beq.n	8002e62 <HAL_GPIO_Init+0x222>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a50      	ldr	r2, [pc, #320]	@ (8002f8c <HAL_GPIO_Init+0x34c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d007      	beq.n	8002e5e <HAL_GPIO_Init+0x21e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a4f      	ldr	r2, [pc, #316]	@ (8002f90 <HAL_GPIO_Init+0x350>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d101      	bne.n	8002e5a <HAL_GPIO_Init+0x21a>
 8002e56:	2309      	movs	r3, #9
 8002e58:	e012      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e5a:	230a      	movs	r3, #10
 8002e5c:	e010      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e5e:	2308      	movs	r3, #8
 8002e60:	e00e      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e62:	2307      	movs	r3, #7
 8002e64:	e00c      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e66:	2306      	movs	r3, #6
 8002e68:	e00a      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e6a:	2305      	movs	r3, #5
 8002e6c:	e008      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e6e:	2304      	movs	r3, #4
 8002e70:	e006      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e72:	2303      	movs	r3, #3
 8002e74:	e004      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e002      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <HAL_GPIO_Init+0x240>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	f002 0203 	and.w	r2, r2, #3
 8002e86:	0092      	lsls	r2, r2, #2
 8002e88:	4093      	lsls	r3, r2
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e90:	4935      	ldr	r1, [pc, #212]	@ (8002f68 <HAL_GPIO_Init+0x328>)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	3302      	adds	r3, #2
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f94 <HAL_GPIO_Init+0x354>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ec2:	4a34      	ldr	r2, [pc, #208]	@ (8002f94 <HAL_GPIO_Init+0x354>)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ec8:	4b32      	ldr	r3, [pc, #200]	@ (8002f94 <HAL_GPIO_Init+0x354>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eec:	4a29      	ldr	r2, [pc, #164]	@ (8002f94 <HAL_GPIO_Init+0x354>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ef2:	4b28      	ldr	r3, [pc, #160]	@ (8002f94 <HAL_GPIO_Init+0x354>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f16:	4a1f      	ldr	r2, [pc, #124]	@ (8002f94 <HAL_GPIO_Init+0x354>)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f94 <HAL_GPIO_Init+0x354>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f40:	4a14      	ldr	r2, [pc, #80]	@ (8002f94 <HAL_GPIO_Init+0x354>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b0f      	cmp	r3, #15
 8002f50:	f67f ae84 	bls.w	8002c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	3724      	adds	r7, #36	@ 0x24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40013800 	.word	0x40013800
 8002f6c:	40020000 	.word	0x40020000
 8002f70:	40020400 	.word	0x40020400
 8002f74:	40020800 	.word	0x40020800
 8002f78:	40020c00 	.word	0x40020c00
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40021400 	.word	0x40021400
 8002f84:	40021800 	.word	0x40021800
 8002f88:	40021c00 	.word	0x40021c00
 8002f8c:	40022000 	.word	0x40022000
 8002f90:	40022400 	.word	0x40022400
 8002f94:	40013c00 	.word	0x40013c00

08002f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
 8002fb4:	e001      	b.n	8002fba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	807b      	strh	r3, [r7, #2]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd8:	787b      	ldrb	r3, [r7, #1]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fe4:	e003      	b.n	8002fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fe6:	887b      	ldrh	r3, [r7, #2]
 8002fe8:	041a      	lsls	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	619a      	str	r2, [r3, #24]
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	4b20      	ldr	r3, [pc, #128]	@ (800308c <HAL_PWREx_EnableOverDrive+0x90>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	4a1f      	ldr	r2, [pc, #124]	@ (800308c <HAL_PWREx_EnableOverDrive+0x90>)
 8003010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003014:	6413      	str	r3, [r2, #64]	@ 0x40
 8003016:	4b1d      	ldr	r3, [pc, #116]	@ (800308c <HAL_PWREx_EnableOverDrive+0x90>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003022:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <HAL_PWREx_EnableOverDrive+0x94>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003028:	f7ff fcc8 	bl	80029bc <HAL_GetTick>
 800302c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800302e:	e009      	b.n	8003044 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003030:	f7ff fcc4 	bl	80029bc <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800303e:	d901      	bls.n	8003044 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e01f      	b.n	8003084 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003044:	4b13      	ldr	r3, [pc, #76]	@ (8003094 <HAL_PWREx_EnableOverDrive+0x98>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800304c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003050:	d1ee      	bne.n	8003030 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003052:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003054:	2201      	movs	r2, #1
 8003056:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003058:	f7ff fcb0 	bl	80029bc <HAL_GetTick>
 800305c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800305e:	e009      	b.n	8003074 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003060:	f7ff fcac 	bl	80029bc <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800306e:	d901      	bls.n	8003074 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e007      	b.n	8003084 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003074:	4b07      	ldr	r3, [pc, #28]	@ (8003094 <HAL_PWREx_EnableOverDrive+0x98>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003080:	d1ee      	bne.n	8003060 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40023800 	.word	0x40023800
 8003090:	420e0040 	.word	0x420e0040
 8003094:	40007000 	.word	0x40007000
 8003098:	420e0044 	.word	0x420e0044

0800309c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e267      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d075      	beq.n	80031a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030ba:	4b88      	ldr	r3, [pc, #544]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d00c      	beq.n	80030e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c6:	4b85      	ldr	r3, [pc, #532]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d112      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d2:	4b82      	ldr	r3, [pc, #520]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030de:	d10b      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e0:	4b7e      	ldr	r3, [pc, #504]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d05b      	beq.n	80031a4 <HAL_RCC_OscConfig+0x108>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d157      	bne.n	80031a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e242      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003100:	d106      	bne.n	8003110 <HAL_RCC_OscConfig+0x74>
 8003102:	4b76      	ldr	r3, [pc, #472]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a75      	ldr	r2, [pc, #468]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e01d      	b.n	800314c <HAL_RCC_OscConfig+0xb0>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x98>
 800311a:	4b70      	ldr	r3, [pc, #448]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6f      	ldr	r2, [pc, #444]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	4b6d      	ldr	r3, [pc, #436]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6c      	ldr	r2, [pc, #432]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e00b      	b.n	800314c <HAL_RCC_OscConfig+0xb0>
 8003134:	4b69      	ldr	r3, [pc, #420]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a68      	ldr	r2, [pc, #416]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 800313a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	4b66      	ldr	r3, [pc, #408]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a65      	ldr	r2, [pc, #404]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800314a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7ff fc32 	bl	80029bc <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800315c:	f7ff fc2e 	bl	80029bc <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b64      	cmp	r3, #100	@ 0x64
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e207      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b5b      	ldr	r3, [pc, #364]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0xc0>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7ff fc1e 	bl	80029bc <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003184:	f7ff fc1a 	bl	80029bc <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	@ 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e1f3      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	4b51      	ldr	r3, [pc, #324]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0xe8>
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d063      	beq.n	800327a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031b2:	4b4a      	ldr	r3, [pc, #296]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031be:	4b47      	ldr	r3, [pc, #284]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d11c      	bne.n	8003204 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ca:	4b44      	ldr	r3, [pc, #272]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d116      	bne.n	8003204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d6:	4b41      	ldr	r3, [pc, #260]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_RCC_OscConfig+0x152>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d001      	beq.n	80031ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e1c7      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ee:	4b3b      	ldr	r3, [pc, #236]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4937      	ldr	r1, [pc, #220]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003202:	e03a      	b.n	800327a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d020      	beq.n	800324e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320c:	4b34      	ldr	r3, [pc, #208]	@ (80032e0 <HAL_RCC_OscConfig+0x244>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003212:	f7ff fbd3 	bl	80029bc <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321a:	f7ff fbcf 	bl	80029bc <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e1a8      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322c:	4b2b      	ldr	r3, [pc, #172]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003238:	4b28      	ldr	r3, [pc, #160]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4925      	ldr	r1, [pc, #148]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]
 800324c:	e015      	b.n	800327a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324e:	4b24      	ldr	r3, [pc, #144]	@ (80032e0 <HAL_RCC_OscConfig+0x244>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7ff fbb2 	bl	80029bc <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800325c:	f7ff fbae 	bl	80029bc <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e187      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326e:	4b1b      	ldr	r3, [pc, #108]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d036      	beq.n	80032f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d016      	beq.n	80032bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328e:	4b15      	ldr	r3, [pc, #84]	@ (80032e4 <HAL_RCC_OscConfig+0x248>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7ff fb92 	bl	80029bc <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800329c:	f7ff fb8e 	bl	80029bc <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e167      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ae:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <HAL_RCC_OscConfig+0x240>)
 80032b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x200>
 80032ba:	e01b      	b.n	80032f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032bc:	4b09      	ldr	r3, [pc, #36]	@ (80032e4 <HAL_RCC_OscConfig+0x248>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c2:	f7ff fb7b 	bl	80029bc <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c8:	e00e      	b.n	80032e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ca:	f7ff fb77 	bl	80029bc <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d907      	bls.n	80032e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e150      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
 80032dc:	40023800 	.word	0x40023800
 80032e0:	42470000 	.word	0x42470000
 80032e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e8:	4b88      	ldr	r3, [pc, #544]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80032ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1ea      	bne.n	80032ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8097 	beq.w	8003430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003306:	4b81      	ldr	r3, [pc, #516]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10f      	bne.n	8003332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	4b7d      	ldr	r3, [pc, #500]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	4a7c      	ldr	r2, [pc, #496]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	@ 0x40
 8003322:	4b7a      	ldr	r3, [pc, #488]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	4b77      	ldr	r3, [pc, #476]	@ (8003510 <HAL_RCC_OscConfig+0x474>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d118      	bne.n	8003370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333e:	4b74      	ldr	r3, [pc, #464]	@ (8003510 <HAL_RCC_OscConfig+0x474>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a73      	ldr	r2, [pc, #460]	@ (8003510 <HAL_RCC_OscConfig+0x474>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7ff fb37 	bl	80029bc <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7ff fb33 	bl	80029bc <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e10c      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	4b6a      	ldr	r3, [pc, #424]	@ (8003510 <HAL_RCC_OscConfig+0x474>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x2ea>
 8003378:	4b64      	ldr	r3, [pc, #400]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337c:	4a63      	ldr	r2, [pc, #396]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6713      	str	r3, [r2, #112]	@ 0x70
 8003384:	e01c      	b.n	80033c0 <HAL_RCC_OscConfig+0x324>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b05      	cmp	r3, #5
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x30c>
 800338e:	4b5f      	ldr	r3, [pc, #380]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003392:	4a5e      	ldr	r2, [pc, #376]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6713      	str	r3, [r2, #112]	@ 0x70
 800339a:	4b5c      	ldr	r3, [pc, #368]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339e:	4a5b      	ldr	r2, [pc, #364]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a6:	e00b      	b.n	80033c0 <HAL_RCC_OscConfig+0x324>
 80033a8:	4b58      	ldr	r3, [pc, #352]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ac:	4a57      	ldr	r2, [pc, #348]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033b4:	4b55      	ldr	r3, [pc, #340]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b8:	4a54      	ldr	r2, [pc, #336]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033ba:	f023 0304 	bic.w	r3, r3, #4
 80033be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d015      	beq.n	80033f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7ff faf8 	bl	80029bc <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d0:	f7ff faf4 	bl	80029bc <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e0cb      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	4b49      	ldr	r3, [pc, #292]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0ee      	beq.n	80033d0 <HAL_RCC_OscConfig+0x334>
 80033f2:	e014      	b.n	800341e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f4:	f7ff fae2 	bl	80029bc <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fc:	f7ff fade 	bl	80029bc <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e0b5      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003412:	4b3e      	ldr	r3, [pc, #248]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1ee      	bne.n	80033fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d105      	bne.n	8003430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003424:	4b39      	ldr	r3, [pc, #228]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	4a38      	ldr	r2, [pc, #224]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800342a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800342e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a1 	beq.w	800357c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800343a:	4b34      	ldr	r3, [pc, #208]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b08      	cmp	r3, #8
 8003444:	d05c      	beq.n	8003500 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d141      	bne.n	80034d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b31      	ldr	r3, [pc, #196]	@ (8003514 <HAL_RCC_OscConfig+0x478>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7ff fab2 	bl	80029bc <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345c:	f7ff faae 	bl	80029bc <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e087      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	4b27      	ldr	r3, [pc, #156]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	019b      	lsls	r3, r3, #6
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	3b01      	subs	r3, #1
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	491b      	ldr	r1, [pc, #108]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003514 <HAL_RCC_OscConfig+0x478>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7ff fa87 	bl	80029bc <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b2:	f7ff fa83 	bl	80029bc <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e05c      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c4:	4b11      	ldr	r3, [pc, #68]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x416>
 80034d0:	e054      	b.n	800357c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d2:	4b10      	ldr	r3, [pc, #64]	@ (8003514 <HAL_RCC_OscConfig+0x478>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7ff fa70 	bl	80029bc <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e0:	f7ff fa6c 	bl	80029bc <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e045      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	4b06      	ldr	r3, [pc, #24]	@ (800350c <HAL_RCC_OscConfig+0x470>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x444>
 80034fe:	e03d      	b.n	800357c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d107      	bne.n	8003518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e038      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000
 8003514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003518:	4b1b      	ldr	r3, [pc, #108]	@ (8003588 <HAL_RCC_OscConfig+0x4ec>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d028      	beq.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d121      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d11a      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003548:	4013      	ands	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800354e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003550:	4293      	cmp	r3, r2
 8003552:	d111      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	3b01      	subs	r3, #1
 8003562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d107      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800

0800358c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0cc      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a0:	4b68      	ldr	r3, [pc, #416]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d90c      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b65      	ldr	r3, [pc, #404]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b63      	ldr	r3, [pc, #396]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0b8      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d020      	beq.n	8003616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e0:	4b59      	ldr	r3, [pc, #356]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4a58      	ldr	r2, [pc, #352]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f8:	4b53      	ldr	r3, [pc, #332]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a52      	ldr	r2, [pc, #328]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003604:	4b50      	ldr	r3, [pc, #320]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	494d      	ldr	r1, [pc, #308]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d044      	beq.n	80036ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b47      	ldr	r3, [pc, #284]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d119      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d003      	beq.n	800364a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003646:	2b03      	cmp	r3, #3
 8003648:	d107      	bne.n	800365a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364a:	4b3f      	ldr	r3, [pc, #252]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365a:	4b3b      	ldr	r3, [pc, #236]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e067      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366a:	4b37      	ldr	r3, [pc, #220]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f023 0203 	bic.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4934      	ldr	r1, [pc, #208]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	4313      	orrs	r3, r2
 800367a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800367c:	f7ff f99e 	bl	80029bc <HAL_GetTick>
 8003680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	e00a      	b.n	800369a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003684:	f7ff f99a 	bl	80029bc <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e04f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	4b2b      	ldr	r3, [pc, #172]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 020c 	and.w	r2, r3, #12
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d1eb      	bne.n	8003684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036ac:	4b25      	ldr	r3, [pc, #148]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d20c      	bcs.n	80036d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b22      	ldr	r3, [pc, #136]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b20      	ldr	r3, [pc, #128]	@ (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e032      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e0:	4b19      	ldr	r3, [pc, #100]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4916      	ldr	r1, [pc, #88]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fe:	4b12      	ldr	r3, [pc, #72]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	490e      	ldr	r1, [pc, #56]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003712:	f000 f821 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 8003716:	4602      	mov	r2, r0
 8003718:	4b0b      	ldr	r3, [pc, #44]	@ (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	490a      	ldr	r1, [pc, #40]	@ (800374c <HAL_RCC_ClockConfig+0x1c0>)
 8003724:	5ccb      	ldrb	r3, [r1, r3]
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	4a09      	ldr	r2, [pc, #36]	@ (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800372e:	4b09      	ldr	r3, [pc, #36]	@ (8003754 <HAL_RCC_ClockConfig+0x1c8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff f8fe 	bl	8002934 <HAL_InitTick>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023c00 	.word	0x40023c00
 8003748:	40023800 	.word	0x40023800
 800374c:	08009c5c 	.word	0x08009c5c
 8003750:	2000000c 	.word	0x2000000c
 8003754:	20000010 	.word	0x20000010

08003758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800375c:	b094      	sub	sp, #80	@ 0x50
 800375e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003770:	4b79      	ldr	r3, [pc, #484]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b08      	cmp	r3, #8
 800377a:	d00d      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x40>
 800377c:	2b08      	cmp	r3, #8
 800377e:	f200 80e1 	bhi.w	8003944 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x34>
 8003786:	2b04      	cmp	r3, #4
 8003788:	d003      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0x3a>
 800378a:	e0db      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800378c:	4b73      	ldr	r3, [pc, #460]	@ (800395c <HAL_RCC_GetSysClockFreq+0x204>)
 800378e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003790:	e0db      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003792:	4b73      	ldr	r3, [pc, #460]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x208>)
 8003794:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003796:	e0d8      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003798:	4b6f      	ldr	r3, [pc, #444]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d063      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ae:	4b6a      	ldr	r3, [pc, #424]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	2200      	movs	r2, #0
 80037b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80037c2:	2300      	movs	r3, #0
 80037c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80037c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037ca:	4622      	mov	r2, r4
 80037cc:	462b      	mov	r3, r5
 80037ce:	f04f 0000 	mov.w	r0, #0
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	0159      	lsls	r1, r3, #5
 80037d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037dc:	0150      	lsls	r0, r2, #5
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4621      	mov	r1, r4
 80037e4:	1a51      	subs	r1, r2, r1
 80037e6:	6139      	str	r1, [r7, #16]
 80037e8:	4629      	mov	r1, r5
 80037ea:	eb63 0301 	sbc.w	r3, r3, r1
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037fc:	4659      	mov	r1, fp
 80037fe:	018b      	lsls	r3, r1, #6
 8003800:	4651      	mov	r1, sl
 8003802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003806:	4651      	mov	r1, sl
 8003808:	018a      	lsls	r2, r1, #6
 800380a:	4651      	mov	r1, sl
 800380c:	ebb2 0801 	subs.w	r8, r2, r1
 8003810:	4659      	mov	r1, fp
 8003812:	eb63 0901 	sbc.w	r9, r3, r1
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800382a:	4690      	mov	r8, r2
 800382c:	4699      	mov	r9, r3
 800382e:	4623      	mov	r3, r4
 8003830:	eb18 0303 	adds.w	r3, r8, r3
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	462b      	mov	r3, r5
 8003838:	eb49 0303 	adc.w	r3, r9, r3
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800384a:	4629      	mov	r1, r5
 800384c:	024b      	lsls	r3, r1, #9
 800384e:	4621      	mov	r1, r4
 8003850:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003854:	4621      	mov	r1, r4
 8003856:	024a      	lsls	r2, r1, #9
 8003858:	4610      	mov	r0, r2
 800385a:	4619      	mov	r1, r3
 800385c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800385e:	2200      	movs	r2, #0
 8003860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003862:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003868:	f7fd fa1e 	bl	8000ca8 <__aeabi_uldivmod>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4613      	mov	r3, r2
 8003872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003874:	e058      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003876:	4b38      	ldr	r3, [pc, #224]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	099b      	lsrs	r3, r3, #6
 800387c:	2200      	movs	r2, #0
 800387e:	4618      	mov	r0, r3
 8003880:	4611      	mov	r1, r2
 8003882:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003886:	623b      	str	r3, [r7, #32]
 8003888:	2300      	movs	r3, #0
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
 800388c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003890:	4642      	mov	r2, r8
 8003892:	464b      	mov	r3, r9
 8003894:	f04f 0000 	mov.w	r0, #0
 8003898:	f04f 0100 	mov.w	r1, #0
 800389c:	0159      	lsls	r1, r3, #5
 800389e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038a2:	0150      	lsls	r0, r2, #5
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4641      	mov	r1, r8
 80038aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80038ae:	4649      	mov	r1, r9
 80038b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038c8:	ebb2 040a 	subs.w	r4, r2, sl
 80038cc:	eb63 050b 	sbc.w	r5, r3, fp
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	00eb      	lsls	r3, r5, #3
 80038da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038de:	00e2      	lsls	r2, r4, #3
 80038e0:	4614      	mov	r4, r2
 80038e2:	461d      	mov	r5, r3
 80038e4:	4643      	mov	r3, r8
 80038e6:	18e3      	adds	r3, r4, r3
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	464b      	mov	r3, r9
 80038ec:	eb45 0303 	adc.w	r3, r5, r3
 80038f0:	607b      	str	r3, [r7, #4]
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038fe:	4629      	mov	r1, r5
 8003900:	028b      	lsls	r3, r1, #10
 8003902:	4621      	mov	r1, r4
 8003904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003908:	4621      	mov	r1, r4
 800390a:	028a      	lsls	r2, r1, #10
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003912:	2200      	movs	r2, #0
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	61fa      	str	r2, [r7, #28]
 8003918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800391c:	f7fd f9c4 	bl	8000ca8 <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4613      	mov	r3, r2
 8003926:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003928:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	0c1b      	lsrs	r3, r3, #16
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	3301      	adds	r3, #1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003938:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800393a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003942:	e002      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003944:	4b05      	ldr	r3, [pc, #20]	@ (800395c <HAL_RCC_GetSysClockFreq+0x204>)
 8003946:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800394a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800394c:	4618      	mov	r0, r3
 800394e:	3750      	adds	r7, #80	@ 0x50
 8003950:	46bd      	mov	sp, r7
 8003952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800
 800395c:	00f42400 	.word	0x00f42400
 8003960:	007a1200 	.word	0x007a1200

08003964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003968:	4b03      	ldr	r3, [pc, #12]	@ (8003978 <HAL_RCC_GetHCLKFreq+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	2000000c 	.word	0x2000000c

0800397c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003980:	f7ff fff0 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b05      	ldr	r3, [pc, #20]	@ (800399c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	0a9b      	lsrs	r3, r3, #10
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4903      	ldr	r1, [pc, #12]	@ (80039a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40023800 	.word	0x40023800
 80039a0:	08009c6c 	.word	0x08009c6c

080039a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039a8:	f7ff ffdc 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	0b5b      	lsrs	r3, r3, #13
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4903      	ldr	r1, [pc, #12]	@ (80039c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40023800 	.word	0x40023800
 80039c8:	08009c6c 	.word	0x08009c6c

080039cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e07b      	b.n	8003ad6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039ee:	d009      	beq.n	8003a04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	61da      	str	r2, [r3, #28]
 80039f6:	e005      	b.n	8003a04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fe fa9c 	bl	8001f5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a88:	ea42 0103 	orr.w	r1, r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	f003 0104 	and.w	r1, r3, #4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	f003 0210 	and.w	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ac4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b088      	sub	sp, #32
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	4613      	mov	r3, r2
 8003aec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003aee:	f7fe ff65 	bl	80029bc <HAL_GetTick>
 8003af2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d001      	beq.n	8003b08 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
 8003b06:	e12a      	b.n	8003d5e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_SPI_Transmit+0x36>
 8003b0e:	88fb      	ldrh	r3, [r7, #6]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e122      	b.n	8003d5e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_SPI_Transmit+0x48>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e11b      	b.n	8003d5e <HAL_SPI_Transmit+0x280>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2203      	movs	r2, #3
 8003b32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	88fa      	ldrh	r2, [r7, #6]
 8003b46:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	88fa      	ldrh	r2, [r7, #6]
 8003b4c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b74:	d10f      	bne.n	8003b96 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba0:	2b40      	cmp	r3, #64	@ 0x40
 8003ba2:	d007      	beq.n	8003bb4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bbc:	d152      	bne.n	8003c64 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_SPI_Transmit+0xee>
 8003bc6:	8b7b      	ldrh	r3, [r7, #26]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d145      	bne.n	8003c58 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd0:	881a      	ldrh	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bdc:	1c9a      	adds	r2, r3, #2
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bf0:	e032      	b.n	8003c58 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d112      	bne.n	8003c26 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c04:	881a      	ldrh	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c10:	1c9a      	adds	r2, r3, #2
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c24:	e018      	b.n	8003c58 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c26:	f7fe fec9 	bl	80029bc <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d803      	bhi.n	8003c3e <HAL_SPI_Transmit+0x160>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3c:	d102      	bne.n	8003c44 <HAL_SPI_Transmit+0x166>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e082      	b.n	8003d5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1c7      	bne.n	8003bf2 <HAL_SPI_Transmit+0x114>
 8003c62:	e053      	b.n	8003d0c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HAL_SPI_Transmit+0x194>
 8003c6c:	8b7b      	ldrh	r3, [r7, #26]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d147      	bne.n	8003d02 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	7812      	ldrb	r2, [r2, #0]
 8003c7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c98:	e033      	b.n	8003d02 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d113      	bne.n	8003cd0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	7812      	ldrb	r2, [r2, #0]
 8003cb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003cce:	e018      	b.n	8003d02 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cd0:	f7fe fe74 	bl	80029bc <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d803      	bhi.n	8003ce8 <HAL_SPI_Transmit+0x20a>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce6:	d102      	bne.n	8003cee <HAL_SPI_Transmit+0x210>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e02d      	b.n	8003d5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1c6      	bne.n	8003c9a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	6839      	ldr	r1, [r7, #0]
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fbe7 	bl	80044e4 <SPI_EndRxTxTransaction>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
  }
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b088      	sub	sp, #32
 8003d6a:	af02      	add	r7, sp, #8
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	4613      	mov	r3, r2
 8003d74:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d001      	beq.n	8003d86 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
 8003d84:	e104      	b.n	8003f90 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_SPI_Receive+0x2c>
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e0fc      	b.n	8003f90 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d9e:	d112      	bne.n	8003dc6 <HAL_SPI_Receive+0x60>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10e      	bne.n	8003dc6 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2204      	movs	r2, #4
 8003dac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003db0:	88fa      	ldrh	r2, [r7, #6]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f8eb 	bl	8003f98 <HAL_SPI_TransmitReceive>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	e0e4      	b.n	8003f90 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dc6:	f7fe fdf9 	bl	80029bc <HAL_GetTick>
 8003dca:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_SPI_Receive+0x74>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e0da      	b.n	8003f90 <HAL_SPI_Receive+0x22a>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2204      	movs	r2, #4
 8003de6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	88fa      	ldrh	r2, [r7, #6]
 8003dfa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	88fa      	ldrh	r2, [r7, #6]
 8003e00:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e28:	d10f      	bne.n	8003e4a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e54:	2b40      	cmp	r3, #64	@ 0x40
 8003e56:	d007      	beq.n	8003e68 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d170      	bne.n	8003f52 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e70:	e035      	b.n	8003ede <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d115      	bne.n	8003eac <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f103 020c 	add.w	r2, r3, #12
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8c:	7812      	ldrb	r2, [r2, #0]
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003eaa:	e018      	b.n	8003ede <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eac:	f7fe fd86 	bl	80029bc <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d803      	bhi.n	8003ec4 <HAL_SPI_Receive+0x15e>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d102      	bne.n	8003eca <HAL_SPI_Receive+0x164>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e058      	b.n	8003f90 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1c4      	bne.n	8003e72 <HAL_SPI_Receive+0x10c>
 8003ee8:	e038      	b.n	8003f5c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d113      	bne.n	8003f20 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f02:	b292      	uxth	r2, r2
 8003f04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0a:	1c9a      	adds	r2, r3, #2
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f1e:	e018      	b.n	8003f52 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f20:	f7fe fd4c 	bl	80029bc <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d803      	bhi.n	8003f38 <HAL_SPI_Receive+0x1d2>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f36:	d102      	bne.n	8003f3e <HAL_SPI_Receive+0x1d8>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e01e      	b.n	8003f90 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1c6      	bne.n	8003eea <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	6839      	ldr	r1, [r7, #0]
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fa59 	bl	8004418 <SPI_EndRxTransaction>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
  }
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	@ 0x28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003faa:	f7fe fd07 	bl	80029bc <HAL_GetTick>
 8003fae:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fb6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003fbe:	887b      	ldrh	r3, [r7, #2]
 8003fc0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fc2:	7ffb      	ldrb	r3, [r7, #31]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d00c      	beq.n	8003fe2 <HAL_SPI_TransmitReceive+0x4a>
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fce:	d106      	bne.n	8003fde <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <HAL_SPI_TransmitReceive+0x46>
 8003fd8:	7ffb      	ldrb	r3, [r7, #31]
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d001      	beq.n	8003fe2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e17f      	b.n	80042e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_SPI_TransmitReceive+0x5c>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_SPI_TransmitReceive+0x5c>
 8003fee:	887b      	ldrh	r3, [r7, #2]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e174      	b.n	80042e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_SPI_TransmitReceive+0x6e>
 8004002:	2302      	movs	r3, #2
 8004004:	e16d      	b.n	80042e2 <HAL_SPI_TransmitReceive+0x34a>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b04      	cmp	r3, #4
 8004018:	d003      	beq.n	8004022 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2205      	movs	r2, #5
 800401e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	887a      	ldrh	r2, [r7, #2]
 8004032:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	887a      	ldrh	r2, [r7, #2]
 8004038:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	887a      	ldrh	r2, [r7, #2]
 800404a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004062:	2b40      	cmp	r3, #64	@ 0x40
 8004064:	d007      	beq.n	8004076 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004074:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800407e:	d17e      	bne.n	800417e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_SPI_TransmitReceive+0xf6>
 8004088:	8afb      	ldrh	r3, [r7, #22]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d16c      	bne.n	8004168 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	881a      	ldrh	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409e:	1c9a      	adds	r2, r3, #2
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040b2:	e059      	b.n	8004168 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d11b      	bne.n	80040fa <HAL_SPI_TransmitReceive+0x162>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d016      	beq.n	80040fa <HAL_SPI_TransmitReceive+0x162>
 80040cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d113      	bne.n	80040fa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d6:	881a      	ldrh	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e2:	1c9a      	adds	r2, r3, #2
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b01      	cmp	r3, #1
 8004106:	d119      	bne.n	800413c <HAL_SPI_TransmitReceive+0x1a4>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d014      	beq.n	800413c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411c:	b292      	uxth	r2, r2
 800411e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004124:	1c9a      	adds	r2, r3, #2
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004138:	2301      	movs	r3, #1
 800413a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800413c:	f7fe fc3e 	bl	80029bc <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004148:	429a      	cmp	r2, r3
 800414a:	d80d      	bhi.n	8004168 <HAL_SPI_TransmitReceive+0x1d0>
 800414c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d009      	beq.n	8004168 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e0bc      	b.n	80042e2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1a0      	bne.n	80040b4 <HAL_SPI_TransmitReceive+0x11c>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d19b      	bne.n	80040b4 <HAL_SPI_TransmitReceive+0x11c>
 800417c:	e082      	b.n	8004284 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_SPI_TransmitReceive+0x1f4>
 8004186:	8afb      	ldrh	r3, [r7, #22]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d171      	bne.n	8004270 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	7812      	ldrb	r2, [r2, #0]
 8004198:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b2:	e05d      	b.n	8004270 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d11c      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x264>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d017      	beq.n	80041fc <HAL_SPI_TransmitReceive+0x264>
 80041cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d114      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	330c      	adds	r3, #12
 80041dc:	7812      	ldrb	r2, [r2, #0]
 80041de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b01      	cmp	r3, #1
 8004208:	d119      	bne.n	800423e <HAL_SPI_TransmitReceive+0x2a6>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d014      	beq.n	800423e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800423a:	2301      	movs	r3, #1
 800423c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800423e:	f7fe fbbd 	bl	80029bc <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800424a:	429a      	cmp	r2, r3
 800424c:	d803      	bhi.n	8004256 <HAL_SPI_TransmitReceive+0x2be>
 800424e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004254:	d102      	bne.n	800425c <HAL_SPI_TransmitReceive+0x2c4>
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	2b00      	cmp	r3, #0
 800425a:	d109      	bne.n	8004270 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e038      	b.n	80042e2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d19c      	bne.n	80041b4 <HAL_SPI_TransmitReceive+0x21c>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d197      	bne.n	80041b4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004284:	6a3a      	ldr	r2, [r7, #32]
 8004286:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f92b 	bl	80044e4 <SPI_EndRxTxTransaction>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e01d      	b.n	80042e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10a      	bne.n	80042c4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042ae:	2300      	movs	r3, #0
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
  }
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3728      	adds	r7, #40	@ 0x28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042f8:	b2db      	uxtb	r3, r3
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004318:	f7fe fb50 	bl	80029bc <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	4413      	add	r3, r2
 8004326:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004328:	f7fe fb48 	bl	80029bc <HAL_GetTick>
 800432c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800432e:	4b39      	ldr	r3, [pc, #228]	@ (8004414 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	015b      	lsls	r3, r3, #5
 8004334:	0d1b      	lsrs	r3, r3, #20
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	fb02 f303 	mul.w	r3, r2, r3
 800433c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800433e:	e055      	b.n	80043ec <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d051      	beq.n	80043ec <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004348:	f7fe fb38 	bl	80029bc <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	429a      	cmp	r2, r3
 8004356:	d902      	bls.n	800435e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d13d      	bne.n	80043da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800436c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004376:	d111      	bne.n	800439c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004380:	d004      	beq.n	800438c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800438a:	d107      	bne.n	800439c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800439a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043a4:	d10f      	bne.n	80043c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e018      	b.n	800440c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	e002      	b.n	80043ec <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4013      	ands	r3, r2
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	bf0c      	ite	eq
 80043fc:	2301      	moveq	r3, #1
 80043fe:	2300      	movne	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	429a      	cmp	r2, r3
 8004408:	d19a      	bne.n	8004340 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3720      	adds	r7, #32
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	2000000c 	.word	0x2000000c

08004418 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800442c:	d111      	bne.n	8004452 <SPI_EndRxTransaction+0x3a>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004436:	d004      	beq.n	8004442 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004440:	d107      	bne.n	8004452 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004450:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800445a:	d12a      	bne.n	80044b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004464:	d012      	beq.n	800448c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2200      	movs	r2, #0
 800446e:	2180      	movs	r1, #128	@ 0x80
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f7ff ff49 	bl	8004308 <SPI_WaitFlagStateUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d02d      	beq.n	80044d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004480:	f043 0220 	orr.w	r2, r3, #32
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e026      	b.n	80044da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2200      	movs	r2, #0
 8004494:	2101      	movs	r1, #1
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f7ff ff36 	bl	8004308 <SPI_WaitFlagStateUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d01a      	beq.n	80044d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a6:	f043 0220 	orr.w	r2, r3, #32
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e013      	b.n	80044da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2200      	movs	r2, #0
 80044ba:	2101      	movs	r1, #1
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7ff ff23 	bl	8004308 <SPI_WaitFlagStateUntilTimeout>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d007      	beq.n	80044d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044cc:	f043 0220 	orr.w	r2, r3, #32
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e000      	b.n	80044da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2201      	movs	r2, #1
 80044f8:	2102      	movs	r1, #2
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7ff ff04 	bl	8004308 <SPI_WaitFlagStateUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450a:	f043 0220 	orr.w	r2, r3, #32
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e032      	b.n	800457c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004516:	4b1b      	ldr	r3, [pc, #108]	@ (8004584 <SPI_EndRxTxTransaction+0xa0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1b      	ldr	r2, [pc, #108]	@ (8004588 <SPI_EndRxTxTransaction+0xa4>)
 800451c:	fba2 2303 	umull	r2, r3, r2, r3
 8004520:	0d5b      	lsrs	r3, r3, #21
 8004522:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004534:	d112      	bne.n	800455c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2200      	movs	r2, #0
 800453e:	2180      	movs	r1, #128	@ 0x80
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f7ff fee1 	bl	8004308 <SPI_WaitFlagStateUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d016      	beq.n	800457a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004550:	f043 0220 	orr.w	r2, r3, #32
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e00f      	b.n	800457c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	3b01      	subs	r3, #1
 8004566:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004572:	2b80      	cmp	r3, #128	@ 0x80
 8004574:	d0f2      	beq.n	800455c <SPI_EndRxTxTransaction+0x78>
 8004576:	e000      	b.n	800457a <SPI_EndRxTxTransaction+0x96>
        break;
 8004578:	bf00      	nop
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	2000000c 	.word	0x2000000c
 8004588:	165e9f81 	.word	0x165e9f81

0800458c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e041      	b.n	8004622 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fd fd1a 	bl	8001fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f000 f9b6 	bl	800493c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d001      	beq.n	8004644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e04e      	b.n	80046e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a23      	ldr	r2, [pc, #140]	@ (80046f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d022      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x80>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800466e:	d01d      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x80>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1f      	ldr	r2, [pc, #124]	@ (80046f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d018      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x80>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1e      	ldr	r2, [pc, #120]	@ (80046f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d013      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x80>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a1c      	ldr	r2, [pc, #112]	@ (80046fc <HAL_TIM_Base_Start_IT+0xd0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00e      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x80>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1b      	ldr	r2, [pc, #108]	@ (8004700 <HAL_TIM_Base_Start_IT+0xd4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d009      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x80>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a19      	ldr	r2, [pc, #100]	@ (8004704 <HAL_TIM_Base_Start_IT+0xd8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d004      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x80>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a18      	ldr	r2, [pc, #96]	@ (8004708 <HAL_TIM_Base_Start_IT+0xdc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d111      	bne.n	80046d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b06      	cmp	r3, #6
 80046bc:	d010      	beq.n	80046e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0201 	orr.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ce:	e007      	b.n	80046e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40010000 	.word	0x40010000
 80046f4:	40000400 	.word	0x40000400
 80046f8:	40000800 	.word	0x40000800
 80046fc:	40000c00 	.word	0x40000c00
 8004700:	40010400 	.word	0x40010400
 8004704:	40014000 	.word	0x40014000
 8004708:	40001800 	.word	0x40001800

0800470c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d020      	beq.n	8004770 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01b      	beq.n	8004770 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0202 	mvn.w	r2, #2
 8004740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f8d2 	bl	8004900 <HAL_TIM_IC_CaptureCallback>
 800475c:	e005      	b.n	800476a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f8c4 	bl	80048ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f8d5 	bl	8004914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d020      	beq.n	80047bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01b      	beq.n	80047bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0204 	mvn.w	r2, #4
 800478c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2202      	movs	r2, #2
 8004792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f8ac 	bl	8004900 <HAL_TIM_IC_CaptureCallback>
 80047a8:	e005      	b.n	80047b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f89e 	bl	80048ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f8af 	bl	8004914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d020      	beq.n	8004808 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01b      	beq.n	8004808 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0208 	mvn.w	r2, #8
 80047d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2204      	movs	r2, #4
 80047de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f886 	bl	8004900 <HAL_TIM_IC_CaptureCallback>
 80047f4:	e005      	b.n	8004802 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f878 	bl	80048ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f889 	bl	8004914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f003 0310 	and.w	r3, r3, #16
 800480e:	2b00      	cmp	r3, #0
 8004810:	d020      	beq.n	8004854 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01b      	beq.n	8004854 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0210 	mvn.w	r2, #16
 8004824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2208      	movs	r2, #8
 800482a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f860 	bl	8004900 <HAL_TIM_IC_CaptureCallback>
 8004840:	e005      	b.n	800484e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f852 	bl	80048ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f863 	bl	8004914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00c      	beq.n	8004878 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0201 	mvn.w	r2, #1
 8004870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fd fc64 	bl	8002140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00c      	beq.n	800489c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f97c 	bl	8004b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00c      	beq.n	80048c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f834 	bl	8004928 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00c      	beq.n	80048e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d007      	beq.n	80048e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f06f 0220 	mvn.w	r2, #32
 80048dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f94e 	bl	8004b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a43      	ldr	r2, [pc, #268]	@ (8004a5c <TIM_Base_SetConfig+0x120>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d013      	beq.n	800497c <TIM_Base_SetConfig+0x40>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800495a:	d00f      	beq.n	800497c <TIM_Base_SetConfig+0x40>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a40      	ldr	r2, [pc, #256]	@ (8004a60 <TIM_Base_SetConfig+0x124>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00b      	beq.n	800497c <TIM_Base_SetConfig+0x40>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a3f      	ldr	r2, [pc, #252]	@ (8004a64 <TIM_Base_SetConfig+0x128>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d007      	beq.n	800497c <TIM_Base_SetConfig+0x40>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a3e      	ldr	r2, [pc, #248]	@ (8004a68 <TIM_Base_SetConfig+0x12c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a3d      	ldr	r2, [pc, #244]	@ (8004a6c <TIM_Base_SetConfig+0x130>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d108      	bne.n	800498e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a32      	ldr	r2, [pc, #200]	@ (8004a5c <TIM_Base_SetConfig+0x120>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d02b      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800499c:	d027      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2f      	ldr	r2, [pc, #188]	@ (8004a60 <TIM_Base_SetConfig+0x124>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d023      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004a64 <TIM_Base_SetConfig+0x128>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d01f      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004a68 <TIM_Base_SetConfig+0x12c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d01b      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a2c      	ldr	r2, [pc, #176]	@ (8004a6c <TIM_Base_SetConfig+0x130>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d017      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004a70 <TIM_Base_SetConfig+0x134>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d013      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a74 <TIM_Base_SetConfig+0x138>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00f      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a29      	ldr	r2, [pc, #164]	@ (8004a78 <TIM_Base_SetConfig+0x13c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00b      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a28      	ldr	r2, [pc, #160]	@ (8004a7c <TIM_Base_SetConfig+0x140>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d007      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a27      	ldr	r2, [pc, #156]	@ (8004a80 <TIM_Base_SetConfig+0x144>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d003      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a26      	ldr	r2, [pc, #152]	@ (8004a84 <TIM_Base_SetConfig+0x148>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d108      	bne.n	8004a00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a0e      	ldr	r2, [pc, #56]	@ (8004a5c <TIM_Base_SetConfig+0x120>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d003      	beq.n	8004a2e <TIM_Base_SetConfig+0xf2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a10      	ldr	r2, [pc, #64]	@ (8004a6c <TIM_Base_SetConfig+0x130>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d103      	bne.n	8004a36 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f043 0204 	orr.w	r2, r3, #4
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	601a      	str	r2, [r3, #0]
}
 8004a4e:	bf00      	nop
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40010000 	.word	0x40010000
 8004a60:	40000400 	.word	0x40000400
 8004a64:	40000800 	.word	0x40000800
 8004a68:	40000c00 	.word	0x40000c00
 8004a6c:	40010400 	.word	0x40010400
 8004a70:	40014000 	.word	0x40014000
 8004a74:	40014400 	.word	0x40014400
 8004a78:	40014800 	.word	0x40014800
 8004a7c:	40001800 	.word	0x40001800
 8004a80:	40001c00 	.word	0x40001c00
 8004a84:	40002000 	.word	0x40002000

08004a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e05a      	b.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a21      	ldr	r2, [pc, #132]	@ (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d022      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aec:	d01d      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d018      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1b      	ldr	r2, [pc, #108]	@ (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1a      	ldr	r2, [pc, #104]	@ (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00e      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a18      	ldr	r2, [pc, #96]	@ (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d009      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a17      	ldr	r2, [pc, #92]	@ (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a15      	ldr	r2, [pc, #84]	@ (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d10c      	bne.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40010000 	.word	0x40010000
 8004b68:	40000400 	.word	0x40000400
 8004b6c:	40000800 	.word	0x40000800
 8004b70:	40000c00 	.word	0x40000c00
 8004b74:	40010400 	.word	0x40010400
 8004b78:	40014000 	.word	0x40014000
 8004b7c:	40001800 	.word	0x40001800

08004b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e042      	b.n	8004c40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fd fa34 	bl	800203c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2224      	movs	r2, #36	@ 0x24
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f973 	bl	8004ed8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08a      	sub	sp, #40	@ 0x28
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	4613      	mov	r3, r2
 8004c56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d175      	bne.n	8004d54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_UART_Transmit+0x2c>
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e06e      	b.n	8004d56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2221      	movs	r2, #33	@ 0x21
 8004c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c86:	f7fd fe99 	bl	80029bc <HAL_GetTick>
 8004c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	88fa      	ldrh	r2, [r7, #6]
 8004c90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	88fa      	ldrh	r2, [r7, #6]
 8004c96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca0:	d108      	bne.n	8004cb4 <HAL_UART_Transmit+0x6c>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d104      	bne.n	8004cb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	61bb      	str	r3, [r7, #24]
 8004cb2:	e003      	b.n	8004cbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cbc:	e02e      	b.n	8004d1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2180      	movs	r1, #128	@ 0x80
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 f848 	bl	8004d5e <UART_WaitOnFlagUntilTimeout>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e03a      	b.n	8004d56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10b      	bne.n	8004cfe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	3302      	adds	r3, #2
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	e007      	b.n	8004d0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	781a      	ldrb	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1cb      	bne.n	8004cbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2140      	movs	r1, #64	@ 0x40
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f814 	bl	8004d5e <UART_WaitOnFlagUntilTimeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e006      	b.n	8004d56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	e000      	b.n	8004d56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d54:	2302      	movs	r3, #2
  }
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	603b      	str	r3, [r7, #0]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d6e:	e03b      	b.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d76:	d037      	beq.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d78:	f7fd fe20 	bl	80029bc <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	6a3a      	ldr	r2, [r7, #32]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d302      	bcc.n	8004d8e <UART_WaitOnFlagUntilTimeout+0x30>
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e03a      	b.n	8004e08 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d023      	beq.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b80      	cmp	r3, #128	@ 0x80
 8004da4:	d020      	beq.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b40      	cmp	r3, #64	@ 0x40
 8004daa:	d01d      	beq.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d116      	bne.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f81d 	bl	8004e10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2208      	movs	r2, #8
 8004dda:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e00f      	b.n	8004e08 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4013      	ands	r3, r2
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d0b4      	beq.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b095      	sub	sp, #84	@ 0x54
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	330c      	adds	r3, #12
 8004e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e22:	e853 3f00 	ldrex	r3, [r3]
 8004e26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	330c      	adds	r3, #12
 8004e36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e38:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e40:	e841 2300 	strex	r3, r2, [r1]
 8004e44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e5      	bne.n	8004e18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3314      	adds	r3, #20
 8004e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f023 0301 	bic.w	r3, r3, #1
 8004e62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3314      	adds	r3, #20
 8004e6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e5      	bne.n	8004e4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d119      	bne.n	8004ebc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f023 0310 	bic.w	r3, r3, #16
 8004e9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	330c      	adds	r3, #12
 8004ea6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ea8:	61ba      	str	r2, [r7, #24]
 8004eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eac:	6979      	ldr	r1, [r7, #20]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	e841 2300 	strex	r3, r2, [r1]
 8004eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e5      	bne.n	8004e88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004eca:	bf00      	nop
 8004ecc:	3754      	adds	r7, #84	@ 0x54
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
	...

08004ed8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004edc:	b0c0      	sub	sp, #256	@ 0x100
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef4:	68d9      	ldr	r1, [r3, #12]
 8004ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	ea40 0301 	orr.w	r3, r0, r1
 8004f00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f30:	f021 010c 	bic.w	r1, r1, #12
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f3e:	430b      	orrs	r3, r1
 8004f40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f52:	6999      	ldr	r1, [r3, #24]
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	ea40 0301 	orr.w	r3, r0, r1
 8004f5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b8f      	ldr	r3, [pc, #572]	@ (80051a4 <UART_SetConfig+0x2cc>)
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d005      	beq.n	8004f78 <UART_SetConfig+0xa0>
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	4b8d      	ldr	r3, [pc, #564]	@ (80051a8 <UART_SetConfig+0x2d0>)
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d104      	bne.n	8004f82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f78:	f7fe fd14 	bl	80039a4 <HAL_RCC_GetPCLK2Freq>
 8004f7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f80:	e003      	b.n	8004f8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f82:	f7fe fcfb 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 8004f86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f94:	f040 810c 	bne.w	80051b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004fa2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004fa6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004faa:	4622      	mov	r2, r4
 8004fac:	462b      	mov	r3, r5
 8004fae:	1891      	adds	r1, r2, r2
 8004fb0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004fb2:	415b      	adcs	r3, r3
 8004fb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004fba:	4621      	mov	r1, r4
 8004fbc:	eb12 0801 	adds.w	r8, r2, r1
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	eb43 0901 	adc.w	r9, r3, r1
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fda:	4690      	mov	r8, r2
 8004fdc:	4699      	mov	r9, r3
 8004fde:	4623      	mov	r3, r4
 8004fe0:	eb18 0303 	adds.w	r3, r8, r3
 8004fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004fe8:	462b      	mov	r3, r5
 8004fea:	eb49 0303 	adc.w	r3, r9, r3
 8004fee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ffe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005002:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005006:	460b      	mov	r3, r1
 8005008:	18db      	adds	r3, r3, r3
 800500a:	653b      	str	r3, [r7, #80]	@ 0x50
 800500c:	4613      	mov	r3, r2
 800500e:	eb42 0303 	adc.w	r3, r2, r3
 8005012:	657b      	str	r3, [r7, #84]	@ 0x54
 8005014:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005018:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800501c:	f7fb fe44 	bl	8000ca8 <__aeabi_uldivmod>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4b61      	ldr	r3, [pc, #388]	@ (80051ac <UART_SetConfig+0x2d4>)
 8005026:	fba3 2302 	umull	r2, r3, r3, r2
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	011c      	lsls	r4, r3, #4
 800502e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005032:	2200      	movs	r2, #0
 8005034:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005038:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800503c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005040:	4642      	mov	r2, r8
 8005042:	464b      	mov	r3, r9
 8005044:	1891      	adds	r1, r2, r2
 8005046:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005048:	415b      	adcs	r3, r3
 800504a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800504c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005050:	4641      	mov	r1, r8
 8005052:	eb12 0a01 	adds.w	sl, r2, r1
 8005056:	4649      	mov	r1, r9
 8005058:	eb43 0b01 	adc.w	fp, r3, r1
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005068:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800506c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005070:	4692      	mov	sl, r2
 8005072:	469b      	mov	fp, r3
 8005074:	4643      	mov	r3, r8
 8005076:	eb1a 0303 	adds.w	r3, sl, r3
 800507a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800507e:	464b      	mov	r3, r9
 8005080:	eb4b 0303 	adc.w	r3, fp, r3
 8005084:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005094:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005098:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800509c:	460b      	mov	r3, r1
 800509e:	18db      	adds	r3, r3, r3
 80050a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80050a2:	4613      	mov	r3, r2
 80050a4:	eb42 0303 	adc.w	r3, r2, r3
 80050a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80050aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80050ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80050b2:	f7fb fdf9 	bl	8000ca8 <__aeabi_uldivmod>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4611      	mov	r1, r2
 80050bc:	4b3b      	ldr	r3, [pc, #236]	@ (80051ac <UART_SetConfig+0x2d4>)
 80050be:	fba3 2301 	umull	r2, r3, r3, r1
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	2264      	movs	r2, #100	@ 0x64
 80050c6:	fb02 f303 	mul.w	r3, r2, r3
 80050ca:	1acb      	subs	r3, r1, r3
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80050d2:	4b36      	ldr	r3, [pc, #216]	@ (80051ac <UART_SetConfig+0x2d4>)
 80050d4:	fba3 2302 	umull	r2, r3, r3, r2
 80050d8:	095b      	lsrs	r3, r3, #5
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80050e0:	441c      	add	r4, r3
 80050e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80050f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050f4:	4642      	mov	r2, r8
 80050f6:	464b      	mov	r3, r9
 80050f8:	1891      	adds	r1, r2, r2
 80050fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050fc:	415b      	adcs	r3, r3
 80050fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005100:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005104:	4641      	mov	r1, r8
 8005106:	1851      	adds	r1, r2, r1
 8005108:	6339      	str	r1, [r7, #48]	@ 0x30
 800510a:	4649      	mov	r1, r9
 800510c:	414b      	adcs	r3, r1
 800510e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800511c:	4659      	mov	r1, fp
 800511e:	00cb      	lsls	r3, r1, #3
 8005120:	4651      	mov	r1, sl
 8005122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005126:	4651      	mov	r1, sl
 8005128:	00ca      	lsls	r2, r1, #3
 800512a:	4610      	mov	r0, r2
 800512c:	4619      	mov	r1, r3
 800512e:	4603      	mov	r3, r0
 8005130:	4642      	mov	r2, r8
 8005132:	189b      	adds	r3, r3, r2
 8005134:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005138:	464b      	mov	r3, r9
 800513a:	460a      	mov	r2, r1
 800513c:	eb42 0303 	adc.w	r3, r2, r3
 8005140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005150:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005154:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005158:	460b      	mov	r3, r1
 800515a:	18db      	adds	r3, r3, r3
 800515c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800515e:	4613      	mov	r3, r2
 8005160:	eb42 0303 	adc.w	r3, r2, r3
 8005164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005166:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800516a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800516e:	f7fb fd9b 	bl	8000ca8 <__aeabi_uldivmod>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4b0d      	ldr	r3, [pc, #52]	@ (80051ac <UART_SetConfig+0x2d4>)
 8005178:	fba3 1302 	umull	r1, r3, r3, r2
 800517c:	095b      	lsrs	r3, r3, #5
 800517e:	2164      	movs	r1, #100	@ 0x64
 8005180:	fb01 f303 	mul.w	r3, r1, r3
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	3332      	adds	r3, #50	@ 0x32
 800518a:	4a08      	ldr	r2, [pc, #32]	@ (80051ac <UART_SetConfig+0x2d4>)
 800518c:	fba2 2303 	umull	r2, r3, r2, r3
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	f003 0207 	and.w	r2, r3, #7
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4422      	add	r2, r4
 800519e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051a0:	e106      	b.n	80053b0 <UART_SetConfig+0x4d8>
 80051a2:	bf00      	nop
 80051a4:	40011000 	.word	0x40011000
 80051a8:	40011400 	.word	0x40011400
 80051ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051b4:	2200      	movs	r2, #0
 80051b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80051ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80051be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80051c2:	4642      	mov	r2, r8
 80051c4:	464b      	mov	r3, r9
 80051c6:	1891      	adds	r1, r2, r2
 80051c8:	6239      	str	r1, [r7, #32]
 80051ca:	415b      	adcs	r3, r3
 80051cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051d2:	4641      	mov	r1, r8
 80051d4:	1854      	adds	r4, r2, r1
 80051d6:	4649      	mov	r1, r9
 80051d8:	eb43 0501 	adc.w	r5, r3, r1
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	00eb      	lsls	r3, r5, #3
 80051e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ea:	00e2      	lsls	r2, r4, #3
 80051ec:	4614      	mov	r4, r2
 80051ee:	461d      	mov	r5, r3
 80051f0:	4643      	mov	r3, r8
 80051f2:	18e3      	adds	r3, r4, r3
 80051f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051f8:	464b      	mov	r3, r9
 80051fa:	eb45 0303 	adc.w	r3, r5, r3
 80051fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800520e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800521e:	4629      	mov	r1, r5
 8005220:	008b      	lsls	r3, r1, #2
 8005222:	4621      	mov	r1, r4
 8005224:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005228:	4621      	mov	r1, r4
 800522a:	008a      	lsls	r2, r1, #2
 800522c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005230:	f7fb fd3a 	bl	8000ca8 <__aeabi_uldivmod>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4b60      	ldr	r3, [pc, #384]	@ (80053bc <UART_SetConfig+0x4e4>)
 800523a:	fba3 2302 	umull	r2, r3, r3, r2
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	011c      	lsls	r4, r3, #4
 8005242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005246:	2200      	movs	r2, #0
 8005248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800524c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005250:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005254:	4642      	mov	r2, r8
 8005256:	464b      	mov	r3, r9
 8005258:	1891      	adds	r1, r2, r2
 800525a:	61b9      	str	r1, [r7, #24]
 800525c:	415b      	adcs	r3, r3
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005264:	4641      	mov	r1, r8
 8005266:	1851      	adds	r1, r2, r1
 8005268:	6139      	str	r1, [r7, #16]
 800526a:	4649      	mov	r1, r9
 800526c:	414b      	adcs	r3, r1
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800527c:	4659      	mov	r1, fp
 800527e:	00cb      	lsls	r3, r1, #3
 8005280:	4651      	mov	r1, sl
 8005282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005286:	4651      	mov	r1, sl
 8005288:	00ca      	lsls	r2, r1, #3
 800528a:	4610      	mov	r0, r2
 800528c:	4619      	mov	r1, r3
 800528e:	4603      	mov	r3, r0
 8005290:	4642      	mov	r2, r8
 8005292:	189b      	adds	r3, r3, r2
 8005294:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005298:	464b      	mov	r3, r9
 800529a:	460a      	mov	r2, r1
 800529c:	eb42 0303 	adc.w	r3, r2, r3
 80052a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80052bc:	4649      	mov	r1, r9
 80052be:	008b      	lsls	r3, r1, #2
 80052c0:	4641      	mov	r1, r8
 80052c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052c6:	4641      	mov	r1, r8
 80052c8:	008a      	lsls	r2, r1, #2
 80052ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80052ce:	f7fb fceb 	bl	8000ca8 <__aeabi_uldivmod>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4611      	mov	r1, r2
 80052d8:	4b38      	ldr	r3, [pc, #224]	@ (80053bc <UART_SetConfig+0x4e4>)
 80052da:	fba3 2301 	umull	r2, r3, r3, r1
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	2264      	movs	r2, #100	@ 0x64
 80052e2:	fb02 f303 	mul.w	r3, r2, r3
 80052e6:	1acb      	subs	r3, r1, r3
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	3332      	adds	r3, #50	@ 0x32
 80052ec:	4a33      	ldr	r2, [pc, #204]	@ (80053bc <UART_SetConfig+0x4e4>)
 80052ee:	fba2 2303 	umull	r2, r3, r2, r3
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052f8:	441c      	add	r4, r3
 80052fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052fe:	2200      	movs	r2, #0
 8005300:	673b      	str	r3, [r7, #112]	@ 0x70
 8005302:	677a      	str	r2, [r7, #116]	@ 0x74
 8005304:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005308:	4642      	mov	r2, r8
 800530a:	464b      	mov	r3, r9
 800530c:	1891      	adds	r1, r2, r2
 800530e:	60b9      	str	r1, [r7, #8]
 8005310:	415b      	adcs	r3, r3
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005318:	4641      	mov	r1, r8
 800531a:	1851      	adds	r1, r2, r1
 800531c:	6039      	str	r1, [r7, #0]
 800531e:	4649      	mov	r1, r9
 8005320:	414b      	adcs	r3, r1
 8005322:	607b      	str	r3, [r7, #4]
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005330:	4659      	mov	r1, fp
 8005332:	00cb      	lsls	r3, r1, #3
 8005334:	4651      	mov	r1, sl
 8005336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800533a:	4651      	mov	r1, sl
 800533c:	00ca      	lsls	r2, r1, #3
 800533e:	4610      	mov	r0, r2
 8005340:	4619      	mov	r1, r3
 8005342:	4603      	mov	r3, r0
 8005344:	4642      	mov	r2, r8
 8005346:	189b      	adds	r3, r3, r2
 8005348:	66bb      	str	r3, [r7, #104]	@ 0x68
 800534a:	464b      	mov	r3, r9
 800534c:	460a      	mov	r2, r1
 800534e:	eb42 0303 	adc.w	r3, r2, r3
 8005352:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	663b      	str	r3, [r7, #96]	@ 0x60
 800535e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800536c:	4649      	mov	r1, r9
 800536e:	008b      	lsls	r3, r1, #2
 8005370:	4641      	mov	r1, r8
 8005372:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005376:	4641      	mov	r1, r8
 8005378:	008a      	lsls	r2, r1, #2
 800537a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800537e:	f7fb fc93 	bl	8000ca8 <__aeabi_uldivmod>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	4b0d      	ldr	r3, [pc, #52]	@ (80053bc <UART_SetConfig+0x4e4>)
 8005388:	fba3 1302 	umull	r1, r3, r3, r2
 800538c:	095b      	lsrs	r3, r3, #5
 800538e:	2164      	movs	r1, #100	@ 0x64
 8005390:	fb01 f303 	mul.w	r3, r1, r3
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	3332      	adds	r3, #50	@ 0x32
 800539a:	4a08      	ldr	r2, [pc, #32]	@ (80053bc <UART_SetConfig+0x4e4>)
 800539c:	fba2 2303 	umull	r2, r3, r2, r3
 80053a0:	095b      	lsrs	r3, r3, #5
 80053a2:	f003 020f 	and.w	r2, r3, #15
 80053a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4422      	add	r2, r4
 80053ae:	609a      	str	r2, [r3, #8]
}
 80053b0:	bf00      	nop
 80053b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80053b6:	46bd      	mov	sp, r7
 80053b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053bc:	51eb851f 	.word	0x51eb851f

080053c0 <__cvt>:
 80053c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053c4:	ec57 6b10 	vmov	r6, r7, d0
 80053c8:	2f00      	cmp	r7, #0
 80053ca:	460c      	mov	r4, r1
 80053cc:	4619      	mov	r1, r3
 80053ce:	463b      	mov	r3, r7
 80053d0:	bfbb      	ittet	lt
 80053d2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80053d6:	461f      	movlt	r7, r3
 80053d8:	2300      	movge	r3, #0
 80053da:	232d      	movlt	r3, #45	@ 0x2d
 80053dc:	700b      	strb	r3, [r1, #0]
 80053de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053e0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80053e4:	4691      	mov	r9, r2
 80053e6:	f023 0820 	bic.w	r8, r3, #32
 80053ea:	bfbc      	itt	lt
 80053ec:	4632      	movlt	r2, r6
 80053ee:	4616      	movlt	r6, r2
 80053f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053f4:	d005      	beq.n	8005402 <__cvt+0x42>
 80053f6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80053fa:	d100      	bne.n	80053fe <__cvt+0x3e>
 80053fc:	3401      	adds	r4, #1
 80053fe:	2102      	movs	r1, #2
 8005400:	e000      	b.n	8005404 <__cvt+0x44>
 8005402:	2103      	movs	r1, #3
 8005404:	ab03      	add	r3, sp, #12
 8005406:	9301      	str	r3, [sp, #4]
 8005408:	ab02      	add	r3, sp, #8
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	ec47 6b10 	vmov	d0, r6, r7
 8005410:	4653      	mov	r3, sl
 8005412:	4622      	mov	r2, r4
 8005414:	f001 f8ac 	bl	8006570 <_dtoa_r>
 8005418:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800541c:	4605      	mov	r5, r0
 800541e:	d119      	bne.n	8005454 <__cvt+0x94>
 8005420:	f019 0f01 	tst.w	r9, #1
 8005424:	d00e      	beq.n	8005444 <__cvt+0x84>
 8005426:	eb00 0904 	add.w	r9, r0, r4
 800542a:	2200      	movs	r2, #0
 800542c:	2300      	movs	r3, #0
 800542e:	4630      	mov	r0, r6
 8005430:	4639      	mov	r1, r7
 8005432:	f7fb fb59 	bl	8000ae8 <__aeabi_dcmpeq>
 8005436:	b108      	cbz	r0, 800543c <__cvt+0x7c>
 8005438:	f8cd 900c 	str.w	r9, [sp, #12]
 800543c:	2230      	movs	r2, #48	@ 0x30
 800543e:	9b03      	ldr	r3, [sp, #12]
 8005440:	454b      	cmp	r3, r9
 8005442:	d31e      	bcc.n	8005482 <__cvt+0xc2>
 8005444:	9b03      	ldr	r3, [sp, #12]
 8005446:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005448:	1b5b      	subs	r3, r3, r5
 800544a:	4628      	mov	r0, r5
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	b004      	add	sp, #16
 8005450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005454:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005458:	eb00 0904 	add.w	r9, r0, r4
 800545c:	d1e5      	bne.n	800542a <__cvt+0x6a>
 800545e:	7803      	ldrb	r3, [r0, #0]
 8005460:	2b30      	cmp	r3, #48	@ 0x30
 8005462:	d10a      	bne.n	800547a <__cvt+0xba>
 8005464:	2200      	movs	r2, #0
 8005466:	2300      	movs	r3, #0
 8005468:	4630      	mov	r0, r6
 800546a:	4639      	mov	r1, r7
 800546c:	f7fb fb3c 	bl	8000ae8 <__aeabi_dcmpeq>
 8005470:	b918      	cbnz	r0, 800547a <__cvt+0xba>
 8005472:	f1c4 0401 	rsb	r4, r4, #1
 8005476:	f8ca 4000 	str.w	r4, [sl]
 800547a:	f8da 3000 	ldr.w	r3, [sl]
 800547e:	4499      	add	r9, r3
 8005480:	e7d3      	b.n	800542a <__cvt+0x6a>
 8005482:	1c59      	adds	r1, r3, #1
 8005484:	9103      	str	r1, [sp, #12]
 8005486:	701a      	strb	r2, [r3, #0]
 8005488:	e7d9      	b.n	800543e <__cvt+0x7e>

0800548a <__exponent>:
 800548a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800548c:	2900      	cmp	r1, #0
 800548e:	bfba      	itte	lt
 8005490:	4249      	neglt	r1, r1
 8005492:	232d      	movlt	r3, #45	@ 0x2d
 8005494:	232b      	movge	r3, #43	@ 0x2b
 8005496:	2909      	cmp	r1, #9
 8005498:	7002      	strb	r2, [r0, #0]
 800549a:	7043      	strb	r3, [r0, #1]
 800549c:	dd29      	ble.n	80054f2 <__exponent+0x68>
 800549e:	f10d 0307 	add.w	r3, sp, #7
 80054a2:	461d      	mov	r5, r3
 80054a4:	270a      	movs	r7, #10
 80054a6:	461a      	mov	r2, r3
 80054a8:	fbb1 f6f7 	udiv	r6, r1, r7
 80054ac:	fb07 1416 	mls	r4, r7, r6, r1
 80054b0:	3430      	adds	r4, #48	@ 0x30
 80054b2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80054b6:	460c      	mov	r4, r1
 80054b8:	2c63      	cmp	r4, #99	@ 0x63
 80054ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80054be:	4631      	mov	r1, r6
 80054c0:	dcf1      	bgt.n	80054a6 <__exponent+0x1c>
 80054c2:	3130      	adds	r1, #48	@ 0x30
 80054c4:	1e94      	subs	r4, r2, #2
 80054c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80054ca:	1c41      	adds	r1, r0, #1
 80054cc:	4623      	mov	r3, r4
 80054ce:	42ab      	cmp	r3, r5
 80054d0:	d30a      	bcc.n	80054e8 <__exponent+0x5e>
 80054d2:	f10d 0309 	add.w	r3, sp, #9
 80054d6:	1a9b      	subs	r3, r3, r2
 80054d8:	42ac      	cmp	r4, r5
 80054da:	bf88      	it	hi
 80054dc:	2300      	movhi	r3, #0
 80054de:	3302      	adds	r3, #2
 80054e0:	4403      	add	r3, r0
 80054e2:	1a18      	subs	r0, r3, r0
 80054e4:	b003      	add	sp, #12
 80054e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054e8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80054ec:	f801 6f01 	strb.w	r6, [r1, #1]!
 80054f0:	e7ed      	b.n	80054ce <__exponent+0x44>
 80054f2:	2330      	movs	r3, #48	@ 0x30
 80054f4:	3130      	adds	r1, #48	@ 0x30
 80054f6:	7083      	strb	r3, [r0, #2]
 80054f8:	70c1      	strb	r1, [r0, #3]
 80054fa:	1d03      	adds	r3, r0, #4
 80054fc:	e7f1      	b.n	80054e2 <__exponent+0x58>
	...

08005500 <_printf_float>:
 8005500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005504:	b08d      	sub	sp, #52	@ 0x34
 8005506:	460c      	mov	r4, r1
 8005508:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800550c:	4616      	mov	r6, r2
 800550e:	461f      	mov	r7, r3
 8005510:	4605      	mov	r5, r0
 8005512:	f000 ff25 	bl	8006360 <_localeconv_r>
 8005516:	6803      	ldr	r3, [r0, #0]
 8005518:	9304      	str	r3, [sp, #16]
 800551a:	4618      	mov	r0, r3
 800551c:	f7fa feb8 	bl	8000290 <strlen>
 8005520:	2300      	movs	r3, #0
 8005522:	930a      	str	r3, [sp, #40]	@ 0x28
 8005524:	f8d8 3000 	ldr.w	r3, [r8]
 8005528:	9005      	str	r0, [sp, #20]
 800552a:	3307      	adds	r3, #7
 800552c:	f023 0307 	bic.w	r3, r3, #7
 8005530:	f103 0208 	add.w	r2, r3, #8
 8005534:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005538:	f8d4 b000 	ldr.w	fp, [r4]
 800553c:	f8c8 2000 	str.w	r2, [r8]
 8005540:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005544:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005548:	9307      	str	r3, [sp, #28]
 800554a:	f8cd 8018 	str.w	r8, [sp, #24]
 800554e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005552:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005556:	4b9c      	ldr	r3, [pc, #624]	@ (80057c8 <_printf_float+0x2c8>)
 8005558:	f04f 32ff 	mov.w	r2, #4294967295
 800555c:	f7fb faf6 	bl	8000b4c <__aeabi_dcmpun>
 8005560:	bb70      	cbnz	r0, 80055c0 <_printf_float+0xc0>
 8005562:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005566:	4b98      	ldr	r3, [pc, #608]	@ (80057c8 <_printf_float+0x2c8>)
 8005568:	f04f 32ff 	mov.w	r2, #4294967295
 800556c:	f7fb fad0 	bl	8000b10 <__aeabi_dcmple>
 8005570:	bb30      	cbnz	r0, 80055c0 <_printf_float+0xc0>
 8005572:	2200      	movs	r2, #0
 8005574:	2300      	movs	r3, #0
 8005576:	4640      	mov	r0, r8
 8005578:	4649      	mov	r1, r9
 800557a:	f7fb fabf 	bl	8000afc <__aeabi_dcmplt>
 800557e:	b110      	cbz	r0, 8005586 <_printf_float+0x86>
 8005580:	232d      	movs	r3, #45	@ 0x2d
 8005582:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005586:	4a91      	ldr	r2, [pc, #580]	@ (80057cc <_printf_float+0x2cc>)
 8005588:	4b91      	ldr	r3, [pc, #580]	@ (80057d0 <_printf_float+0x2d0>)
 800558a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800558e:	bf8c      	ite	hi
 8005590:	4690      	movhi	r8, r2
 8005592:	4698      	movls	r8, r3
 8005594:	2303      	movs	r3, #3
 8005596:	6123      	str	r3, [r4, #16]
 8005598:	f02b 0304 	bic.w	r3, fp, #4
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	f04f 0900 	mov.w	r9, #0
 80055a2:	9700      	str	r7, [sp, #0]
 80055a4:	4633      	mov	r3, r6
 80055a6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80055a8:	4621      	mov	r1, r4
 80055aa:	4628      	mov	r0, r5
 80055ac:	f000 f9d2 	bl	8005954 <_printf_common>
 80055b0:	3001      	adds	r0, #1
 80055b2:	f040 808d 	bne.w	80056d0 <_printf_float+0x1d0>
 80055b6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ba:	b00d      	add	sp, #52	@ 0x34
 80055bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c0:	4642      	mov	r2, r8
 80055c2:	464b      	mov	r3, r9
 80055c4:	4640      	mov	r0, r8
 80055c6:	4649      	mov	r1, r9
 80055c8:	f7fb fac0 	bl	8000b4c <__aeabi_dcmpun>
 80055cc:	b140      	cbz	r0, 80055e0 <_printf_float+0xe0>
 80055ce:	464b      	mov	r3, r9
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	bfbc      	itt	lt
 80055d4:	232d      	movlt	r3, #45	@ 0x2d
 80055d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80055da:	4a7e      	ldr	r2, [pc, #504]	@ (80057d4 <_printf_float+0x2d4>)
 80055dc:	4b7e      	ldr	r3, [pc, #504]	@ (80057d8 <_printf_float+0x2d8>)
 80055de:	e7d4      	b.n	800558a <_printf_float+0x8a>
 80055e0:	6863      	ldr	r3, [r4, #4]
 80055e2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80055e6:	9206      	str	r2, [sp, #24]
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	d13b      	bne.n	8005664 <_printf_float+0x164>
 80055ec:	2306      	movs	r3, #6
 80055ee:	6063      	str	r3, [r4, #4]
 80055f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80055f4:	2300      	movs	r3, #0
 80055f6:	6022      	str	r2, [r4, #0]
 80055f8:	9303      	str	r3, [sp, #12]
 80055fa:	ab0a      	add	r3, sp, #40	@ 0x28
 80055fc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005600:	ab09      	add	r3, sp, #36	@ 0x24
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	6861      	ldr	r1, [r4, #4]
 8005606:	ec49 8b10 	vmov	d0, r8, r9
 800560a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800560e:	4628      	mov	r0, r5
 8005610:	f7ff fed6 	bl	80053c0 <__cvt>
 8005614:	9b06      	ldr	r3, [sp, #24]
 8005616:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005618:	2b47      	cmp	r3, #71	@ 0x47
 800561a:	4680      	mov	r8, r0
 800561c:	d129      	bne.n	8005672 <_printf_float+0x172>
 800561e:	1cc8      	adds	r0, r1, #3
 8005620:	db02      	blt.n	8005628 <_printf_float+0x128>
 8005622:	6863      	ldr	r3, [r4, #4]
 8005624:	4299      	cmp	r1, r3
 8005626:	dd41      	ble.n	80056ac <_printf_float+0x1ac>
 8005628:	f1aa 0a02 	sub.w	sl, sl, #2
 800562c:	fa5f fa8a 	uxtb.w	sl, sl
 8005630:	3901      	subs	r1, #1
 8005632:	4652      	mov	r2, sl
 8005634:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005638:	9109      	str	r1, [sp, #36]	@ 0x24
 800563a:	f7ff ff26 	bl	800548a <__exponent>
 800563e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005640:	1813      	adds	r3, r2, r0
 8005642:	2a01      	cmp	r2, #1
 8005644:	4681      	mov	r9, r0
 8005646:	6123      	str	r3, [r4, #16]
 8005648:	dc02      	bgt.n	8005650 <_printf_float+0x150>
 800564a:	6822      	ldr	r2, [r4, #0]
 800564c:	07d2      	lsls	r2, r2, #31
 800564e:	d501      	bpl.n	8005654 <_printf_float+0x154>
 8005650:	3301      	adds	r3, #1
 8005652:	6123      	str	r3, [r4, #16]
 8005654:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0a2      	beq.n	80055a2 <_printf_float+0xa2>
 800565c:	232d      	movs	r3, #45	@ 0x2d
 800565e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005662:	e79e      	b.n	80055a2 <_printf_float+0xa2>
 8005664:	9a06      	ldr	r2, [sp, #24]
 8005666:	2a47      	cmp	r2, #71	@ 0x47
 8005668:	d1c2      	bne.n	80055f0 <_printf_float+0xf0>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1c0      	bne.n	80055f0 <_printf_float+0xf0>
 800566e:	2301      	movs	r3, #1
 8005670:	e7bd      	b.n	80055ee <_printf_float+0xee>
 8005672:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005676:	d9db      	bls.n	8005630 <_printf_float+0x130>
 8005678:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800567c:	d118      	bne.n	80056b0 <_printf_float+0x1b0>
 800567e:	2900      	cmp	r1, #0
 8005680:	6863      	ldr	r3, [r4, #4]
 8005682:	dd0b      	ble.n	800569c <_printf_float+0x19c>
 8005684:	6121      	str	r1, [r4, #16]
 8005686:	b913      	cbnz	r3, 800568e <_printf_float+0x18e>
 8005688:	6822      	ldr	r2, [r4, #0]
 800568a:	07d0      	lsls	r0, r2, #31
 800568c:	d502      	bpl.n	8005694 <_printf_float+0x194>
 800568e:	3301      	adds	r3, #1
 8005690:	440b      	add	r3, r1
 8005692:	6123      	str	r3, [r4, #16]
 8005694:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005696:	f04f 0900 	mov.w	r9, #0
 800569a:	e7db      	b.n	8005654 <_printf_float+0x154>
 800569c:	b913      	cbnz	r3, 80056a4 <_printf_float+0x1a4>
 800569e:	6822      	ldr	r2, [r4, #0]
 80056a0:	07d2      	lsls	r2, r2, #31
 80056a2:	d501      	bpl.n	80056a8 <_printf_float+0x1a8>
 80056a4:	3302      	adds	r3, #2
 80056a6:	e7f4      	b.n	8005692 <_printf_float+0x192>
 80056a8:	2301      	movs	r3, #1
 80056aa:	e7f2      	b.n	8005692 <_printf_float+0x192>
 80056ac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80056b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056b2:	4299      	cmp	r1, r3
 80056b4:	db05      	blt.n	80056c2 <_printf_float+0x1c2>
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	6121      	str	r1, [r4, #16]
 80056ba:	07d8      	lsls	r0, r3, #31
 80056bc:	d5ea      	bpl.n	8005694 <_printf_float+0x194>
 80056be:	1c4b      	adds	r3, r1, #1
 80056c0:	e7e7      	b.n	8005692 <_printf_float+0x192>
 80056c2:	2900      	cmp	r1, #0
 80056c4:	bfd4      	ite	le
 80056c6:	f1c1 0202 	rsble	r2, r1, #2
 80056ca:	2201      	movgt	r2, #1
 80056cc:	4413      	add	r3, r2
 80056ce:	e7e0      	b.n	8005692 <_printf_float+0x192>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	055a      	lsls	r2, r3, #21
 80056d4:	d407      	bmi.n	80056e6 <_printf_float+0x1e6>
 80056d6:	6923      	ldr	r3, [r4, #16]
 80056d8:	4642      	mov	r2, r8
 80056da:	4631      	mov	r1, r6
 80056dc:	4628      	mov	r0, r5
 80056de:	47b8      	blx	r7
 80056e0:	3001      	adds	r0, #1
 80056e2:	d12b      	bne.n	800573c <_printf_float+0x23c>
 80056e4:	e767      	b.n	80055b6 <_printf_float+0xb6>
 80056e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80056ea:	f240 80dd 	bls.w	80058a8 <_printf_float+0x3a8>
 80056ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056f2:	2200      	movs	r2, #0
 80056f4:	2300      	movs	r3, #0
 80056f6:	f7fb f9f7 	bl	8000ae8 <__aeabi_dcmpeq>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d033      	beq.n	8005766 <_printf_float+0x266>
 80056fe:	4a37      	ldr	r2, [pc, #220]	@ (80057dc <_printf_float+0x2dc>)
 8005700:	2301      	movs	r3, #1
 8005702:	4631      	mov	r1, r6
 8005704:	4628      	mov	r0, r5
 8005706:	47b8      	blx	r7
 8005708:	3001      	adds	r0, #1
 800570a:	f43f af54 	beq.w	80055b6 <_printf_float+0xb6>
 800570e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005712:	4543      	cmp	r3, r8
 8005714:	db02      	blt.n	800571c <_printf_float+0x21c>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	07d8      	lsls	r0, r3, #31
 800571a:	d50f      	bpl.n	800573c <_printf_float+0x23c>
 800571c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005720:	4631      	mov	r1, r6
 8005722:	4628      	mov	r0, r5
 8005724:	47b8      	blx	r7
 8005726:	3001      	adds	r0, #1
 8005728:	f43f af45 	beq.w	80055b6 <_printf_float+0xb6>
 800572c:	f04f 0900 	mov.w	r9, #0
 8005730:	f108 38ff 	add.w	r8, r8, #4294967295
 8005734:	f104 0a1a 	add.w	sl, r4, #26
 8005738:	45c8      	cmp	r8, r9
 800573a:	dc09      	bgt.n	8005750 <_printf_float+0x250>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	079b      	lsls	r3, r3, #30
 8005740:	f100 8103 	bmi.w	800594a <_printf_float+0x44a>
 8005744:	68e0      	ldr	r0, [r4, #12]
 8005746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005748:	4298      	cmp	r0, r3
 800574a:	bfb8      	it	lt
 800574c:	4618      	movlt	r0, r3
 800574e:	e734      	b.n	80055ba <_printf_float+0xba>
 8005750:	2301      	movs	r3, #1
 8005752:	4652      	mov	r2, sl
 8005754:	4631      	mov	r1, r6
 8005756:	4628      	mov	r0, r5
 8005758:	47b8      	blx	r7
 800575a:	3001      	adds	r0, #1
 800575c:	f43f af2b 	beq.w	80055b6 <_printf_float+0xb6>
 8005760:	f109 0901 	add.w	r9, r9, #1
 8005764:	e7e8      	b.n	8005738 <_printf_float+0x238>
 8005766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005768:	2b00      	cmp	r3, #0
 800576a:	dc39      	bgt.n	80057e0 <_printf_float+0x2e0>
 800576c:	4a1b      	ldr	r2, [pc, #108]	@ (80057dc <_printf_float+0x2dc>)
 800576e:	2301      	movs	r3, #1
 8005770:	4631      	mov	r1, r6
 8005772:	4628      	mov	r0, r5
 8005774:	47b8      	blx	r7
 8005776:	3001      	adds	r0, #1
 8005778:	f43f af1d 	beq.w	80055b6 <_printf_float+0xb6>
 800577c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005780:	ea59 0303 	orrs.w	r3, r9, r3
 8005784:	d102      	bne.n	800578c <_printf_float+0x28c>
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	07d9      	lsls	r1, r3, #31
 800578a:	d5d7      	bpl.n	800573c <_printf_float+0x23c>
 800578c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005790:	4631      	mov	r1, r6
 8005792:	4628      	mov	r0, r5
 8005794:	47b8      	blx	r7
 8005796:	3001      	adds	r0, #1
 8005798:	f43f af0d 	beq.w	80055b6 <_printf_float+0xb6>
 800579c:	f04f 0a00 	mov.w	sl, #0
 80057a0:	f104 0b1a 	add.w	fp, r4, #26
 80057a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057a6:	425b      	negs	r3, r3
 80057a8:	4553      	cmp	r3, sl
 80057aa:	dc01      	bgt.n	80057b0 <_printf_float+0x2b0>
 80057ac:	464b      	mov	r3, r9
 80057ae:	e793      	b.n	80056d8 <_printf_float+0x1d8>
 80057b0:	2301      	movs	r3, #1
 80057b2:	465a      	mov	r2, fp
 80057b4:	4631      	mov	r1, r6
 80057b6:	4628      	mov	r0, r5
 80057b8:	47b8      	blx	r7
 80057ba:	3001      	adds	r0, #1
 80057bc:	f43f aefb 	beq.w	80055b6 <_printf_float+0xb6>
 80057c0:	f10a 0a01 	add.w	sl, sl, #1
 80057c4:	e7ee      	b.n	80057a4 <_printf_float+0x2a4>
 80057c6:	bf00      	nop
 80057c8:	7fefffff 	.word	0x7fefffff
 80057cc:	08009c78 	.word	0x08009c78
 80057d0:	08009c74 	.word	0x08009c74
 80057d4:	08009c80 	.word	0x08009c80
 80057d8:	08009c7c 	.word	0x08009c7c
 80057dc:	08009c84 	.word	0x08009c84
 80057e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057e2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80057e6:	4553      	cmp	r3, sl
 80057e8:	bfa8      	it	ge
 80057ea:	4653      	movge	r3, sl
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	4699      	mov	r9, r3
 80057f0:	dc36      	bgt.n	8005860 <_printf_float+0x360>
 80057f2:	f04f 0b00 	mov.w	fp, #0
 80057f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057fa:	f104 021a 	add.w	r2, r4, #26
 80057fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005800:	9306      	str	r3, [sp, #24]
 8005802:	eba3 0309 	sub.w	r3, r3, r9
 8005806:	455b      	cmp	r3, fp
 8005808:	dc31      	bgt.n	800586e <_printf_float+0x36e>
 800580a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800580c:	459a      	cmp	sl, r3
 800580e:	dc3a      	bgt.n	8005886 <_printf_float+0x386>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	07da      	lsls	r2, r3, #31
 8005814:	d437      	bmi.n	8005886 <_printf_float+0x386>
 8005816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005818:	ebaa 0903 	sub.w	r9, sl, r3
 800581c:	9b06      	ldr	r3, [sp, #24]
 800581e:	ebaa 0303 	sub.w	r3, sl, r3
 8005822:	4599      	cmp	r9, r3
 8005824:	bfa8      	it	ge
 8005826:	4699      	movge	r9, r3
 8005828:	f1b9 0f00 	cmp.w	r9, #0
 800582c:	dc33      	bgt.n	8005896 <_printf_float+0x396>
 800582e:	f04f 0800 	mov.w	r8, #0
 8005832:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005836:	f104 0b1a 	add.w	fp, r4, #26
 800583a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800583c:	ebaa 0303 	sub.w	r3, sl, r3
 8005840:	eba3 0309 	sub.w	r3, r3, r9
 8005844:	4543      	cmp	r3, r8
 8005846:	f77f af79 	ble.w	800573c <_printf_float+0x23c>
 800584a:	2301      	movs	r3, #1
 800584c:	465a      	mov	r2, fp
 800584e:	4631      	mov	r1, r6
 8005850:	4628      	mov	r0, r5
 8005852:	47b8      	blx	r7
 8005854:	3001      	adds	r0, #1
 8005856:	f43f aeae 	beq.w	80055b6 <_printf_float+0xb6>
 800585a:	f108 0801 	add.w	r8, r8, #1
 800585e:	e7ec      	b.n	800583a <_printf_float+0x33a>
 8005860:	4642      	mov	r2, r8
 8005862:	4631      	mov	r1, r6
 8005864:	4628      	mov	r0, r5
 8005866:	47b8      	blx	r7
 8005868:	3001      	adds	r0, #1
 800586a:	d1c2      	bne.n	80057f2 <_printf_float+0x2f2>
 800586c:	e6a3      	b.n	80055b6 <_printf_float+0xb6>
 800586e:	2301      	movs	r3, #1
 8005870:	4631      	mov	r1, r6
 8005872:	4628      	mov	r0, r5
 8005874:	9206      	str	r2, [sp, #24]
 8005876:	47b8      	blx	r7
 8005878:	3001      	adds	r0, #1
 800587a:	f43f ae9c 	beq.w	80055b6 <_printf_float+0xb6>
 800587e:	9a06      	ldr	r2, [sp, #24]
 8005880:	f10b 0b01 	add.w	fp, fp, #1
 8005884:	e7bb      	b.n	80057fe <_printf_float+0x2fe>
 8005886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800588a:	4631      	mov	r1, r6
 800588c:	4628      	mov	r0, r5
 800588e:	47b8      	blx	r7
 8005890:	3001      	adds	r0, #1
 8005892:	d1c0      	bne.n	8005816 <_printf_float+0x316>
 8005894:	e68f      	b.n	80055b6 <_printf_float+0xb6>
 8005896:	9a06      	ldr	r2, [sp, #24]
 8005898:	464b      	mov	r3, r9
 800589a:	4442      	add	r2, r8
 800589c:	4631      	mov	r1, r6
 800589e:	4628      	mov	r0, r5
 80058a0:	47b8      	blx	r7
 80058a2:	3001      	adds	r0, #1
 80058a4:	d1c3      	bne.n	800582e <_printf_float+0x32e>
 80058a6:	e686      	b.n	80055b6 <_printf_float+0xb6>
 80058a8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80058ac:	f1ba 0f01 	cmp.w	sl, #1
 80058b0:	dc01      	bgt.n	80058b6 <_printf_float+0x3b6>
 80058b2:	07db      	lsls	r3, r3, #31
 80058b4:	d536      	bpl.n	8005924 <_printf_float+0x424>
 80058b6:	2301      	movs	r3, #1
 80058b8:	4642      	mov	r2, r8
 80058ba:	4631      	mov	r1, r6
 80058bc:	4628      	mov	r0, r5
 80058be:	47b8      	blx	r7
 80058c0:	3001      	adds	r0, #1
 80058c2:	f43f ae78 	beq.w	80055b6 <_printf_float+0xb6>
 80058c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058ca:	4631      	mov	r1, r6
 80058cc:	4628      	mov	r0, r5
 80058ce:	47b8      	blx	r7
 80058d0:	3001      	adds	r0, #1
 80058d2:	f43f ae70 	beq.w	80055b6 <_printf_float+0xb6>
 80058d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80058da:	2200      	movs	r2, #0
 80058dc:	2300      	movs	r3, #0
 80058de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058e2:	f7fb f901 	bl	8000ae8 <__aeabi_dcmpeq>
 80058e6:	b9c0      	cbnz	r0, 800591a <_printf_float+0x41a>
 80058e8:	4653      	mov	r3, sl
 80058ea:	f108 0201 	add.w	r2, r8, #1
 80058ee:	4631      	mov	r1, r6
 80058f0:	4628      	mov	r0, r5
 80058f2:	47b8      	blx	r7
 80058f4:	3001      	adds	r0, #1
 80058f6:	d10c      	bne.n	8005912 <_printf_float+0x412>
 80058f8:	e65d      	b.n	80055b6 <_printf_float+0xb6>
 80058fa:	2301      	movs	r3, #1
 80058fc:	465a      	mov	r2, fp
 80058fe:	4631      	mov	r1, r6
 8005900:	4628      	mov	r0, r5
 8005902:	47b8      	blx	r7
 8005904:	3001      	adds	r0, #1
 8005906:	f43f ae56 	beq.w	80055b6 <_printf_float+0xb6>
 800590a:	f108 0801 	add.w	r8, r8, #1
 800590e:	45d0      	cmp	r8, sl
 8005910:	dbf3      	blt.n	80058fa <_printf_float+0x3fa>
 8005912:	464b      	mov	r3, r9
 8005914:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005918:	e6df      	b.n	80056da <_printf_float+0x1da>
 800591a:	f04f 0800 	mov.w	r8, #0
 800591e:	f104 0b1a 	add.w	fp, r4, #26
 8005922:	e7f4      	b.n	800590e <_printf_float+0x40e>
 8005924:	2301      	movs	r3, #1
 8005926:	4642      	mov	r2, r8
 8005928:	e7e1      	b.n	80058ee <_printf_float+0x3ee>
 800592a:	2301      	movs	r3, #1
 800592c:	464a      	mov	r2, r9
 800592e:	4631      	mov	r1, r6
 8005930:	4628      	mov	r0, r5
 8005932:	47b8      	blx	r7
 8005934:	3001      	adds	r0, #1
 8005936:	f43f ae3e 	beq.w	80055b6 <_printf_float+0xb6>
 800593a:	f108 0801 	add.w	r8, r8, #1
 800593e:	68e3      	ldr	r3, [r4, #12]
 8005940:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005942:	1a5b      	subs	r3, r3, r1
 8005944:	4543      	cmp	r3, r8
 8005946:	dcf0      	bgt.n	800592a <_printf_float+0x42a>
 8005948:	e6fc      	b.n	8005744 <_printf_float+0x244>
 800594a:	f04f 0800 	mov.w	r8, #0
 800594e:	f104 0919 	add.w	r9, r4, #25
 8005952:	e7f4      	b.n	800593e <_printf_float+0x43e>

08005954 <_printf_common>:
 8005954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005958:	4616      	mov	r6, r2
 800595a:	4698      	mov	r8, r3
 800595c:	688a      	ldr	r2, [r1, #8]
 800595e:	690b      	ldr	r3, [r1, #16]
 8005960:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005964:	4293      	cmp	r3, r2
 8005966:	bfb8      	it	lt
 8005968:	4613      	movlt	r3, r2
 800596a:	6033      	str	r3, [r6, #0]
 800596c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005970:	4607      	mov	r7, r0
 8005972:	460c      	mov	r4, r1
 8005974:	b10a      	cbz	r2, 800597a <_printf_common+0x26>
 8005976:	3301      	adds	r3, #1
 8005978:	6033      	str	r3, [r6, #0]
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	0699      	lsls	r1, r3, #26
 800597e:	bf42      	ittt	mi
 8005980:	6833      	ldrmi	r3, [r6, #0]
 8005982:	3302      	addmi	r3, #2
 8005984:	6033      	strmi	r3, [r6, #0]
 8005986:	6825      	ldr	r5, [r4, #0]
 8005988:	f015 0506 	ands.w	r5, r5, #6
 800598c:	d106      	bne.n	800599c <_printf_common+0x48>
 800598e:	f104 0a19 	add.w	sl, r4, #25
 8005992:	68e3      	ldr	r3, [r4, #12]
 8005994:	6832      	ldr	r2, [r6, #0]
 8005996:	1a9b      	subs	r3, r3, r2
 8005998:	42ab      	cmp	r3, r5
 800599a:	dc26      	bgt.n	80059ea <_printf_common+0x96>
 800599c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059a0:	6822      	ldr	r2, [r4, #0]
 80059a2:	3b00      	subs	r3, #0
 80059a4:	bf18      	it	ne
 80059a6:	2301      	movne	r3, #1
 80059a8:	0692      	lsls	r2, r2, #26
 80059aa:	d42b      	bmi.n	8005a04 <_printf_common+0xb0>
 80059ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059b0:	4641      	mov	r1, r8
 80059b2:	4638      	mov	r0, r7
 80059b4:	47c8      	blx	r9
 80059b6:	3001      	adds	r0, #1
 80059b8:	d01e      	beq.n	80059f8 <_printf_common+0xa4>
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	6922      	ldr	r2, [r4, #16]
 80059be:	f003 0306 	and.w	r3, r3, #6
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	bf02      	ittt	eq
 80059c6:	68e5      	ldreq	r5, [r4, #12]
 80059c8:	6833      	ldreq	r3, [r6, #0]
 80059ca:	1aed      	subeq	r5, r5, r3
 80059cc:	68a3      	ldr	r3, [r4, #8]
 80059ce:	bf0c      	ite	eq
 80059d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059d4:	2500      	movne	r5, #0
 80059d6:	4293      	cmp	r3, r2
 80059d8:	bfc4      	itt	gt
 80059da:	1a9b      	subgt	r3, r3, r2
 80059dc:	18ed      	addgt	r5, r5, r3
 80059de:	2600      	movs	r6, #0
 80059e0:	341a      	adds	r4, #26
 80059e2:	42b5      	cmp	r5, r6
 80059e4:	d11a      	bne.n	8005a1c <_printf_common+0xc8>
 80059e6:	2000      	movs	r0, #0
 80059e8:	e008      	b.n	80059fc <_printf_common+0xa8>
 80059ea:	2301      	movs	r3, #1
 80059ec:	4652      	mov	r2, sl
 80059ee:	4641      	mov	r1, r8
 80059f0:	4638      	mov	r0, r7
 80059f2:	47c8      	blx	r9
 80059f4:	3001      	adds	r0, #1
 80059f6:	d103      	bne.n	8005a00 <_printf_common+0xac>
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295
 80059fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a00:	3501      	adds	r5, #1
 8005a02:	e7c6      	b.n	8005992 <_printf_common+0x3e>
 8005a04:	18e1      	adds	r1, r4, r3
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	2030      	movs	r0, #48	@ 0x30
 8005a0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a0e:	4422      	add	r2, r4
 8005a10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a18:	3302      	adds	r3, #2
 8005a1a:	e7c7      	b.n	80059ac <_printf_common+0x58>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	4622      	mov	r2, r4
 8005a20:	4641      	mov	r1, r8
 8005a22:	4638      	mov	r0, r7
 8005a24:	47c8      	blx	r9
 8005a26:	3001      	adds	r0, #1
 8005a28:	d0e6      	beq.n	80059f8 <_printf_common+0xa4>
 8005a2a:	3601      	adds	r6, #1
 8005a2c:	e7d9      	b.n	80059e2 <_printf_common+0x8e>
	...

08005a30 <_printf_i>:
 8005a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a34:	7e0f      	ldrb	r7, [r1, #24]
 8005a36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a38:	2f78      	cmp	r7, #120	@ 0x78
 8005a3a:	4691      	mov	r9, r2
 8005a3c:	4680      	mov	r8, r0
 8005a3e:	460c      	mov	r4, r1
 8005a40:	469a      	mov	sl, r3
 8005a42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a46:	d807      	bhi.n	8005a58 <_printf_i+0x28>
 8005a48:	2f62      	cmp	r7, #98	@ 0x62
 8005a4a:	d80a      	bhi.n	8005a62 <_printf_i+0x32>
 8005a4c:	2f00      	cmp	r7, #0
 8005a4e:	f000 80d1 	beq.w	8005bf4 <_printf_i+0x1c4>
 8005a52:	2f58      	cmp	r7, #88	@ 0x58
 8005a54:	f000 80b8 	beq.w	8005bc8 <_printf_i+0x198>
 8005a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a60:	e03a      	b.n	8005ad8 <_printf_i+0xa8>
 8005a62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a66:	2b15      	cmp	r3, #21
 8005a68:	d8f6      	bhi.n	8005a58 <_printf_i+0x28>
 8005a6a:	a101      	add	r1, pc, #4	@ (adr r1, 8005a70 <_printf_i+0x40>)
 8005a6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a70:	08005ac9 	.word	0x08005ac9
 8005a74:	08005add 	.word	0x08005add
 8005a78:	08005a59 	.word	0x08005a59
 8005a7c:	08005a59 	.word	0x08005a59
 8005a80:	08005a59 	.word	0x08005a59
 8005a84:	08005a59 	.word	0x08005a59
 8005a88:	08005add 	.word	0x08005add
 8005a8c:	08005a59 	.word	0x08005a59
 8005a90:	08005a59 	.word	0x08005a59
 8005a94:	08005a59 	.word	0x08005a59
 8005a98:	08005a59 	.word	0x08005a59
 8005a9c:	08005bdb 	.word	0x08005bdb
 8005aa0:	08005b07 	.word	0x08005b07
 8005aa4:	08005b95 	.word	0x08005b95
 8005aa8:	08005a59 	.word	0x08005a59
 8005aac:	08005a59 	.word	0x08005a59
 8005ab0:	08005bfd 	.word	0x08005bfd
 8005ab4:	08005a59 	.word	0x08005a59
 8005ab8:	08005b07 	.word	0x08005b07
 8005abc:	08005a59 	.word	0x08005a59
 8005ac0:	08005a59 	.word	0x08005a59
 8005ac4:	08005b9d 	.word	0x08005b9d
 8005ac8:	6833      	ldr	r3, [r6, #0]
 8005aca:	1d1a      	adds	r2, r3, #4
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6032      	str	r2, [r6, #0]
 8005ad0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ad4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e09c      	b.n	8005c16 <_printf_i+0x1e6>
 8005adc:	6833      	ldr	r3, [r6, #0]
 8005ade:	6820      	ldr	r0, [r4, #0]
 8005ae0:	1d19      	adds	r1, r3, #4
 8005ae2:	6031      	str	r1, [r6, #0]
 8005ae4:	0606      	lsls	r6, r0, #24
 8005ae6:	d501      	bpl.n	8005aec <_printf_i+0xbc>
 8005ae8:	681d      	ldr	r5, [r3, #0]
 8005aea:	e003      	b.n	8005af4 <_printf_i+0xc4>
 8005aec:	0645      	lsls	r5, r0, #25
 8005aee:	d5fb      	bpl.n	8005ae8 <_printf_i+0xb8>
 8005af0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005af4:	2d00      	cmp	r5, #0
 8005af6:	da03      	bge.n	8005b00 <_printf_i+0xd0>
 8005af8:	232d      	movs	r3, #45	@ 0x2d
 8005afa:	426d      	negs	r5, r5
 8005afc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b00:	4858      	ldr	r0, [pc, #352]	@ (8005c64 <_printf_i+0x234>)
 8005b02:	230a      	movs	r3, #10
 8005b04:	e011      	b.n	8005b2a <_printf_i+0xfa>
 8005b06:	6821      	ldr	r1, [r4, #0]
 8005b08:	6833      	ldr	r3, [r6, #0]
 8005b0a:	0608      	lsls	r0, r1, #24
 8005b0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b10:	d402      	bmi.n	8005b18 <_printf_i+0xe8>
 8005b12:	0649      	lsls	r1, r1, #25
 8005b14:	bf48      	it	mi
 8005b16:	b2ad      	uxthmi	r5, r5
 8005b18:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b1a:	4852      	ldr	r0, [pc, #328]	@ (8005c64 <_printf_i+0x234>)
 8005b1c:	6033      	str	r3, [r6, #0]
 8005b1e:	bf14      	ite	ne
 8005b20:	230a      	movne	r3, #10
 8005b22:	2308      	moveq	r3, #8
 8005b24:	2100      	movs	r1, #0
 8005b26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b2a:	6866      	ldr	r6, [r4, #4]
 8005b2c:	60a6      	str	r6, [r4, #8]
 8005b2e:	2e00      	cmp	r6, #0
 8005b30:	db05      	blt.n	8005b3e <_printf_i+0x10e>
 8005b32:	6821      	ldr	r1, [r4, #0]
 8005b34:	432e      	orrs	r6, r5
 8005b36:	f021 0104 	bic.w	r1, r1, #4
 8005b3a:	6021      	str	r1, [r4, #0]
 8005b3c:	d04b      	beq.n	8005bd6 <_printf_i+0x1a6>
 8005b3e:	4616      	mov	r6, r2
 8005b40:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b44:	fb03 5711 	mls	r7, r3, r1, r5
 8005b48:	5dc7      	ldrb	r7, [r0, r7]
 8005b4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b4e:	462f      	mov	r7, r5
 8005b50:	42bb      	cmp	r3, r7
 8005b52:	460d      	mov	r5, r1
 8005b54:	d9f4      	bls.n	8005b40 <_printf_i+0x110>
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d10b      	bne.n	8005b72 <_printf_i+0x142>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	07df      	lsls	r7, r3, #31
 8005b5e:	d508      	bpl.n	8005b72 <_printf_i+0x142>
 8005b60:	6923      	ldr	r3, [r4, #16]
 8005b62:	6861      	ldr	r1, [r4, #4]
 8005b64:	4299      	cmp	r1, r3
 8005b66:	bfde      	ittt	le
 8005b68:	2330      	movle	r3, #48	@ 0x30
 8005b6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b72:	1b92      	subs	r2, r2, r6
 8005b74:	6122      	str	r2, [r4, #16]
 8005b76:	f8cd a000 	str.w	sl, [sp]
 8005b7a:	464b      	mov	r3, r9
 8005b7c:	aa03      	add	r2, sp, #12
 8005b7e:	4621      	mov	r1, r4
 8005b80:	4640      	mov	r0, r8
 8005b82:	f7ff fee7 	bl	8005954 <_printf_common>
 8005b86:	3001      	adds	r0, #1
 8005b88:	d14a      	bne.n	8005c20 <_printf_i+0x1f0>
 8005b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8e:	b004      	add	sp, #16
 8005b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	f043 0320 	orr.w	r3, r3, #32
 8005b9a:	6023      	str	r3, [r4, #0]
 8005b9c:	4832      	ldr	r0, [pc, #200]	@ (8005c68 <_printf_i+0x238>)
 8005b9e:	2778      	movs	r7, #120	@ 0x78
 8005ba0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	6831      	ldr	r1, [r6, #0]
 8005ba8:	061f      	lsls	r7, r3, #24
 8005baa:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bae:	d402      	bmi.n	8005bb6 <_printf_i+0x186>
 8005bb0:	065f      	lsls	r7, r3, #25
 8005bb2:	bf48      	it	mi
 8005bb4:	b2ad      	uxthmi	r5, r5
 8005bb6:	6031      	str	r1, [r6, #0]
 8005bb8:	07d9      	lsls	r1, r3, #31
 8005bba:	bf44      	itt	mi
 8005bbc:	f043 0320 	orrmi.w	r3, r3, #32
 8005bc0:	6023      	strmi	r3, [r4, #0]
 8005bc2:	b11d      	cbz	r5, 8005bcc <_printf_i+0x19c>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	e7ad      	b.n	8005b24 <_printf_i+0xf4>
 8005bc8:	4826      	ldr	r0, [pc, #152]	@ (8005c64 <_printf_i+0x234>)
 8005bca:	e7e9      	b.n	8005ba0 <_printf_i+0x170>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	f023 0320 	bic.w	r3, r3, #32
 8005bd2:	6023      	str	r3, [r4, #0]
 8005bd4:	e7f6      	b.n	8005bc4 <_printf_i+0x194>
 8005bd6:	4616      	mov	r6, r2
 8005bd8:	e7bd      	b.n	8005b56 <_printf_i+0x126>
 8005bda:	6833      	ldr	r3, [r6, #0]
 8005bdc:	6825      	ldr	r5, [r4, #0]
 8005bde:	6961      	ldr	r1, [r4, #20]
 8005be0:	1d18      	adds	r0, r3, #4
 8005be2:	6030      	str	r0, [r6, #0]
 8005be4:	062e      	lsls	r6, r5, #24
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	d501      	bpl.n	8005bee <_printf_i+0x1be>
 8005bea:	6019      	str	r1, [r3, #0]
 8005bec:	e002      	b.n	8005bf4 <_printf_i+0x1c4>
 8005bee:	0668      	lsls	r0, r5, #25
 8005bf0:	d5fb      	bpl.n	8005bea <_printf_i+0x1ba>
 8005bf2:	8019      	strh	r1, [r3, #0]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	6123      	str	r3, [r4, #16]
 8005bf8:	4616      	mov	r6, r2
 8005bfa:	e7bc      	b.n	8005b76 <_printf_i+0x146>
 8005bfc:	6833      	ldr	r3, [r6, #0]
 8005bfe:	1d1a      	adds	r2, r3, #4
 8005c00:	6032      	str	r2, [r6, #0]
 8005c02:	681e      	ldr	r6, [r3, #0]
 8005c04:	6862      	ldr	r2, [r4, #4]
 8005c06:	2100      	movs	r1, #0
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f7fa faf1 	bl	80001f0 <memchr>
 8005c0e:	b108      	cbz	r0, 8005c14 <_printf_i+0x1e4>
 8005c10:	1b80      	subs	r0, r0, r6
 8005c12:	6060      	str	r0, [r4, #4]
 8005c14:	6863      	ldr	r3, [r4, #4]
 8005c16:	6123      	str	r3, [r4, #16]
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c1e:	e7aa      	b.n	8005b76 <_printf_i+0x146>
 8005c20:	6923      	ldr	r3, [r4, #16]
 8005c22:	4632      	mov	r2, r6
 8005c24:	4649      	mov	r1, r9
 8005c26:	4640      	mov	r0, r8
 8005c28:	47d0      	blx	sl
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	d0ad      	beq.n	8005b8a <_printf_i+0x15a>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	079b      	lsls	r3, r3, #30
 8005c32:	d413      	bmi.n	8005c5c <_printf_i+0x22c>
 8005c34:	68e0      	ldr	r0, [r4, #12]
 8005c36:	9b03      	ldr	r3, [sp, #12]
 8005c38:	4298      	cmp	r0, r3
 8005c3a:	bfb8      	it	lt
 8005c3c:	4618      	movlt	r0, r3
 8005c3e:	e7a6      	b.n	8005b8e <_printf_i+0x15e>
 8005c40:	2301      	movs	r3, #1
 8005c42:	4632      	mov	r2, r6
 8005c44:	4649      	mov	r1, r9
 8005c46:	4640      	mov	r0, r8
 8005c48:	47d0      	blx	sl
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	d09d      	beq.n	8005b8a <_printf_i+0x15a>
 8005c4e:	3501      	adds	r5, #1
 8005c50:	68e3      	ldr	r3, [r4, #12]
 8005c52:	9903      	ldr	r1, [sp, #12]
 8005c54:	1a5b      	subs	r3, r3, r1
 8005c56:	42ab      	cmp	r3, r5
 8005c58:	dcf2      	bgt.n	8005c40 <_printf_i+0x210>
 8005c5a:	e7eb      	b.n	8005c34 <_printf_i+0x204>
 8005c5c:	2500      	movs	r5, #0
 8005c5e:	f104 0619 	add.w	r6, r4, #25
 8005c62:	e7f5      	b.n	8005c50 <_printf_i+0x220>
 8005c64:	08009c86 	.word	0x08009c86
 8005c68:	08009c97 	.word	0x08009c97

08005c6c <_scanf_float>:
 8005c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c70:	b087      	sub	sp, #28
 8005c72:	4691      	mov	r9, r2
 8005c74:	9303      	str	r3, [sp, #12]
 8005c76:	688b      	ldr	r3, [r1, #8]
 8005c78:	1e5a      	subs	r2, r3, #1
 8005c7a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005c7e:	bf81      	itttt	hi
 8005c80:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005c84:	eb03 0b05 	addhi.w	fp, r3, r5
 8005c88:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005c8c:	608b      	strhi	r3, [r1, #8]
 8005c8e:	680b      	ldr	r3, [r1, #0]
 8005c90:	460a      	mov	r2, r1
 8005c92:	f04f 0500 	mov.w	r5, #0
 8005c96:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005c9a:	f842 3b1c 	str.w	r3, [r2], #28
 8005c9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005ca2:	4680      	mov	r8, r0
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	bf98      	it	ls
 8005ca8:	f04f 0b00 	movls.w	fp, #0
 8005cac:	9201      	str	r2, [sp, #4]
 8005cae:	4616      	mov	r6, r2
 8005cb0:	46aa      	mov	sl, r5
 8005cb2:	462f      	mov	r7, r5
 8005cb4:	9502      	str	r5, [sp, #8]
 8005cb6:	68a2      	ldr	r2, [r4, #8]
 8005cb8:	b15a      	cbz	r2, 8005cd2 <_scanf_float+0x66>
 8005cba:	f8d9 3000 	ldr.w	r3, [r9]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b4e      	cmp	r3, #78	@ 0x4e
 8005cc2:	d863      	bhi.n	8005d8c <_scanf_float+0x120>
 8005cc4:	2b40      	cmp	r3, #64	@ 0x40
 8005cc6:	d83b      	bhi.n	8005d40 <_scanf_float+0xd4>
 8005cc8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005ccc:	b2c8      	uxtb	r0, r1
 8005cce:	280e      	cmp	r0, #14
 8005cd0:	d939      	bls.n	8005d46 <_scanf_float+0xda>
 8005cd2:	b11f      	cbz	r7, 8005cdc <_scanf_float+0x70>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cda:	6023      	str	r3, [r4, #0]
 8005cdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ce0:	f1ba 0f01 	cmp.w	sl, #1
 8005ce4:	f200 8114 	bhi.w	8005f10 <_scanf_float+0x2a4>
 8005ce8:	9b01      	ldr	r3, [sp, #4]
 8005cea:	429e      	cmp	r6, r3
 8005cec:	f200 8105 	bhi.w	8005efa <_scanf_float+0x28e>
 8005cf0:	2001      	movs	r0, #1
 8005cf2:	b007      	add	sp, #28
 8005cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005cfc:	2a0d      	cmp	r2, #13
 8005cfe:	d8e8      	bhi.n	8005cd2 <_scanf_float+0x66>
 8005d00:	a101      	add	r1, pc, #4	@ (adr r1, 8005d08 <_scanf_float+0x9c>)
 8005d02:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005e51 	.word	0x08005e51
 8005d0c:	08005cd3 	.word	0x08005cd3
 8005d10:	08005cd3 	.word	0x08005cd3
 8005d14:	08005cd3 	.word	0x08005cd3
 8005d18:	08005ead 	.word	0x08005ead
 8005d1c:	08005e87 	.word	0x08005e87
 8005d20:	08005cd3 	.word	0x08005cd3
 8005d24:	08005cd3 	.word	0x08005cd3
 8005d28:	08005e5f 	.word	0x08005e5f
 8005d2c:	08005cd3 	.word	0x08005cd3
 8005d30:	08005cd3 	.word	0x08005cd3
 8005d34:	08005cd3 	.word	0x08005cd3
 8005d38:	08005cd3 	.word	0x08005cd3
 8005d3c:	08005e1b 	.word	0x08005e1b
 8005d40:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005d44:	e7da      	b.n	8005cfc <_scanf_float+0x90>
 8005d46:	290e      	cmp	r1, #14
 8005d48:	d8c3      	bhi.n	8005cd2 <_scanf_float+0x66>
 8005d4a:	a001      	add	r0, pc, #4	@ (adr r0, 8005d50 <_scanf_float+0xe4>)
 8005d4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005d50:	08005e0b 	.word	0x08005e0b
 8005d54:	08005cd3 	.word	0x08005cd3
 8005d58:	08005e0b 	.word	0x08005e0b
 8005d5c:	08005e9b 	.word	0x08005e9b
 8005d60:	08005cd3 	.word	0x08005cd3
 8005d64:	08005dad 	.word	0x08005dad
 8005d68:	08005df1 	.word	0x08005df1
 8005d6c:	08005df1 	.word	0x08005df1
 8005d70:	08005df1 	.word	0x08005df1
 8005d74:	08005df1 	.word	0x08005df1
 8005d78:	08005df1 	.word	0x08005df1
 8005d7c:	08005df1 	.word	0x08005df1
 8005d80:	08005df1 	.word	0x08005df1
 8005d84:	08005df1 	.word	0x08005df1
 8005d88:	08005df1 	.word	0x08005df1
 8005d8c:	2b6e      	cmp	r3, #110	@ 0x6e
 8005d8e:	d809      	bhi.n	8005da4 <_scanf_float+0x138>
 8005d90:	2b60      	cmp	r3, #96	@ 0x60
 8005d92:	d8b1      	bhi.n	8005cf8 <_scanf_float+0x8c>
 8005d94:	2b54      	cmp	r3, #84	@ 0x54
 8005d96:	d07b      	beq.n	8005e90 <_scanf_float+0x224>
 8005d98:	2b59      	cmp	r3, #89	@ 0x59
 8005d9a:	d19a      	bne.n	8005cd2 <_scanf_float+0x66>
 8005d9c:	2d07      	cmp	r5, #7
 8005d9e:	d198      	bne.n	8005cd2 <_scanf_float+0x66>
 8005da0:	2508      	movs	r5, #8
 8005da2:	e02f      	b.n	8005e04 <_scanf_float+0x198>
 8005da4:	2b74      	cmp	r3, #116	@ 0x74
 8005da6:	d073      	beq.n	8005e90 <_scanf_float+0x224>
 8005da8:	2b79      	cmp	r3, #121	@ 0x79
 8005daa:	e7f6      	b.n	8005d9a <_scanf_float+0x12e>
 8005dac:	6821      	ldr	r1, [r4, #0]
 8005dae:	05c8      	lsls	r0, r1, #23
 8005db0:	d51e      	bpl.n	8005df0 <_scanf_float+0x184>
 8005db2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005db6:	6021      	str	r1, [r4, #0]
 8005db8:	3701      	adds	r7, #1
 8005dba:	f1bb 0f00 	cmp.w	fp, #0
 8005dbe:	d003      	beq.n	8005dc8 <_scanf_float+0x15c>
 8005dc0:	3201      	adds	r2, #1
 8005dc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005dc6:	60a2      	str	r2, [r4, #8]
 8005dc8:	68a3      	ldr	r3, [r4, #8]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	60a3      	str	r3, [r4, #8]
 8005dce:	6923      	ldr	r3, [r4, #16]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	6123      	str	r3, [r4, #16]
 8005dd4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f8c9 3004 	str.w	r3, [r9, #4]
 8005de0:	f340 8082 	ble.w	8005ee8 <_scanf_float+0x27c>
 8005de4:	f8d9 3000 	ldr.w	r3, [r9]
 8005de8:	3301      	adds	r3, #1
 8005dea:	f8c9 3000 	str.w	r3, [r9]
 8005dee:	e762      	b.n	8005cb6 <_scanf_float+0x4a>
 8005df0:	eb1a 0105 	adds.w	r1, sl, r5
 8005df4:	f47f af6d 	bne.w	8005cd2 <_scanf_float+0x66>
 8005df8:	6822      	ldr	r2, [r4, #0]
 8005dfa:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005dfe:	6022      	str	r2, [r4, #0]
 8005e00:	460d      	mov	r5, r1
 8005e02:	468a      	mov	sl, r1
 8005e04:	f806 3b01 	strb.w	r3, [r6], #1
 8005e08:	e7de      	b.n	8005dc8 <_scanf_float+0x15c>
 8005e0a:	6822      	ldr	r2, [r4, #0]
 8005e0c:	0610      	lsls	r0, r2, #24
 8005e0e:	f57f af60 	bpl.w	8005cd2 <_scanf_float+0x66>
 8005e12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e16:	6022      	str	r2, [r4, #0]
 8005e18:	e7f4      	b.n	8005e04 <_scanf_float+0x198>
 8005e1a:	f1ba 0f00 	cmp.w	sl, #0
 8005e1e:	d10c      	bne.n	8005e3a <_scanf_float+0x1ce>
 8005e20:	b977      	cbnz	r7, 8005e40 <_scanf_float+0x1d4>
 8005e22:	6822      	ldr	r2, [r4, #0]
 8005e24:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005e28:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005e2c:	d108      	bne.n	8005e40 <_scanf_float+0x1d4>
 8005e2e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e32:	6022      	str	r2, [r4, #0]
 8005e34:	f04f 0a01 	mov.w	sl, #1
 8005e38:	e7e4      	b.n	8005e04 <_scanf_float+0x198>
 8005e3a:	f1ba 0f02 	cmp.w	sl, #2
 8005e3e:	d050      	beq.n	8005ee2 <_scanf_float+0x276>
 8005e40:	2d01      	cmp	r5, #1
 8005e42:	d002      	beq.n	8005e4a <_scanf_float+0x1de>
 8005e44:	2d04      	cmp	r5, #4
 8005e46:	f47f af44 	bne.w	8005cd2 <_scanf_float+0x66>
 8005e4a:	3501      	adds	r5, #1
 8005e4c:	b2ed      	uxtb	r5, r5
 8005e4e:	e7d9      	b.n	8005e04 <_scanf_float+0x198>
 8005e50:	f1ba 0f01 	cmp.w	sl, #1
 8005e54:	f47f af3d 	bne.w	8005cd2 <_scanf_float+0x66>
 8005e58:	f04f 0a02 	mov.w	sl, #2
 8005e5c:	e7d2      	b.n	8005e04 <_scanf_float+0x198>
 8005e5e:	b975      	cbnz	r5, 8005e7e <_scanf_float+0x212>
 8005e60:	2f00      	cmp	r7, #0
 8005e62:	f47f af37 	bne.w	8005cd4 <_scanf_float+0x68>
 8005e66:	6822      	ldr	r2, [r4, #0]
 8005e68:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005e6c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005e70:	f040 8103 	bne.w	800607a <_scanf_float+0x40e>
 8005e74:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e78:	6022      	str	r2, [r4, #0]
 8005e7a:	2501      	movs	r5, #1
 8005e7c:	e7c2      	b.n	8005e04 <_scanf_float+0x198>
 8005e7e:	2d03      	cmp	r5, #3
 8005e80:	d0e3      	beq.n	8005e4a <_scanf_float+0x1de>
 8005e82:	2d05      	cmp	r5, #5
 8005e84:	e7df      	b.n	8005e46 <_scanf_float+0x1da>
 8005e86:	2d02      	cmp	r5, #2
 8005e88:	f47f af23 	bne.w	8005cd2 <_scanf_float+0x66>
 8005e8c:	2503      	movs	r5, #3
 8005e8e:	e7b9      	b.n	8005e04 <_scanf_float+0x198>
 8005e90:	2d06      	cmp	r5, #6
 8005e92:	f47f af1e 	bne.w	8005cd2 <_scanf_float+0x66>
 8005e96:	2507      	movs	r5, #7
 8005e98:	e7b4      	b.n	8005e04 <_scanf_float+0x198>
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	0591      	lsls	r1, r2, #22
 8005e9e:	f57f af18 	bpl.w	8005cd2 <_scanf_float+0x66>
 8005ea2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005ea6:	6022      	str	r2, [r4, #0]
 8005ea8:	9702      	str	r7, [sp, #8]
 8005eaa:	e7ab      	b.n	8005e04 <_scanf_float+0x198>
 8005eac:	6822      	ldr	r2, [r4, #0]
 8005eae:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005eb2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005eb6:	d005      	beq.n	8005ec4 <_scanf_float+0x258>
 8005eb8:	0550      	lsls	r0, r2, #21
 8005eba:	f57f af0a 	bpl.w	8005cd2 <_scanf_float+0x66>
 8005ebe:	2f00      	cmp	r7, #0
 8005ec0:	f000 80db 	beq.w	800607a <_scanf_float+0x40e>
 8005ec4:	0591      	lsls	r1, r2, #22
 8005ec6:	bf58      	it	pl
 8005ec8:	9902      	ldrpl	r1, [sp, #8]
 8005eca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005ece:	bf58      	it	pl
 8005ed0:	1a79      	subpl	r1, r7, r1
 8005ed2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005ed6:	bf58      	it	pl
 8005ed8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005edc:	6022      	str	r2, [r4, #0]
 8005ede:	2700      	movs	r7, #0
 8005ee0:	e790      	b.n	8005e04 <_scanf_float+0x198>
 8005ee2:	f04f 0a03 	mov.w	sl, #3
 8005ee6:	e78d      	b.n	8005e04 <_scanf_float+0x198>
 8005ee8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005eec:	4649      	mov	r1, r9
 8005eee:	4640      	mov	r0, r8
 8005ef0:	4798      	blx	r3
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	f43f aedf 	beq.w	8005cb6 <_scanf_float+0x4a>
 8005ef8:	e6eb      	b.n	8005cd2 <_scanf_float+0x66>
 8005efa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005efe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f02:	464a      	mov	r2, r9
 8005f04:	4640      	mov	r0, r8
 8005f06:	4798      	blx	r3
 8005f08:	6923      	ldr	r3, [r4, #16]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	6123      	str	r3, [r4, #16]
 8005f0e:	e6eb      	b.n	8005ce8 <_scanf_float+0x7c>
 8005f10:	1e6b      	subs	r3, r5, #1
 8005f12:	2b06      	cmp	r3, #6
 8005f14:	d824      	bhi.n	8005f60 <_scanf_float+0x2f4>
 8005f16:	2d02      	cmp	r5, #2
 8005f18:	d836      	bhi.n	8005f88 <_scanf_float+0x31c>
 8005f1a:	9b01      	ldr	r3, [sp, #4]
 8005f1c:	429e      	cmp	r6, r3
 8005f1e:	f67f aee7 	bls.w	8005cf0 <_scanf_float+0x84>
 8005f22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f2a:	464a      	mov	r2, r9
 8005f2c:	4640      	mov	r0, r8
 8005f2e:	4798      	blx	r3
 8005f30:	6923      	ldr	r3, [r4, #16]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	6123      	str	r3, [r4, #16]
 8005f36:	e7f0      	b.n	8005f1a <_scanf_float+0x2ae>
 8005f38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f3c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005f40:	464a      	mov	r2, r9
 8005f42:	4640      	mov	r0, r8
 8005f44:	4798      	blx	r3
 8005f46:	6923      	ldr	r3, [r4, #16]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	6123      	str	r3, [r4, #16]
 8005f4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f50:	fa5f fa8a 	uxtb.w	sl, sl
 8005f54:	f1ba 0f02 	cmp.w	sl, #2
 8005f58:	d1ee      	bne.n	8005f38 <_scanf_float+0x2cc>
 8005f5a:	3d03      	subs	r5, #3
 8005f5c:	b2ed      	uxtb	r5, r5
 8005f5e:	1b76      	subs	r6, r6, r5
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	05da      	lsls	r2, r3, #23
 8005f64:	d530      	bpl.n	8005fc8 <_scanf_float+0x35c>
 8005f66:	055b      	lsls	r3, r3, #21
 8005f68:	d511      	bpl.n	8005f8e <_scanf_float+0x322>
 8005f6a:	9b01      	ldr	r3, [sp, #4]
 8005f6c:	429e      	cmp	r6, r3
 8005f6e:	f67f aebf 	bls.w	8005cf0 <_scanf_float+0x84>
 8005f72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f7a:	464a      	mov	r2, r9
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	4798      	blx	r3
 8005f80:	6923      	ldr	r3, [r4, #16]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	6123      	str	r3, [r4, #16]
 8005f86:	e7f0      	b.n	8005f6a <_scanf_float+0x2fe>
 8005f88:	46aa      	mov	sl, r5
 8005f8a:	46b3      	mov	fp, r6
 8005f8c:	e7de      	b.n	8005f4c <_scanf_float+0x2e0>
 8005f8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005f92:	6923      	ldr	r3, [r4, #16]
 8005f94:	2965      	cmp	r1, #101	@ 0x65
 8005f96:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f9a:	f106 35ff 	add.w	r5, r6, #4294967295
 8005f9e:	6123      	str	r3, [r4, #16]
 8005fa0:	d00c      	beq.n	8005fbc <_scanf_float+0x350>
 8005fa2:	2945      	cmp	r1, #69	@ 0x45
 8005fa4:	d00a      	beq.n	8005fbc <_scanf_float+0x350>
 8005fa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005faa:	464a      	mov	r2, r9
 8005fac:	4640      	mov	r0, r8
 8005fae:	4798      	blx	r3
 8005fb0:	6923      	ldr	r3, [r4, #16]
 8005fb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	1eb5      	subs	r5, r6, #2
 8005fba:	6123      	str	r3, [r4, #16]
 8005fbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005fc0:	464a      	mov	r2, r9
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	4798      	blx	r3
 8005fc6:	462e      	mov	r6, r5
 8005fc8:	6822      	ldr	r2, [r4, #0]
 8005fca:	f012 0210 	ands.w	r2, r2, #16
 8005fce:	d001      	beq.n	8005fd4 <_scanf_float+0x368>
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e68e      	b.n	8005cf2 <_scanf_float+0x86>
 8005fd4:	7032      	strb	r2, [r6, #0]
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fe0:	d125      	bne.n	800602e <_scanf_float+0x3c2>
 8005fe2:	9b02      	ldr	r3, [sp, #8]
 8005fe4:	429f      	cmp	r7, r3
 8005fe6:	d00a      	beq.n	8005ffe <_scanf_float+0x392>
 8005fe8:	1bda      	subs	r2, r3, r7
 8005fea:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005fee:	429e      	cmp	r6, r3
 8005ff0:	bf28      	it	cs
 8005ff2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005ff6:	4922      	ldr	r1, [pc, #136]	@ (8006080 <_scanf_float+0x414>)
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	f000 f907 	bl	800620c <siprintf>
 8005ffe:	9901      	ldr	r1, [sp, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	4640      	mov	r0, r8
 8006004:	f002 fc30 	bl	8008868 <_strtod_r>
 8006008:	9b03      	ldr	r3, [sp, #12]
 800600a:	6821      	ldr	r1, [r4, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f011 0f02 	tst.w	r1, #2
 8006012:	ec57 6b10 	vmov	r6, r7, d0
 8006016:	f103 0204 	add.w	r2, r3, #4
 800601a:	d015      	beq.n	8006048 <_scanf_float+0x3dc>
 800601c:	9903      	ldr	r1, [sp, #12]
 800601e:	600a      	str	r2, [r1, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	e9c3 6700 	strd	r6, r7, [r3]
 8006026:	68e3      	ldr	r3, [r4, #12]
 8006028:	3301      	adds	r3, #1
 800602a:	60e3      	str	r3, [r4, #12]
 800602c:	e7d0      	b.n	8005fd0 <_scanf_float+0x364>
 800602e:	9b04      	ldr	r3, [sp, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0e4      	beq.n	8005ffe <_scanf_float+0x392>
 8006034:	9905      	ldr	r1, [sp, #20]
 8006036:	230a      	movs	r3, #10
 8006038:	3101      	adds	r1, #1
 800603a:	4640      	mov	r0, r8
 800603c:	f002 fc94 	bl	8008968 <_strtol_r>
 8006040:	9b04      	ldr	r3, [sp, #16]
 8006042:	9e05      	ldr	r6, [sp, #20]
 8006044:	1ac2      	subs	r2, r0, r3
 8006046:	e7d0      	b.n	8005fea <_scanf_float+0x37e>
 8006048:	f011 0f04 	tst.w	r1, #4
 800604c:	9903      	ldr	r1, [sp, #12]
 800604e:	600a      	str	r2, [r1, #0]
 8006050:	d1e6      	bne.n	8006020 <_scanf_float+0x3b4>
 8006052:	681d      	ldr	r5, [r3, #0]
 8006054:	4632      	mov	r2, r6
 8006056:	463b      	mov	r3, r7
 8006058:	4630      	mov	r0, r6
 800605a:	4639      	mov	r1, r7
 800605c:	f7fa fd76 	bl	8000b4c <__aeabi_dcmpun>
 8006060:	b128      	cbz	r0, 800606e <_scanf_float+0x402>
 8006062:	4808      	ldr	r0, [pc, #32]	@ (8006084 <_scanf_float+0x418>)
 8006064:	f000 f9f4 	bl	8006450 <nanf>
 8006068:	ed85 0a00 	vstr	s0, [r5]
 800606c:	e7db      	b.n	8006026 <_scanf_float+0x3ba>
 800606e:	4630      	mov	r0, r6
 8006070:	4639      	mov	r1, r7
 8006072:	f7fa fdc9 	bl	8000c08 <__aeabi_d2f>
 8006076:	6028      	str	r0, [r5, #0]
 8006078:	e7d5      	b.n	8006026 <_scanf_float+0x3ba>
 800607a:	2700      	movs	r7, #0
 800607c:	e62e      	b.n	8005cdc <_scanf_float+0x70>
 800607e:	bf00      	nop
 8006080:	08009ca8 	.word	0x08009ca8
 8006084:	08009de9 	.word	0x08009de9

08006088 <std>:
 8006088:	2300      	movs	r3, #0
 800608a:	b510      	push	{r4, lr}
 800608c:	4604      	mov	r4, r0
 800608e:	e9c0 3300 	strd	r3, r3, [r0]
 8006092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006096:	6083      	str	r3, [r0, #8]
 8006098:	8181      	strh	r1, [r0, #12]
 800609a:	6643      	str	r3, [r0, #100]	@ 0x64
 800609c:	81c2      	strh	r2, [r0, #14]
 800609e:	6183      	str	r3, [r0, #24]
 80060a0:	4619      	mov	r1, r3
 80060a2:	2208      	movs	r2, #8
 80060a4:	305c      	adds	r0, #92	@ 0x5c
 80060a6:	f000 f953 	bl	8006350 <memset>
 80060aa:	4b0d      	ldr	r3, [pc, #52]	@ (80060e0 <std+0x58>)
 80060ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80060ae:	4b0d      	ldr	r3, [pc, #52]	@ (80060e4 <std+0x5c>)
 80060b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80060b2:	4b0d      	ldr	r3, [pc, #52]	@ (80060e8 <std+0x60>)
 80060b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060b6:	4b0d      	ldr	r3, [pc, #52]	@ (80060ec <std+0x64>)
 80060b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80060ba:	4b0d      	ldr	r3, [pc, #52]	@ (80060f0 <std+0x68>)
 80060bc:	6224      	str	r4, [r4, #32]
 80060be:	429c      	cmp	r4, r3
 80060c0:	d006      	beq.n	80060d0 <std+0x48>
 80060c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060c6:	4294      	cmp	r4, r2
 80060c8:	d002      	beq.n	80060d0 <std+0x48>
 80060ca:	33d0      	adds	r3, #208	@ 0xd0
 80060cc:	429c      	cmp	r4, r3
 80060ce:	d105      	bne.n	80060dc <std+0x54>
 80060d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d8:	f000 b9b6 	b.w	8006448 <__retarget_lock_init_recursive>
 80060dc:	bd10      	pop	{r4, pc}
 80060de:	bf00      	nop
 80060e0:	08006251 	.word	0x08006251
 80060e4:	08006273 	.word	0x08006273
 80060e8:	080062ab 	.word	0x080062ab
 80060ec:	080062cf 	.word	0x080062cf
 80060f0:	200003b8 	.word	0x200003b8

080060f4 <stdio_exit_handler>:
 80060f4:	4a02      	ldr	r2, [pc, #8]	@ (8006100 <stdio_exit_handler+0xc>)
 80060f6:	4903      	ldr	r1, [pc, #12]	@ (8006104 <stdio_exit_handler+0x10>)
 80060f8:	4803      	ldr	r0, [pc, #12]	@ (8006108 <stdio_exit_handler+0x14>)
 80060fa:	f000 b869 	b.w	80061d0 <_fwalk_sglue>
 80060fe:	bf00      	nop
 8006100:	20000018 	.word	0x20000018
 8006104:	08008d25 	.word	0x08008d25
 8006108:	20000028 	.word	0x20000028

0800610c <cleanup_stdio>:
 800610c:	6841      	ldr	r1, [r0, #4]
 800610e:	4b0c      	ldr	r3, [pc, #48]	@ (8006140 <cleanup_stdio+0x34>)
 8006110:	4299      	cmp	r1, r3
 8006112:	b510      	push	{r4, lr}
 8006114:	4604      	mov	r4, r0
 8006116:	d001      	beq.n	800611c <cleanup_stdio+0x10>
 8006118:	f002 fe04 	bl	8008d24 <_fflush_r>
 800611c:	68a1      	ldr	r1, [r4, #8]
 800611e:	4b09      	ldr	r3, [pc, #36]	@ (8006144 <cleanup_stdio+0x38>)
 8006120:	4299      	cmp	r1, r3
 8006122:	d002      	beq.n	800612a <cleanup_stdio+0x1e>
 8006124:	4620      	mov	r0, r4
 8006126:	f002 fdfd 	bl	8008d24 <_fflush_r>
 800612a:	68e1      	ldr	r1, [r4, #12]
 800612c:	4b06      	ldr	r3, [pc, #24]	@ (8006148 <cleanup_stdio+0x3c>)
 800612e:	4299      	cmp	r1, r3
 8006130:	d004      	beq.n	800613c <cleanup_stdio+0x30>
 8006132:	4620      	mov	r0, r4
 8006134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006138:	f002 bdf4 	b.w	8008d24 <_fflush_r>
 800613c:	bd10      	pop	{r4, pc}
 800613e:	bf00      	nop
 8006140:	200003b8 	.word	0x200003b8
 8006144:	20000420 	.word	0x20000420
 8006148:	20000488 	.word	0x20000488

0800614c <global_stdio_init.part.0>:
 800614c:	b510      	push	{r4, lr}
 800614e:	4b0b      	ldr	r3, [pc, #44]	@ (800617c <global_stdio_init.part.0+0x30>)
 8006150:	4c0b      	ldr	r4, [pc, #44]	@ (8006180 <global_stdio_init.part.0+0x34>)
 8006152:	4a0c      	ldr	r2, [pc, #48]	@ (8006184 <global_stdio_init.part.0+0x38>)
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	4620      	mov	r0, r4
 8006158:	2200      	movs	r2, #0
 800615a:	2104      	movs	r1, #4
 800615c:	f7ff ff94 	bl	8006088 <std>
 8006160:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006164:	2201      	movs	r2, #1
 8006166:	2109      	movs	r1, #9
 8006168:	f7ff ff8e 	bl	8006088 <std>
 800616c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006170:	2202      	movs	r2, #2
 8006172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006176:	2112      	movs	r1, #18
 8006178:	f7ff bf86 	b.w	8006088 <std>
 800617c:	200004f0 	.word	0x200004f0
 8006180:	200003b8 	.word	0x200003b8
 8006184:	080060f5 	.word	0x080060f5

08006188 <__sfp_lock_acquire>:
 8006188:	4801      	ldr	r0, [pc, #4]	@ (8006190 <__sfp_lock_acquire+0x8>)
 800618a:	f000 b95e 	b.w	800644a <__retarget_lock_acquire_recursive>
 800618e:	bf00      	nop
 8006190:	200004f9 	.word	0x200004f9

08006194 <__sfp_lock_release>:
 8006194:	4801      	ldr	r0, [pc, #4]	@ (800619c <__sfp_lock_release+0x8>)
 8006196:	f000 b959 	b.w	800644c <__retarget_lock_release_recursive>
 800619a:	bf00      	nop
 800619c:	200004f9 	.word	0x200004f9

080061a0 <__sinit>:
 80061a0:	b510      	push	{r4, lr}
 80061a2:	4604      	mov	r4, r0
 80061a4:	f7ff fff0 	bl	8006188 <__sfp_lock_acquire>
 80061a8:	6a23      	ldr	r3, [r4, #32]
 80061aa:	b11b      	cbz	r3, 80061b4 <__sinit+0x14>
 80061ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061b0:	f7ff bff0 	b.w	8006194 <__sfp_lock_release>
 80061b4:	4b04      	ldr	r3, [pc, #16]	@ (80061c8 <__sinit+0x28>)
 80061b6:	6223      	str	r3, [r4, #32]
 80061b8:	4b04      	ldr	r3, [pc, #16]	@ (80061cc <__sinit+0x2c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1f5      	bne.n	80061ac <__sinit+0xc>
 80061c0:	f7ff ffc4 	bl	800614c <global_stdio_init.part.0>
 80061c4:	e7f2      	b.n	80061ac <__sinit+0xc>
 80061c6:	bf00      	nop
 80061c8:	0800610d 	.word	0x0800610d
 80061cc:	200004f0 	.word	0x200004f0

080061d0 <_fwalk_sglue>:
 80061d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d4:	4607      	mov	r7, r0
 80061d6:	4688      	mov	r8, r1
 80061d8:	4614      	mov	r4, r2
 80061da:	2600      	movs	r6, #0
 80061dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061e0:	f1b9 0901 	subs.w	r9, r9, #1
 80061e4:	d505      	bpl.n	80061f2 <_fwalk_sglue+0x22>
 80061e6:	6824      	ldr	r4, [r4, #0]
 80061e8:	2c00      	cmp	r4, #0
 80061ea:	d1f7      	bne.n	80061dc <_fwalk_sglue+0xc>
 80061ec:	4630      	mov	r0, r6
 80061ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f2:	89ab      	ldrh	r3, [r5, #12]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d907      	bls.n	8006208 <_fwalk_sglue+0x38>
 80061f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061fc:	3301      	adds	r3, #1
 80061fe:	d003      	beq.n	8006208 <_fwalk_sglue+0x38>
 8006200:	4629      	mov	r1, r5
 8006202:	4638      	mov	r0, r7
 8006204:	47c0      	blx	r8
 8006206:	4306      	orrs	r6, r0
 8006208:	3568      	adds	r5, #104	@ 0x68
 800620a:	e7e9      	b.n	80061e0 <_fwalk_sglue+0x10>

0800620c <siprintf>:
 800620c:	b40e      	push	{r1, r2, r3}
 800620e:	b510      	push	{r4, lr}
 8006210:	b09d      	sub	sp, #116	@ 0x74
 8006212:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006214:	9002      	str	r0, [sp, #8]
 8006216:	9006      	str	r0, [sp, #24]
 8006218:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800621c:	480a      	ldr	r0, [pc, #40]	@ (8006248 <siprintf+0x3c>)
 800621e:	9107      	str	r1, [sp, #28]
 8006220:	9104      	str	r1, [sp, #16]
 8006222:	490a      	ldr	r1, [pc, #40]	@ (800624c <siprintf+0x40>)
 8006224:	f853 2b04 	ldr.w	r2, [r3], #4
 8006228:	9105      	str	r1, [sp, #20]
 800622a:	2400      	movs	r4, #0
 800622c:	a902      	add	r1, sp, #8
 800622e:	6800      	ldr	r0, [r0, #0]
 8006230:	9301      	str	r3, [sp, #4]
 8006232:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006234:	f002 fbf6 	bl	8008a24 <_svfiprintf_r>
 8006238:	9b02      	ldr	r3, [sp, #8]
 800623a:	701c      	strb	r4, [r3, #0]
 800623c:	b01d      	add	sp, #116	@ 0x74
 800623e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006242:	b003      	add	sp, #12
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	20000024 	.word	0x20000024
 800624c:	ffff0208 	.word	0xffff0208

08006250 <__sread>:
 8006250:	b510      	push	{r4, lr}
 8006252:	460c      	mov	r4, r1
 8006254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006258:	f000 f8a8 	bl	80063ac <_read_r>
 800625c:	2800      	cmp	r0, #0
 800625e:	bfab      	itete	ge
 8006260:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006262:	89a3      	ldrhlt	r3, [r4, #12]
 8006264:	181b      	addge	r3, r3, r0
 8006266:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800626a:	bfac      	ite	ge
 800626c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800626e:	81a3      	strhlt	r3, [r4, #12]
 8006270:	bd10      	pop	{r4, pc}

08006272 <__swrite>:
 8006272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006276:	461f      	mov	r7, r3
 8006278:	898b      	ldrh	r3, [r1, #12]
 800627a:	05db      	lsls	r3, r3, #23
 800627c:	4605      	mov	r5, r0
 800627e:	460c      	mov	r4, r1
 8006280:	4616      	mov	r6, r2
 8006282:	d505      	bpl.n	8006290 <__swrite+0x1e>
 8006284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006288:	2302      	movs	r3, #2
 800628a:	2200      	movs	r2, #0
 800628c:	f000 f87c 	bl	8006388 <_lseek_r>
 8006290:	89a3      	ldrh	r3, [r4, #12]
 8006292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006296:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800629a:	81a3      	strh	r3, [r4, #12]
 800629c:	4632      	mov	r2, r6
 800629e:	463b      	mov	r3, r7
 80062a0:	4628      	mov	r0, r5
 80062a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062a6:	f000 b893 	b.w	80063d0 <_write_r>

080062aa <__sseek>:
 80062aa:	b510      	push	{r4, lr}
 80062ac:	460c      	mov	r4, r1
 80062ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b2:	f000 f869 	bl	8006388 <_lseek_r>
 80062b6:	1c43      	adds	r3, r0, #1
 80062b8:	89a3      	ldrh	r3, [r4, #12]
 80062ba:	bf15      	itete	ne
 80062bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062c6:	81a3      	strheq	r3, [r4, #12]
 80062c8:	bf18      	it	ne
 80062ca:	81a3      	strhne	r3, [r4, #12]
 80062cc:	bd10      	pop	{r4, pc}

080062ce <__sclose>:
 80062ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d2:	f000 b849 	b.w	8006368 <_close_r>

080062d6 <_vsniprintf_r>:
 80062d6:	b530      	push	{r4, r5, lr}
 80062d8:	4614      	mov	r4, r2
 80062da:	2c00      	cmp	r4, #0
 80062dc:	b09b      	sub	sp, #108	@ 0x6c
 80062de:	4605      	mov	r5, r0
 80062e0:	461a      	mov	r2, r3
 80062e2:	da05      	bge.n	80062f0 <_vsniprintf_r+0x1a>
 80062e4:	238b      	movs	r3, #139	@ 0x8b
 80062e6:	6003      	str	r3, [r0, #0]
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ec:	b01b      	add	sp, #108	@ 0x6c
 80062ee:	bd30      	pop	{r4, r5, pc}
 80062f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80062f4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	9319      	str	r3, [sp, #100]	@ 0x64
 80062fe:	bf14      	ite	ne
 8006300:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006304:	4623      	moveq	r3, r4
 8006306:	9302      	str	r3, [sp, #8]
 8006308:	9305      	str	r3, [sp, #20]
 800630a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800630e:	9100      	str	r1, [sp, #0]
 8006310:	9104      	str	r1, [sp, #16]
 8006312:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006316:	4669      	mov	r1, sp
 8006318:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800631a:	f002 fb83 	bl	8008a24 <_svfiprintf_r>
 800631e:	1c43      	adds	r3, r0, #1
 8006320:	bfbc      	itt	lt
 8006322:	238b      	movlt	r3, #139	@ 0x8b
 8006324:	602b      	strlt	r3, [r5, #0]
 8006326:	2c00      	cmp	r4, #0
 8006328:	d0e0      	beq.n	80062ec <_vsniprintf_r+0x16>
 800632a:	9b00      	ldr	r3, [sp, #0]
 800632c:	2200      	movs	r2, #0
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	e7dc      	b.n	80062ec <_vsniprintf_r+0x16>
	...

08006334 <vsniprintf>:
 8006334:	b507      	push	{r0, r1, r2, lr}
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	4613      	mov	r3, r2
 800633a:	460a      	mov	r2, r1
 800633c:	4601      	mov	r1, r0
 800633e:	4803      	ldr	r0, [pc, #12]	@ (800634c <vsniprintf+0x18>)
 8006340:	6800      	ldr	r0, [r0, #0]
 8006342:	f7ff ffc8 	bl	80062d6 <_vsniprintf_r>
 8006346:	b003      	add	sp, #12
 8006348:	f85d fb04 	ldr.w	pc, [sp], #4
 800634c:	20000024 	.word	0x20000024

08006350 <memset>:
 8006350:	4402      	add	r2, r0
 8006352:	4603      	mov	r3, r0
 8006354:	4293      	cmp	r3, r2
 8006356:	d100      	bne.n	800635a <memset+0xa>
 8006358:	4770      	bx	lr
 800635a:	f803 1b01 	strb.w	r1, [r3], #1
 800635e:	e7f9      	b.n	8006354 <memset+0x4>

08006360 <_localeconv_r>:
 8006360:	4800      	ldr	r0, [pc, #0]	@ (8006364 <_localeconv_r+0x4>)
 8006362:	4770      	bx	lr
 8006364:	20000164 	.word	0x20000164

08006368 <_close_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	4d06      	ldr	r5, [pc, #24]	@ (8006384 <_close_r+0x1c>)
 800636c:	2300      	movs	r3, #0
 800636e:	4604      	mov	r4, r0
 8006370:	4608      	mov	r0, r1
 8006372:	602b      	str	r3, [r5, #0]
 8006374:	f7fb ff52 	bl	800221c <_close>
 8006378:	1c43      	adds	r3, r0, #1
 800637a:	d102      	bne.n	8006382 <_close_r+0x1a>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	b103      	cbz	r3, 8006382 <_close_r+0x1a>
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	200004f4 	.word	0x200004f4

08006388 <_lseek_r>:
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	4d07      	ldr	r5, [pc, #28]	@ (80063a8 <_lseek_r+0x20>)
 800638c:	4604      	mov	r4, r0
 800638e:	4608      	mov	r0, r1
 8006390:	4611      	mov	r1, r2
 8006392:	2200      	movs	r2, #0
 8006394:	602a      	str	r2, [r5, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	f7fb ff67 	bl	800226a <_lseek>
 800639c:	1c43      	adds	r3, r0, #1
 800639e:	d102      	bne.n	80063a6 <_lseek_r+0x1e>
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	b103      	cbz	r3, 80063a6 <_lseek_r+0x1e>
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	bd38      	pop	{r3, r4, r5, pc}
 80063a8:	200004f4 	.word	0x200004f4

080063ac <_read_r>:
 80063ac:	b538      	push	{r3, r4, r5, lr}
 80063ae:	4d07      	ldr	r5, [pc, #28]	@ (80063cc <_read_r+0x20>)
 80063b0:	4604      	mov	r4, r0
 80063b2:	4608      	mov	r0, r1
 80063b4:	4611      	mov	r1, r2
 80063b6:	2200      	movs	r2, #0
 80063b8:	602a      	str	r2, [r5, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	f7fb fef5 	bl	80021aa <_read>
 80063c0:	1c43      	adds	r3, r0, #1
 80063c2:	d102      	bne.n	80063ca <_read_r+0x1e>
 80063c4:	682b      	ldr	r3, [r5, #0]
 80063c6:	b103      	cbz	r3, 80063ca <_read_r+0x1e>
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	bd38      	pop	{r3, r4, r5, pc}
 80063cc:	200004f4 	.word	0x200004f4

080063d0 <_write_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	4d07      	ldr	r5, [pc, #28]	@ (80063f0 <_write_r+0x20>)
 80063d4:	4604      	mov	r4, r0
 80063d6:	4608      	mov	r0, r1
 80063d8:	4611      	mov	r1, r2
 80063da:	2200      	movs	r2, #0
 80063dc:	602a      	str	r2, [r5, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	f7fb ff00 	bl	80021e4 <_write>
 80063e4:	1c43      	adds	r3, r0, #1
 80063e6:	d102      	bne.n	80063ee <_write_r+0x1e>
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	b103      	cbz	r3, 80063ee <_write_r+0x1e>
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	bd38      	pop	{r3, r4, r5, pc}
 80063f0:	200004f4 	.word	0x200004f4

080063f4 <__errno>:
 80063f4:	4b01      	ldr	r3, [pc, #4]	@ (80063fc <__errno+0x8>)
 80063f6:	6818      	ldr	r0, [r3, #0]
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	20000024 	.word	0x20000024

08006400 <__libc_init_array>:
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	4d0d      	ldr	r5, [pc, #52]	@ (8006438 <__libc_init_array+0x38>)
 8006404:	4c0d      	ldr	r4, [pc, #52]	@ (800643c <__libc_init_array+0x3c>)
 8006406:	1b64      	subs	r4, r4, r5
 8006408:	10a4      	asrs	r4, r4, #2
 800640a:	2600      	movs	r6, #0
 800640c:	42a6      	cmp	r6, r4
 800640e:	d109      	bne.n	8006424 <__libc_init_array+0x24>
 8006410:	4d0b      	ldr	r5, [pc, #44]	@ (8006440 <__libc_init_array+0x40>)
 8006412:	4c0c      	ldr	r4, [pc, #48]	@ (8006444 <__libc_init_array+0x44>)
 8006414:	f003 fb76 	bl	8009b04 <_init>
 8006418:	1b64      	subs	r4, r4, r5
 800641a:	10a4      	asrs	r4, r4, #2
 800641c:	2600      	movs	r6, #0
 800641e:	42a6      	cmp	r6, r4
 8006420:	d105      	bne.n	800642e <__libc_init_array+0x2e>
 8006422:	bd70      	pop	{r4, r5, r6, pc}
 8006424:	f855 3b04 	ldr.w	r3, [r5], #4
 8006428:	4798      	blx	r3
 800642a:	3601      	adds	r6, #1
 800642c:	e7ee      	b.n	800640c <__libc_init_array+0xc>
 800642e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006432:	4798      	blx	r3
 8006434:	3601      	adds	r6, #1
 8006436:	e7f2      	b.n	800641e <__libc_init_array+0x1e>
 8006438:	0800a0a4 	.word	0x0800a0a4
 800643c:	0800a0a4 	.word	0x0800a0a4
 8006440:	0800a0a4 	.word	0x0800a0a4
 8006444:	0800a0a8 	.word	0x0800a0a8

08006448 <__retarget_lock_init_recursive>:
 8006448:	4770      	bx	lr

0800644a <__retarget_lock_acquire_recursive>:
 800644a:	4770      	bx	lr

0800644c <__retarget_lock_release_recursive>:
 800644c:	4770      	bx	lr
	...

08006450 <nanf>:
 8006450:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006458 <nanf+0x8>
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	7fc00000 	.word	0x7fc00000

0800645c <quorem>:
 800645c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006460:	6903      	ldr	r3, [r0, #16]
 8006462:	690c      	ldr	r4, [r1, #16]
 8006464:	42a3      	cmp	r3, r4
 8006466:	4607      	mov	r7, r0
 8006468:	db7e      	blt.n	8006568 <quorem+0x10c>
 800646a:	3c01      	subs	r4, #1
 800646c:	f101 0814 	add.w	r8, r1, #20
 8006470:	00a3      	lsls	r3, r4, #2
 8006472:	f100 0514 	add.w	r5, r0, #20
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800647c:	9301      	str	r3, [sp, #4]
 800647e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006482:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006486:	3301      	adds	r3, #1
 8006488:	429a      	cmp	r2, r3
 800648a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800648e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006492:	d32e      	bcc.n	80064f2 <quorem+0x96>
 8006494:	f04f 0a00 	mov.w	sl, #0
 8006498:	46c4      	mov	ip, r8
 800649a:	46ae      	mov	lr, r5
 800649c:	46d3      	mov	fp, sl
 800649e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80064a2:	b298      	uxth	r0, r3
 80064a4:	fb06 a000 	mla	r0, r6, r0, sl
 80064a8:	0c02      	lsrs	r2, r0, #16
 80064aa:	0c1b      	lsrs	r3, r3, #16
 80064ac:	fb06 2303 	mla	r3, r6, r3, r2
 80064b0:	f8de 2000 	ldr.w	r2, [lr]
 80064b4:	b280      	uxth	r0, r0
 80064b6:	b292      	uxth	r2, r2
 80064b8:	1a12      	subs	r2, r2, r0
 80064ba:	445a      	add	r2, fp
 80064bc:	f8de 0000 	ldr.w	r0, [lr]
 80064c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80064ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80064ce:	b292      	uxth	r2, r2
 80064d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80064d4:	45e1      	cmp	r9, ip
 80064d6:	f84e 2b04 	str.w	r2, [lr], #4
 80064da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80064de:	d2de      	bcs.n	800649e <quorem+0x42>
 80064e0:	9b00      	ldr	r3, [sp, #0]
 80064e2:	58eb      	ldr	r3, [r5, r3]
 80064e4:	b92b      	cbnz	r3, 80064f2 <quorem+0x96>
 80064e6:	9b01      	ldr	r3, [sp, #4]
 80064e8:	3b04      	subs	r3, #4
 80064ea:	429d      	cmp	r5, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	d32f      	bcc.n	8006550 <quorem+0xf4>
 80064f0:	613c      	str	r4, [r7, #16]
 80064f2:	4638      	mov	r0, r7
 80064f4:	f001 f9c8 	bl	8007888 <__mcmp>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	db25      	blt.n	8006548 <quorem+0xec>
 80064fc:	4629      	mov	r1, r5
 80064fe:	2000      	movs	r0, #0
 8006500:	f858 2b04 	ldr.w	r2, [r8], #4
 8006504:	f8d1 c000 	ldr.w	ip, [r1]
 8006508:	fa1f fe82 	uxth.w	lr, r2
 800650c:	fa1f f38c 	uxth.w	r3, ip
 8006510:	eba3 030e 	sub.w	r3, r3, lr
 8006514:	4403      	add	r3, r0
 8006516:	0c12      	lsrs	r2, r2, #16
 8006518:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800651c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006520:	b29b      	uxth	r3, r3
 8006522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006526:	45c1      	cmp	r9, r8
 8006528:	f841 3b04 	str.w	r3, [r1], #4
 800652c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006530:	d2e6      	bcs.n	8006500 <quorem+0xa4>
 8006532:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006536:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800653a:	b922      	cbnz	r2, 8006546 <quorem+0xea>
 800653c:	3b04      	subs	r3, #4
 800653e:	429d      	cmp	r5, r3
 8006540:	461a      	mov	r2, r3
 8006542:	d30b      	bcc.n	800655c <quorem+0x100>
 8006544:	613c      	str	r4, [r7, #16]
 8006546:	3601      	adds	r6, #1
 8006548:	4630      	mov	r0, r6
 800654a:	b003      	add	sp, #12
 800654c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	3b04      	subs	r3, #4
 8006554:	2a00      	cmp	r2, #0
 8006556:	d1cb      	bne.n	80064f0 <quorem+0x94>
 8006558:	3c01      	subs	r4, #1
 800655a:	e7c6      	b.n	80064ea <quorem+0x8e>
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	3b04      	subs	r3, #4
 8006560:	2a00      	cmp	r2, #0
 8006562:	d1ef      	bne.n	8006544 <quorem+0xe8>
 8006564:	3c01      	subs	r4, #1
 8006566:	e7ea      	b.n	800653e <quorem+0xe2>
 8006568:	2000      	movs	r0, #0
 800656a:	e7ee      	b.n	800654a <quorem+0xee>
 800656c:	0000      	movs	r0, r0
	...

08006570 <_dtoa_r>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	69c7      	ldr	r7, [r0, #28]
 8006576:	b097      	sub	sp, #92	@ 0x5c
 8006578:	ed8d 0b04 	vstr	d0, [sp, #16]
 800657c:	ec55 4b10 	vmov	r4, r5, d0
 8006580:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006582:	9107      	str	r1, [sp, #28]
 8006584:	4681      	mov	r9, r0
 8006586:	920c      	str	r2, [sp, #48]	@ 0x30
 8006588:	9311      	str	r3, [sp, #68]	@ 0x44
 800658a:	b97f      	cbnz	r7, 80065ac <_dtoa_r+0x3c>
 800658c:	2010      	movs	r0, #16
 800658e:	f000 fe09 	bl	80071a4 <malloc>
 8006592:	4602      	mov	r2, r0
 8006594:	f8c9 001c 	str.w	r0, [r9, #28]
 8006598:	b920      	cbnz	r0, 80065a4 <_dtoa_r+0x34>
 800659a:	4ba9      	ldr	r3, [pc, #676]	@ (8006840 <_dtoa_r+0x2d0>)
 800659c:	21ef      	movs	r1, #239	@ 0xef
 800659e:	48a9      	ldr	r0, [pc, #676]	@ (8006844 <_dtoa_r+0x2d4>)
 80065a0:	f002 fc3a 	bl	8008e18 <__assert_func>
 80065a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80065a8:	6007      	str	r7, [r0, #0]
 80065aa:	60c7      	str	r7, [r0, #12]
 80065ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80065b0:	6819      	ldr	r1, [r3, #0]
 80065b2:	b159      	cbz	r1, 80065cc <_dtoa_r+0x5c>
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	604a      	str	r2, [r1, #4]
 80065b8:	2301      	movs	r3, #1
 80065ba:	4093      	lsls	r3, r2
 80065bc:	608b      	str	r3, [r1, #8]
 80065be:	4648      	mov	r0, r9
 80065c0:	f000 fee6 	bl	8007390 <_Bfree>
 80065c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	1e2b      	subs	r3, r5, #0
 80065ce:	bfb9      	ittee	lt
 80065d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80065d4:	9305      	strlt	r3, [sp, #20]
 80065d6:	2300      	movge	r3, #0
 80065d8:	6033      	strge	r3, [r6, #0]
 80065da:	9f05      	ldr	r7, [sp, #20]
 80065dc:	4b9a      	ldr	r3, [pc, #616]	@ (8006848 <_dtoa_r+0x2d8>)
 80065de:	bfbc      	itt	lt
 80065e0:	2201      	movlt	r2, #1
 80065e2:	6032      	strlt	r2, [r6, #0]
 80065e4:	43bb      	bics	r3, r7
 80065e6:	d112      	bne.n	800660e <_dtoa_r+0x9e>
 80065e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80065ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065f4:	4323      	orrs	r3, r4
 80065f6:	f000 855a 	beq.w	80070ae <_dtoa_r+0xb3e>
 80065fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065fc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800685c <_dtoa_r+0x2ec>
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 855c 	beq.w	80070be <_dtoa_r+0xb4e>
 8006606:	f10a 0303 	add.w	r3, sl, #3
 800660a:	f000 bd56 	b.w	80070ba <_dtoa_r+0xb4a>
 800660e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006612:	2200      	movs	r2, #0
 8006614:	ec51 0b17 	vmov	r0, r1, d7
 8006618:	2300      	movs	r3, #0
 800661a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800661e:	f7fa fa63 	bl	8000ae8 <__aeabi_dcmpeq>
 8006622:	4680      	mov	r8, r0
 8006624:	b158      	cbz	r0, 800663e <_dtoa_r+0xce>
 8006626:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006628:	2301      	movs	r3, #1
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800662e:	b113      	cbz	r3, 8006636 <_dtoa_r+0xc6>
 8006630:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006632:	4b86      	ldr	r3, [pc, #536]	@ (800684c <_dtoa_r+0x2dc>)
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006860 <_dtoa_r+0x2f0>
 800663a:	f000 bd40 	b.w	80070be <_dtoa_r+0xb4e>
 800663e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006642:	aa14      	add	r2, sp, #80	@ 0x50
 8006644:	a915      	add	r1, sp, #84	@ 0x54
 8006646:	4648      	mov	r0, r9
 8006648:	f001 fa3e 	bl	8007ac8 <__d2b>
 800664c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006650:	9002      	str	r0, [sp, #8]
 8006652:	2e00      	cmp	r6, #0
 8006654:	d078      	beq.n	8006748 <_dtoa_r+0x1d8>
 8006656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006658:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800665c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006660:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006664:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006668:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800666c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006670:	4619      	mov	r1, r3
 8006672:	2200      	movs	r2, #0
 8006674:	4b76      	ldr	r3, [pc, #472]	@ (8006850 <_dtoa_r+0x2e0>)
 8006676:	f7f9 fe17 	bl	80002a8 <__aeabi_dsub>
 800667a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006828 <_dtoa_r+0x2b8>)
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f7f9 ffca 	bl	8000618 <__aeabi_dmul>
 8006684:	a36a      	add	r3, pc, #424	@ (adr r3, 8006830 <_dtoa_r+0x2c0>)
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	f7f9 fe0f 	bl	80002ac <__adddf3>
 800668e:	4604      	mov	r4, r0
 8006690:	4630      	mov	r0, r6
 8006692:	460d      	mov	r5, r1
 8006694:	f7f9 ff56 	bl	8000544 <__aeabi_i2d>
 8006698:	a367      	add	r3, pc, #412	@ (adr r3, 8006838 <_dtoa_r+0x2c8>)
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	f7f9 ffbb 	bl	8000618 <__aeabi_dmul>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4620      	mov	r0, r4
 80066a8:	4629      	mov	r1, r5
 80066aa:	f7f9 fdff 	bl	80002ac <__adddf3>
 80066ae:	4604      	mov	r4, r0
 80066b0:	460d      	mov	r5, r1
 80066b2:	f7fa fa61 	bl	8000b78 <__aeabi_d2iz>
 80066b6:	2200      	movs	r2, #0
 80066b8:	4607      	mov	r7, r0
 80066ba:	2300      	movs	r3, #0
 80066bc:	4620      	mov	r0, r4
 80066be:	4629      	mov	r1, r5
 80066c0:	f7fa fa1c 	bl	8000afc <__aeabi_dcmplt>
 80066c4:	b140      	cbz	r0, 80066d8 <_dtoa_r+0x168>
 80066c6:	4638      	mov	r0, r7
 80066c8:	f7f9 ff3c 	bl	8000544 <__aeabi_i2d>
 80066cc:	4622      	mov	r2, r4
 80066ce:	462b      	mov	r3, r5
 80066d0:	f7fa fa0a 	bl	8000ae8 <__aeabi_dcmpeq>
 80066d4:	b900      	cbnz	r0, 80066d8 <_dtoa_r+0x168>
 80066d6:	3f01      	subs	r7, #1
 80066d8:	2f16      	cmp	r7, #22
 80066da:	d852      	bhi.n	8006782 <_dtoa_r+0x212>
 80066dc:	4b5d      	ldr	r3, [pc, #372]	@ (8006854 <_dtoa_r+0x2e4>)
 80066de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066ea:	f7fa fa07 	bl	8000afc <__aeabi_dcmplt>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d049      	beq.n	8006786 <_dtoa_r+0x216>
 80066f2:	3f01      	subs	r7, #1
 80066f4:	2300      	movs	r3, #0
 80066f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80066f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80066fa:	1b9b      	subs	r3, r3, r6
 80066fc:	1e5a      	subs	r2, r3, #1
 80066fe:	bf45      	ittet	mi
 8006700:	f1c3 0301 	rsbmi	r3, r3, #1
 8006704:	9300      	strmi	r3, [sp, #0]
 8006706:	2300      	movpl	r3, #0
 8006708:	2300      	movmi	r3, #0
 800670a:	9206      	str	r2, [sp, #24]
 800670c:	bf54      	ite	pl
 800670e:	9300      	strpl	r3, [sp, #0]
 8006710:	9306      	strmi	r3, [sp, #24]
 8006712:	2f00      	cmp	r7, #0
 8006714:	db39      	blt.n	800678a <_dtoa_r+0x21a>
 8006716:	9b06      	ldr	r3, [sp, #24]
 8006718:	970d      	str	r7, [sp, #52]	@ 0x34
 800671a:	443b      	add	r3, r7
 800671c:	9306      	str	r3, [sp, #24]
 800671e:	2300      	movs	r3, #0
 8006720:	9308      	str	r3, [sp, #32]
 8006722:	9b07      	ldr	r3, [sp, #28]
 8006724:	2b09      	cmp	r3, #9
 8006726:	d863      	bhi.n	80067f0 <_dtoa_r+0x280>
 8006728:	2b05      	cmp	r3, #5
 800672a:	bfc4      	itt	gt
 800672c:	3b04      	subgt	r3, #4
 800672e:	9307      	strgt	r3, [sp, #28]
 8006730:	9b07      	ldr	r3, [sp, #28]
 8006732:	f1a3 0302 	sub.w	r3, r3, #2
 8006736:	bfcc      	ite	gt
 8006738:	2400      	movgt	r4, #0
 800673a:	2401      	movle	r4, #1
 800673c:	2b03      	cmp	r3, #3
 800673e:	d863      	bhi.n	8006808 <_dtoa_r+0x298>
 8006740:	e8df f003 	tbb	[pc, r3]
 8006744:	2b375452 	.word	0x2b375452
 8006748:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800674c:	441e      	add	r6, r3
 800674e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006752:	2b20      	cmp	r3, #32
 8006754:	bfc1      	itttt	gt
 8006756:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800675a:	409f      	lslgt	r7, r3
 800675c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006760:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006764:	bfd6      	itet	le
 8006766:	f1c3 0320 	rsble	r3, r3, #32
 800676a:	ea47 0003 	orrgt.w	r0, r7, r3
 800676e:	fa04 f003 	lslle.w	r0, r4, r3
 8006772:	f7f9 fed7 	bl	8000524 <__aeabi_ui2d>
 8006776:	2201      	movs	r2, #1
 8006778:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800677c:	3e01      	subs	r6, #1
 800677e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006780:	e776      	b.n	8006670 <_dtoa_r+0x100>
 8006782:	2301      	movs	r3, #1
 8006784:	e7b7      	b.n	80066f6 <_dtoa_r+0x186>
 8006786:	9010      	str	r0, [sp, #64]	@ 0x40
 8006788:	e7b6      	b.n	80066f8 <_dtoa_r+0x188>
 800678a:	9b00      	ldr	r3, [sp, #0]
 800678c:	1bdb      	subs	r3, r3, r7
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	427b      	negs	r3, r7
 8006792:	9308      	str	r3, [sp, #32]
 8006794:	2300      	movs	r3, #0
 8006796:	930d      	str	r3, [sp, #52]	@ 0x34
 8006798:	e7c3      	b.n	8006722 <_dtoa_r+0x1b2>
 800679a:	2301      	movs	r3, #1
 800679c:	9309      	str	r3, [sp, #36]	@ 0x24
 800679e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067a0:	eb07 0b03 	add.w	fp, r7, r3
 80067a4:	f10b 0301 	add.w	r3, fp, #1
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	9303      	str	r3, [sp, #12]
 80067ac:	bfb8      	it	lt
 80067ae:	2301      	movlt	r3, #1
 80067b0:	e006      	b.n	80067c0 <_dtoa_r+0x250>
 80067b2:	2301      	movs	r3, #1
 80067b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80067b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	dd28      	ble.n	800680e <_dtoa_r+0x29e>
 80067bc:	469b      	mov	fp, r3
 80067be:	9303      	str	r3, [sp, #12]
 80067c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80067c4:	2100      	movs	r1, #0
 80067c6:	2204      	movs	r2, #4
 80067c8:	f102 0514 	add.w	r5, r2, #20
 80067cc:	429d      	cmp	r5, r3
 80067ce:	d926      	bls.n	800681e <_dtoa_r+0x2ae>
 80067d0:	6041      	str	r1, [r0, #4]
 80067d2:	4648      	mov	r0, r9
 80067d4:	f000 fd9c 	bl	8007310 <_Balloc>
 80067d8:	4682      	mov	sl, r0
 80067da:	2800      	cmp	r0, #0
 80067dc:	d142      	bne.n	8006864 <_dtoa_r+0x2f4>
 80067de:	4b1e      	ldr	r3, [pc, #120]	@ (8006858 <_dtoa_r+0x2e8>)
 80067e0:	4602      	mov	r2, r0
 80067e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80067e6:	e6da      	b.n	800659e <_dtoa_r+0x2e>
 80067e8:	2300      	movs	r3, #0
 80067ea:	e7e3      	b.n	80067b4 <_dtoa_r+0x244>
 80067ec:	2300      	movs	r3, #0
 80067ee:	e7d5      	b.n	800679c <_dtoa_r+0x22c>
 80067f0:	2401      	movs	r4, #1
 80067f2:	2300      	movs	r3, #0
 80067f4:	9307      	str	r3, [sp, #28]
 80067f6:	9409      	str	r4, [sp, #36]	@ 0x24
 80067f8:	f04f 3bff 	mov.w	fp, #4294967295
 80067fc:	2200      	movs	r2, #0
 80067fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8006802:	2312      	movs	r3, #18
 8006804:	920c      	str	r2, [sp, #48]	@ 0x30
 8006806:	e7db      	b.n	80067c0 <_dtoa_r+0x250>
 8006808:	2301      	movs	r3, #1
 800680a:	9309      	str	r3, [sp, #36]	@ 0x24
 800680c:	e7f4      	b.n	80067f8 <_dtoa_r+0x288>
 800680e:	f04f 0b01 	mov.w	fp, #1
 8006812:	f8cd b00c 	str.w	fp, [sp, #12]
 8006816:	465b      	mov	r3, fp
 8006818:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800681c:	e7d0      	b.n	80067c0 <_dtoa_r+0x250>
 800681e:	3101      	adds	r1, #1
 8006820:	0052      	lsls	r2, r2, #1
 8006822:	e7d1      	b.n	80067c8 <_dtoa_r+0x258>
 8006824:	f3af 8000 	nop.w
 8006828:	636f4361 	.word	0x636f4361
 800682c:	3fd287a7 	.word	0x3fd287a7
 8006830:	8b60c8b3 	.word	0x8b60c8b3
 8006834:	3fc68a28 	.word	0x3fc68a28
 8006838:	509f79fb 	.word	0x509f79fb
 800683c:	3fd34413 	.word	0x3fd34413
 8006840:	08009cba 	.word	0x08009cba
 8006844:	08009cd1 	.word	0x08009cd1
 8006848:	7ff00000 	.word	0x7ff00000
 800684c:	08009c85 	.word	0x08009c85
 8006850:	3ff80000 	.word	0x3ff80000
 8006854:	08009e80 	.word	0x08009e80
 8006858:	08009d29 	.word	0x08009d29
 800685c:	08009cb6 	.word	0x08009cb6
 8006860:	08009c84 	.word	0x08009c84
 8006864:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006868:	6018      	str	r0, [r3, #0]
 800686a:	9b03      	ldr	r3, [sp, #12]
 800686c:	2b0e      	cmp	r3, #14
 800686e:	f200 80a1 	bhi.w	80069b4 <_dtoa_r+0x444>
 8006872:	2c00      	cmp	r4, #0
 8006874:	f000 809e 	beq.w	80069b4 <_dtoa_r+0x444>
 8006878:	2f00      	cmp	r7, #0
 800687a:	dd33      	ble.n	80068e4 <_dtoa_r+0x374>
 800687c:	4b9c      	ldr	r3, [pc, #624]	@ (8006af0 <_dtoa_r+0x580>)
 800687e:	f007 020f 	and.w	r2, r7, #15
 8006882:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006886:	ed93 7b00 	vldr	d7, [r3]
 800688a:	05f8      	lsls	r0, r7, #23
 800688c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006890:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006894:	d516      	bpl.n	80068c4 <_dtoa_r+0x354>
 8006896:	4b97      	ldr	r3, [pc, #604]	@ (8006af4 <_dtoa_r+0x584>)
 8006898:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800689c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068a0:	f7f9 ffe4 	bl	800086c <__aeabi_ddiv>
 80068a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068a8:	f004 040f 	and.w	r4, r4, #15
 80068ac:	2603      	movs	r6, #3
 80068ae:	4d91      	ldr	r5, [pc, #580]	@ (8006af4 <_dtoa_r+0x584>)
 80068b0:	b954      	cbnz	r4, 80068c8 <_dtoa_r+0x358>
 80068b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80068b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068ba:	f7f9 ffd7 	bl	800086c <__aeabi_ddiv>
 80068be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068c2:	e028      	b.n	8006916 <_dtoa_r+0x3a6>
 80068c4:	2602      	movs	r6, #2
 80068c6:	e7f2      	b.n	80068ae <_dtoa_r+0x33e>
 80068c8:	07e1      	lsls	r1, r4, #31
 80068ca:	d508      	bpl.n	80068de <_dtoa_r+0x36e>
 80068cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80068d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068d4:	f7f9 fea0 	bl	8000618 <__aeabi_dmul>
 80068d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80068dc:	3601      	adds	r6, #1
 80068de:	1064      	asrs	r4, r4, #1
 80068e0:	3508      	adds	r5, #8
 80068e2:	e7e5      	b.n	80068b0 <_dtoa_r+0x340>
 80068e4:	f000 80af 	beq.w	8006a46 <_dtoa_r+0x4d6>
 80068e8:	427c      	negs	r4, r7
 80068ea:	4b81      	ldr	r3, [pc, #516]	@ (8006af0 <_dtoa_r+0x580>)
 80068ec:	4d81      	ldr	r5, [pc, #516]	@ (8006af4 <_dtoa_r+0x584>)
 80068ee:	f004 020f 	and.w	r2, r4, #15
 80068f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80068fe:	f7f9 fe8b 	bl	8000618 <__aeabi_dmul>
 8006902:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006906:	1124      	asrs	r4, r4, #4
 8006908:	2300      	movs	r3, #0
 800690a:	2602      	movs	r6, #2
 800690c:	2c00      	cmp	r4, #0
 800690e:	f040 808f 	bne.w	8006a30 <_dtoa_r+0x4c0>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1d3      	bne.n	80068be <_dtoa_r+0x34e>
 8006916:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006918:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8094 	beq.w	8006a4a <_dtoa_r+0x4da>
 8006922:	4b75      	ldr	r3, [pc, #468]	@ (8006af8 <_dtoa_r+0x588>)
 8006924:	2200      	movs	r2, #0
 8006926:	4620      	mov	r0, r4
 8006928:	4629      	mov	r1, r5
 800692a:	f7fa f8e7 	bl	8000afc <__aeabi_dcmplt>
 800692e:	2800      	cmp	r0, #0
 8006930:	f000 808b 	beq.w	8006a4a <_dtoa_r+0x4da>
 8006934:	9b03      	ldr	r3, [sp, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 8087 	beq.w	8006a4a <_dtoa_r+0x4da>
 800693c:	f1bb 0f00 	cmp.w	fp, #0
 8006940:	dd34      	ble.n	80069ac <_dtoa_r+0x43c>
 8006942:	4620      	mov	r0, r4
 8006944:	4b6d      	ldr	r3, [pc, #436]	@ (8006afc <_dtoa_r+0x58c>)
 8006946:	2200      	movs	r2, #0
 8006948:	4629      	mov	r1, r5
 800694a:	f7f9 fe65 	bl	8000618 <__aeabi_dmul>
 800694e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006952:	f107 38ff 	add.w	r8, r7, #4294967295
 8006956:	3601      	adds	r6, #1
 8006958:	465c      	mov	r4, fp
 800695a:	4630      	mov	r0, r6
 800695c:	f7f9 fdf2 	bl	8000544 <__aeabi_i2d>
 8006960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006964:	f7f9 fe58 	bl	8000618 <__aeabi_dmul>
 8006968:	4b65      	ldr	r3, [pc, #404]	@ (8006b00 <_dtoa_r+0x590>)
 800696a:	2200      	movs	r2, #0
 800696c:	f7f9 fc9e 	bl	80002ac <__adddf3>
 8006970:	4605      	mov	r5, r0
 8006972:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006976:	2c00      	cmp	r4, #0
 8006978:	d16a      	bne.n	8006a50 <_dtoa_r+0x4e0>
 800697a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800697e:	4b61      	ldr	r3, [pc, #388]	@ (8006b04 <_dtoa_r+0x594>)
 8006980:	2200      	movs	r2, #0
 8006982:	f7f9 fc91 	bl	80002a8 <__aeabi_dsub>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800698e:	462a      	mov	r2, r5
 8006990:	4633      	mov	r3, r6
 8006992:	f7fa f8d1 	bl	8000b38 <__aeabi_dcmpgt>
 8006996:	2800      	cmp	r0, #0
 8006998:	f040 8298 	bne.w	8006ecc <_dtoa_r+0x95c>
 800699c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069a0:	462a      	mov	r2, r5
 80069a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80069a6:	f7fa f8a9 	bl	8000afc <__aeabi_dcmplt>
 80069aa:	bb38      	cbnz	r0, 80069fc <_dtoa_r+0x48c>
 80069ac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80069b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80069b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f2c0 8157 	blt.w	8006c6a <_dtoa_r+0x6fa>
 80069bc:	2f0e      	cmp	r7, #14
 80069be:	f300 8154 	bgt.w	8006c6a <_dtoa_r+0x6fa>
 80069c2:	4b4b      	ldr	r3, [pc, #300]	@ (8006af0 <_dtoa_r+0x580>)
 80069c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80069c8:	ed93 7b00 	vldr	d7, [r3]
 80069cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	ed8d 7b00 	vstr	d7, [sp]
 80069d4:	f280 80e5 	bge.w	8006ba2 <_dtoa_r+0x632>
 80069d8:	9b03      	ldr	r3, [sp, #12]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f300 80e1 	bgt.w	8006ba2 <_dtoa_r+0x632>
 80069e0:	d10c      	bne.n	80069fc <_dtoa_r+0x48c>
 80069e2:	4b48      	ldr	r3, [pc, #288]	@ (8006b04 <_dtoa_r+0x594>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	ec51 0b17 	vmov	r0, r1, d7
 80069ea:	f7f9 fe15 	bl	8000618 <__aeabi_dmul>
 80069ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069f2:	f7fa f897 	bl	8000b24 <__aeabi_dcmpge>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	f000 8266 	beq.w	8006ec8 <_dtoa_r+0x958>
 80069fc:	2400      	movs	r4, #0
 80069fe:	4625      	mov	r5, r4
 8006a00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a02:	4656      	mov	r6, sl
 8006a04:	ea6f 0803 	mvn.w	r8, r3
 8006a08:	2700      	movs	r7, #0
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	4648      	mov	r0, r9
 8006a0e:	f000 fcbf 	bl	8007390 <_Bfree>
 8006a12:	2d00      	cmp	r5, #0
 8006a14:	f000 80bd 	beq.w	8006b92 <_dtoa_r+0x622>
 8006a18:	b12f      	cbz	r7, 8006a26 <_dtoa_r+0x4b6>
 8006a1a:	42af      	cmp	r7, r5
 8006a1c:	d003      	beq.n	8006a26 <_dtoa_r+0x4b6>
 8006a1e:	4639      	mov	r1, r7
 8006a20:	4648      	mov	r0, r9
 8006a22:	f000 fcb5 	bl	8007390 <_Bfree>
 8006a26:	4629      	mov	r1, r5
 8006a28:	4648      	mov	r0, r9
 8006a2a:	f000 fcb1 	bl	8007390 <_Bfree>
 8006a2e:	e0b0      	b.n	8006b92 <_dtoa_r+0x622>
 8006a30:	07e2      	lsls	r2, r4, #31
 8006a32:	d505      	bpl.n	8006a40 <_dtoa_r+0x4d0>
 8006a34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a38:	f7f9 fdee 	bl	8000618 <__aeabi_dmul>
 8006a3c:	3601      	adds	r6, #1
 8006a3e:	2301      	movs	r3, #1
 8006a40:	1064      	asrs	r4, r4, #1
 8006a42:	3508      	adds	r5, #8
 8006a44:	e762      	b.n	800690c <_dtoa_r+0x39c>
 8006a46:	2602      	movs	r6, #2
 8006a48:	e765      	b.n	8006916 <_dtoa_r+0x3a6>
 8006a4a:	9c03      	ldr	r4, [sp, #12]
 8006a4c:	46b8      	mov	r8, r7
 8006a4e:	e784      	b.n	800695a <_dtoa_r+0x3ea>
 8006a50:	4b27      	ldr	r3, [pc, #156]	@ (8006af0 <_dtoa_r+0x580>)
 8006a52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a5c:	4454      	add	r4, sl
 8006a5e:	2900      	cmp	r1, #0
 8006a60:	d054      	beq.n	8006b0c <_dtoa_r+0x59c>
 8006a62:	4929      	ldr	r1, [pc, #164]	@ (8006b08 <_dtoa_r+0x598>)
 8006a64:	2000      	movs	r0, #0
 8006a66:	f7f9 ff01 	bl	800086c <__aeabi_ddiv>
 8006a6a:	4633      	mov	r3, r6
 8006a6c:	462a      	mov	r2, r5
 8006a6e:	f7f9 fc1b 	bl	80002a8 <__aeabi_dsub>
 8006a72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a76:	4656      	mov	r6, sl
 8006a78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a7c:	f7fa f87c 	bl	8000b78 <__aeabi_d2iz>
 8006a80:	4605      	mov	r5, r0
 8006a82:	f7f9 fd5f 	bl	8000544 <__aeabi_i2d>
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a8e:	f7f9 fc0b 	bl	80002a8 <__aeabi_dsub>
 8006a92:	3530      	adds	r5, #48	@ 0x30
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a9c:	f806 5b01 	strb.w	r5, [r6], #1
 8006aa0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006aa4:	f7fa f82a 	bl	8000afc <__aeabi_dcmplt>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d172      	bne.n	8006b92 <_dtoa_r+0x622>
 8006aac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ab0:	4911      	ldr	r1, [pc, #68]	@ (8006af8 <_dtoa_r+0x588>)
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	f7f9 fbf8 	bl	80002a8 <__aeabi_dsub>
 8006ab8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006abc:	f7fa f81e 	bl	8000afc <__aeabi_dcmplt>
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	f040 80b4 	bne.w	8006c2e <_dtoa_r+0x6be>
 8006ac6:	42a6      	cmp	r6, r4
 8006ac8:	f43f af70 	beq.w	80069ac <_dtoa_r+0x43c>
 8006acc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8006afc <_dtoa_r+0x58c>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f7f9 fda0 	bl	8000618 <__aeabi_dmul>
 8006ad8:	4b08      	ldr	r3, [pc, #32]	@ (8006afc <_dtoa_r+0x58c>)
 8006ada:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ade:	2200      	movs	r2, #0
 8006ae0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ae4:	f7f9 fd98 	bl	8000618 <__aeabi_dmul>
 8006ae8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006aec:	e7c4      	b.n	8006a78 <_dtoa_r+0x508>
 8006aee:	bf00      	nop
 8006af0:	08009e80 	.word	0x08009e80
 8006af4:	08009e58 	.word	0x08009e58
 8006af8:	3ff00000 	.word	0x3ff00000
 8006afc:	40240000 	.word	0x40240000
 8006b00:	401c0000 	.word	0x401c0000
 8006b04:	40140000 	.word	0x40140000
 8006b08:	3fe00000 	.word	0x3fe00000
 8006b0c:	4631      	mov	r1, r6
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f7f9 fd82 	bl	8000618 <__aeabi_dmul>
 8006b14:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b18:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006b1a:	4656      	mov	r6, sl
 8006b1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b20:	f7fa f82a 	bl	8000b78 <__aeabi_d2iz>
 8006b24:	4605      	mov	r5, r0
 8006b26:	f7f9 fd0d 	bl	8000544 <__aeabi_i2d>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b32:	f7f9 fbb9 	bl	80002a8 <__aeabi_dsub>
 8006b36:	3530      	adds	r5, #48	@ 0x30
 8006b38:	f806 5b01 	strb.w	r5, [r6], #1
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	42a6      	cmp	r6, r4
 8006b42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b46:	f04f 0200 	mov.w	r2, #0
 8006b4a:	d124      	bne.n	8006b96 <_dtoa_r+0x626>
 8006b4c:	4baf      	ldr	r3, [pc, #700]	@ (8006e0c <_dtoa_r+0x89c>)
 8006b4e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006b52:	f7f9 fbab 	bl	80002ac <__adddf3>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b5e:	f7f9 ffeb 	bl	8000b38 <__aeabi_dcmpgt>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	d163      	bne.n	8006c2e <_dtoa_r+0x6be>
 8006b66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b6a:	49a8      	ldr	r1, [pc, #672]	@ (8006e0c <_dtoa_r+0x89c>)
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	f7f9 fb9b 	bl	80002a8 <__aeabi_dsub>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b7a:	f7f9 ffbf 	bl	8000afc <__aeabi_dcmplt>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	f43f af14 	beq.w	80069ac <_dtoa_r+0x43c>
 8006b84:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006b86:	1e73      	subs	r3, r6, #1
 8006b88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b8e:	2b30      	cmp	r3, #48	@ 0x30
 8006b90:	d0f8      	beq.n	8006b84 <_dtoa_r+0x614>
 8006b92:	4647      	mov	r7, r8
 8006b94:	e03b      	b.n	8006c0e <_dtoa_r+0x69e>
 8006b96:	4b9e      	ldr	r3, [pc, #632]	@ (8006e10 <_dtoa_r+0x8a0>)
 8006b98:	f7f9 fd3e 	bl	8000618 <__aeabi_dmul>
 8006b9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ba0:	e7bc      	b.n	8006b1c <_dtoa_r+0x5ac>
 8006ba2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006ba6:	4656      	mov	r6, sl
 8006ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bac:	4620      	mov	r0, r4
 8006bae:	4629      	mov	r1, r5
 8006bb0:	f7f9 fe5c 	bl	800086c <__aeabi_ddiv>
 8006bb4:	f7f9 ffe0 	bl	8000b78 <__aeabi_d2iz>
 8006bb8:	4680      	mov	r8, r0
 8006bba:	f7f9 fcc3 	bl	8000544 <__aeabi_i2d>
 8006bbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bc2:	f7f9 fd29 	bl	8000618 <__aeabi_dmul>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4620      	mov	r0, r4
 8006bcc:	4629      	mov	r1, r5
 8006bce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006bd2:	f7f9 fb69 	bl	80002a8 <__aeabi_dsub>
 8006bd6:	f806 4b01 	strb.w	r4, [r6], #1
 8006bda:	9d03      	ldr	r5, [sp, #12]
 8006bdc:	eba6 040a 	sub.w	r4, r6, sl
 8006be0:	42a5      	cmp	r5, r4
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	d133      	bne.n	8006c50 <_dtoa_r+0x6e0>
 8006be8:	f7f9 fb60 	bl	80002ac <__adddf3>
 8006bec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	460d      	mov	r5, r1
 8006bf4:	f7f9 ffa0 	bl	8000b38 <__aeabi_dcmpgt>
 8006bf8:	b9c0      	cbnz	r0, 8006c2c <_dtoa_r+0x6bc>
 8006bfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bfe:	4620      	mov	r0, r4
 8006c00:	4629      	mov	r1, r5
 8006c02:	f7f9 ff71 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c06:	b110      	cbz	r0, 8006c0e <_dtoa_r+0x69e>
 8006c08:	f018 0f01 	tst.w	r8, #1
 8006c0c:	d10e      	bne.n	8006c2c <_dtoa_r+0x6bc>
 8006c0e:	9902      	ldr	r1, [sp, #8]
 8006c10:	4648      	mov	r0, r9
 8006c12:	f000 fbbd 	bl	8007390 <_Bfree>
 8006c16:	2300      	movs	r3, #0
 8006c18:	7033      	strb	r3, [r6, #0]
 8006c1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006c1c:	3701      	adds	r7, #1
 8006c1e:	601f      	str	r7, [r3, #0]
 8006c20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 824b 	beq.w	80070be <_dtoa_r+0xb4e>
 8006c28:	601e      	str	r6, [r3, #0]
 8006c2a:	e248      	b.n	80070be <_dtoa_r+0xb4e>
 8006c2c:	46b8      	mov	r8, r7
 8006c2e:	4633      	mov	r3, r6
 8006c30:	461e      	mov	r6, r3
 8006c32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c36:	2a39      	cmp	r2, #57	@ 0x39
 8006c38:	d106      	bne.n	8006c48 <_dtoa_r+0x6d8>
 8006c3a:	459a      	cmp	sl, r3
 8006c3c:	d1f8      	bne.n	8006c30 <_dtoa_r+0x6c0>
 8006c3e:	2230      	movs	r2, #48	@ 0x30
 8006c40:	f108 0801 	add.w	r8, r8, #1
 8006c44:	f88a 2000 	strb.w	r2, [sl]
 8006c48:	781a      	ldrb	r2, [r3, #0]
 8006c4a:	3201      	adds	r2, #1
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	e7a0      	b.n	8006b92 <_dtoa_r+0x622>
 8006c50:	4b6f      	ldr	r3, [pc, #444]	@ (8006e10 <_dtoa_r+0x8a0>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	f7f9 fce0 	bl	8000618 <__aeabi_dmul>
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	460d      	mov	r5, r1
 8006c60:	f7f9 ff42 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d09f      	beq.n	8006ba8 <_dtoa_r+0x638>
 8006c68:	e7d1      	b.n	8006c0e <_dtoa_r+0x69e>
 8006c6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c6c:	2a00      	cmp	r2, #0
 8006c6e:	f000 80ea 	beq.w	8006e46 <_dtoa_r+0x8d6>
 8006c72:	9a07      	ldr	r2, [sp, #28]
 8006c74:	2a01      	cmp	r2, #1
 8006c76:	f300 80cd 	bgt.w	8006e14 <_dtoa_r+0x8a4>
 8006c7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c7c:	2a00      	cmp	r2, #0
 8006c7e:	f000 80c1 	beq.w	8006e04 <_dtoa_r+0x894>
 8006c82:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c86:	9c08      	ldr	r4, [sp, #32]
 8006c88:	9e00      	ldr	r6, [sp, #0]
 8006c8a:	9a00      	ldr	r2, [sp, #0]
 8006c8c:	441a      	add	r2, r3
 8006c8e:	9200      	str	r2, [sp, #0]
 8006c90:	9a06      	ldr	r2, [sp, #24]
 8006c92:	2101      	movs	r1, #1
 8006c94:	441a      	add	r2, r3
 8006c96:	4648      	mov	r0, r9
 8006c98:	9206      	str	r2, [sp, #24]
 8006c9a:	f000 fc77 	bl	800758c <__i2b>
 8006c9e:	4605      	mov	r5, r0
 8006ca0:	b166      	cbz	r6, 8006cbc <_dtoa_r+0x74c>
 8006ca2:	9b06      	ldr	r3, [sp, #24]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	dd09      	ble.n	8006cbc <_dtoa_r+0x74c>
 8006ca8:	42b3      	cmp	r3, r6
 8006caa:	9a00      	ldr	r2, [sp, #0]
 8006cac:	bfa8      	it	ge
 8006cae:	4633      	movge	r3, r6
 8006cb0:	1ad2      	subs	r2, r2, r3
 8006cb2:	9200      	str	r2, [sp, #0]
 8006cb4:	9a06      	ldr	r2, [sp, #24]
 8006cb6:	1af6      	subs	r6, r6, r3
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	9306      	str	r3, [sp, #24]
 8006cbc:	9b08      	ldr	r3, [sp, #32]
 8006cbe:	b30b      	cbz	r3, 8006d04 <_dtoa_r+0x794>
 8006cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 80c6 	beq.w	8006e54 <_dtoa_r+0x8e4>
 8006cc8:	2c00      	cmp	r4, #0
 8006cca:	f000 80c0 	beq.w	8006e4e <_dtoa_r+0x8de>
 8006cce:	4629      	mov	r1, r5
 8006cd0:	4622      	mov	r2, r4
 8006cd2:	4648      	mov	r0, r9
 8006cd4:	f000 fd12 	bl	80076fc <__pow5mult>
 8006cd8:	9a02      	ldr	r2, [sp, #8]
 8006cda:	4601      	mov	r1, r0
 8006cdc:	4605      	mov	r5, r0
 8006cde:	4648      	mov	r0, r9
 8006ce0:	f000 fc6a 	bl	80075b8 <__multiply>
 8006ce4:	9902      	ldr	r1, [sp, #8]
 8006ce6:	4680      	mov	r8, r0
 8006ce8:	4648      	mov	r0, r9
 8006cea:	f000 fb51 	bl	8007390 <_Bfree>
 8006cee:	9b08      	ldr	r3, [sp, #32]
 8006cf0:	1b1b      	subs	r3, r3, r4
 8006cf2:	9308      	str	r3, [sp, #32]
 8006cf4:	f000 80b1 	beq.w	8006e5a <_dtoa_r+0x8ea>
 8006cf8:	9a08      	ldr	r2, [sp, #32]
 8006cfa:	4641      	mov	r1, r8
 8006cfc:	4648      	mov	r0, r9
 8006cfe:	f000 fcfd 	bl	80076fc <__pow5mult>
 8006d02:	9002      	str	r0, [sp, #8]
 8006d04:	2101      	movs	r1, #1
 8006d06:	4648      	mov	r0, r9
 8006d08:	f000 fc40 	bl	800758c <__i2b>
 8006d0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d0e:	4604      	mov	r4, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 81d8 	beq.w	80070c6 <_dtoa_r+0xb56>
 8006d16:	461a      	mov	r2, r3
 8006d18:	4601      	mov	r1, r0
 8006d1a:	4648      	mov	r0, r9
 8006d1c:	f000 fcee 	bl	80076fc <__pow5mult>
 8006d20:	9b07      	ldr	r3, [sp, #28]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	4604      	mov	r4, r0
 8006d26:	f300 809f 	bgt.w	8006e68 <_dtoa_r+0x8f8>
 8006d2a:	9b04      	ldr	r3, [sp, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f040 8097 	bne.w	8006e60 <_dtoa_r+0x8f0>
 8006d32:	9b05      	ldr	r3, [sp, #20]
 8006d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f040 8093 	bne.w	8006e64 <_dtoa_r+0x8f4>
 8006d3e:	9b05      	ldr	r3, [sp, #20]
 8006d40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d44:	0d1b      	lsrs	r3, r3, #20
 8006d46:	051b      	lsls	r3, r3, #20
 8006d48:	b133      	cbz	r3, 8006d58 <_dtoa_r+0x7e8>
 8006d4a:	9b00      	ldr	r3, [sp, #0]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	9b06      	ldr	r3, [sp, #24]
 8006d52:	3301      	adds	r3, #1
 8006d54:	9306      	str	r3, [sp, #24]
 8006d56:	2301      	movs	r3, #1
 8006d58:	9308      	str	r3, [sp, #32]
 8006d5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 81b8 	beq.w	80070d2 <_dtoa_r+0xb62>
 8006d62:	6923      	ldr	r3, [r4, #16]
 8006d64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d68:	6918      	ldr	r0, [r3, #16]
 8006d6a:	f000 fbc3 	bl	80074f4 <__hi0bits>
 8006d6e:	f1c0 0020 	rsb	r0, r0, #32
 8006d72:	9b06      	ldr	r3, [sp, #24]
 8006d74:	4418      	add	r0, r3
 8006d76:	f010 001f 	ands.w	r0, r0, #31
 8006d7a:	f000 8082 	beq.w	8006e82 <_dtoa_r+0x912>
 8006d7e:	f1c0 0320 	rsb	r3, r0, #32
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	dd73      	ble.n	8006e6e <_dtoa_r+0x8fe>
 8006d86:	9b00      	ldr	r3, [sp, #0]
 8006d88:	f1c0 001c 	rsb	r0, r0, #28
 8006d8c:	4403      	add	r3, r0
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	9b06      	ldr	r3, [sp, #24]
 8006d92:	4403      	add	r3, r0
 8006d94:	4406      	add	r6, r0
 8006d96:	9306      	str	r3, [sp, #24]
 8006d98:	9b00      	ldr	r3, [sp, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	dd05      	ble.n	8006daa <_dtoa_r+0x83a>
 8006d9e:	9902      	ldr	r1, [sp, #8]
 8006da0:	461a      	mov	r2, r3
 8006da2:	4648      	mov	r0, r9
 8006da4:	f000 fd04 	bl	80077b0 <__lshift>
 8006da8:	9002      	str	r0, [sp, #8]
 8006daa:	9b06      	ldr	r3, [sp, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	dd05      	ble.n	8006dbc <_dtoa_r+0x84c>
 8006db0:	4621      	mov	r1, r4
 8006db2:	461a      	mov	r2, r3
 8006db4:	4648      	mov	r0, r9
 8006db6:	f000 fcfb 	bl	80077b0 <__lshift>
 8006dba:	4604      	mov	r4, r0
 8006dbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d061      	beq.n	8006e86 <_dtoa_r+0x916>
 8006dc2:	9802      	ldr	r0, [sp, #8]
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	f000 fd5f 	bl	8007888 <__mcmp>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	da5b      	bge.n	8006e86 <_dtoa_r+0x916>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	9902      	ldr	r1, [sp, #8]
 8006dd2:	220a      	movs	r2, #10
 8006dd4:	4648      	mov	r0, r9
 8006dd6:	f000 fafd 	bl	80073d4 <__multadd>
 8006dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ddc:	9002      	str	r0, [sp, #8]
 8006dde:	f107 38ff 	add.w	r8, r7, #4294967295
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 8177 	beq.w	80070d6 <_dtoa_r+0xb66>
 8006de8:	4629      	mov	r1, r5
 8006dea:	2300      	movs	r3, #0
 8006dec:	220a      	movs	r2, #10
 8006dee:	4648      	mov	r0, r9
 8006df0:	f000 faf0 	bl	80073d4 <__multadd>
 8006df4:	f1bb 0f00 	cmp.w	fp, #0
 8006df8:	4605      	mov	r5, r0
 8006dfa:	dc6f      	bgt.n	8006edc <_dtoa_r+0x96c>
 8006dfc:	9b07      	ldr	r3, [sp, #28]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	dc49      	bgt.n	8006e96 <_dtoa_r+0x926>
 8006e02:	e06b      	b.n	8006edc <_dtoa_r+0x96c>
 8006e04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006e0a:	e73c      	b.n	8006c86 <_dtoa_r+0x716>
 8006e0c:	3fe00000 	.word	0x3fe00000
 8006e10:	40240000 	.word	0x40240000
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	1e5c      	subs	r4, r3, #1
 8006e18:	9b08      	ldr	r3, [sp, #32]
 8006e1a:	42a3      	cmp	r3, r4
 8006e1c:	db09      	blt.n	8006e32 <_dtoa_r+0x8c2>
 8006e1e:	1b1c      	subs	r4, r3, r4
 8006e20:	9b03      	ldr	r3, [sp, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f6bf af30 	bge.w	8006c88 <_dtoa_r+0x718>
 8006e28:	9b00      	ldr	r3, [sp, #0]
 8006e2a:	9a03      	ldr	r2, [sp, #12]
 8006e2c:	1a9e      	subs	r6, r3, r2
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e72b      	b.n	8006c8a <_dtoa_r+0x71a>
 8006e32:	9b08      	ldr	r3, [sp, #32]
 8006e34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e36:	9408      	str	r4, [sp, #32]
 8006e38:	1ae3      	subs	r3, r4, r3
 8006e3a:	441a      	add	r2, r3
 8006e3c:	9e00      	ldr	r6, [sp, #0]
 8006e3e:	9b03      	ldr	r3, [sp, #12]
 8006e40:	920d      	str	r2, [sp, #52]	@ 0x34
 8006e42:	2400      	movs	r4, #0
 8006e44:	e721      	b.n	8006c8a <_dtoa_r+0x71a>
 8006e46:	9c08      	ldr	r4, [sp, #32]
 8006e48:	9e00      	ldr	r6, [sp, #0]
 8006e4a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006e4c:	e728      	b.n	8006ca0 <_dtoa_r+0x730>
 8006e4e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006e52:	e751      	b.n	8006cf8 <_dtoa_r+0x788>
 8006e54:	9a08      	ldr	r2, [sp, #32]
 8006e56:	9902      	ldr	r1, [sp, #8]
 8006e58:	e750      	b.n	8006cfc <_dtoa_r+0x78c>
 8006e5a:	f8cd 8008 	str.w	r8, [sp, #8]
 8006e5e:	e751      	b.n	8006d04 <_dtoa_r+0x794>
 8006e60:	2300      	movs	r3, #0
 8006e62:	e779      	b.n	8006d58 <_dtoa_r+0x7e8>
 8006e64:	9b04      	ldr	r3, [sp, #16]
 8006e66:	e777      	b.n	8006d58 <_dtoa_r+0x7e8>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9308      	str	r3, [sp, #32]
 8006e6c:	e779      	b.n	8006d62 <_dtoa_r+0x7f2>
 8006e6e:	d093      	beq.n	8006d98 <_dtoa_r+0x828>
 8006e70:	9a00      	ldr	r2, [sp, #0]
 8006e72:	331c      	adds	r3, #28
 8006e74:	441a      	add	r2, r3
 8006e76:	9200      	str	r2, [sp, #0]
 8006e78:	9a06      	ldr	r2, [sp, #24]
 8006e7a:	441a      	add	r2, r3
 8006e7c:	441e      	add	r6, r3
 8006e7e:	9206      	str	r2, [sp, #24]
 8006e80:	e78a      	b.n	8006d98 <_dtoa_r+0x828>
 8006e82:	4603      	mov	r3, r0
 8006e84:	e7f4      	b.n	8006e70 <_dtoa_r+0x900>
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	46b8      	mov	r8, r7
 8006e8c:	dc20      	bgt.n	8006ed0 <_dtoa_r+0x960>
 8006e8e:	469b      	mov	fp, r3
 8006e90:	9b07      	ldr	r3, [sp, #28]
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	dd1e      	ble.n	8006ed4 <_dtoa_r+0x964>
 8006e96:	f1bb 0f00 	cmp.w	fp, #0
 8006e9a:	f47f adb1 	bne.w	8006a00 <_dtoa_r+0x490>
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	465b      	mov	r3, fp
 8006ea2:	2205      	movs	r2, #5
 8006ea4:	4648      	mov	r0, r9
 8006ea6:	f000 fa95 	bl	80073d4 <__multadd>
 8006eaa:	4601      	mov	r1, r0
 8006eac:	4604      	mov	r4, r0
 8006eae:	9802      	ldr	r0, [sp, #8]
 8006eb0:	f000 fcea 	bl	8007888 <__mcmp>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	f77f ada3 	ble.w	8006a00 <_dtoa_r+0x490>
 8006eba:	4656      	mov	r6, sl
 8006ebc:	2331      	movs	r3, #49	@ 0x31
 8006ebe:	f806 3b01 	strb.w	r3, [r6], #1
 8006ec2:	f108 0801 	add.w	r8, r8, #1
 8006ec6:	e59f      	b.n	8006a08 <_dtoa_r+0x498>
 8006ec8:	9c03      	ldr	r4, [sp, #12]
 8006eca:	46b8      	mov	r8, r7
 8006ecc:	4625      	mov	r5, r4
 8006ece:	e7f4      	b.n	8006eba <_dtoa_r+0x94a>
 8006ed0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f000 8101 	beq.w	80070de <_dtoa_r+0xb6e>
 8006edc:	2e00      	cmp	r6, #0
 8006ede:	dd05      	ble.n	8006eec <_dtoa_r+0x97c>
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	4632      	mov	r2, r6
 8006ee4:	4648      	mov	r0, r9
 8006ee6:	f000 fc63 	bl	80077b0 <__lshift>
 8006eea:	4605      	mov	r5, r0
 8006eec:	9b08      	ldr	r3, [sp, #32]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d05c      	beq.n	8006fac <_dtoa_r+0xa3c>
 8006ef2:	6869      	ldr	r1, [r5, #4]
 8006ef4:	4648      	mov	r0, r9
 8006ef6:	f000 fa0b 	bl	8007310 <_Balloc>
 8006efa:	4606      	mov	r6, r0
 8006efc:	b928      	cbnz	r0, 8006f0a <_dtoa_r+0x99a>
 8006efe:	4b82      	ldr	r3, [pc, #520]	@ (8007108 <_dtoa_r+0xb98>)
 8006f00:	4602      	mov	r2, r0
 8006f02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006f06:	f7ff bb4a 	b.w	800659e <_dtoa_r+0x2e>
 8006f0a:	692a      	ldr	r2, [r5, #16]
 8006f0c:	3202      	adds	r2, #2
 8006f0e:	0092      	lsls	r2, r2, #2
 8006f10:	f105 010c 	add.w	r1, r5, #12
 8006f14:	300c      	adds	r0, #12
 8006f16:	f001 ff69 	bl	8008dec <memcpy>
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	4648      	mov	r0, r9
 8006f20:	f000 fc46 	bl	80077b0 <__lshift>
 8006f24:	f10a 0301 	add.w	r3, sl, #1
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	eb0a 030b 	add.w	r3, sl, fp
 8006f2e:	9308      	str	r3, [sp, #32]
 8006f30:	9b04      	ldr	r3, [sp, #16]
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	462f      	mov	r7, r5
 8006f38:	9306      	str	r3, [sp, #24]
 8006f3a:	4605      	mov	r5, r0
 8006f3c:	9b00      	ldr	r3, [sp, #0]
 8006f3e:	9802      	ldr	r0, [sp, #8]
 8006f40:	4621      	mov	r1, r4
 8006f42:	f103 3bff 	add.w	fp, r3, #4294967295
 8006f46:	f7ff fa89 	bl	800645c <quorem>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	3330      	adds	r3, #48	@ 0x30
 8006f4e:	9003      	str	r0, [sp, #12]
 8006f50:	4639      	mov	r1, r7
 8006f52:	9802      	ldr	r0, [sp, #8]
 8006f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f56:	f000 fc97 	bl	8007888 <__mcmp>
 8006f5a:	462a      	mov	r2, r5
 8006f5c:	9004      	str	r0, [sp, #16]
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4648      	mov	r0, r9
 8006f62:	f000 fcad 	bl	80078c0 <__mdiff>
 8006f66:	68c2      	ldr	r2, [r0, #12]
 8006f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f6a:	4606      	mov	r6, r0
 8006f6c:	bb02      	cbnz	r2, 8006fb0 <_dtoa_r+0xa40>
 8006f6e:	4601      	mov	r1, r0
 8006f70:	9802      	ldr	r0, [sp, #8]
 8006f72:	f000 fc89 	bl	8007888 <__mcmp>
 8006f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f78:	4602      	mov	r2, r0
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4648      	mov	r0, r9
 8006f7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006f80:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f82:	f000 fa05 	bl	8007390 <_Bfree>
 8006f86:	9b07      	ldr	r3, [sp, #28]
 8006f88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f8a:	9e00      	ldr	r6, [sp, #0]
 8006f8c:	ea42 0103 	orr.w	r1, r2, r3
 8006f90:	9b06      	ldr	r3, [sp, #24]
 8006f92:	4319      	orrs	r1, r3
 8006f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f96:	d10d      	bne.n	8006fb4 <_dtoa_r+0xa44>
 8006f98:	2b39      	cmp	r3, #57	@ 0x39
 8006f9a:	d027      	beq.n	8006fec <_dtoa_r+0xa7c>
 8006f9c:	9a04      	ldr	r2, [sp, #16]
 8006f9e:	2a00      	cmp	r2, #0
 8006fa0:	dd01      	ble.n	8006fa6 <_dtoa_r+0xa36>
 8006fa2:	9b03      	ldr	r3, [sp, #12]
 8006fa4:	3331      	adds	r3, #49	@ 0x31
 8006fa6:	f88b 3000 	strb.w	r3, [fp]
 8006faa:	e52e      	b.n	8006a0a <_dtoa_r+0x49a>
 8006fac:	4628      	mov	r0, r5
 8006fae:	e7b9      	b.n	8006f24 <_dtoa_r+0x9b4>
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	e7e2      	b.n	8006f7a <_dtoa_r+0xa0a>
 8006fb4:	9904      	ldr	r1, [sp, #16]
 8006fb6:	2900      	cmp	r1, #0
 8006fb8:	db04      	blt.n	8006fc4 <_dtoa_r+0xa54>
 8006fba:	9807      	ldr	r0, [sp, #28]
 8006fbc:	4301      	orrs	r1, r0
 8006fbe:	9806      	ldr	r0, [sp, #24]
 8006fc0:	4301      	orrs	r1, r0
 8006fc2:	d120      	bne.n	8007006 <_dtoa_r+0xa96>
 8006fc4:	2a00      	cmp	r2, #0
 8006fc6:	ddee      	ble.n	8006fa6 <_dtoa_r+0xa36>
 8006fc8:	9902      	ldr	r1, [sp, #8]
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	4648      	mov	r0, r9
 8006fd0:	f000 fbee 	bl	80077b0 <__lshift>
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	9002      	str	r0, [sp, #8]
 8006fd8:	f000 fc56 	bl	8007888 <__mcmp>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	9b00      	ldr	r3, [sp, #0]
 8006fe0:	dc02      	bgt.n	8006fe8 <_dtoa_r+0xa78>
 8006fe2:	d1e0      	bne.n	8006fa6 <_dtoa_r+0xa36>
 8006fe4:	07da      	lsls	r2, r3, #31
 8006fe6:	d5de      	bpl.n	8006fa6 <_dtoa_r+0xa36>
 8006fe8:	2b39      	cmp	r3, #57	@ 0x39
 8006fea:	d1da      	bne.n	8006fa2 <_dtoa_r+0xa32>
 8006fec:	2339      	movs	r3, #57	@ 0x39
 8006fee:	f88b 3000 	strb.w	r3, [fp]
 8006ff2:	4633      	mov	r3, r6
 8006ff4:	461e      	mov	r6, r3
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006ffc:	2a39      	cmp	r2, #57	@ 0x39
 8006ffe:	d04e      	beq.n	800709e <_dtoa_r+0xb2e>
 8007000:	3201      	adds	r2, #1
 8007002:	701a      	strb	r2, [r3, #0]
 8007004:	e501      	b.n	8006a0a <_dtoa_r+0x49a>
 8007006:	2a00      	cmp	r2, #0
 8007008:	dd03      	ble.n	8007012 <_dtoa_r+0xaa2>
 800700a:	2b39      	cmp	r3, #57	@ 0x39
 800700c:	d0ee      	beq.n	8006fec <_dtoa_r+0xa7c>
 800700e:	3301      	adds	r3, #1
 8007010:	e7c9      	b.n	8006fa6 <_dtoa_r+0xa36>
 8007012:	9a00      	ldr	r2, [sp, #0]
 8007014:	9908      	ldr	r1, [sp, #32]
 8007016:	f802 3c01 	strb.w	r3, [r2, #-1]
 800701a:	428a      	cmp	r2, r1
 800701c:	d028      	beq.n	8007070 <_dtoa_r+0xb00>
 800701e:	9902      	ldr	r1, [sp, #8]
 8007020:	2300      	movs	r3, #0
 8007022:	220a      	movs	r2, #10
 8007024:	4648      	mov	r0, r9
 8007026:	f000 f9d5 	bl	80073d4 <__multadd>
 800702a:	42af      	cmp	r7, r5
 800702c:	9002      	str	r0, [sp, #8]
 800702e:	f04f 0300 	mov.w	r3, #0
 8007032:	f04f 020a 	mov.w	r2, #10
 8007036:	4639      	mov	r1, r7
 8007038:	4648      	mov	r0, r9
 800703a:	d107      	bne.n	800704c <_dtoa_r+0xadc>
 800703c:	f000 f9ca 	bl	80073d4 <__multadd>
 8007040:	4607      	mov	r7, r0
 8007042:	4605      	mov	r5, r0
 8007044:	9b00      	ldr	r3, [sp, #0]
 8007046:	3301      	adds	r3, #1
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	e777      	b.n	8006f3c <_dtoa_r+0x9cc>
 800704c:	f000 f9c2 	bl	80073d4 <__multadd>
 8007050:	4629      	mov	r1, r5
 8007052:	4607      	mov	r7, r0
 8007054:	2300      	movs	r3, #0
 8007056:	220a      	movs	r2, #10
 8007058:	4648      	mov	r0, r9
 800705a:	f000 f9bb 	bl	80073d4 <__multadd>
 800705e:	4605      	mov	r5, r0
 8007060:	e7f0      	b.n	8007044 <_dtoa_r+0xad4>
 8007062:	f1bb 0f00 	cmp.w	fp, #0
 8007066:	bfcc      	ite	gt
 8007068:	465e      	movgt	r6, fp
 800706a:	2601      	movle	r6, #1
 800706c:	4456      	add	r6, sl
 800706e:	2700      	movs	r7, #0
 8007070:	9902      	ldr	r1, [sp, #8]
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	2201      	movs	r2, #1
 8007076:	4648      	mov	r0, r9
 8007078:	f000 fb9a 	bl	80077b0 <__lshift>
 800707c:	4621      	mov	r1, r4
 800707e:	9002      	str	r0, [sp, #8]
 8007080:	f000 fc02 	bl	8007888 <__mcmp>
 8007084:	2800      	cmp	r0, #0
 8007086:	dcb4      	bgt.n	8006ff2 <_dtoa_r+0xa82>
 8007088:	d102      	bne.n	8007090 <_dtoa_r+0xb20>
 800708a:	9b00      	ldr	r3, [sp, #0]
 800708c:	07db      	lsls	r3, r3, #31
 800708e:	d4b0      	bmi.n	8006ff2 <_dtoa_r+0xa82>
 8007090:	4633      	mov	r3, r6
 8007092:	461e      	mov	r6, r3
 8007094:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007098:	2a30      	cmp	r2, #48	@ 0x30
 800709a:	d0fa      	beq.n	8007092 <_dtoa_r+0xb22>
 800709c:	e4b5      	b.n	8006a0a <_dtoa_r+0x49a>
 800709e:	459a      	cmp	sl, r3
 80070a0:	d1a8      	bne.n	8006ff4 <_dtoa_r+0xa84>
 80070a2:	2331      	movs	r3, #49	@ 0x31
 80070a4:	f108 0801 	add.w	r8, r8, #1
 80070a8:	f88a 3000 	strb.w	r3, [sl]
 80070ac:	e4ad      	b.n	8006a0a <_dtoa_r+0x49a>
 80070ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80070b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800710c <_dtoa_r+0xb9c>
 80070b4:	b11b      	cbz	r3, 80070be <_dtoa_r+0xb4e>
 80070b6:	f10a 0308 	add.w	r3, sl, #8
 80070ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	4650      	mov	r0, sl
 80070c0:	b017      	add	sp, #92	@ 0x5c
 80070c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c6:	9b07      	ldr	r3, [sp, #28]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	f77f ae2e 	ble.w	8006d2a <_dtoa_r+0x7ba>
 80070ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070d0:	9308      	str	r3, [sp, #32]
 80070d2:	2001      	movs	r0, #1
 80070d4:	e64d      	b.n	8006d72 <_dtoa_r+0x802>
 80070d6:	f1bb 0f00 	cmp.w	fp, #0
 80070da:	f77f aed9 	ble.w	8006e90 <_dtoa_r+0x920>
 80070de:	4656      	mov	r6, sl
 80070e0:	9802      	ldr	r0, [sp, #8]
 80070e2:	4621      	mov	r1, r4
 80070e4:	f7ff f9ba 	bl	800645c <quorem>
 80070e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80070ec:	f806 3b01 	strb.w	r3, [r6], #1
 80070f0:	eba6 020a 	sub.w	r2, r6, sl
 80070f4:	4593      	cmp	fp, r2
 80070f6:	ddb4      	ble.n	8007062 <_dtoa_r+0xaf2>
 80070f8:	9902      	ldr	r1, [sp, #8]
 80070fa:	2300      	movs	r3, #0
 80070fc:	220a      	movs	r2, #10
 80070fe:	4648      	mov	r0, r9
 8007100:	f000 f968 	bl	80073d4 <__multadd>
 8007104:	9002      	str	r0, [sp, #8]
 8007106:	e7eb      	b.n	80070e0 <_dtoa_r+0xb70>
 8007108:	08009d29 	.word	0x08009d29
 800710c:	08009cad 	.word	0x08009cad

08007110 <_free_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4605      	mov	r5, r0
 8007114:	2900      	cmp	r1, #0
 8007116:	d041      	beq.n	800719c <_free_r+0x8c>
 8007118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800711c:	1f0c      	subs	r4, r1, #4
 800711e:	2b00      	cmp	r3, #0
 8007120:	bfb8      	it	lt
 8007122:	18e4      	addlt	r4, r4, r3
 8007124:	f000 f8e8 	bl	80072f8 <__malloc_lock>
 8007128:	4a1d      	ldr	r2, [pc, #116]	@ (80071a0 <_free_r+0x90>)
 800712a:	6813      	ldr	r3, [r2, #0]
 800712c:	b933      	cbnz	r3, 800713c <_free_r+0x2c>
 800712e:	6063      	str	r3, [r4, #4]
 8007130:	6014      	str	r4, [r2, #0]
 8007132:	4628      	mov	r0, r5
 8007134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007138:	f000 b8e4 	b.w	8007304 <__malloc_unlock>
 800713c:	42a3      	cmp	r3, r4
 800713e:	d908      	bls.n	8007152 <_free_r+0x42>
 8007140:	6820      	ldr	r0, [r4, #0]
 8007142:	1821      	adds	r1, r4, r0
 8007144:	428b      	cmp	r3, r1
 8007146:	bf01      	itttt	eq
 8007148:	6819      	ldreq	r1, [r3, #0]
 800714a:	685b      	ldreq	r3, [r3, #4]
 800714c:	1809      	addeq	r1, r1, r0
 800714e:	6021      	streq	r1, [r4, #0]
 8007150:	e7ed      	b.n	800712e <_free_r+0x1e>
 8007152:	461a      	mov	r2, r3
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	b10b      	cbz	r3, 800715c <_free_r+0x4c>
 8007158:	42a3      	cmp	r3, r4
 800715a:	d9fa      	bls.n	8007152 <_free_r+0x42>
 800715c:	6811      	ldr	r1, [r2, #0]
 800715e:	1850      	adds	r0, r2, r1
 8007160:	42a0      	cmp	r0, r4
 8007162:	d10b      	bne.n	800717c <_free_r+0x6c>
 8007164:	6820      	ldr	r0, [r4, #0]
 8007166:	4401      	add	r1, r0
 8007168:	1850      	adds	r0, r2, r1
 800716a:	4283      	cmp	r3, r0
 800716c:	6011      	str	r1, [r2, #0]
 800716e:	d1e0      	bne.n	8007132 <_free_r+0x22>
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	6053      	str	r3, [r2, #4]
 8007176:	4408      	add	r0, r1
 8007178:	6010      	str	r0, [r2, #0]
 800717a:	e7da      	b.n	8007132 <_free_r+0x22>
 800717c:	d902      	bls.n	8007184 <_free_r+0x74>
 800717e:	230c      	movs	r3, #12
 8007180:	602b      	str	r3, [r5, #0]
 8007182:	e7d6      	b.n	8007132 <_free_r+0x22>
 8007184:	6820      	ldr	r0, [r4, #0]
 8007186:	1821      	adds	r1, r4, r0
 8007188:	428b      	cmp	r3, r1
 800718a:	bf04      	itt	eq
 800718c:	6819      	ldreq	r1, [r3, #0]
 800718e:	685b      	ldreq	r3, [r3, #4]
 8007190:	6063      	str	r3, [r4, #4]
 8007192:	bf04      	itt	eq
 8007194:	1809      	addeq	r1, r1, r0
 8007196:	6021      	streq	r1, [r4, #0]
 8007198:	6054      	str	r4, [r2, #4]
 800719a:	e7ca      	b.n	8007132 <_free_r+0x22>
 800719c:	bd38      	pop	{r3, r4, r5, pc}
 800719e:	bf00      	nop
 80071a0:	20000500 	.word	0x20000500

080071a4 <malloc>:
 80071a4:	4b02      	ldr	r3, [pc, #8]	@ (80071b0 <malloc+0xc>)
 80071a6:	4601      	mov	r1, r0
 80071a8:	6818      	ldr	r0, [r3, #0]
 80071aa:	f000 b825 	b.w	80071f8 <_malloc_r>
 80071ae:	bf00      	nop
 80071b0:	20000024 	.word	0x20000024

080071b4 <sbrk_aligned>:
 80071b4:	b570      	push	{r4, r5, r6, lr}
 80071b6:	4e0f      	ldr	r6, [pc, #60]	@ (80071f4 <sbrk_aligned+0x40>)
 80071b8:	460c      	mov	r4, r1
 80071ba:	6831      	ldr	r1, [r6, #0]
 80071bc:	4605      	mov	r5, r0
 80071be:	b911      	cbnz	r1, 80071c6 <sbrk_aligned+0x12>
 80071c0:	f001 fe04 	bl	8008dcc <_sbrk_r>
 80071c4:	6030      	str	r0, [r6, #0]
 80071c6:	4621      	mov	r1, r4
 80071c8:	4628      	mov	r0, r5
 80071ca:	f001 fdff 	bl	8008dcc <_sbrk_r>
 80071ce:	1c43      	adds	r3, r0, #1
 80071d0:	d103      	bne.n	80071da <sbrk_aligned+0x26>
 80071d2:	f04f 34ff 	mov.w	r4, #4294967295
 80071d6:	4620      	mov	r0, r4
 80071d8:	bd70      	pop	{r4, r5, r6, pc}
 80071da:	1cc4      	adds	r4, r0, #3
 80071dc:	f024 0403 	bic.w	r4, r4, #3
 80071e0:	42a0      	cmp	r0, r4
 80071e2:	d0f8      	beq.n	80071d6 <sbrk_aligned+0x22>
 80071e4:	1a21      	subs	r1, r4, r0
 80071e6:	4628      	mov	r0, r5
 80071e8:	f001 fdf0 	bl	8008dcc <_sbrk_r>
 80071ec:	3001      	adds	r0, #1
 80071ee:	d1f2      	bne.n	80071d6 <sbrk_aligned+0x22>
 80071f0:	e7ef      	b.n	80071d2 <sbrk_aligned+0x1e>
 80071f2:	bf00      	nop
 80071f4:	200004fc 	.word	0x200004fc

080071f8 <_malloc_r>:
 80071f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071fc:	1ccd      	adds	r5, r1, #3
 80071fe:	f025 0503 	bic.w	r5, r5, #3
 8007202:	3508      	adds	r5, #8
 8007204:	2d0c      	cmp	r5, #12
 8007206:	bf38      	it	cc
 8007208:	250c      	movcc	r5, #12
 800720a:	2d00      	cmp	r5, #0
 800720c:	4606      	mov	r6, r0
 800720e:	db01      	blt.n	8007214 <_malloc_r+0x1c>
 8007210:	42a9      	cmp	r1, r5
 8007212:	d904      	bls.n	800721e <_malloc_r+0x26>
 8007214:	230c      	movs	r3, #12
 8007216:	6033      	str	r3, [r6, #0]
 8007218:	2000      	movs	r0, #0
 800721a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800721e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072f4 <_malloc_r+0xfc>
 8007222:	f000 f869 	bl	80072f8 <__malloc_lock>
 8007226:	f8d8 3000 	ldr.w	r3, [r8]
 800722a:	461c      	mov	r4, r3
 800722c:	bb44      	cbnz	r4, 8007280 <_malloc_r+0x88>
 800722e:	4629      	mov	r1, r5
 8007230:	4630      	mov	r0, r6
 8007232:	f7ff ffbf 	bl	80071b4 <sbrk_aligned>
 8007236:	1c43      	adds	r3, r0, #1
 8007238:	4604      	mov	r4, r0
 800723a:	d158      	bne.n	80072ee <_malloc_r+0xf6>
 800723c:	f8d8 4000 	ldr.w	r4, [r8]
 8007240:	4627      	mov	r7, r4
 8007242:	2f00      	cmp	r7, #0
 8007244:	d143      	bne.n	80072ce <_malloc_r+0xd6>
 8007246:	2c00      	cmp	r4, #0
 8007248:	d04b      	beq.n	80072e2 <_malloc_r+0xea>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	4639      	mov	r1, r7
 800724e:	4630      	mov	r0, r6
 8007250:	eb04 0903 	add.w	r9, r4, r3
 8007254:	f001 fdba 	bl	8008dcc <_sbrk_r>
 8007258:	4581      	cmp	r9, r0
 800725a:	d142      	bne.n	80072e2 <_malloc_r+0xea>
 800725c:	6821      	ldr	r1, [r4, #0]
 800725e:	1a6d      	subs	r5, r5, r1
 8007260:	4629      	mov	r1, r5
 8007262:	4630      	mov	r0, r6
 8007264:	f7ff ffa6 	bl	80071b4 <sbrk_aligned>
 8007268:	3001      	adds	r0, #1
 800726a:	d03a      	beq.n	80072e2 <_malloc_r+0xea>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	442b      	add	r3, r5
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	f8d8 3000 	ldr.w	r3, [r8]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	bb62      	cbnz	r2, 80072d4 <_malloc_r+0xdc>
 800727a:	f8c8 7000 	str.w	r7, [r8]
 800727e:	e00f      	b.n	80072a0 <_malloc_r+0xa8>
 8007280:	6822      	ldr	r2, [r4, #0]
 8007282:	1b52      	subs	r2, r2, r5
 8007284:	d420      	bmi.n	80072c8 <_malloc_r+0xd0>
 8007286:	2a0b      	cmp	r2, #11
 8007288:	d917      	bls.n	80072ba <_malloc_r+0xc2>
 800728a:	1961      	adds	r1, r4, r5
 800728c:	42a3      	cmp	r3, r4
 800728e:	6025      	str	r5, [r4, #0]
 8007290:	bf18      	it	ne
 8007292:	6059      	strne	r1, [r3, #4]
 8007294:	6863      	ldr	r3, [r4, #4]
 8007296:	bf08      	it	eq
 8007298:	f8c8 1000 	streq.w	r1, [r8]
 800729c:	5162      	str	r2, [r4, r5]
 800729e:	604b      	str	r3, [r1, #4]
 80072a0:	4630      	mov	r0, r6
 80072a2:	f000 f82f 	bl	8007304 <__malloc_unlock>
 80072a6:	f104 000b 	add.w	r0, r4, #11
 80072aa:	1d23      	adds	r3, r4, #4
 80072ac:	f020 0007 	bic.w	r0, r0, #7
 80072b0:	1ac2      	subs	r2, r0, r3
 80072b2:	bf1c      	itt	ne
 80072b4:	1a1b      	subne	r3, r3, r0
 80072b6:	50a3      	strne	r3, [r4, r2]
 80072b8:	e7af      	b.n	800721a <_malloc_r+0x22>
 80072ba:	6862      	ldr	r2, [r4, #4]
 80072bc:	42a3      	cmp	r3, r4
 80072be:	bf0c      	ite	eq
 80072c0:	f8c8 2000 	streq.w	r2, [r8]
 80072c4:	605a      	strne	r2, [r3, #4]
 80072c6:	e7eb      	b.n	80072a0 <_malloc_r+0xa8>
 80072c8:	4623      	mov	r3, r4
 80072ca:	6864      	ldr	r4, [r4, #4]
 80072cc:	e7ae      	b.n	800722c <_malloc_r+0x34>
 80072ce:	463c      	mov	r4, r7
 80072d0:	687f      	ldr	r7, [r7, #4]
 80072d2:	e7b6      	b.n	8007242 <_malloc_r+0x4a>
 80072d4:	461a      	mov	r2, r3
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	42a3      	cmp	r3, r4
 80072da:	d1fb      	bne.n	80072d4 <_malloc_r+0xdc>
 80072dc:	2300      	movs	r3, #0
 80072de:	6053      	str	r3, [r2, #4]
 80072e0:	e7de      	b.n	80072a0 <_malloc_r+0xa8>
 80072e2:	230c      	movs	r3, #12
 80072e4:	6033      	str	r3, [r6, #0]
 80072e6:	4630      	mov	r0, r6
 80072e8:	f000 f80c 	bl	8007304 <__malloc_unlock>
 80072ec:	e794      	b.n	8007218 <_malloc_r+0x20>
 80072ee:	6005      	str	r5, [r0, #0]
 80072f0:	e7d6      	b.n	80072a0 <_malloc_r+0xa8>
 80072f2:	bf00      	nop
 80072f4:	20000500 	.word	0x20000500

080072f8 <__malloc_lock>:
 80072f8:	4801      	ldr	r0, [pc, #4]	@ (8007300 <__malloc_lock+0x8>)
 80072fa:	f7ff b8a6 	b.w	800644a <__retarget_lock_acquire_recursive>
 80072fe:	bf00      	nop
 8007300:	200004f8 	.word	0x200004f8

08007304 <__malloc_unlock>:
 8007304:	4801      	ldr	r0, [pc, #4]	@ (800730c <__malloc_unlock+0x8>)
 8007306:	f7ff b8a1 	b.w	800644c <__retarget_lock_release_recursive>
 800730a:	bf00      	nop
 800730c:	200004f8 	.word	0x200004f8

08007310 <_Balloc>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	69c6      	ldr	r6, [r0, #28]
 8007314:	4604      	mov	r4, r0
 8007316:	460d      	mov	r5, r1
 8007318:	b976      	cbnz	r6, 8007338 <_Balloc+0x28>
 800731a:	2010      	movs	r0, #16
 800731c:	f7ff ff42 	bl	80071a4 <malloc>
 8007320:	4602      	mov	r2, r0
 8007322:	61e0      	str	r0, [r4, #28]
 8007324:	b920      	cbnz	r0, 8007330 <_Balloc+0x20>
 8007326:	4b18      	ldr	r3, [pc, #96]	@ (8007388 <_Balloc+0x78>)
 8007328:	4818      	ldr	r0, [pc, #96]	@ (800738c <_Balloc+0x7c>)
 800732a:	216b      	movs	r1, #107	@ 0x6b
 800732c:	f001 fd74 	bl	8008e18 <__assert_func>
 8007330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007334:	6006      	str	r6, [r0, #0]
 8007336:	60c6      	str	r6, [r0, #12]
 8007338:	69e6      	ldr	r6, [r4, #28]
 800733a:	68f3      	ldr	r3, [r6, #12]
 800733c:	b183      	cbz	r3, 8007360 <_Balloc+0x50>
 800733e:	69e3      	ldr	r3, [r4, #28]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007346:	b9b8      	cbnz	r0, 8007378 <_Balloc+0x68>
 8007348:	2101      	movs	r1, #1
 800734a:	fa01 f605 	lsl.w	r6, r1, r5
 800734e:	1d72      	adds	r2, r6, #5
 8007350:	0092      	lsls	r2, r2, #2
 8007352:	4620      	mov	r0, r4
 8007354:	f001 fd7e 	bl	8008e54 <_calloc_r>
 8007358:	b160      	cbz	r0, 8007374 <_Balloc+0x64>
 800735a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800735e:	e00e      	b.n	800737e <_Balloc+0x6e>
 8007360:	2221      	movs	r2, #33	@ 0x21
 8007362:	2104      	movs	r1, #4
 8007364:	4620      	mov	r0, r4
 8007366:	f001 fd75 	bl	8008e54 <_calloc_r>
 800736a:	69e3      	ldr	r3, [r4, #28]
 800736c:	60f0      	str	r0, [r6, #12]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e4      	bne.n	800733e <_Balloc+0x2e>
 8007374:	2000      	movs	r0, #0
 8007376:	bd70      	pop	{r4, r5, r6, pc}
 8007378:	6802      	ldr	r2, [r0, #0]
 800737a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800737e:	2300      	movs	r3, #0
 8007380:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007384:	e7f7      	b.n	8007376 <_Balloc+0x66>
 8007386:	bf00      	nop
 8007388:	08009cba 	.word	0x08009cba
 800738c:	08009d3a 	.word	0x08009d3a

08007390 <_Bfree>:
 8007390:	b570      	push	{r4, r5, r6, lr}
 8007392:	69c6      	ldr	r6, [r0, #28]
 8007394:	4605      	mov	r5, r0
 8007396:	460c      	mov	r4, r1
 8007398:	b976      	cbnz	r6, 80073b8 <_Bfree+0x28>
 800739a:	2010      	movs	r0, #16
 800739c:	f7ff ff02 	bl	80071a4 <malloc>
 80073a0:	4602      	mov	r2, r0
 80073a2:	61e8      	str	r0, [r5, #28]
 80073a4:	b920      	cbnz	r0, 80073b0 <_Bfree+0x20>
 80073a6:	4b09      	ldr	r3, [pc, #36]	@ (80073cc <_Bfree+0x3c>)
 80073a8:	4809      	ldr	r0, [pc, #36]	@ (80073d0 <_Bfree+0x40>)
 80073aa:	218f      	movs	r1, #143	@ 0x8f
 80073ac:	f001 fd34 	bl	8008e18 <__assert_func>
 80073b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073b4:	6006      	str	r6, [r0, #0]
 80073b6:	60c6      	str	r6, [r0, #12]
 80073b8:	b13c      	cbz	r4, 80073ca <_Bfree+0x3a>
 80073ba:	69eb      	ldr	r3, [r5, #28]
 80073bc:	6862      	ldr	r2, [r4, #4]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073c4:	6021      	str	r1, [r4, #0]
 80073c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073ca:	bd70      	pop	{r4, r5, r6, pc}
 80073cc:	08009cba 	.word	0x08009cba
 80073d0:	08009d3a 	.word	0x08009d3a

080073d4 <__multadd>:
 80073d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d8:	690d      	ldr	r5, [r1, #16]
 80073da:	4607      	mov	r7, r0
 80073dc:	460c      	mov	r4, r1
 80073de:	461e      	mov	r6, r3
 80073e0:	f101 0c14 	add.w	ip, r1, #20
 80073e4:	2000      	movs	r0, #0
 80073e6:	f8dc 3000 	ldr.w	r3, [ip]
 80073ea:	b299      	uxth	r1, r3
 80073ec:	fb02 6101 	mla	r1, r2, r1, r6
 80073f0:	0c1e      	lsrs	r6, r3, #16
 80073f2:	0c0b      	lsrs	r3, r1, #16
 80073f4:	fb02 3306 	mla	r3, r2, r6, r3
 80073f8:	b289      	uxth	r1, r1
 80073fa:	3001      	adds	r0, #1
 80073fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007400:	4285      	cmp	r5, r0
 8007402:	f84c 1b04 	str.w	r1, [ip], #4
 8007406:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800740a:	dcec      	bgt.n	80073e6 <__multadd+0x12>
 800740c:	b30e      	cbz	r6, 8007452 <__multadd+0x7e>
 800740e:	68a3      	ldr	r3, [r4, #8]
 8007410:	42ab      	cmp	r3, r5
 8007412:	dc19      	bgt.n	8007448 <__multadd+0x74>
 8007414:	6861      	ldr	r1, [r4, #4]
 8007416:	4638      	mov	r0, r7
 8007418:	3101      	adds	r1, #1
 800741a:	f7ff ff79 	bl	8007310 <_Balloc>
 800741e:	4680      	mov	r8, r0
 8007420:	b928      	cbnz	r0, 800742e <__multadd+0x5a>
 8007422:	4602      	mov	r2, r0
 8007424:	4b0c      	ldr	r3, [pc, #48]	@ (8007458 <__multadd+0x84>)
 8007426:	480d      	ldr	r0, [pc, #52]	@ (800745c <__multadd+0x88>)
 8007428:	21ba      	movs	r1, #186	@ 0xba
 800742a:	f001 fcf5 	bl	8008e18 <__assert_func>
 800742e:	6922      	ldr	r2, [r4, #16]
 8007430:	3202      	adds	r2, #2
 8007432:	f104 010c 	add.w	r1, r4, #12
 8007436:	0092      	lsls	r2, r2, #2
 8007438:	300c      	adds	r0, #12
 800743a:	f001 fcd7 	bl	8008dec <memcpy>
 800743e:	4621      	mov	r1, r4
 8007440:	4638      	mov	r0, r7
 8007442:	f7ff ffa5 	bl	8007390 <_Bfree>
 8007446:	4644      	mov	r4, r8
 8007448:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800744c:	3501      	adds	r5, #1
 800744e:	615e      	str	r6, [r3, #20]
 8007450:	6125      	str	r5, [r4, #16]
 8007452:	4620      	mov	r0, r4
 8007454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007458:	08009d29 	.word	0x08009d29
 800745c:	08009d3a 	.word	0x08009d3a

08007460 <__s2b>:
 8007460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007464:	460c      	mov	r4, r1
 8007466:	4615      	mov	r5, r2
 8007468:	461f      	mov	r7, r3
 800746a:	2209      	movs	r2, #9
 800746c:	3308      	adds	r3, #8
 800746e:	4606      	mov	r6, r0
 8007470:	fb93 f3f2 	sdiv	r3, r3, r2
 8007474:	2100      	movs	r1, #0
 8007476:	2201      	movs	r2, #1
 8007478:	429a      	cmp	r2, r3
 800747a:	db09      	blt.n	8007490 <__s2b+0x30>
 800747c:	4630      	mov	r0, r6
 800747e:	f7ff ff47 	bl	8007310 <_Balloc>
 8007482:	b940      	cbnz	r0, 8007496 <__s2b+0x36>
 8007484:	4602      	mov	r2, r0
 8007486:	4b19      	ldr	r3, [pc, #100]	@ (80074ec <__s2b+0x8c>)
 8007488:	4819      	ldr	r0, [pc, #100]	@ (80074f0 <__s2b+0x90>)
 800748a:	21d3      	movs	r1, #211	@ 0xd3
 800748c:	f001 fcc4 	bl	8008e18 <__assert_func>
 8007490:	0052      	lsls	r2, r2, #1
 8007492:	3101      	adds	r1, #1
 8007494:	e7f0      	b.n	8007478 <__s2b+0x18>
 8007496:	9b08      	ldr	r3, [sp, #32]
 8007498:	6143      	str	r3, [r0, #20]
 800749a:	2d09      	cmp	r5, #9
 800749c:	f04f 0301 	mov.w	r3, #1
 80074a0:	6103      	str	r3, [r0, #16]
 80074a2:	dd16      	ble.n	80074d2 <__s2b+0x72>
 80074a4:	f104 0909 	add.w	r9, r4, #9
 80074a8:	46c8      	mov	r8, r9
 80074aa:	442c      	add	r4, r5
 80074ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80074b0:	4601      	mov	r1, r0
 80074b2:	3b30      	subs	r3, #48	@ 0x30
 80074b4:	220a      	movs	r2, #10
 80074b6:	4630      	mov	r0, r6
 80074b8:	f7ff ff8c 	bl	80073d4 <__multadd>
 80074bc:	45a0      	cmp	r8, r4
 80074be:	d1f5      	bne.n	80074ac <__s2b+0x4c>
 80074c0:	f1a5 0408 	sub.w	r4, r5, #8
 80074c4:	444c      	add	r4, r9
 80074c6:	1b2d      	subs	r5, r5, r4
 80074c8:	1963      	adds	r3, r4, r5
 80074ca:	42bb      	cmp	r3, r7
 80074cc:	db04      	blt.n	80074d8 <__s2b+0x78>
 80074ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074d2:	340a      	adds	r4, #10
 80074d4:	2509      	movs	r5, #9
 80074d6:	e7f6      	b.n	80074c6 <__s2b+0x66>
 80074d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80074dc:	4601      	mov	r1, r0
 80074de:	3b30      	subs	r3, #48	@ 0x30
 80074e0:	220a      	movs	r2, #10
 80074e2:	4630      	mov	r0, r6
 80074e4:	f7ff ff76 	bl	80073d4 <__multadd>
 80074e8:	e7ee      	b.n	80074c8 <__s2b+0x68>
 80074ea:	bf00      	nop
 80074ec:	08009d29 	.word	0x08009d29
 80074f0:	08009d3a 	.word	0x08009d3a

080074f4 <__hi0bits>:
 80074f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80074f8:	4603      	mov	r3, r0
 80074fa:	bf36      	itet	cc
 80074fc:	0403      	lslcc	r3, r0, #16
 80074fe:	2000      	movcs	r0, #0
 8007500:	2010      	movcc	r0, #16
 8007502:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007506:	bf3c      	itt	cc
 8007508:	021b      	lslcc	r3, r3, #8
 800750a:	3008      	addcc	r0, #8
 800750c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007510:	bf3c      	itt	cc
 8007512:	011b      	lslcc	r3, r3, #4
 8007514:	3004      	addcc	r0, #4
 8007516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800751a:	bf3c      	itt	cc
 800751c:	009b      	lslcc	r3, r3, #2
 800751e:	3002      	addcc	r0, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	db05      	blt.n	8007530 <__hi0bits+0x3c>
 8007524:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007528:	f100 0001 	add.w	r0, r0, #1
 800752c:	bf08      	it	eq
 800752e:	2020      	moveq	r0, #32
 8007530:	4770      	bx	lr

08007532 <__lo0bits>:
 8007532:	6803      	ldr	r3, [r0, #0]
 8007534:	4602      	mov	r2, r0
 8007536:	f013 0007 	ands.w	r0, r3, #7
 800753a:	d00b      	beq.n	8007554 <__lo0bits+0x22>
 800753c:	07d9      	lsls	r1, r3, #31
 800753e:	d421      	bmi.n	8007584 <__lo0bits+0x52>
 8007540:	0798      	lsls	r0, r3, #30
 8007542:	bf49      	itett	mi
 8007544:	085b      	lsrmi	r3, r3, #1
 8007546:	089b      	lsrpl	r3, r3, #2
 8007548:	2001      	movmi	r0, #1
 800754a:	6013      	strmi	r3, [r2, #0]
 800754c:	bf5c      	itt	pl
 800754e:	6013      	strpl	r3, [r2, #0]
 8007550:	2002      	movpl	r0, #2
 8007552:	4770      	bx	lr
 8007554:	b299      	uxth	r1, r3
 8007556:	b909      	cbnz	r1, 800755c <__lo0bits+0x2a>
 8007558:	0c1b      	lsrs	r3, r3, #16
 800755a:	2010      	movs	r0, #16
 800755c:	b2d9      	uxtb	r1, r3
 800755e:	b909      	cbnz	r1, 8007564 <__lo0bits+0x32>
 8007560:	3008      	adds	r0, #8
 8007562:	0a1b      	lsrs	r3, r3, #8
 8007564:	0719      	lsls	r1, r3, #28
 8007566:	bf04      	itt	eq
 8007568:	091b      	lsreq	r3, r3, #4
 800756a:	3004      	addeq	r0, #4
 800756c:	0799      	lsls	r1, r3, #30
 800756e:	bf04      	itt	eq
 8007570:	089b      	lsreq	r3, r3, #2
 8007572:	3002      	addeq	r0, #2
 8007574:	07d9      	lsls	r1, r3, #31
 8007576:	d403      	bmi.n	8007580 <__lo0bits+0x4e>
 8007578:	085b      	lsrs	r3, r3, #1
 800757a:	f100 0001 	add.w	r0, r0, #1
 800757e:	d003      	beq.n	8007588 <__lo0bits+0x56>
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	4770      	bx	lr
 8007584:	2000      	movs	r0, #0
 8007586:	4770      	bx	lr
 8007588:	2020      	movs	r0, #32
 800758a:	4770      	bx	lr

0800758c <__i2b>:
 800758c:	b510      	push	{r4, lr}
 800758e:	460c      	mov	r4, r1
 8007590:	2101      	movs	r1, #1
 8007592:	f7ff febd 	bl	8007310 <_Balloc>
 8007596:	4602      	mov	r2, r0
 8007598:	b928      	cbnz	r0, 80075a6 <__i2b+0x1a>
 800759a:	4b05      	ldr	r3, [pc, #20]	@ (80075b0 <__i2b+0x24>)
 800759c:	4805      	ldr	r0, [pc, #20]	@ (80075b4 <__i2b+0x28>)
 800759e:	f240 1145 	movw	r1, #325	@ 0x145
 80075a2:	f001 fc39 	bl	8008e18 <__assert_func>
 80075a6:	2301      	movs	r3, #1
 80075a8:	6144      	str	r4, [r0, #20]
 80075aa:	6103      	str	r3, [r0, #16]
 80075ac:	bd10      	pop	{r4, pc}
 80075ae:	bf00      	nop
 80075b0:	08009d29 	.word	0x08009d29
 80075b4:	08009d3a 	.word	0x08009d3a

080075b8 <__multiply>:
 80075b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075bc:	4617      	mov	r7, r2
 80075be:	690a      	ldr	r2, [r1, #16]
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	bfa8      	it	ge
 80075c6:	463b      	movge	r3, r7
 80075c8:	4689      	mov	r9, r1
 80075ca:	bfa4      	itt	ge
 80075cc:	460f      	movge	r7, r1
 80075ce:	4699      	movge	r9, r3
 80075d0:	693d      	ldr	r5, [r7, #16]
 80075d2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	eb05 060a 	add.w	r6, r5, sl
 80075de:	42b3      	cmp	r3, r6
 80075e0:	b085      	sub	sp, #20
 80075e2:	bfb8      	it	lt
 80075e4:	3101      	addlt	r1, #1
 80075e6:	f7ff fe93 	bl	8007310 <_Balloc>
 80075ea:	b930      	cbnz	r0, 80075fa <__multiply+0x42>
 80075ec:	4602      	mov	r2, r0
 80075ee:	4b41      	ldr	r3, [pc, #260]	@ (80076f4 <__multiply+0x13c>)
 80075f0:	4841      	ldr	r0, [pc, #260]	@ (80076f8 <__multiply+0x140>)
 80075f2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80075f6:	f001 fc0f 	bl	8008e18 <__assert_func>
 80075fa:	f100 0414 	add.w	r4, r0, #20
 80075fe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007602:	4623      	mov	r3, r4
 8007604:	2200      	movs	r2, #0
 8007606:	4573      	cmp	r3, lr
 8007608:	d320      	bcc.n	800764c <__multiply+0x94>
 800760a:	f107 0814 	add.w	r8, r7, #20
 800760e:	f109 0114 	add.w	r1, r9, #20
 8007612:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007616:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800761a:	9302      	str	r3, [sp, #8]
 800761c:	1beb      	subs	r3, r5, r7
 800761e:	3b15      	subs	r3, #21
 8007620:	f023 0303 	bic.w	r3, r3, #3
 8007624:	3304      	adds	r3, #4
 8007626:	3715      	adds	r7, #21
 8007628:	42bd      	cmp	r5, r7
 800762a:	bf38      	it	cc
 800762c:	2304      	movcc	r3, #4
 800762e:	9301      	str	r3, [sp, #4]
 8007630:	9b02      	ldr	r3, [sp, #8]
 8007632:	9103      	str	r1, [sp, #12]
 8007634:	428b      	cmp	r3, r1
 8007636:	d80c      	bhi.n	8007652 <__multiply+0x9a>
 8007638:	2e00      	cmp	r6, #0
 800763a:	dd03      	ble.n	8007644 <__multiply+0x8c>
 800763c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007640:	2b00      	cmp	r3, #0
 8007642:	d055      	beq.n	80076f0 <__multiply+0x138>
 8007644:	6106      	str	r6, [r0, #16]
 8007646:	b005      	add	sp, #20
 8007648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764c:	f843 2b04 	str.w	r2, [r3], #4
 8007650:	e7d9      	b.n	8007606 <__multiply+0x4e>
 8007652:	f8b1 a000 	ldrh.w	sl, [r1]
 8007656:	f1ba 0f00 	cmp.w	sl, #0
 800765a:	d01f      	beq.n	800769c <__multiply+0xe4>
 800765c:	46c4      	mov	ip, r8
 800765e:	46a1      	mov	r9, r4
 8007660:	2700      	movs	r7, #0
 8007662:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007666:	f8d9 3000 	ldr.w	r3, [r9]
 800766a:	fa1f fb82 	uxth.w	fp, r2
 800766e:	b29b      	uxth	r3, r3
 8007670:	fb0a 330b 	mla	r3, sl, fp, r3
 8007674:	443b      	add	r3, r7
 8007676:	f8d9 7000 	ldr.w	r7, [r9]
 800767a:	0c12      	lsrs	r2, r2, #16
 800767c:	0c3f      	lsrs	r7, r7, #16
 800767e:	fb0a 7202 	mla	r2, sl, r2, r7
 8007682:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007686:	b29b      	uxth	r3, r3
 8007688:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800768c:	4565      	cmp	r5, ip
 800768e:	f849 3b04 	str.w	r3, [r9], #4
 8007692:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007696:	d8e4      	bhi.n	8007662 <__multiply+0xaa>
 8007698:	9b01      	ldr	r3, [sp, #4]
 800769a:	50e7      	str	r7, [r4, r3]
 800769c:	9b03      	ldr	r3, [sp, #12]
 800769e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80076a2:	3104      	adds	r1, #4
 80076a4:	f1b9 0f00 	cmp.w	r9, #0
 80076a8:	d020      	beq.n	80076ec <__multiply+0x134>
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	4647      	mov	r7, r8
 80076ae:	46a4      	mov	ip, r4
 80076b0:	f04f 0a00 	mov.w	sl, #0
 80076b4:	f8b7 b000 	ldrh.w	fp, [r7]
 80076b8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80076bc:	fb09 220b 	mla	r2, r9, fp, r2
 80076c0:	4452      	add	r2, sl
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076c8:	f84c 3b04 	str.w	r3, [ip], #4
 80076cc:	f857 3b04 	ldr.w	r3, [r7], #4
 80076d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076d4:	f8bc 3000 	ldrh.w	r3, [ip]
 80076d8:	fb09 330a 	mla	r3, r9, sl, r3
 80076dc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80076e0:	42bd      	cmp	r5, r7
 80076e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076e6:	d8e5      	bhi.n	80076b4 <__multiply+0xfc>
 80076e8:	9a01      	ldr	r2, [sp, #4]
 80076ea:	50a3      	str	r3, [r4, r2]
 80076ec:	3404      	adds	r4, #4
 80076ee:	e79f      	b.n	8007630 <__multiply+0x78>
 80076f0:	3e01      	subs	r6, #1
 80076f2:	e7a1      	b.n	8007638 <__multiply+0x80>
 80076f4:	08009d29 	.word	0x08009d29
 80076f8:	08009d3a 	.word	0x08009d3a

080076fc <__pow5mult>:
 80076fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007700:	4615      	mov	r5, r2
 8007702:	f012 0203 	ands.w	r2, r2, #3
 8007706:	4607      	mov	r7, r0
 8007708:	460e      	mov	r6, r1
 800770a:	d007      	beq.n	800771c <__pow5mult+0x20>
 800770c:	4c25      	ldr	r4, [pc, #148]	@ (80077a4 <__pow5mult+0xa8>)
 800770e:	3a01      	subs	r2, #1
 8007710:	2300      	movs	r3, #0
 8007712:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007716:	f7ff fe5d 	bl	80073d4 <__multadd>
 800771a:	4606      	mov	r6, r0
 800771c:	10ad      	asrs	r5, r5, #2
 800771e:	d03d      	beq.n	800779c <__pow5mult+0xa0>
 8007720:	69fc      	ldr	r4, [r7, #28]
 8007722:	b97c      	cbnz	r4, 8007744 <__pow5mult+0x48>
 8007724:	2010      	movs	r0, #16
 8007726:	f7ff fd3d 	bl	80071a4 <malloc>
 800772a:	4602      	mov	r2, r0
 800772c:	61f8      	str	r0, [r7, #28]
 800772e:	b928      	cbnz	r0, 800773c <__pow5mult+0x40>
 8007730:	4b1d      	ldr	r3, [pc, #116]	@ (80077a8 <__pow5mult+0xac>)
 8007732:	481e      	ldr	r0, [pc, #120]	@ (80077ac <__pow5mult+0xb0>)
 8007734:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007738:	f001 fb6e 	bl	8008e18 <__assert_func>
 800773c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007740:	6004      	str	r4, [r0, #0]
 8007742:	60c4      	str	r4, [r0, #12]
 8007744:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800774c:	b94c      	cbnz	r4, 8007762 <__pow5mult+0x66>
 800774e:	f240 2171 	movw	r1, #625	@ 0x271
 8007752:	4638      	mov	r0, r7
 8007754:	f7ff ff1a 	bl	800758c <__i2b>
 8007758:	2300      	movs	r3, #0
 800775a:	f8c8 0008 	str.w	r0, [r8, #8]
 800775e:	4604      	mov	r4, r0
 8007760:	6003      	str	r3, [r0, #0]
 8007762:	f04f 0900 	mov.w	r9, #0
 8007766:	07eb      	lsls	r3, r5, #31
 8007768:	d50a      	bpl.n	8007780 <__pow5mult+0x84>
 800776a:	4631      	mov	r1, r6
 800776c:	4622      	mov	r2, r4
 800776e:	4638      	mov	r0, r7
 8007770:	f7ff ff22 	bl	80075b8 <__multiply>
 8007774:	4631      	mov	r1, r6
 8007776:	4680      	mov	r8, r0
 8007778:	4638      	mov	r0, r7
 800777a:	f7ff fe09 	bl	8007390 <_Bfree>
 800777e:	4646      	mov	r6, r8
 8007780:	106d      	asrs	r5, r5, #1
 8007782:	d00b      	beq.n	800779c <__pow5mult+0xa0>
 8007784:	6820      	ldr	r0, [r4, #0]
 8007786:	b938      	cbnz	r0, 8007798 <__pow5mult+0x9c>
 8007788:	4622      	mov	r2, r4
 800778a:	4621      	mov	r1, r4
 800778c:	4638      	mov	r0, r7
 800778e:	f7ff ff13 	bl	80075b8 <__multiply>
 8007792:	6020      	str	r0, [r4, #0]
 8007794:	f8c0 9000 	str.w	r9, [r0]
 8007798:	4604      	mov	r4, r0
 800779a:	e7e4      	b.n	8007766 <__pow5mult+0x6a>
 800779c:	4630      	mov	r0, r6
 800779e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077a2:	bf00      	nop
 80077a4:	08009e4c 	.word	0x08009e4c
 80077a8:	08009cba 	.word	0x08009cba
 80077ac:	08009d3a 	.word	0x08009d3a

080077b0 <__lshift>:
 80077b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b4:	460c      	mov	r4, r1
 80077b6:	6849      	ldr	r1, [r1, #4]
 80077b8:	6923      	ldr	r3, [r4, #16]
 80077ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077be:	68a3      	ldr	r3, [r4, #8]
 80077c0:	4607      	mov	r7, r0
 80077c2:	4691      	mov	r9, r2
 80077c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077c8:	f108 0601 	add.w	r6, r8, #1
 80077cc:	42b3      	cmp	r3, r6
 80077ce:	db0b      	blt.n	80077e8 <__lshift+0x38>
 80077d0:	4638      	mov	r0, r7
 80077d2:	f7ff fd9d 	bl	8007310 <_Balloc>
 80077d6:	4605      	mov	r5, r0
 80077d8:	b948      	cbnz	r0, 80077ee <__lshift+0x3e>
 80077da:	4602      	mov	r2, r0
 80077dc:	4b28      	ldr	r3, [pc, #160]	@ (8007880 <__lshift+0xd0>)
 80077de:	4829      	ldr	r0, [pc, #164]	@ (8007884 <__lshift+0xd4>)
 80077e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80077e4:	f001 fb18 	bl	8008e18 <__assert_func>
 80077e8:	3101      	adds	r1, #1
 80077ea:	005b      	lsls	r3, r3, #1
 80077ec:	e7ee      	b.n	80077cc <__lshift+0x1c>
 80077ee:	2300      	movs	r3, #0
 80077f0:	f100 0114 	add.w	r1, r0, #20
 80077f4:	f100 0210 	add.w	r2, r0, #16
 80077f8:	4618      	mov	r0, r3
 80077fa:	4553      	cmp	r3, sl
 80077fc:	db33      	blt.n	8007866 <__lshift+0xb6>
 80077fe:	6920      	ldr	r0, [r4, #16]
 8007800:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007804:	f104 0314 	add.w	r3, r4, #20
 8007808:	f019 091f 	ands.w	r9, r9, #31
 800780c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007810:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007814:	d02b      	beq.n	800786e <__lshift+0xbe>
 8007816:	f1c9 0e20 	rsb	lr, r9, #32
 800781a:	468a      	mov	sl, r1
 800781c:	2200      	movs	r2, #0
 800781e:	6818      	ldr	r0, [r3, #0]
 8007820:	fa00 f009 	lsl.w	r0, r0, r9
 8007824:	4310      	orrs	r0, r2
 8007826:	f84a 0b04 	str.w	r0, [sl], #4
 800782a:	f853 2b04 	ldr.w	r2, [r3], #4
 800782e:	459c      	cmp	ip, r3
 8007830:	fa22 f20e 	lsr.w	r2, r2, lr
 8007834:	d8f3      	bhi.n	800781e <__lshift+0x6e>
 8007836:	ebac 0304 	sub.w	r3, ip, r4
 800783a:	3b15      	subs	r3, #21
 800783c:	f023 0303 	bic.w	r3, r3, #3
 8007840:	3304      	adds	r3, #4
 8007842:	f104 0015 	add.w	r0, r4, #21
 8007846:	4560      	cmp	r0, ip
 8007848:	bf88      	it	hi
 800784a:	2304      	movhi	r3, #4
 800784c:	50ca      	str	r2, [r1, r3]
 800784e:	b10a      	cbz	r2, 8007854 <__lshift+0xa4>
 8007850:	f108 0602 	add.w	r6, r8, #2
 8007854:	3e01      	subs	r6, #1
 8007856:	4638      	mov	r0, r7
 8007858:	612e      	str	r6, [r5, #16]
 800785a:	4621      	mov	r1, r4
 800785c:	f7ff fd98 	bl	8007390 <_Bfree>
 8007860:	4628      	mov	r0, r5
 8007862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007866:	f842 0f04 	str.w	r0, [r2, #4]!
 800786a:	3301      	adds	r3, #1
 800786c:	e7c5      	b.n	80077fa <__lshift+0x4a>
 800786e:	3904      	subs	r1, #4
 8007870:	f853 2b04 	ldr.w	r2, [r3], #4
 8007874:	f841 2f04 	str.w	r2, [r1, #4]!
 8007878:	459c      	cmp	ip, r3
 800787a:	d8f9      	bhi.n	8007870 <__lshift+0xc0>
 800787c:	e7ea      	b.n	8007854 <__lshift+0xa4>
 800787e:	bf00      	nop
 8007880:	08009d29 	.word	0x08009d29
 8007884:	08009d3a 	.word	0x08009d3a

08007888 <__mcmp>:
 8007888:	690a      	ldr	r2, [r1, #16]
 800788a:	4603      	mov	r3, r0
 800788c:	6900      	ldr	r0, [r0, #16]
 800788e:	1a80      	subs	r0, r0, r2
 8007890:	b530      	push	{r4, r5, lr}
 8007892:	d10e      	bne.n	80078b2 <__mcmp+0x2a>
 8007894:	3314      	adds	r3, #20
 8007896:	3114      	adds	r1, #20
 8007898:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800789c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80078a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80078a8:	4295      	cmp	r5, r2
 80078aa:	d003      	beq.n	80078b4 <__mcmp+0x2c>
 80078ac:	d205      	bcs.n	80078ba <__mcmp+0x32>
 80078ae:	f04f 30ff 	mov.w	r0, #4294967295
 80078b2:	bd30      	pop	{r4, r5, pc}
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	d3f3      	bcc.n	80078a0 <__mcmp+0x18>
 80078b8:	e7fb      	b.n	80078b2 <__mcmp+0x2a>
 80078ba:	2001      	movs	r0, #1
 80078bc:	e7f9      	b.n	80078b2 <__mcmp+0x2a>
	...

080078c0 <__mdiff>:
 80078c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	4689      	mov	r9, r1
 80078c6:	4606      	mov	r6, r0
 80078c8:	4611      	mov	r1, r2
 80078ca:	4648      	mov	r0, r9
 80078cc:	4614      	mov	r4, r2
 80078ce:	f7ff ffdb 	bl	8007888 <__mcmp>
 80078d2:	1e05      	subs	r5, r0, #0
 80078d4:	d112      	bne.n	80078fc <__mdiff+0x3c>
 80078d6:	4629      	mov	r1, r5
 80078d8:	4630      	mov	r0, r6
 80078da:	f7ff fd19 	bl	8007310 <_Balloc>
 80078de:	4602      	mov	r2, r0
 80078e0:	b928      	cbnz	r0, 80078ee <__mdiff+0x2e>
 80078e2:	4b3f      	ldr	r3, [pc, #252]	@ (80079e0 <__mdiff+0x120>)
 80078e4:	f240 2137 	movw	r1, #567	@ 0x237
 80078e8:	483e      	ldr	r0, [pc, #248]	@ (80079e4 <__mdiff+0x124>)
 80078ea:	f001 fa95 	bl	8008e18 <__assert_func>
 80078ee:	2301      	movs	r3, #1
 80078f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078f4:	4610      	mov	r0, r2
 80078f6:	b003      	add	sp, #12
 80078f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fc:	bfbc      	itt	lt
 80078fe:	464b      	movlt	r3, r9
 8007900:	46a1      	movlt	r9, r4
 8007902:	4630      	mov	r0, r6
 8007904:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007908:	bfba      	itte	lt
 800790a:	461c      	movlt	r4, r3
 800790c:	2501      	movlt	r5, #1
 800790e:	2500      	movge	r5, #0
 8007910:	f7ff fcfe 	bl	8007310 <_Balloc>
 8007914:	4602      	mov	r2, r0
 8007916:	b918      	cbnz	r0, 8007920 <__mdiff+0x60>
 8007918:	4b31      	ldr	r3, [pc, #196]	@ (80079e0 <__mdiff+0x120>)
 800791a:	f240 2145 	movw	r1, #581	@ 0x245
 800791e:	e7e3      	b.n	80078e8 <__mdiff+0x28>
 8007920:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007924:	6926      	ldr	r6, [r4, #16]
 8007926:	60c5      	str	r5, [r0, #12]
 8007928:	f109 0310 	add.w	r3, r9, #16
 800792c:	f109 0514 	add.w	r5, r9, #20
 8007930:	f104 0e14 	add.w	lr, r4, #20
 8007934:	f100 0b14 	add.w	fp, r0, #20
 8007938:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800793c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	46d9      	mov	r9, fp
 8007944:	f04f 0c00 	mov.w	ip, #0
 8007948:	9b01      	ldr	r3, [sp, #4]
 800794a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800794e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007952:	9301      	str	r3, [sp, #4]
 8007954:	fa1f f38a 	uxth.w	r3, sl
 8007958:	4619      	mov	r1, r3
 800795a:	b283      	uxth	r3, r0
 800795c:	1acb      	subs	r3, r1, r3
 800795e:	0c00      	lsrs	r0, r0, #16
 8007960:	4463      	add	r3, ip
 8007962:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007966:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800796a:	b29b      	uxth	r3, r3
 800796c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007970:	4576      	cmp	r6, lr
 8007972:	f849 3b04 	str.w	r3, [r9], #4
 8007976:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800797a:	d8e5      	bhi.n	8007948 <__mdiff+0x88>
 800797c:	1b33      	subs	r3, r6, r4
 800797e:	3b15      	subs	r3, #21
 8007980:	f023 0303 	bic.w	r3, r3, #3
 8007984:	3415      	adds	r4, #21
 8007986:	3304      	adds	r3, #4
 8007988:	42a6      	cmp	r6, r4
 800798a:	bf38      	it	cc
 800798c:	2304      	movcc	r3, #4
 800798e:	441d      	add	r5, r3
 8007990:	445b      	add	r3, fp
 8007992:	461e      	mov	r6, r3
 8007994:	462c      	mov	r4, r5
 8007996:	4544      	cmp	r4, r8
 8007998:	d30e      	bcc.n	80079b8 <__mdiff+0xf8>
 800799a:	f108 0103 	add.w	r1, r8, #3
 800799e:	1b49      	subs	r1, r1, r5
 80079a0:	f021 0103 	bic.w	r1, r1, #3
 80079a4:	3d03      	subs	r5, #3
 80079a6:	45a8      	cmp	r8, r5
 80079a8:	bf38      	it	cc
 80079aa:	2100      	movcc	r1, #0
 80079ac:	440b      	add	r3, r1
 80079ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079b2:	b191      	cbz	r1, 80079da <__mdiff+0x11a>
 80079b4:	6117      	str	r7, [r2, #16]
 80079b6:	e79d      	b.n	80078f4 <__mdiff+0x34>
 80079b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80079bc:	46e6      	mov	lr, ip
 80079be:	0c08      	lsrs	r0, r1, #16
 80079c0:	fa1c fc81 	uxtah	ip, ip, r1
 80079c4:	4471      	add	r1, lr
 80079c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80079ca:	b289      	uxth	r1, r1
 80079cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80079d0:	f846 1b04 	str.w	r1, [r6], #4
 80079d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80079d8:	e7dd      	b.n	8007996 <__mdiff+0xd6>
 80079da:	3f01      	subs	r7, #1
 80079dc:	e7e7      	b.n	80079ae <__mdiff+0xee>
 80079de:	bf00      	nop
 80079e0:	08009d29 	.word	0x08009d29
 80079e4:	08009d3a 	.word	0x08009d3a

080079e8 <__ulp>:
 80079e8:	b082      	sub	sp, #8
 80079ea:	ed8d 0b00 	vstr	d0, [sp]
 80079ee:	9a01      	ldr	r2, [sp, #4]
 80079f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007a30 <__ulp+0x48>)
 80079f2:	4013      	ands	r3, r2
 80079f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	dc08      	bgt.n	8007a0e <__ulp+0x26>
 80079fc:	425b      	negs	r3, r3
 80079fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007a02:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a06:	da04      	bge.n	8007a12 <__ulp+0x2a>
 8007a08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007a0c:	4113      	asrs	r3, r2
 8007a0e:	2200      	movs	r2, #0
 8007a10:	e008      	b.n	8007a24 <__ulp+0x3c>
 8007a12:	f1a2 0314 	sub.w	r3, r2, #20
 8007a16:	2b1e      	cmp	r3, #30
 8007a18:	bfda      	itte	le
 8007a1a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007a1e:	40da      	lsrle	r2, r3
 8007a20:	2201      	movgt	r2, #1
 8007a22:	2300      	movs	r3, #0
 8007a24:	4619      	mov	r1, r3
 8007a26:	4610      	mov	r0, r2
 8007a28:	ec41 0b10 	vmov	d0, r0, r1
 8007a2c:	b002      	add	sp, #8
 8007a2e:	4770      	bx	lr
 8007a30:	7ff00000 	.word	0x7ff00000

08007a34 <__b2d>:
 8007a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a38:	6906      	ldr	r6, [r0, #16]
 8007a3a:	f100 0814 	add.w	r8, r0, #20
 8007a3e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007a42:	1f37      	subs	r7, r6, #4
 8007a44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007a48:	4610      	mov	r0, r2
 8007a4a:	f7ff fd53 	bl	80074f4 <__hi0bits>
 8007a4e:	f1c0 0320 	rsb	r3, r0, #32
 8007a52:	280a      	cmp	r0, #10
 8007a54:	600b      	str	r3, [r1, #0]
 8007a56:	491b      	ldr	r1, [pc, #108]	@ (8007ac4 <__b2d+0x90>)
 8007a58:	dc15      	bgt.n	8007a86 <__b2d+0x52>
 8007a5a:	f1c0 0c0b 	rsb	ip, r0, #11
 8007a5e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007a62:	45b8      	cmp	r8, r7
 8007a64:	ea43 0501 	orr.w	r5, r3, r1
 8007a68:	bf34      	ite	cc
 8007a6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007a6e:	2300      	movcs	r3, #0
 8007a70:	3015      	adds	r0, #21
 8007a72:	fa02 f000 	lsl.w	r0, r2, r0
 8007a76:	fa23 f30c 	lsr.w	r3, r3, ip
 8007a7a:	4303      	orrs	r3, r0
 8007a7c:	461c      	mov	r4, r3
 8007a7e:	ec45 4b10 	vmov	d0, r4, r5
 8007a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a86:	45b8      	cmp	r8, r7
 8007a88:	bf3a      	itte	cc
 8007a8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007a8e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007a92:	2300      	movcs	r3, #0
 8007a94:	380b      	subs	r0, #11
 8007a96:	d012      	beq.n	8007abe <__b2d+0x8a>
 8007a98:	f1c0 0120 	rsb	r1, r0, #32
 8007a9c:	fa23 f401 	lsr.w	r4, r3, r1
 8007aa0:	4082      	lsls	r2, r0
 8007aa2:	4322      	orrs	r2, r4
 8007aa4:	4547      	cmp	r7, r8
 8007aa6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007aaa:	bf8c      	ite	hi
 8007aac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007ab0:	2200      	movls	r2, #0
 8007ab2:	4083      	lsls	r3, r0
 8007ab4:	40ca      	lsrs	r2, r1
 8007ab6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007aba:	4313      	orrs	r3, r2
 8007abc:	e7de      	b.n	8007a7c <__b2d+0x48>
 8007abe:	ea42 0501 	orr.w	r5, r2, r1
 8007ac2:	e7db      	b.n	8007a7c <__b2d+0x48>
 8007ac4:	3ff00000 	.word	0x3ff00000

08007ac8 <__d2b>:
 8007ac8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007acc:	460f      	mov	r7, r1
 8007ace:	2101      	movs	r1, #1
 8007ad0:	ec59 8b10 	vmov	r8, r9, d0
 8007ad4:	4616      	mov	r6, r2
 8007ad6:	f7ff fc1b 	bl	8007310 <_Balloc>
 8007ada:	4604      	mov	r4, r0
 8007adc:	b930      	cbnz	r0, 8007aec <__d2b+0x24>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	4b23      	ldr	r3, [pc, #140]	@ (8007b70 <__d2b+0xa8>)
 8007ae2:	4824      	ldr	r0, [pc, #144]	@ (8007b74 <__d2b+0xac>)
 8007ae4:	f240 310f 	movw	r1, #783	@ 0x30f
 8007ae8:	f001 f996 	bl	8008e18 <__assert_func>
 8007aec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007af0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007af4:	b10d      	cbz	r5, 8007afa <__d2b+0x32>
 8007af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	f1b8 0300 	subs.w	r3, r8, #0
 8007b00:	d023      	beq.n	8007b4a <__d2b+0x82>
 8007b02:	4668      	mov	r0, sp
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	f7ff fd14 	bl	8007532 <__lo0bits>
 8007b0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b0e:	b1d0      	cbz	r0, 8007b46 <__d2b+0x7e>
 8007b10:	f1c0 0320 	rsb	r3, r0, #32
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	40c2      	lsrs	r2, r0
 8007b1c:	6163      	str	r3, [r4, #20]
 8007b1e:	9201      	str	r2, [sp, #4]
 8007b20:	9b01      	ldr	r3, [sp, #4]
 8007b22:	61a3      	str	r3, [r4, #24]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	bf0c      	ite	eq
 8007b28:	2201      	moveq	r2, #1
 8007b2a:	2202      	movne	r2, #2
 8007b2c:	6122      	str	r2, [r4, #16]
 8007b2e:	b1a5      	cbz	r5, 8007b5a <__d2b+0x92>
 8007b30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b34:	4405      	add	r5, r0
 8007b36:	603d      	str	r5, [r7, #0]
 8007b38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b3c:	6030      	str	r0, [r6, #0]
 8007b3e:	4620      	mov	r0, r4
 8007b40:	b003      	add	sp, #12
 8007b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b46:	6161      	str	r1, [r4, #20]
 8007b48:	e7ea      	b.n	8007b20 <__d2b+0x58>
 8007b4a:	a801      	add	r0, sp, #4
 8007b4c:	f7ff fcf1 	bl	8007532 <__lo0bits>
 8007b50:	9b01      	ldr	r3, [sp, #4]
 8007b52:	6163      	str	r3, [r4, #20]
 8007b54:	3020      	adds	r0, #32
 8007b56:	2201      	movs	r2, #1
 8007b58:	e7e8      	b.n	8007b2c <__d2b+0x64>
 8007b5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007b62:	6038      	str	r0, [r7, #0]
 8007b64:	6918      	ldr	r0, [r3, #16]
 8007b66:	f7ff fcc5 	bl	80074f4 <__hi0bits>
 8007b6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b6e:	e7e5      	b.n	8007b3c <__d2b+0x74>
 8007b70:	08009d29 	.word	0x08009d29
 8007b74:	08009d3a 	.word	0x08009d3a

08007b78 <__ratio>:
 8007b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7c:	b085      	sub	sp, #20
 8007b7e:	e9cd 1000 	strd	r1, r0, [sp]
 8007b82:	a902      	add	r1, sp, #8
 8007b84:	f7ff ff56 	bl	8007a34 <__b2d>
 8007b88:	9800      	ldr	r0, [sp, #0]
 8007b8a:	a903      	add	r1, sp, #12
 8007b8c:	ec55 4b10 	vmov	r4, r5, d0
 8007b90:	f7ff ff50 	bl	8007a34 <__b2d>
 8007b94:	9b01      	ldr	r3, [sp, #4]
 8007b96:	6919      	ldr	r1, [r3, #16]
 8007b98:	9b00      	ldr	r3, [sp, #0]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	1ac9      	subs	r1, r1, r3
 8007b9e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007ba2:	1a9b      	subs	r3, r3, r2
 8007ba4:	ec5b ab10 	vmov	sl, fp, d0
 8007ba8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	bfce      	itee	gt
 8007bb0:	462a      	movgt	r2, r5
 8007bb2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007bb6:	465a      	movle	r2, fp
 8007bb8:	462f      	mov	r7, r5
 8007bba:	46d9      	mov	r9, fp
 8007bbc:	bfcc      	ite	gt
 8007bbe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007bc2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007bc6:	464b      	mov	r3, r9
 8007bc8:	4652      	mov	r2, sl
 8007bca:	4620      	mov	r0, r4
 8007bcc:	4639      	mov	r1, r7
 8007bce:	f7f8 fe4d 	bl	800086c <__aeabi_ddiv>
 8007bd2:	ec41 0b10 	vmov	d0, r0, r1
 8007bd6:	b005      	add	sp, #20
 8007bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bdc <__copybits>:
 8007bdc:	3901      	subs	r1, #1
 8007bde:	b570      	push	{r4, r5, r6, lr}
 8007be0:	1149      	asrs	r1, r1, #5
 8007be2:	6914      	ldr	r4, [r2, #16]
 8007be4:	3101      	adds	r1, #1
 8007be6:	f102 0314 	add.w	r3, r2, #20
 8007bea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007bee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007bf2:	1f05      	subs	r5, r0, #4
 8007bf4:	42a3      	cmp	r3, r4
 8007bf6:	d30c      	bcc.n	8007c12 <__copybits+0x36>
 8007bf8:	1aa3      	subs	r3, r4, r2
 8007bfa:	3b11      	subs	r3, #17
 8007bfc:	f023 0303 	bic.w	r3, r3, #3
 8007c00:	3211      	adds	r2, #17
 8007c02:	42a2      	cmp	r2, r4
 8007c04:	bf88      	it	hi
 8007c06:	2300      	movhi	r3, #0
 8007c08:	4418      	add	r0, r3
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	4288      	cmp	r0, r1
 8007c0e:	d305      	bcc.n	8007c1c <__copybits+0x40>
 8007c10:	bd70      	pop	{r4, r5, r6, pc}
 8007c12:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c16:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c1a:	e7eb      	b.n	8007bf4 <__copybits+0x18>
 8007c1c:	f840 3b04 	str.w	r3, [r0], #4
 8007c20:	e7f4      	b.n	8007c0c <__copybits+0x30>

08007c22 <__any_on>:
 8007c22:	f100 0214 	add.w	r2, r0, #20
 8007c26:	6900      	ldr	r0, [r0, #16]
 8007c28:	114b      	asrs	r3, r1, #5
 8007c2a:	4298      	cmp	r0, r3
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	db11      	blt.n	8007c54 <__any_on+0x32>
 8007c30:	dd0a      	ble.n	8007c48 <__any_on+0x26>
 8007c32:	f011 011f 	ands.w	r1, r1, #31
 8007c36:	d007      	beq.n	8007c48 <__any_on+0x26>
 8007c38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007c3c:	fa24 f001 	lsr.w	r0, r4, r1
 8007c40:	fa00 f101 	lsl.w	r1, r0, r1
 8007c44:	428c      	cmp	r4, r1
 8007c46:	d10b      	bne.n	8007c60 <__any_on+0x3e>
 8007c48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d803      	bhi.n	8007c58 <__any_on+0x36>
 8007c50:	2000      	movs	r0, #0
 8007c52:	bd10      	pop	{r4, pc}
 8007c54:	4603      	mov	r3, r0
 8007c56:	e7f7      	b.n	8007c48 <__any_on+0x26>
 8007c58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c5c:	2900      	cmp	r1, #0
 8007c5e:	d0f5      	beq.n	8007c4c <__any_on+0x2a>
 8007c60:	2001      	movs	r0, #1
 8007c62:	e7f6      	b.n	8007c52 <__any_on+0x30>

08007c64 <sulp>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	4604      	mov	r4, r0
 8007c68:	460d      	mov	r5, r1
 8007c6a:	ec45 4b10 	vmov	d0, r4, r5
 8007c6e:	4616      	mov	r6, r2
 8007c70:	f7ff feba 	bl	80079e8 <__ulp>
 8007c74:	ec51 0b10 	vmov	r0, r1, d0
 8007c78:	b17e      	cbz	r6, 8007c9a <sulp+0x36>
 8007c7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007c7e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	dd09      	ble.n	8007c9a <sulp+0x36>
 8007c86:	051b      	lsls	r3, r3, #20
 8007c88:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007c8c:	2400      	movs	r4, #0
 8007c8e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007c92:	4622      	mov	r2, r4
 8007c94:	462b      	mov	r3, r5
 8007c96:	f7f8 fcbf 	bl	8000618 <__aeabi_dmul>
 8007c9a:	ec41 0b10 	vmov	d0, r0, r1
 8007c9e:	bd70      	pop	{r4, r5, r6, pc}

08007ca0 <_strtod_l>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	b09f      	sub	sp, #124	@ 0x7c
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007caa:	2200      	movs	r2, #0
 8007cac:	921a      	str	r2, [sp, #104]	@ 0x68
 8007cae:	9005      	str	r0, [sp, #20]
 8007cb0:	f04f 0a00 	mov.w	sl, #0
 8007cb4:	f04f 0b00 	mov.w	fp, #0
 8007cb8:	460a      	mov	r2, r1
 8007cba:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cbc:	7811      	ldrb	r1, [r2, #0]
 8007cbe:	292b      	cmp	r1, #43	@ 0x2b
 8007cc0:	d04a      	beq.n	8007d58 <_strtod_l+0xb8>
 8007cc2:	d838      	bhi.n	8007d36 <_strtod_l+0x96>
 8007cc4:	290d      	cmp	r1, #13
 8007cc6:	d832      	bhi.n	8007d2e <_strtod_l+0x8e>
 8007cc8:	2908      	cmp	r1, #8
 8007cca:	d832      	bhi.n	8007d32 <_strtod_l+0x92>
 8007ccc:	2900      	cmp	r1, #0
 8007cce:	d03b      	beq.n	8007d48 <_strtod_l+0xa8>
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007cd6:	782a      	ldrb	r2, [r5, #0]
 8007cd8:	2a30      	cmp	r2, #48	@ 0x30
 8007cda:	f040 80b2 	bne.w	8007e42 <_strtod_l+0x1a2>
 8007cde:	786a      	ldrb	r2, [r5, #1]
 8007ce0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ce4:	2a58      	cmp	r2, #88	@ 0x58
 8007ce6:	d16e      	bne.n	8007dc6 <_strtod_l+0x126>
 8007ce8:	9302      	str	r3, [sp, #8]
 8007cea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cec:	9301      	str	r3, [sp, #4]
 8007cee:	ab1a      	add	r3, sp, #104	@ 0x68
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	4a8f      	ldr	r2, [pc, #572]	@ (8007f30 <_strtod_l+0x290>)
 8007cf4:	9805      	ldr	r0, [sp, #20]
 8007cf6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007cf8:	a919      	add	r1, sp, #100	@ 0x64
 8007cfa:	f001 f927 	bl	8008f4c <__gethex>
 8007cfe:	f010 060f 	ands.w	r6, r0, #15
 8007d02:	4604      	mov	r4, r0
 8007d04:	d005      	beq.n	8007d12 <_strtod_l+0x72>
 8007d06:	2e06      	cmp	r6, #6
 8007d08:	d128      	bne.n	8007d5c <_strtod_l+0xbc>
 8007d0a:	3501      	adds	r5, #1
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007d10:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f040 858e 	bne.w	8008836 <_strtod_l+0xb96>
 8007d1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d1c:	b1cb      	cbz	r3, 8007d52 <_strtod_l+0xb2>
 8007d1e:	4652      	mov	r2, sl
 8007d20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007d24:	ec43 2b10 	vmov	d0, r2, r3
 8007d28:	b01f      	add	sp, #124	@ 0x7c
 8007d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d2e:	2920      	cmp	r1, #32
 8007d30:	d1ce      	bne.n	8007cd0 <_strtod_l+0x30>
 8007d32:	3201      	adds	r2, #1
 8007d34:	e7c1      	b.n	8007cba <_strtod_l+0x1a>
 8007d36:	292d      	cmp	r1, #45	@ 0x2d
 8007d38:	d1ca      	bne.n	8007cd0 <_strtod_l+0x30>
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	910e      	str	r1, [sp, #56]	@ 0x38
 8007d3e:	1c51      	adds	r1, r2, #1
 8007d40:	9119      	str	r1, [sp, #100]	@ 0x64
 8007d42:	7852      	ldrb	r2, [r2, #1]
 8007d44:	2a00      	cmp	r2, #0
 8007d46:	d1c5      	bne.n	8007cd4 <_strtod_l+0x34>
 8007d48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d4a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f040 8570 	bne.w	8008832 <_strtod_l+0xb92>
 8007d52:	4652      	mov	r2, sl
 8007d54:	465b      	mov	r3, fp
 8007d56:	e7e5      	b.n	8007d24 <_strtod_l+0x84>
 8007d58:	2100      	movs	r1, #0
 8007d5a:	e7ef      	b.n	8007d3c <_strtod_l+0x9c>
 8007d5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007d5e:	b13a      	cbz	r2, 8007d70 <_strtod_l+0xd0>
 8007d60:	2135      	movs	r1, #53	@ 0x35
 8007d62:	a81c      	add	r0, sp, #112	@ 0x70
 8007d64:	f7ff ff3a 	bl	8007bdc <__copybits>
 8007d68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d6a:	9805      	ldr	r0, [sp, #20]
 8007d6c:	f7ff fb10 	bl	8007390 <_Bfree>
 8007d70:	3e01      	subs	r6, #1
 8007d72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007d74:	2e04      	cmp	r6, #4
 8007d76:	d806      	bhi.n	8007d86 <_strtod_l+0xe6>
 8007d78:	e8df f006 	tbb	[pc, r6]
 8007d7c:	201d0314 	.word	0x201d0314
 8007d80:	14          	.byte	0x14
 8007d81:	00          	.byte	0x00
 8007d82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007d86:	05e1      	lsls	r1, r4, #23
 8007d88:	bf48      	it	mi
 8007d8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007d8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d92:	0d1b      	lsrs	r3, r3, #20
 8007d94:	051b      	lsls	r3, r3, #20
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1bb      	bne.n	8007d12 <_strtod_l+0x72>
 8007d9a:	f7fe fb2b 	bl	80063f4 <__errno>
 8007d9e:	2322      	movs	r3, #34	@ 0x22
 8007da0:	6003      	str	r3, [r0, #0]
 8007da2:	e7b6      	b.n	8007d12 <_strtod_l+0x72>
 8007da4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007da8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007dac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007db0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007db4:	e7e7      	b.n	8007d86 <_strtod_l+0xe6>
 8007db6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007f38 <_strtod_l+0x298>
 8007dba:	e7e4      	b.n	8007d86 <_strtod_l+0xe6>
 8007dbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007dc0:	f04f 3aff 	mov.w	sl, #4294967295
 8007dc4:	e7df      	b.n	8007d86 <_strtod_l+0xe6>
 8007dc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dcc:	785b      	ldrb	r3, [r3, #1]
 8007dce:	2b30      	cmp	r3, #48	@ 0x30
 8007dd0:	d0f9      	beq.n	8007dc6 <_strtod_l+0x126>
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d09d      	beq.n	8007d12 <_strtod_l+0x72>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	2700      	movs	r7, #0
 8007dda:	9308      	str	r3, [sp, #32]
 8007ddc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dde:	930c      	str	r3, [sp, #48]	@ 0x30
 8007de0:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007de2:	46b9      	mov	r9, r7
 8007de4:	220a      	movs	r2, #10
 8007de6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007de8:	7805      	ldrb	r5, [r0, #0]
 8007dea:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007dee:	b2d9      	uxtb	r1, r3
 8007df0:	2909      	cmp	r1, #9
 8007df2:	d928      	bls.n	8007e46 <_strtod_l+0x1a6>
 8007df4:	494f      	ldr	r1, [pc, #316]	@ (8007f34 <_strtod_l+0x294>)
 8007df6:	2201      	movs	r2, #1
 8007df8:	f000 ffd6 	bl	8008da8 <strncmp>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d032      	beq.n	8007e66 <_strtod_l+0x1c6>
 8007e00:	2000      	movs	r0, #0
 8007e02:	462a      	mov	r2, r5
 8007e04:	900a      	str	r0, [sp, #40]	@ 0x28
 8007e06:	464d      	mov	r5, r9
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2a65      	cmp	r2, #101	@ 0x65
 8007e0c:	d001      	beq.n	8007e12 <_strtod_l+0x172>
 8007e0e:	2a45      	cmp	r2, #69	@ 0x45
 8007e10:	d114      	bne.n	8007e3c <_strtod_l+0x19c>
 8007e12:	b91d      	cbnz	r5, 8007e1c <_strtod_l+0x17c>
 8007e14:	9a08      	ldr	r2, [sp, #32]
 8007e16:	4302      	orrs	r2, r0
 8007e18:	d096      	beq.n	8007d48 <_strtod_l+0xa8>
 8007e1a:	2500      	movs	r5, #0
 8007e1c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007e1e:	1c62      	adds	r2, r4, #1
 8007e20:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e22:	7862      	ldrb	r2, [r4, #1]
 8007e24:	2a2b      	cmp	r2, #43	@ 0x2b
 8007e26:	d07a      	beq.n	8007f1e <_strtod_l+0x27e>
 8007e28:	2a2d      	cmp	r2, #45	@ 0x2d
 8007e2a:	d07e      	beq.n	8007f2a <_strtod_l+0x28a>
 8007e2c:	f04f 0c00 	mov.w	ip, #0
 8007e30:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007e34:	2909      	cmp	r1, #9
 8007e36:	f240 8085 	bls.w	8007f44 <_strtod_l+0x2a4>
 8007e3a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007e3c:	f04f 0800 	mov.w	r8, #0
 8007e40:	e0a5      	b.n	8007f8e <_strtod_l+0x2ee>
 8007e42:	2300      	movs	r3, #0
 8007e44:	e7c8      	b.n	8007dd8 <_strtod_l+0x138>
 8007e46:	f1b9 0f08 	cmp.w	r9, #8
 8007e4a:	bfd8      	it	le
 8007e4c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007e4e:	f100 0001 	add.w	r0, r0, #1
 8007e52:	bfda      	itte	le
 8007e54:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e58:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007e5a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007e5e:	f109 0901 	add.w	r9, r9, #1
 8007e62:	9019      	str	r0, [sp, #100]	@ 0x64
 8007e64:	e7bf      	b.n	8007de6 <_strtod_l+0x146>
 8007e66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e68:	1c5a      	adds	r2, r3, #1
 8007e6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e6c:	785a      	ldrb	r2, [r3, #1]
 8007e6e:	f1b9 0f00 	cmp.w	r9, #0
 8007e72:	d03b      	beq.n	8007eec <_strtod_l+0x24c>
 8007e74:	900a      	str	r0, [sp, #40]	@ 0x28
 8007e76:	464d      	mov	r5, r9
 8007e78:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007e7c:	2b09      	cmp	r3, #9
 8007e7e:	d912      	bls.n	8007ea6 <_strtod_l+0x206>
 8007e80:	2301      	movs	r3, #1
 8007e82:	e7c2      	b.n	8007e0a <_strtod_l+0x16a>
 8007e84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e8a:	785a      	ldrb	r2, [r3, #1]
 8007e8c:	3001      	adds	r0, #1
 8007e8e:	2a30      	cmp	r2, #48	@ 0x30
 8007e90:	d0f8      	beq.n	8007e84 <_strtod_l+0x1e4>
 8007e92:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	f200 84d2 	bhi.w	8008840 <_strtod_l+0xba0>
 8007e9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e9e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	930c      	str	r3, [sp, #48]	@ 0x30
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	3a30      	subs	r2, #48	@ 0x30
 8007ea8:	f100 0301 	add.w	r3, r0, #1
 8007eac:	d018      	beq.n	8007ee0 <_strtod_l+0x240>
 8007eae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007eb0:	4419      	add	r1, r3
 8007eb2:	910a      	str	r1, [sp, #40]	@ 0x28
 8007eb4:	462e      	mov	r6, r5
 8007eb6:	f04f 0e0a 	mov.w	lr, #10
 8007eba:	1c71      	adds	r1, r6, #1
 8007ebc:	eba1 0c05 	sub.w	ip, r1, r5
 8007ec0:	4563      	cmp	r3, ip
 8007ec2:	dc15      	bgt.n	8007ef0 <_strtod_l+0x250>
 8007ec4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007ec8:	182b      	adds	r3, r5, r0
 8007eca:	2b08      	cmp	r3, #8
 8007ecc:	f105 0501 	add.w	r5, r5, #1
 8007ed0:	4405      	add	r5, r0
 8007ed2:	dc1a      	bgt.n	8007f0a <_strtod_l+0x26a>
 8007ed4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ed6:	230a      	movs	r3, #10
 8007ed8:	fb03 2301 	mla	r3, r3, r1, r2
 8007edc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ede:	2300      	movs	r3, #0
 8007ee0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007ee2:	1c51      	adds	r1, r2, #1
 8007ee4:	9119      	str	r1, [sp, #100]	@ 0x64
 8007ee6:	7852      	ldrb	r2, [r2, #1]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	e7c5      	b.n	8007e78 <_strtod_l+0x1d8>
 8007eec:	4648      	mov	r0, r9
 8007eee:	e7ce      	b.n	8007e8e <_strtod_l+0x1ee>
 8007ef0:	2e08      	cmp	r6, #8
 8007ef2:	dc05      	bgt.n	8007f00 <_strtod_l+0x260>
 8007ef4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007ef6:	fb0e f606 	mul.w	r6, lr, r6
 8007efa:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007efc:	460e      	mov	r6, r1
 8007efe:	e7dc      	b.n	8007eba <_strtod_l+0x21a>
 8007f00:	2910      	cmp	r1, #16
 8007f02:	bfd8      	it	le
 8007f04:	fb0e f707 	mulle.w	r7, lr, r7
 8007f08:	e7f8      	b.n	8007efc <_strtod_l+0x25c>
 8007f0a:	2b0f      	cmp	r3, #15
 8007f0c:	bfdc      	itt	le
 8007f0e:	230a      	movle	r3, #10
 8007f10:	fb03 2707 	mlale	r7, r3, r7, r2
 8007f14:	e7e3      	b.n	8007ede <_strtod_l+0x23e>
 8007f16:	2300      	movs	r3, #0
 8007f18:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e77a      	b.n	8007e14 <_strtod_l+0x174>
 8007f1e:	f04f 0c00 	mov.w	ip, #0
 8007f22:	1ca2      	adds	r2, r4, #2
 8007f24:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f26:	78a2      	ldrb	r2, [r4, #2]
 8007f28:	e782      	b.n	8007e30 <_strtod_l+0x190>
 8007f2a:	f04f 0c01 	mov.w	ip, #1
 8007f2e:	e7f8      	b.n	8007f22 <_strtod_l+0x282>
 8007f30:	08009f5c 	.word	0x08009f5c
 8007f34:	08009d93 	.word	0x08009d93
 8007f38:	7ff00000 	.word	0x7ff00000
 8007f3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f3e:	1c51      	adds	r1, r2, #1
 8007f40:	9119      	str	r1, [sp, #100]	@ 0x64
 8007f42:	7852      	ldrb	r2, [r2, #1]
 8007f44:	2a30      	cmp	r2, #48	@ 0x30
 8007f46:	d0f9      	beq.n	8007f3c <_strtod_l+0x29c>
 8007f48:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007f4c:	2908      	cmp	r1, #8
 8007f4e:	f63f af75 	bhi.w	8007e3c <_strtod_l+0x19c>
 8007f52:	3a30      	subs	r2, #48	@ 0x30
 8007f54:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f58:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007f5a:	f04f 080a 	mov.w	r8, #10
 8007f5e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f60:	1c56      	adds	r6, r2, #1
 8007f62:	9619      	str	r6, [sp, #100]	@ 0x64
 8007f64:	7852      	ldrb	r2, [r2, #1]
 8007f66:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007f6a:	f1be 0f09 	cmp.w	lr, #9
 8007f6e:	d939      	bls.n	8007fe4 <_strtod_l+0x344>
 8007f70:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007f72:	1a76      	subs	r6, r6, r1
 8007f74:	2e08      	cmp	r6, #8
 8007f76:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007f7a:	dc03      	bgt.n	8007f84 <_strtod_l+0x2e4>
 8007f7c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f7e:	4588      	cmp	r8, r1
 8007f80:	bfa8      	it	ge
 8007f82:	4688      	movge	r8, r1
 8007f84:	f1bc 0f00 	cmp.w	ip, #0
 8007f88:	d001      	beq.n	8007f8e <_strtod_l+0x2ee>
 8007f8a:	f1c8 0800 	rsb	r8, r8, #0
 8007f8e:	2d00      	cmp	r5, #0
 8007f90:	d14e      	bne.n	8008030 <_strtod_l+0x390>
 8007f92:	9908      	ldr	r1, [sp, #32]
 8007f94:	4308      	orrs	r0, r1
 8007f96:	f47f aebc 	bne.w	8007d12 <_strtod_l+0x72>
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f47f aed4 	bne.w	8007d48 <_strtod_l+0xa8>
 8007fa0:	2a69      	cmp	r2, #105	@ 0x69
 8007fa2:	d028      	beq.n	8007ff6 <_strtod_l+0x356>
 8007fa4:	dc25      	bgt.n	8007ff2 <_strtod_l+0x352>
 8007fa6:	2a49      	cmp	r2, #73	@ 0x49
 8007fa8:	d025      	beq.n	8007ff6 <_strtod_l+0x356>
 8007faa:	2a4e      	cmp	r2, #78	@ 0x4e
 8007fac:	f47f aecc 	bne.w	8007d48 <_strtod_l+0xa8>
 8007fb0:	499a      	ldr	r1, [pc, #616]	@ (800821c <_strtod_l+0x57c>)
 8007fb2:	a819      	add	r0, sp, #100	@ 0x64
 8007fb4:	f001 f9ec 	bl	8009390 <__match>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	f43f aec5 	beq.w	8007d48 <_strtod_l+0xa8>
 8007fbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b28      	cmp	r3, #40	@ 0x28
 8007fc4:	d12e      	bne.n	8008024 <_strtod_l+0x384>
 8007fc6:	4996      	ldr	r1, [pc, #600]	@ (8008220 <_strtod_l+0x580>)
 8007fc8:	aa1c      	add	r2, sp, #112	@ 0x70
 8007fca:	a819      	add	r0, sp, #100	@ 0x64
 8007fcc:	f001 f9f4 	bl	80093b8 <__hexnan>
 8007fd0:	2805      	cmp	r0, #5
 8007fd2:	d127      	bne.n	8008024 <_strtod_l+0x384>
 8007fd4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007fd6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007fda:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007fde:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007fe2:	e696      	b.n	8007d12 <_strtod_l+0x72>
 8007fe4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007fe6:	fb08 2101 	mla	r1, r8, r1, r2
 8007fea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007fee:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ff0:	e7b5      	b.n	8007f5e <_strtod_l+0x2be>
 8007ff2:	2a6e      	cmp	r2, #110	@ 0x6e
 8007ff4:	e7da      	b.n	8007fac <_strtod_l+0x30c>
 8007ff6:	498b      	ldr	r1, [pc, #556]	@ (8008224 <_strtod_l+0x584>)
 8007ff8:	a819      	add	r0, sp, #100	@ 0x64
 8007ffa:	f001 f9c9 	bl	8009390 <__match>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	f43f aea2 	beq.w	8007d48 <_strtod_l+0xa8>
 8008004:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008006:	4988      	ldr	r1, [pc, #544]	@ (8008228 <_strtod_l+0x588>)
 8008008:	3b01      	subs	r3, #1
 800800a:	a819      	add	r0, sp, #100	@ 0x64
 800800c:	9319      	str	r3, [sp, #100]	@ 0x64
 800800e:	f001 f9bf 	bl	8009390 <__match>
 8008012:	b910      	cbnz	r0, 800801a <_strtod_l+0x37a>
 8008014:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008016:	3301      	adds	r3, #1
 8008018:	9319      	str	r3, [sp, #100]	@ 0x64
 800801a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008238 <_strtod_l+0x598>
 800801e:	f04f 0a00 	mov.w	sl, #0
 8008022:	e676      	b.n	8007d12 <_strtod_l+0x72>
 8008024:	4881      	ldr	r0, [pc, #516]	@ (800822c <_strtod_l+0x58c>)
 8008026:	f000 feef 	bl	8008e08 <nan>
 800802a:	ec5b ab10 	vmov	sl, fp, d0
 800802e:	e670      	b.n	8007d12 <_strtod_l+0x72>
 8008030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008032:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008034:	eba8 0303 	sub.w	r3, r8, r3
 8008038:	f1b9 0f00 	cmp.w	r9, #0
 800803c:	bf08      	it	eq
 800803e:	46a9      	moveq	r9, r5
 8008040:	2d10      	cmp	r5, #16
 8008042:	9309      	str	r3, [sp, #36]	@ 0x24
 8008044:	462c      	mov	r4, r5
 8008046:	bfa8      	it	ge
 8008048:	2410      	movge	r4, #16
 800804a:	f7f8 fa6b 	bl	8000524 <__aeabi_ui2d>
 800804e:	2d09      	cmp	r5, #9
 8008050:	4682      	mov	sl, r0
 8008052:	468b      	mov	fp, r1
 8008054:	dc13      	bgt.n	800807e <_strtod_l+0x3de>
 8008056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008058:	2b00      	cmp	r3, #0
 800805a:	f43f ae5a 	beq.w	8007d12 <_strtod_l+0x72>
 800805e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008060:	dd78      	ble.n	8008154 <_strtod_l+0x4b4>
 8008062:	2b16      	cmp	r3, #22
 8008064:	dc5f      	bgt.n	8008126 <_strtod_l+0x486>
 8008066:	4972      	ldr	r1, [pc, #456]	@ (8008230 <_strtod_l+0x590>)
 8008068:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800806c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008070:	4652      	mov	r2, sl
 8008072:	465b      	mov	r3, fp
 8008074:	f7f8 fad0 	bl	8000618 <__aeabi_dmul>
 8008078:	4682      	mov	sl, r0
 800807a:	468b      	mov	fp, r1
 800807c:	e649      	b.n	8007d12 <_strtod_l+0x72>
 800807e:	4b6c      	ldr	r3, [pc, #432]	@ (8008230 <_strtod_l+0x590>)
 8008080:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008084:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008088:	f7f8 fac6 	bl	8000618 <__aeabi_dmul>
 800808c:	4682      	mov	sl, r0
 800808e:	4638      	mov	r0, r7
 8008090:	468b      	mov	fp, r1
 8008092:	f7f8 fa47 	bl	8000524 <__aeabi_ui2d>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4650      	mov	r0, sl
 800809c:	4659      	mov	r1, fp
 800809e:	f7f8 f905 	bl	80002ac <__adddf3>
 80080a2:	2d0f      	cmp	r5, #15
 80080a4:	4682      	mov	sl, r0
 80080a6:	468b      	mov	fp, r1
 80080a8:	ddd5      	ble.n	8008056 <_strtod_l+0x3b6>
 80080aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080ac:	1b2c      	subs	r4, r5, r4
 80080ae:	441c      	add	r4, r3
 80080b0:	2c00      	cmp	r4, #0
 80080b2:	f340 8093 	ble.w	80081dc <_strtod_l+0x53c>
 80080b6:	f014 030f 	ands.w	r3, r4, #15
 80080ba:	d00a      	beq.n	80080d2 <_strtod_l+0x432>
 80080bc:	495c      	ldr	r1, [pc, #368]	@ (8008230 <_strtod_l+0x590>)
 80080be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080c2:	4652      	mov	r2, sl
 80080c4:	465b      	mov	r3, fp
 80080c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ca:	f7f8 faa5 	bl	8000618 <__aeabi_dmul>
 80080ce:	4682      	mov	sl, r0
 80080d0:	468b      	mov	fp, r1
 80080d2:	f034 040f 	bics.w	r4, r4, #15
 80080d6:	d073      	beq.n	80081c0 <_strtod_l+0x520>
 80080d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80080dc:	dd49      	ble.n	8008172 <_strtod_l+0x4d2>
 80080de:	2400      	movs	r4, #0
 80080e0:	46a0      	mov	r8, r4
 80080e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80080e4:	46a1      	mov	r9, r4
 80080e6:	9a05      	ldr	r2, [sp, #20]
 80080e8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008238 <_strtod_l+0x598>
 80080ec:	2322      	movs	r3, #34	@ 0x22
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	f04f 0a00 	mov.w	sl, #0
 80080f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f43f ae0b 	beq.w	8007d12 <_strtod_l+0x72>
 80080fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080fe:	9805      	ldr	r0, [sp, #20]
 8008100:	f7ff f946 	bl	8007390 <_Bfree>
 8008104:	9805      	ldr	r0, [sp, #20]
 8008106:	4649      	mov	r1, r9
 8008108:	f7ff f942 	bl	8007390 <_Bfree>
 800810c:	9805      	ldr	r0, [sp, #20]
 800810e:	4641      	mov	r1, r8
 8008110:	f7ff f93e 	bl	8007390 <_Bfree>
 8008114:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008116:	9805      	ldr	r0, [sp, #20]
 8008118:	f7ff f93a 	bl	8007390 <_Bfree>
 800811c:	9805      	ldr	r0, [sp, #20]
 800811e:	4621      	mov	r1, r4
 8008120:	f7ff f936 	bl	8007390 <_Bfree>
 8008124:	e5f5      	b.n	8007d12 <_strtod_l+0x72>
 8008126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008128:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800812c:	4293      	cmp	r3, r2
 800812e:	dbbc      	blt.n	80080aa <_strtod_l+0x40a>
 8008130:	4c3f      	ldr	r4, [pc, #252]	@ (8008230 <_strtod_l+0x590>)
 8008132:	f1c5 050f 	rsb	r5, r5, #15
 8008136:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800813a:	4652      	mov	r2, sl
 800813c:	465b      	mov	r3, fp
 800813e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008142:	f7f8 fa69 	bl	8000618 <__aeabi_dmul>
 8008146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008148:	1b5d      	subs	r5, r3, r5
 800814a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800814e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008152:	e78f      	b.n	8008074 <_strtod_l+0x3d4>
 8008154:	3316      	adds	r3, #22
 8008156:	dba8      	blt.n	80080aa <_strtod_l+0x40a>
 8008158:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800815a:	eba3 0808 	sub.w	r8, r3, r8
 800815e:	4b34      	ldr	r3, [pc, #208]	@ (8008230 <_strtod_l+0x590>)
 8008160:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008164:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008168:	4650      	mov	r0, sl
 800816a:	4659      	mov	r1, fp
 800816c:	f7f8 fb7e 	bl	800086c <__aeabi_ddiv>
 8008170:	e782      	b.n	8008078 <_strtod_l+0x3d8>
 8008172:	2300      	movs	r3, #0
 8008174:	4f2f      	ldr	r7, [pc, #188]	@ (8008234 <_strtod_l+0x594>)
 8008176:	1124      	asrs	r4, r4, #4
 8008178:	4650      	mov	r0, sl
 800817a:	4659      	mov	r1, fp
 800817c:	461e      	mov	r6, r3
 800817e:	2c01      	cmp	r4, #1
 8008180:	dc21      	bgt.n	80081c6 <_strtod_l+0x526>
 8008182:	b10b      	cbz	r3, 8008188 <_strtod_l+0x4e8>
 8008184:	4682      	mov	sl, r0
 8008186:	468b      	mov	fp, r1
 8008188:	492a      	ldr	r1, [pc, #168]	@ (8008234 <_strtod_l+0x594>)
 800818a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800818e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008192:	4652      	mov	r2, sl
 8008194:	465b      	mov	r3, fp
 8008196:	e9d1 0100 	ldrd	r0, r1, [r1]
 800819a:	f7f8 fa3d 	bl	8000618 <__aeabi_dmul>
 800819e:	4b26      	ldr	r3, [pc, #152]	@ (8008238 <_strtod_l+0x598>)
 80081a0:	460a      	mov	r2, r1
 80081a2:	400b      	ands	r3, r1
 80081a4:	4925      	ldr	r1, [pc, #148]	@ (800823c <_strtod_l+0x59c>)
 80081a6:	428b      	cmp	r3, r1
 80081a8:	4682      	mov	sl, r0
 80081aa:	d898      	bhi.n	80080de <_strtod_l+0x43e>
 80081ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80081b0:	428b      	cmp	r3, r1
 80081b2:	bf86      	itte	hi
 80081b4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008240 <_strtod_l+0x5a0>
 80081b8:	f04f 3aff 	movhi.w	sl, #4294967295
 80081bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80081c0:	2300      	movs	r3, #0
 80081c2:	9308      	str	r3, [sp, #32]
 80081c4:	e076      	b.n	80082b4 <_strtod_l+0x614>
 80081c6:	07e2      	lsls	r2, r4, #31
 80081c8:	d504      	bpl.n	80081d4 <_strtod_l+0x534>
 80081ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ce:	f7f8 fa23 	bl	8000618 <__aeabi_dmul>
 80081d2:	2301      	movs	r3, #1
 80081d4:	3601      	adds	r6, #1
 80081d6:	1064      	asrs	r4, r4, #1
 80081d8:	3708      	adds	r7, #8
 80081da:	e7d0      	b.n	800817e <_strtod_l+0x4de>
 80081dc:	d0f0      	beq.n	80081c0 <_strtod_l+0x520>
 80081de:	4264      	negs	r4, r4
 80081e0:	f014 020f 	ands.w	r2, r4, #15
 80081e4:	d00a      	beq.n	80081fc <_strtod_l+0x55c>
 80081e6:	4b12      	ldr	r3, [pc, #72]	@ (8008230 <_strtod_l+0x590>)
 80081e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081ec:	4650      	mov	r0, sl
 80081ee:	4659      	mov	r1, fp
 80081f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f4:	f7f8 fb3a 	bl	800086c <__aeabi_ddiv>
 80081f8:	4682      	mov	sl, r0
 80081fa:	468b      	mov	fp, r1
 80081fc:	1124      	asrs	r4, r4, #4
 80081fe:	d0df      	beq.n	80081c0 <_strtod_l+0x520>
 8008200:	2c1f      	cmp	r4, #31
 8008202:	dd1f      	ble.n	8008244 <_strtod_l+0x5a4>
 8008204:	2400      	movs	r4, #0
 8008206:	46a0      	mov	r8, r4
 8008208:	940b      	str	r4, [sp, #44]	@ 0x2c
 800820a:	46a1      	mov	r9, r4
 800820c:	9a05      	ldr	r2, [sp, #20]
 800820e:	2322      	movs	r3, #34	@ 0x22
 8008210:	f04f 0a00 	mov.w	sl, #0
 8008214:	f04f 0b00 	mov.w	fp, #0
 8008218:	6013      	str	r3, [r2, #0]
 800821a:	e76b      	b.n	80080f4 <_strtod_l+0x454>
 800821c:	08009c81 	.word	0x08009c81
 8008220:	08009f48 	.word	0x08009f48
 8008224:	08009c79 	.word	0x08009c79
 8008228:	08009cb0 	.word	0x08009cb0
 800822c:	08009de9 	.word	0x08009de9
 8008230:	08009e80 	.word	0x08009e80
 8008234:	08009e58 	.word	0x08009e58
 8008238:	7ff00000 	.word	0x7ff00000
 800823c:	7ca00000 	.word	0x7ca00000
 8008240:	7fefffff 	.word	0x7fefffff
 8008244:	f014 0310 	ands.w	r3, r4, #16
 8008248:	bf18      	it	ne
 800824a:	236a      	movne	r3, #106	@ 0x6a
 800824c:	4ea9      	ldr	r6, [pc, #676]	@ (80084f4 <_strtod_l+0x854>)
 800824e:	9308      	str	r3, [sp, #32]
 8008250:	4650      	mov	r0, sl
 8008252:	4659      	mov	r1, fp
 8008254:	2300      	movs	r3, #0
 8008256:	07e7      	lsls	r7, r4, #31
 8008258:	d504      	bpl.n	8008264 <_strtod_l+0x5c4>
 800825a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800825e:	f7f8 f9db 	bl	8000618 <__aeabi_dmul>
 8008262:	2301      	movs	r3, #1
 8008264:	1064      	asrs	r4, r4, #1
 8008266:	f106 0608 	add.w	r6, r6, #8
 800826a:	d1f4      	bne.n	8008256 <_strtod_l+0x5b6>
 800826c:	b10b      	cbz	r3, 8008272 <_strtod_l+0x5d2>
 800826e:	4682      	mov	sl, r0
 8008270:	468b      	mov	fp, r1
 8008272:	9b08      	ldr	r3, [sp, #32]
 8008274:	b1b3      	cbz	r3, 80082a4 <_strtod_l+0x604>
 8008276:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800827a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800827e:	2b00      	cmp	r3, #0
 8008280:	4659      	mov	r1, fp
 8008282:	dd0f      	ble.n	80082a4 <_strtod_l+0x604>
 8008284:	2b1f      	cmp	r3, #31
 8008286:	dd56      	ble.n	8008336 <_strtod_l+0x696>
 8008288:	2b34      	cmp	r3, #52	@ 0x34
 800828a:	bfde      	ittt	le
 800828c:	f04f 33ff 	movle.w	r3, #4294967295
 8008290:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008294:	4093      	lslle	r3, r2
 8008296:	f04f 0a00 	mov.w	sl, #0
 800829a:	bfcc      	ite	gt
 800829c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80082a0:	ea03 0b01 	andle.w	fp, r3, r1
 80082a4:	2200      	movs	r2, #0
 80082a6:	2300      	movs	r3, #0
 80082a8:	4650      	mov	r0, sl
 80082aa:	4659      	mov	r1, fp
 80082ac:	f7f8 fc1c 	bl	8000ae8 <__aeabi_dcmpeq>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d1a7      	bne.n	8008204 <_strtod_l+0x564>
 80082b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80082ba:	9805      	ldr	r0, [sp, #20]
 80082bc:	462b      	mov	r3, r5
 80082be:	464a      	mov	r2, r9
 80082c0:	f7ff f8ce 	bl	8007460 <__s2b>
 80082c4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80082c6:	2800      	cmp	r0, #0
 80082c8:	f43f af09 	beq.w	80080de <_strtod_l+0x43e>
 80082cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082d0:	2a00      	cmp	r2, #0
 80082d2:	eba3 0308 	sub.w	r3, r3, r8
 80082d6:	bfa8      	it	ge
 80082d8:	2300      	movge	r3, #0
 80082da:	9312      	str	r3, [sp, #72]	@ 0x48
 80082dc:	2400      	movs	r4, #0
 80082de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80082e2:	9316      	str	r3, [sp, #88]	@ 0x58
 80082e4:	46a0      	mov	r8, r4
 80082e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082e8:	9805      	ldr	r0, [sp, #20]
 80082ea:	6859      	ldr	r1, [r3, #4]
 80082ec:	f7ff f810 	bl	8007310 <_Balloc>
 80082f0:	4681      	mov	r9, r0
 80082f2:	2800      	cmp	r0, #0
 80082f4:	f43f aef7 	beq.w	80080e6 <_strtod_l+0x446>
 80082f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	3202      	adds	r2, #2
 80082fe:	f103 010c 	add.w	r1, r3, #12
 8008302:	0092      	lsls	r2, r2, #2
 8008304:	300c      	adds	r0, #12
 8008306:	f000 fd71 	bl	8008dec <memcpy>
 800830a:	ec4b ab10 	vmov	d0, sl, fp
 800830e:	9805      	ldr	r0, [sp, #20]
 8008310:	aa1c      	add	r2, sp, #112	@ 0x70
 8008312:	a91b      	add	r1, sp, #108	@ 0x6c
 8008314:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008318:	f7ff fbd6 	bl	8007ac8 <__d2b>
 800831c:	901a      	str	r0, [sp, #104]	@ 0x68
 800831e:	2800      	cmp	r0, #0
 8008320:	f43f aee1 	beq.w	80080e6 <_strtod_l+0x446>
 8008324:	9805      	ldr	r0, [sp, #20]
 8008326:	2101      	movs	r1, #1
 8008328:	f7ff f930 	bl	800758c <__i2b>
 800832c:	4680      	mov	r8, r0
 800832e:	b948      	cbnz	r0, 8008344 <_strtod_l+0x6a4>
 8008330:	f04f 0800 	mov.w	r8, #0
 8008334:	e6d7      	b.n	80080e6 <_strtod_l+0x446>
 8008336:	f04f 32ff 	mov.w	r2, #4294967295
 800833a:	fa02 f303 	lsl.w	r3, r2, r3
 800833e:	ea03 0a0a 	and.w	sl, r3, sl
 8008342:	e7af      	b.n	80082a4 <_strtod_l+0x604>
 8008344:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008346:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008348:	2d00      	cmp	r5, #0
 800834a:	bfab      	itete	ge
 800834c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800834e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008350:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008352:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008354:	bfac      	ite	ge
 8008356:	18ef      	addge	r7, r5, r3
 8008358:	1b5e      	sublt	r6, r3, r5
 800835a:	9b08      	ldr	r3, [sp, #32]
 800835c:	1aed      	subs	r5, r5, r3
 800835e:	4415      	add	r5, r2
 8008360:	4b65      	ldr	r3, [pc, #404]	@ (80084f8 <_strtod_l+0x858>)
 8008362:	3d01      	subs	r5, #1
 8008364:	429d      	cmp	r5, r3
 8008366:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800836a:	da50      	bge.n	800840e <_strtod_l+0x76e>
 800836c:	1b5b      	subs	r3, r3, r5
 800836e:	2b1f      	cmp	r3, #31
 8008370:	eba2 0203 	sub.w	r2, r2, r3
 8008374:	f04f 0101 	mov.w	r1, #1
 8008378:	dc3d      	bgt.n	80083f6 <_strtod_l+0x756>
 800837a:	fa01 f303 	lsl.w	r3, r1, r3
 800837e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008380:	2300      	movs	r3, #0
 8008382:	9310      	str	r3, [sp, #64]	@ 0x40
 8008384:	18bd      	adds	r5, r7, r2
 8008386:	9b08      	ldr	r3, [sp, #32]
 8008388:	42af      	cmp	r7, r5
 800838a:	4416      	add	r6, r2
 800838c:	441e      	add	r6, r3
 800838e:	463b      	mov	r3, r7
 8008390:	bfa8      	it	ge
 8008392:	462b      	movge	r3, r5
 8008394:	42b3      	cmp	r3, r6
 8008396:	bfa8      	it	ge
 8008398:	4633      	movge	r3, r6
 800839a:	2b00      	cmp	r3, #0
 800839c:	bfc2      	ittt	gt
 800839e:	1aed      	subgt	r5, r5, r3
 80083a0:	1af6      	subgt	r6, r6, r3
 80083a2:	1aff      	subgt	r7, r7, r3
 80083a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	dd16      	ble.n	80083d8 <_strtod_l+0x738>
 80083aa:	4641      	mov	r1, r8
 80083ac:	9805      	ldr	r0, [sp, #20]
 80083ae:	461a      	mov	r2, r3
 80083b0:	f7ff f9a4 	bl	80076fc <__pow5mult>
 80083b4:	4680      	mov	r8, r0
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d0ba      	beq.n	8008330 <_strtod_l+0x690>
 80083ba:	4601      	mov	r1, r0
 80083bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80083be:	9805      	ldr	r0, [sp, #20]
 80083c0:	f7ff f8fa 	bl	80075b8 <__multiply>
 80083c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80083c6:	2800      	cmp	r0, #0
 80083c8:	f43f ae8d 	beq.w	80080e6 <_strtod_l+0x446>
 80083cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083ce:	9805      	ldr	r0, [sp, #20]
 80083d0:	f7fe ffde 	bl	8007390 <_Bfree>
 80083d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80083d8:	2d00      	cmp	r5, #0
 80083da:	dc1d      	bgt.n	8008418 <_strtod_l+0x778>
 80083dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083de:	2b00      	cmp	r3, #0
 80083e0:	dd23      	ble.n	800842a <_strtod_l+0x78a>
 80083e2:	4649      	mov	r1, r9
 80083e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80083e6:	9805      	ldr	r0, [sp, #20]
 80083e8:	f7ff f988 	bl	80076fc <__pow5mult>
 80083ec:	4681      	mov	r9, r0
 80083ee:	b9e0      	cbnz	r0, 800842a <_strtod_l+0x78a>
 80083f0:	f04f 0900 	mov.w	r9, #0
 80083f4:	e677      	b.n	80080e6 <_strtod_l+0x446>
 80083f6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80083fa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80083fe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008402:	35e2      	adds	r5, #226	@ 0xe2
 8008404:	fa01 f305 	lsl.w	r3, r1, r5
 8008408:	9310      	str	r3, [sp, #64]	@ 0x40
 800840a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800840c:	e7ba      	b.n	8008384 <_strtod_l+0x6e4>
 800840e:	2300      	movs	r3, #0
 8008410:	9310      	str	r3, [sp, #64]	@ 0x40
 8008412:	2301      	movs	r3, #1
 8008414:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008416:	e7b5      	b.n	8008384 <_strtod_l+0x6e4>
 8008418:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800841a:	9805      	ldr	r0, [sp, #20]
 800841c:	462a      	mov	r2, r5
 800841e:	f7ff f9c7 	bl	80077b0 <__lshift>
 8008422:	901a      	str	r0, [sp, #104]	@ 0x68
 8008424:	2800      	cmp	r0, #0
 8008426:	d1d9      	bne.n	80083dc <_strtod_l+0x73c>
 8008428:	e65d      	b.n	80080e6 <_strtod_l+0x446>
 800842a:	2e00      	cmp	r6, #0
 800842c:	dd07      	ble.n	800843e <_strtod_l+0x79e>
 800842e:	4649      	mov	r1, r9
 8008430:	9805      	ldr	r0, [sp, #20]
 8008432:	4632      	mov	r2, r6
 8008434:	f7ff f9bc 	bl	80077b0 <__lshift>
 8008438:	4681      	mov	r9, r0
 800843a:	2800      	cmp	r0, #0
 800843c:	d0d8      	beq.n	80083f0 <_strtod_l+0x750>
 800843e:	2f00      	cmp	r7, #0
 8008440:	dd08      	ble.n	8008454 <_strtod_l+0x7b4>
 8008442:	4641      	mov	r1, r8
 8008444:	9805      	ldr	r0, [sp, #20]
 8008446:	463a      	mov	r2, r7
 8008448:	f7ff f9b2 	bl	80077b0 <__lshift>
 800844c:	4680      	mov	r8, r0
 800844e:	2800      	cmp	r0, #0
 8008450:	f43f ae49 	beq.w	80080e6 <_strtod_l+0x446>
 8008454:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008456:	9805      	ldr	r0, [sp, #20]
 8008458:	464a      	mov	r2, r9
 800845a:	f7ff fa31 	bl	80078c0 <__mdiff>
 800845e:	4604      	mov	r4, r0
 8008460:	2800      	cmp	r0, #0
 8008462:	f43f ae40 	beq.w	80080e6 <_strtod_l+0x446>
 8008466:	68c3      	ldr	r3, [r0, #12]
 8008468:	930f      	str	r3, [sp, #60]	@ 0x3c
 800846a:	2300      	movs	r3, #0
 800846c:	60c3      	str	r3, [r0, #12]
 800846e:	4641      	mov	r1, r8
 8008470:	f7ff fa0a 	bl	8007888 <__mcmp>
 8008474:	2800      	cmp	r0, #0
 8008476:	da45      	bge.n	8008504 <_strtod_l+0x864>
 8008478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800847a:	ea53 030a 	orrs.w	r3, r3, sl
 800847e:	d16b      	bne.n	8008558 <_strtod_l+0x8b8>
 8008480:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008484:	2b00      	cmp	r3, #0
 8008486:	d167      	bne.n	8008558 <_strtod_l+0x8b8>
 8008488:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800848c:	0d1b      	lsrs	r3, r3, #20
 800848e:	051b      	lsls	r3, r3, #20
 8008490:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008494:	d960      	bls.n	8008558 <_strtod_l+0x8b8>
 8008496:	6963      	ldr	r3, [r4, #20]
 8008498:	b913      	cbnz	r3, 80084a0 <_strtod_l+0x800>
 800849a:	6923      	ldr	r3, [r4, #16]
 800849c:	2b01      	cmp	r3, #1
 800849e:	dd5b      	ble.n	8008558 <_strtod_l+0x8b8>
 80084a0:	4621      	mov	r1, r4
 80084a2:	2201      	movs	r2, #1
 80084a4:	9805      	ldr	r0, [sp, #20]
 80084a6:	f7ff f983 	bl	80077b0 <__lshift>
 80084aa:	4641      	mov	r1, r8
 80084ac:	4604      	mov	r4, r0
 80084ae:	f7ff f9eb 	bl	8007888 <__mcmp>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	dd50      	ble.n	8008558 <_strtod_l+0x8b8>
 80084b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084ba:	9a08      	ldr	r2, [sp, #32]
 80084bc:	0d1b      	lsrs	r3, r3, #20
 80084be:	051b      	lsls	r3, r3, #20
 80084c0:	2a00      	cmp	r2, #0
 80084c2:	d06a      	beq.n	800859a <_strtod_l+0x8fa>
 80084c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80084c8:	d867      	bhi.n	800859a <_strtod_l+0x8fa>
 80084ca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80084ce:	f67f ae9d 	bls.w	800820c <_strtod_l+0x56c>
 80084d2:	4b0a      	ldr	r3, [pc, #40]	@ (80084fc <_strtod_l+0x85c>)
 80084d4:	4650      	mov	r0, sl
 80084d6:	4659      	mov	r1, fp
 80084d8:	2200      	movs	r2, #0
 80084da:	f7f8 f89d 	bl	8000618 <__aeabi_dmul>
 80084de:	4b08      	ldr	r3, [pc, #32]	@ (8008500 <_strtod_l+0x860>)
 80084e0:	400b      	ands	r3, r1
 80084e2:	4682      	mov	sl, r0
 80084e4:	468b      	mov	fp, r1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f47f ae08 	bne.w	80080fc <_strtod_l+0x45c>
 80084ec:	9a05      	ldr	r2, [sp, #20]
 80084ee:	2322      	movs	r3, #34	@ 0x22
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	e603      	b.n	80080fc <_strtod_l+0x45c>
 80084f4:	08009f70 	.word	0x08009f70
 80084f8:	fffffc02 	.word	0xfffffc02
 80084fc:	39500000 	.word	0x39500000
 8008500:	7ff00000 	.word	0x7ff00000
 8008504:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008508:	d165      	bne.n	80085d6 <_strtod_l+0x936>
 800850a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800850c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008510:	b35a      	cbz	r2, 800856a <_strtod_l+0x8ca>
 8008512:	4a9f      	ldr	r2, [pc, #636]	@ (8008790 <_strtod_l+0xaf0>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d12b      	bne.n	8008570 <_strtod_l+0x8d0>
 8008518:	9b08      	ldr	r3, [sp, #32]
 800851a:	4651      	mov	r1, sl
 800851c:	b303      	cbz	r3, 8008560 <_strtod_l+0x8c0>
 800851e:	4b9d      	ldr	r3, [pc, #628]	@ (8008794 <_strtod_l+0xaf4>)
 8008520:	465a      	mov	r2, fp
 8008522:	4013      	ands	r3, r2
 8008524:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008528:	f04f 32ff 	mov.w	r2, #4294967295
 800852c:	d81b      	bhi.n	8008566 <_strtod_l+0x8c6>
 800852e:	0d1b      	lsrs	r3, r3, #20
 8008530:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008534:	fa02 f303 	lsl.w	r3, r2, r3
 8008538:	4299      	cmp	r1, r3
 800853a:	d119      	bne.n	8008570 <_strtod_l+0x8d0>
 800853c:	4b96      	ldr	r3, [pc, #600]	@ (8008798 <_strtod_l+0xaf8>)
 800853e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008540:	429a      	cmp	r2, r3
 8008542:	d102      	bne.n	800854a <_strtod_l+0x8aa>
 8008544:	3101      	adds	r1, #1
 8008546:	f43f adce 	beq.w	80080e6 <_strtod_l+0x446>
 800854a:	4b92      	ldr	r3, [pc, #584]	@ (8008794 <_strtod_l+0xaf4>)
 800854c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800854e:	401a      	ands	r2, r3
 8008550:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008554:	f04f 0a00 	mov.w	sl, #0
 8008558:	9b08      	ldr	r3, [sp, #32]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1b9      	bne.n	80084d2 <_strtod_l+0x832>
 800855e:	e5cd      	b.n	80080fc <_strtod_l+0x45c>
 8008560:	f04f 33ff 	mov.w	r3, #4294967295
 8008564:	e7e8      	b.n	8008538 <_strtod_l+0x898>
 8008566:	4613      	mov	r3, r2
 8008568:	e7e6      	b.n	8008538 <_strtod_l+0x898>
 800856a:	ea53 030a 	orrs.w	r3, r3, sl
 800856e:	d0a2      	beq.n	80084b6 <_strtod_l+0x816>
 8008570:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008572:	b1db      	cbz	r3, 80085ac <_strtod_l+0x90c>
 8008574:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008576:	4213      	tst	r3, r2
 8008578:	d0ee      	beq.n	8008558 <_strtod_l+0x8b8>
 800857a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800857c:	9a08      	ldr	r2, [sp, #32]
 800857e:	4650      	mov	r0, sl
 8008580:	4659      	mov	r1, fp
 8008582:	b1bb      	cbz	r3, 80085b4 <_strtod_l+0x914>
 8008584:	f7ff fb6e 	bl	8007c64 <sulp>
 8008588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800858c:	ec53 2b10 	vmov	r2, r3, d0
 8008590:	f7f7 fe8c 	bl	80002ac <__adddf3>
 8008594:	4682      	mov	sl, r0
 8008596:	468b      	mov	fp, r1
 8008598:	e7de      	b.n	8008558 <_strtod_l+0x8b8>
 800859a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800859e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80085a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80085a6:	f04f 3aff 	mov.w	sl, #4294967295
 80085aa:	e7d5      	b.n	8008558 <_strtod_l+0x8b8>
 80085ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80085ae:	ea13 0f0a 	tst.w	r3, sl
 80085b2:	e7e1      	b.n	8008578 <_strtod_l+0x8d8>
 80085b4:	f7ff fb56 	bl	8007c64 <sulp>
 80085b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085bc:	ec53 2b10 	vmov	r2, r3, d0
 80085c0:	f7f7 fe72 	bl	80002a8 <__aeabi_dsub>
 80085c4:	2200      	movs	r2, #0
 80085c6:	2300      	movs	r3, #0
 80085c8:	4682      	mov	sl, r0
 80085ca:	468b      	mov	fp, r1
 80085cc:	f7f8 fa8c 	bl	8000ae8 <__aeabi_dcmpeq>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d0c1      	beq.n	8008558 <_strtod_l+0x8b8>
 80085d4:	e61a      	b.n	800820c <_strtod_l+0x56c>
 80085d6:	4641      	mov	r1, r8
 80085d8:	4620      	mov	r0, r4
 80085da:	f7ff facd 	bl	8007b78 <__ratio>
 80085de:	ec57 6b10 	vmov	r6, r7, d0
 80085e2:	2200      	movs	r2, #0
 80085e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80085e8:	4630      	mov	r0, r6
 80085ea:	4639      	mov	r1, r7
 80085ec:	f7f8 fa90 	bl	8000b10 <__aeabi_dcmple>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d06f      	beq.n	80086d4 <_strtod_l+0xa34>
 80085f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d17a      	bne.n	80086f0 <_strtod_l+0xa50>
 80085fa:	f1ba 0f00 	cmp.w	sl, #0
 80085fe:	d158      	bne.n	80086b2 <_strtod_l+0xa12>
 8008600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008606:	2b00      	cmp	r3, #0
 8008608:	d15a      	bne.n	80086c0 <_strtod_l+0xa20>
 800860a:	4b64      	ldr	r3, [pc, #400]	@ (800879c <_strtod_l+0xafc>)
 800860c:	2200      	movs	r2, #0
 800860e:	4630      	mov	r0, r6
 8008610:	4639      	mov	r1, r7
 8008612:	f7f8 fa73 	bl	8000afc <__aeabi_dcmplt>
 8008616:	2800      	cmp	r0, #0
 8008618:	d159      	bne.n	80086ce <_strtod_l+0xa2e>
 800861a:	4630      	mov	r0, r6
 800861c:	4639      	mov	r1, r7
 800861e:	4b60      	ldr	r3, [pc, #384]	@ (80087a0 <_strtod_l+0xb00>)
 8008620:	2200      	movs	r2, #0
 8008622:	f7f7 fff9 	bl	8000618 <__aeabi_dmul>
 8008626:	4606      	mov	r6, r0
 8008628:	460f      	mov	r7, r1
 800862a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800862e:	9606      	str	r6, [sp, #24]
 8008630:	9307      	str	r3, [sp, #28]
 8008632:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008636:	4d57      	ldr	r5, [pc, #348]	@ (8008794 <_strtod_l+0xaf4>)
 8008638:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800863c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800863e:	401d      	ands	r5, r3
 8008640:	4b58      	ldr	r3, [pc, #352]	@ (80087a4 <_strtod_l+0xb04>)
 8008642:	429d      	cmp	r5, r3
 8008644:	f040 80b2 	bne.w	80087ac <_strtod_l+0xb0c>
 8008648:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800864a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800864e:	ec4b ab10 	vmov	d0, sl, fp
 8008652:	f7ff f9c9 	bl	80079e8 <__ulp>
 8008656:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800865a:	ec51 0b10 	vmov	r0, r1, d0
 800865e:	f7f7 ffdb 	bl	8000618 <__aeabi_dmul>
 8008662:	4652      	mov	r2, sl
 8008664:	465b      	mov	r3, fp
 8008666:	f7f7 fe21 	bl	80002ac <__adddf3>
 800866a:	460b      	mov	r3, r1
 800866c:	4949      	ldr	r1, [pc, #292]	@ (8008794 <_strtod_l+0xaf4>)
 800866e:	4a4e      	ldr	r2, [pc, #312]	@ (80087a8 <_strtod_l+0xb08>)
 8008670:	4019      	ands	r1, r3
 8008672:	4291      	cmp	r1, r2
 8008674:	4682      	mov	sl, r0
 8008676:	d942      	bls.n	80086fe <_strtod_l+0xa5e>
 8008678:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800867a:	4b47      	ldr	r3, [pc, #284]	@ (8008798 <_strtod_l+0xaf8>)
 800867c:	429a      	cmp	r2, r3
 800867e:	d103      	bne.n	8008688 <_strtod_l+0x9e8>
 8008680:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008682:	3301      	adds	r3, #1
 8008684:	f43f ad2f 	beq.w	80080e6 <_strtod_l+0x446>
 8008688:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008798 <_strtod_l+0xaf8>
 800868c:	f04f 3aff 	mov.w	sl, #4294967295
 8008690:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008692:	9805      	ldr	r0, [sp, #20]
 8008694:	f7fe fe7c 	bl	8007390 <_Bfree>
 8008698:	9805      	ldr	r0, [sp, #20]
 800869a:	4649      	mov	r1, r9
 800869c:	f7fe fe78 	bl	8007390 <_Bfree>
 80086a0:	9805      	ldr	r0, [sp, #20]
 80086a2:	4641      	mov	r1, r8
 80086a4:	f7fe fe74 	bl	8007390 <_Bfree>
 80086a8:	9805      	ldr	r0, [sp, #20]
 80086aa:	4621      	mov	r1, r4
 80086ac:	f7fe fe70 	bl	8007390 <_Bfree>
 80086b0:	e619      	b.n	80082e6 <_strtod_l+0x646>
 80086b2:	f1ba 0f01 	cmp.w	sl, #1
 80086b6:	d103      	bne.n	80086c0 <_strtod_l+0xa20>
 80086b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f43f ada6 	beq.w	800820c <_strtod_l+0x56c>
 80086c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008770 <_strtod_l+0xad0>
 80086c4:	4f35      	ldr	r7, [pc, #212]	@ (800879c <_strtod_l+0xafc>)
 80086c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80086ca:	2600      	movs	r6, #0
 80086cc:	e7b1      	b.n	8008632 <_strtod_l+0x992>
 80086ce:	4f34      	ldr	r7, [pc, #208]	@ (80087a0 <_strtod_l+0xb00>)
 80086d0:	2600      	movs	r6, #0
 80086d2:	e7aa      	b.n	800862a <_strtod_l+0x98a>
 80086d4:	4b32      	ldr	r3, [pc, #200]	@ (80087a0 <_strtod_l+0xb00>)
 80086d6:	4630      	mov	r0, r6
 80086d8:	4639      	mov	r1, r7
 80086da:	2200      	movs	r2, #0
 80086dc:	f7f7 ff9c 	bl	8000618 <__aeabi_dmul>
 80086e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086e2:	4606      	mov	r6, r0
 80086e4:	460f      	mov	r7, r1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d09f      	beq.n	800862a <_strtod_l+0x98a>
 80086ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80086ee:	e7a0      	b.n	8008632 <_strtod_l+0x992>
 80086f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008778 <_strtod_l+0xad8>
 80086f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80086f8:	ec57 6b17 	vmov	r6, r7, d7
 80086fc:	e799      	b.n	8008632 <_strtod_l+0x992>
 80086fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008702:	9b08      	ldr	r3, [sp, #32]
 8008704:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1c1      	bne.n	8008690 <_strtod_l+0x9f0>
 800870c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008710:	0d1b      	lsrs	r3, r3, #20
 8008712:	051b      	lsls	r3, r3, #20
 8008714:	429d      	cmp	r5, r3
 8008716:	d1bb      	bne.n	8008690 <_strtod_l+0x9f0>
 8008718:	4630      	mov	r0, r6
 800871a:	4639      	mov	r1, r7
 800871c:	f7f8 fadc 	bl	8000cd8 <__aeabi_d2lz>
 8008720:	f7f7 ff4c 	bl	80005bc <__aeabi_l2d>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4630      	mov	r0, r6
 800872a:	4639      	mov	r1, r7
 800872c:	f7f7 fdbc 	bl	80002a8 <__aeabi_dsub>
 8008730:	460b      	mov	r3, r1
 8008732:	4602      	mov	r2, r0
 8008734:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008738:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800873c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800873e:	ea46 060a 	orr.w	r6, r6, sl
 8008742:	431e      	orrs	r6, r3
 8008744:	d06f      	beq.n	8008826 <_strtod_l+0xb86>
 8008746:	a30e      	add	r3, pc, #56	@ (adr r3, 8008780 <_strtod_l+0xae0>)
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	f7f8 f9d6 	bl	8000afc <__aeabi_dcmplt>
 8008750:	2800      	cmp	r0, #0
 8008752:	f47f acd3 	bne.w	80080fc <_strtod_l+0x45c>
 8008756:	a30c      	add	r3, pc, #48	@ (adr r3, 8008788 <_strtod_l+0xae8>)
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008760:	f7f8 f9ea 	bl	8000b38 <__aeabi_dcmpgt>
 8008764:	2800      	cmp	r0, #0
 8008766:	d093      	beq.n	8008690 <_strtod_l+0x9f0>
 8008768:	e4c8      	b.n	80080fc <_strtod_l+0x45c>
 800876a:	bf00      	nop
 800876c:	f3af 8000 	nop.w
 8008770:	00000000 	.word	0x00000000
 8008774:	bff00000 	.word	0xbff00000
 8008778:	00000000 	.word	0x00000000
 800877c:	3ff00000 	.word	0x3ff00000
 8008780:	94a03595 	.word	0x94a03595
 8008784:	3fdfffff 	.word	0x3fdfffff
 8008788:	35afe535 	.word	0x35afe535
 800878c:	3fe00000 	.word	0x3fe00000
 8008790:	000fffff 	.word	0x000fffff
 8008794:	7ff00000 	.word	0x7ff00000
 8008798:	7fefffff 	.word	0x7fefffff
 800879c:	3ff00000 	.word	0x3ff00000
 80087a0:	3fe00000 	.word	0x3fe00000
 80087a4:	7fe00000 	.word	0x7fe00000
 80087a8:	7c9fffff 	.word	0x7c9fffff
 80087ac:	9b08      	ldr	r3, [sp, #32]
 80087ae:	b323      	cbz	r3, 80087fa <_strtod_l+0xb5a>
 80087b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80087b4:	d821      	bhi.n	80087fa <_strtod_l+0xb5a>
 80087b6:	a328      	add	r3, pc, #160	@ (adr r3, 8008858 <_strtod_l+0xbb8>)
 80087b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087bc:	4630      	mov	r0, r6
 80087be:	4639      	mov	r1, r7
 80087c0:	f7f8 f9a6 	bl	8000b10 <__aeabi_dcmple>
 80087c4:	b1a0      	cbz	r0, 80087f0 <_strtod_l+0xb50>
 80087c6:	4639      	mov	r1, r7
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7f8 f9fd 	bl	8000bc8 <__aeabi_d2uiz>
 80087ce:	2801      	cmp	r0, #1
 80087d0:	bf38      	it	cc
 80087d2:	2001      	movcc	r0, #1
 80087d4:	f7f7 fea6 	bl	8000524 <__aeabi_ui2d>
 80087d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087da:	4606      	mov	r6, r0
 80087dc:	460f      	mov	r7, r1
 80087de:	b9fb      	cbnz	r3, 8008820 <_strtod_l+0xb80>
 80087e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80087e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80087e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80087e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80087ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80087f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80087f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80087f6:	1b5b      	subs	r3, r3, r5
 80087f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80087fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80087fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008802:	f7ff f8f1 	bl	80079e8 <__ulp>
 8008806:	4650      	mov	r0, sl
 8008808:	ec53 2b10 	vmov	r2, r3, d0
 800880c:	4659      	mov	r1, fp
 800880e:	f7f7 ff03 	bl	8000618 <__aeabi_dmul>
 8008812:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008816:	f7f7 fd49 	bl	80002ac <__adddf3>
 800881a:	4682      	mov	sl, r0
 800881c:	468b      	mov	fp, r1
 800881e:	e770      	b.n	8008702 <_strtod_l+0xa62>
 8008820:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008824:	e7e0      	b.n	80087e8 <_strtod_l+0xb48>
 8008826:	a30e      	add	r3, pc, #56	@ (adr r3, 8008860 <_strtod_l+0xbc0>)
 8008828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882c:	f7f8 f966 	bl	8000afc <__aeabi_dcmplt>
 8008830:	e798      	b.n	8008764 <_strtod_l+0xac4>
 8008832:	2300      	movs	r3, #0
 8008834:	930e      	str	r3, [sp, #56]	@ 0x38
 8008836:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008838:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	f7ff ba6d 	b.w	8007d1a <_strtod_l+0x7a>
 8008840:	2a65      	cmp	r2, #101	@ 0x65
 8008842:	f43f ab68 	beq.w	8007f16 <_strtod_l+0x276>
 8008846:	2a45      	cmp	r2, #69	@ 0x45
 8008848:	f43f ab65 	beq.w	8007f16 <_strtod_l+0x276>
 800884c:	2301      	movs	r3, #1
 800884e:	f7ff bba0 	b.w	8007f92 <_strtod_l+0x2f2>
 8008852:	bf00      	nop
 8008854:	f3af 8000 	nop.w
 8008858:	ffc00000 	.word	0xffc00000
 800885c:	41dfffff 	.word	0x41dfffff
 8008860:	94a03595 	.word	0x94a03595
 8008864:	3fcfffff 	.word	0x3fcfffff

08008868 <_strtod_r>:
 8008868:	4b01      	ldr	r3, [pc, #4]	@ (8008870 <_strtod_r+0x8>)
 800886a:	f7ff ba19 	b.w	8007ca0 <_strtod_l>
 800886e:	bf00      	nop
 8008870:	20000074 	.word	0x20000074

08008874 <_strtol_l.isra.0>:
 8008874:	2b24      	cmp	r3, #36	@ 0x24
 8008876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800887a:	4686      	mov	lr, r0
 800887c:	4690      	mov	r8, r2
 800887e:	d801      	bhi.n	8008884 <_strtol_l.isra.0+0x10>
 8008880:	2b01      	cmp	r3, #1
 8008882:	d106      	bne.n	8008892 <_strtol_l.isra.0+0x1e>
 8008884:	f7fd fdb6 	bl	80063f4 <__errno>
 8008888:	2316      	movs	r3, #22
 800888a:	6003      	str	r3, [r0, #0]
 800888c:	2000      	movs	r0, #0
 800888e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008892:	4834      	ldr	r0, [pc, #208]	@ (8008964 <_strtol_l.isra.0+0xf0>)
 8008894:	460d      	mov	r5, r1
 8008896:	462a      	mov	r2, r5
 8008898:	f815 4b01 	ldrb.w	r4, [r5], #1
 800889c:	5d06      	ldrb	r6, [r0, r4]
 800889e:	f016 0608 	ands.w	r6, r6, #8
 80088a2:	d1f8      	bne.n	8008896 <_strtol_l.isra.0+0x22>
 80088a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80088a6:	d110      	bne.n	80088ca <_strtol_l.isra.0+0x56>
 80088a8:	782c      	ldrb	r4, [r5, #0]
 80088aa:	2601      	movs	r6, #1
 80088ac:	1c95      	adds	r5, r2, #2
 80088ae:	f033 0210 	bics.w	r2, r3, #16
 80088b2:	d115      	bne.n	80088e0 <_strtol_l.isra.0+0x6c>
 80088b4:	2c30      	cmp	r4, #48	@ 0x30
 80088b6:	d10d      	bne.n	80088d4 <_strtol_l.isra.0+0x60>
 80088b8:	782a      	ldrb	r2, [r5, #0]
 80088ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80088be:	2a58      	cmp	r2, #88	@ 0x58
 80088c0:	d108      	bne.n	80088d4 <_strtol_l.isra.0+0x60>
 80088c2:	786c      	ldrb	r4, [r5, #1]
 80088c4:	3502      	adds	r5, #2
 80088c6:	2310      	movs	r3, #16
 80088c8:	e00a      	b.n	80088e0 <_strtol_l.isra.0+0x6c>
 80088ca:	2c2b      	cmp	r4, #43	@ 0x2b
 80088cc:	bf04      	itt	eq
 80088ce:	782c      	ldrbeq	r4, [r5, #0]
 80088d0:	1c95      	addeq	r5, r2, #2
 80088d2:	e7ec      	b.n	80088ae <_strtol_l.isra.0+0x3a>
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1f6      	bne.n	80088c6 <_strtol_l.isra.0+0x52>
 80088d8:	2c30      	cmp	r4, #48	@ 0x30
 80088da:	bf14      	ite	ne
 80088dc:	230a      	movne	r3, #10
 80088de:	2308      	moveq	r3, #8
 80088e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80088e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80088e8:	2200      	movs	r2, #0
 80088ea:	fbbc f9f3 	udiv	r9, ip, r3
 80088ee:	4610      	mov	r0, r2
 80088f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80088f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80088f8:	2f09      	cmp	r7, #9
 80088fa:	d80f      	bhi.n	800891c <_strtol_l.isra.0+0xa8>
 80088fc:	463c      	mov	r4, r7
 80088fe:	42a3      	cmp	r3, r4
 8008900:	dd1b      	ble.n	800893a <_strtol_l.isra.0+0xc6>
 8008902:	1c57      	adds	r7, r2, #1
 8008904:	d007      	beq.n	8008916 <_strtol_l.isra.0+0xa2>
 8008906:	4581      	cmp	r9, r0
 8008908:	d314      	bcc.n	8008934 <_strtol_l.isra.0+0xc0>
 800890a:	d101      	bne.n	8008910 <_strtol_l.isra.0+0x9c>
 800890c:	45a2      	cmp	sl, r4
 800890e:	db11      	blt.n	8008934 <_strtol_l.isra.0+0xc0>
 8008910:	fb00 4003 	mla	r0, r0, r3, r4
 8008914:	2201      	movs	r2, #1
 8008916:	f815 4b01 	ldrb.w	r4, [r5], #1
 800891a:	e7eb      	b.n	80088f4 <_strtol_l.isra.0+0x80>
 800891c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008920:	2f19      	cmp	r7, #25
 8008922:	d801      	bhi.n	8008928 <_strtol_l.isra.0+0xb4>
 8008924:	3c37      	subs	r4, #55	@ 0x37
 8008926:	e7ea      	b.n	80088fe <_strtol_l.isra.0+0x8a>
 8008928:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800892c:	2f19      	cmp	r7, #25
 800892e:	d804      	bhi.n	800893a <_strtol_l.isra.0+0xc6>
 8008930:	3c57      	subs	r4, #87	@ 0x57
 8008932:	e7e4      	b.n	80088fe <_strtol_l.isra.0+0x8a>
 8008934:	f04f 32ff 	mov.w	r2, #4294967295
 8008938:	e7ed      	b.n	8008916 <_strtol_l.isra.0+0xa2>
 800893a:	1c53      	adds	r3, r2, #1
 800893c:	d108      	bne.n	8008950 <_strtol_l.isra.0+0xdc>
 800893e:	2322      	movs	r3, #34	@ 0x22
 8008940:	f8ce 3000 	str.w	r3, [lr]
 8008944:	4660      	mov	r0, ip
 8008946:	f1b8 0f00 	cmp.w	r8, #0
 800894a:	d0a0      	beq.n	800888e <_strtol_l.isra.0+0x1a>
 800894c:	1e69      	subs	r1, r5, #1
 800894e:	e006      	b.n	800895e <_strtol_l.isra.0+0xea>
 8008950:	b106      	cbz	r6, 8008954 <_strtol_l.isra.0+0xe0>
 8008952:	4240      	negs	r0, r0
 8008954:	f1b8 0f00 	cmp.w	r8, #0
 8008958:	d099      	beq.n	800888e <_strtol_l.isra.0+0x1a>
 800895a:	2a00      	cmp	r2, #0
 800895c:	d1f6      	bne.n	800894c <_strtol_l.isra.0+0xd8>
 800895e:	f8c8 1000 	str.w	r1, [r8]
 8008962:	e794      	b.n	800888e <_strtol_l.isra.0+0x1a>
 8008964:	08009f99 	.word	0x08009f99

08008968 <_strtol_r>:
 8008968:	f7ff bf84 	b.w	8008874 <_strtol_l.isra.0>

0800896c <__ssputs_r>:
 800896c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008970:	688e      	ldr	r6, [r1, #8]
 8008972:	461f      	mov	r7, r3
 8008974:	42be      	cmp	r6, r7
 8008976:	680b      	ldr	r3, [r1, #0]
 8008978:	4682      	mov	sl, r0
 800897a:	460c      	mov	r4, r1
 800897c:	4690      	mov	r8, r2
 800897e:	d82d      	bhi.n	80089dc <__ssputs_r+0x70>
 8008980:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008984:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008988:	d026      	beq.n	80089d8 <__ssputs_r+0x6c>
 800898a:	6965      	ldr	r5, [r4, #20]
 800898c:	6909      	ldr	r1, [r1, #16]
 800898e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008992:	eba3 0901 	sub.w	r9, r3, r1
 8008996:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800899a:	1c7b      	adds	r3, r7, #1
 800899c:	444b      	add	r3, r9
 800899e:	106d      	asrs	r5, r5, #1
 80089a0:	429d      	cmp	r5, r3
 80089a2:	bf38      	it	cc
 80089a4:	461d      	movcc	r5, r3
 80089a6:	0553      	lsls	r3, r2, #21
 80089a8:	d527      	bpl.n	80089fa <__ssputs_r+0x8e>
 80089aa:	4629      	mov	r1, r5
 80089ac:	f7fe fc24 	bl	80071f8 <_malloc_r>
 80089b0:	4606      	mov	r6, r0
 80089b2:	b360      	cbz	r0, 8008a0e <__ssputs_r+0xa2>
 80089b4:	6921      	ldr	r1, [r4, #16]
 80089b6:	464a      	mov	r2, r9
 80089b8:	f000 fa18 	bl	8008dec <memcpy>
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80089c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089c6:	81a3      	strh	r3, [r4, #12]
 80089c8:	6126      	str	r6, [r4, #16]
 80089ca:	6165      	str	r5, [r4, #20]
 80089cc:	444e      	add	r6, r9
 80089ce:	eba5 0509 	sub.w	r5, r5, r9
 80089d2:	6026      	str	r6, [r4, #0]
 80089d4:	60a5      	str	r5, [r4, #8]
 80089d6:	463e      	mov	r6, r7
 80089d8:	42be      	cmp	r6, r7
 80089da:	d900      	bls.n	80089de <__ssputs_r+0x72>
 80089dc:	463e      	mov	r6, r7
 80089de:	6820      	ldr	r0, [r4, #0]
 80089e0:	4632      	mov	r2, r6
 80089e2:	4641      	mov	r1, r8
 80089e4:	f000 f9c6 	bl	8008d74 <memmove>
 80089e8:	68a3      	ldr	r3, [r4, #8]
 80089ea:	1b9b      	subs	r3, r3, r6
 80089ec:	60a3      	str	r3, [r4, #8]
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	4433      	add	r3, r6
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	2000      	movs	r0, #0
 80089f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fa:	462a      	mov	r2, r5
 80089fc:	f000 fd89 	bl	8009512 <_realloc_r>
 8008a00:	4606      	mov	r6, r0
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d1e0      	bne.n	80089c8 <__ssputs_r+0x5c>
 8008a06:	6921      	ldr	r1, [r4, #16]
 8008a08:	4650      	mov	r0, sl
 8008a0a:	f7fe fb81 	bl	8007110 <_free_r>
 8008a0e:	230c      	movs	r3, #12
 8008a10:	f8ca 3000 	str.w	r3, [sl]
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a1a:	81a3      	strh	r3, [r4, #12]
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a20:	e7e9      	b.n	80089f6 <__ssputs_r+0x8a>
	...

08008a24 <_svfiprintf_r>:
 8008a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a28:	4698      	mov	r8, r3
 8008a2a:	898b      	ldrh	r3, [r1, #12]
 8008a2c:	061b      	lsls	r3, r3, #24
 8008a2e:	b09d      	sub	sp, #116	@ 0x74
 8008a30:	4607      	mov	r7, r0
 8008a32:	460d      	mov	r5, r1
 8008a34:	4614      	mov	r4, r2
 8008a36:	d510      	bpl.n	8008a5a <_svfiprintf_r+0x36>
 8008a38:	690b      	ldr	r3, [r1, #16]
 8008a3a:	b973      	cbnz	r3, 8008a5a <_svfiprintf_r+0x36>
 8008a3c:	2140      	movs	r1, #64	@ 0x40
 8008a3e:	f7fe fbdb 	bl	80071f8 <_malloc_r>
 8008a42:	6028      	str	r0, [r5, #0]
 8008a44:	6128      	str	r0, [r5, #16]
 8008a46:	b930      	cbnz	r0, 8008a56 <_svfiprintf_r+0x32>
 8008a48:	230c      	movs	r3, #12
 8008a4a:	603b      	str	r3, [r7, #0]
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	b01d      	add	sp, #116	@ 0x74
 8008a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a56:	2340      	movs	r3, #64	@ 0x40
 8008a58:	616b      	str	r3, [r5, #20]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a5e:	2320      	movs	r3, #32
 8008a60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a64:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a68:	2330      	movs	r3, #48	@ 0x30
 8008a6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008c08 <_svfiprintf_r+0x1e4>
 8008a6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a72:	f04f 0901 	mov.w	r9, #1
 8008a76:	4623      	mov	r3, r4
 8008a78:	469a      	mov	sl, r3
 8008a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a7e:	b10a      	cbz	r2, 8008a84 <_svfiprintf_r+0x60>
 8008a80:	2a25      	cmp	r2, #37	@ 0x25
 8008a82:	d1f9      	bne.n	8008a78 <_svfiprintf_r+0x54>
 8008a84:	ebba 0b04 	subs.w	fp, sl, r4
 8008a88:	d00b      	beq.n	8008aa2 <_svfiprintf_r+0x7e>
 8008a8a:	465b      	mov	r3, fp
 8008a8c:	4622      	mov	r2, r4
 8008a8e:	4629      	mov	r1, r5
 8008a90:	4638      	mov	r0, r7
 8008a92:	f7ff ff6b 	bl	800896c <__ssputs_r>
 8008a96:	3001      	adds	r0, #1
 8008a98:	f000 80a7 	beq.w	8008bea <_svfiprintf_r+0x1c6>
 8008a9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a9e:	445a      	add	r2, fp
 8008aa0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 809f 	beq.w	8008bea <_svfiprintf_r+0x1c6>
 8008aac:	2300      	movs	r3, #0
 8008aae:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ab6:	f10a 0a01 	add.w	sl, sl, #1
 8008aba:	9304      	str	r3, [sp, #16]
 8008abc:	9307      	str	r3, [sp, #28]
 8008abe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ac2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ac4:	4654      	mov	r4, sl
 8008ac6:	2205      	movs	r2, #5
 8008ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008acc:	484e      	ldr	r0, [pc, #312]	@ (8008c08 <_svfiprintf_r+0x1e4>)
 8008ace:	f7f7 fb8f 	bl	80001f0 <memchr>
 8008ad2:	9a04      	ldr	r2, [sp, #16]
 8008ad4:	b9d8      	cbnz	r0, 8008b0e <_svfiprintf_r+0xea>
 8008ad6:	06d0      	lsls	r0, r2, #27
 8008ad8:	bf44      	itt	mi
 8008ada:	2320      	movmi	r3, #32
 8008adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ae0:	0711      	lsls	r1, r2, #28
 8008ae2:	bf44      	itt	mi
 8008ae4:	232b      	movmi	r3, #43	@ 0x2b
 8008ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008aea:	f89a 3000 	ldrb.w	r3, [sl]
 8008aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8008af0:	d015      	beq.n	8008b1e <_svfiprintf_r+0xfa>
 8008af2:	9a07      	ldr	r2, [sp, #28]
 8008af4:	4654      	mov	r4, sl
 8008af6:	2000      	movs	r0, #0
 8008af8:	f04f 0c0a 	mov.w	ip, #10
 8008afc:	4621      	mov	r1, r4
 8008afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b02:	3b30      	subs	r3, #48	@ 0x30
 8008b04:	2b09      	cmp	r3, #9
 8008b06:	d94b      	bls.n	8008ba0 <_svfiprintf_r+0x17c>
 8008b08:	b1b0      	cbz	r0, 8008b38 <_svfiprintf_r+0x114>
 8008b0a:	9207      	str	r2, [sp, #28]
 8008b0c:	e014      	b.n	8008b38 <_svfiprintf_r+0x114>
 8008b0e:	eba0 0308 	sub.w	r3, r0, r8
 8008b12:	fa09 f303 	lsl.w	r3, r9, r3
 8008b16:	4313      	orrs	r3, r2
 8008b18:	9304      	str	r3, [sp, #16]
 8008b1a:	46a2      	mov	sl, r4
 8008b1c:	e7d2      	b.n	8008ac4 <_svfiprintf_r+0xa0>
 8008b1e:	9b03      	ldr	r3, [sp, #12]
 8008b20:	1d19      	adds	r1, r3, #4
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	9103      	str	r1, [sp, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	bfbb      	ittet	lt
 8008b2a:	425b      	neglt	r3, r3
 8008b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b30:	9307      	strge	r3, [sp, #28]
 8008b32:	9307      	strlt	r3, [sp, #28]
 8008b34:	bfb8      	it	lt
 8008b36:	9204      	strlt	r2, [sp, #16]
 8008b38:	7823      	ldrb	r3, [r4, #0]
 8008b3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b3c:	d10a      	bne.n	8008b54 <_svfiprintf_r+0x130>
 8008b3e:	7863      	ldrb	r3, [r4, #1]
 8008b40:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b42:	d132      	bne.n	8008baa <_svfiprintf_r+0x186>
 8008b44:	9b03      	ldr	r3, [sp, #12]
 8008b46:	1d1a      	adds	r2, r3, #4
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	9203      	str	r2, [sp, #12]
 8008b4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b50:	3402      	adds	r4, #2
 8008b52:	9305      	str	r3, [sp, #20]
 8008b54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008c18 <_svfiprintf_r+0x1f4>
 8008b58:	7821      	ldrb	r1, [r4, #0]
 8008b5a:	2203      	movs	r2, #3
 8008b5c:	4650      	mov	r0, sl
 8008b5e:	f7f7 fb47 	bl	80001f0 <memchr>
 8008b62:	b138      	cbz	r0, 8008b74 <_svfiprintf_r+0x150>
 8008b64:	9b04      	ldr	r3, [sp, #16]
 8008b66:	eba0 000a 	sub.w	r0, r0, sl
 8008b6a:	2240      	movs	r2, #64	@ 0x40
 8008b6c:	4082      	lsls	r2, r0
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	3401      	adds	r4, #1
 8008b72:	9304      	str	r3, [sp, #16]
 8008b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b78:	4824      	ldr	r0, [pc, #144]	@ (8008c0c <_svfiprintf_r+0x1e8>)
 8008b7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b7e:	2206      	movs	r2, #6
 8008b80:	f7f7 fb36 	bl	80001f0 <memchr>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d036      	beq.n	8008bf6 <_svfiprintf_r+0x1d2>
 8008b88:	4b21      	ldr	r3, [pc, #132]	@ (8008c10 <_svfiprintf_r+0x1ec>)
 8008b8a:	bb1b      	cbnz	r3, 8008bd4 <_svfiprintf_r+0x1b0>
 8008b8c:	9b03      	ldr	r3, [sp, #12]
 8008b8e:	3307      	adds	r3, #7
 8008b90:	f023 0307 	bic.w	r3, r3, #7
 8008b94:	3308      	adds	r3, #8
 8008b96:	9303      	str	r3, [sp, #12]
 8008b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b9a:	4433      	add	r3, r6
 8008b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b9e:	e76a      	b.n	8008a76 <_svfiprintf_r+0x52>
 8008ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	2001      	movs	r0, #1
 8008ba8:	e7a8      	b.n	8008afc <_svfiprintf_r+0xd8>
 8008baa:	2300      	movs	r3, #0
 8008bac:	3401      	adds	r4, #1
 8008bae:	9305      	str	r3, [sp, #20]
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	f04f 0c0a 	mov.w	ip, #10
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bbc:	3a30      	subs	r2, #48	@ 0x30
 8008bbe:	2a09      	cmp	r2, #9
 8008bc0:	d903      	bls.n	8008bca <_svfiprintf_r+0x1a6>
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0c6      	beq.n	8008b54 <_svfiprintf_r+0x130>
 8008bc6:	9105      	str	r1, [sp, #20]
 8008bc8:	e7c4      	b.n	8008b54 <_svfiprintf_r+0x130>
 8008bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bce:	4604      	mov	r4, r0
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e7f0      	b.n	8008bb6 <_svfiprintf_r+0x192>
 8008bd4:	ab03      	add	r3, sp, #12
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	462a      	mov	r2, r5
 8008bda:	4b0e      	ldr	r3, [pc, #56]	@ (8008c14 <_svfiprintf_r+0x1f0>)
 8008bdc:	a904      	add	r1, sp, #16
 8008bde:	4638      	mov	r0, r7
 8008be0:	f7fc fc8e 	bl	8005500 <_printf_float>
 8008be4:	1c42      	adds	r2, r0, #1
 8008be6:	4606      	mov	r6, r0
 8008be8:	d1d6      	bne.n	8008b98 <_svfiprintf_r+0x174>
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	065b      	lsls	r3, r3, #25
 8008bee:	f53f af2d 	bmi.w	8008a4c <_svfiprintf_r+0x28>
 8008bf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bf4:	e72c      	b.n	8008a50 <_svfiprintf_r+0x2c>
 8008bf6:	ab03      	add	r3, sp, #12
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	462a      	mov	r2, r5
 8008bfc:	4b05      	ldr	r3, [pc, #20]	@ (8008c14 <_svfiprintf_r+0x1f0>)
 8008bfe:	a904      	add	r1, sp, #16
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7fc ff15 	bl	8005a30 <_printf_i>
 8008c06:	e7ed      	b.n	8008be4 <_svfiprintf_r+0x1c0>
 8008c08:	08009d95 	.word	0x08009d95
 8008c0c:	08009d9f 	.word	0x08009d9f
 8008c10:	08005501 	.word	0x08005501
 8008c14:	0800896d 	.word	0x0800896d
 8008c18:	08009d9b 	.word	0x08009d9b

08008c1c <__sflush_r>:
 8008c1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c24:	0716      	lsls	r6, r2, #28
 8008c26:	4605      	mov	r5, r0
 8008c28:	460c      	mov	r4, r1
 8008c2a:	d454      	bmi.n	8008cd6 <__sflush_r+0xba>
 8008c2c:	684b      	ldr	r3, [r1, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dc02      	bgt.n	8008c38 <__sflush_r+0x1c>
 8008c32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	dd48      	ble.n	8008cca <__sflush_r+0xae>
 8008c38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c3a:	2e00      	cmp	r6, #0
 8008c3c:	d045      	beq.n	8008cca <__sflush_r+0xae>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c44:	682f      	ldr	r7, [r5, #0]
 8008c46:	6a21      	ldr	r1, [r4, #32]
 8008c48:	602b      	str	r3, [r5, #0]
 8008c4a:	d030      	beq.n	8008cae <__sflush_r+0x92>
 8008c4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c4e:	89a3      	ldrh	r3, [r4, #12]
 8008c50:	0759      	lsls	r1, r3, #29
 8008c52:	d505      	bpl.n	8008c60 <__sflush_r+0x44>
 8008c54:	6863      	ldr	r3, [r4, #4]
 8008c56:	1ad2      	subs	r2, r2, r3
 8008c58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c5a:	b10b      	cbz	r3, 8008c60 <__sflush_r+0x44>
 8008c5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	2300      	movs	r3, #0
 8008c62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c64:	6a21      	ldr	r1, [r4, #32]
 8008c66:	4628      	mov	r0, r5
 8008c68:	47b0      	blx	r6
 8008c6a:	1c43      	adds	r3, r0, #1
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	d106      	bne.n	8008c7e <__sflush_r+0x62>
 8008c70:	6829      	ldr	r1, [r5, #0]
 8008c72:	291d      	cmp	r1, #29
 8008c74:	d82b      	bhi.n	8008cce <__sflush_r+0xb2>
 8008c76:	4a2a      	ldr	r2, [pc, #168]	@ (8008d20 <__sflush_r+0x104>)
 8008c78:	40ca      	lsrs	r2, r1
 8008c7a:	07d6      	lsls	r6, r2, #31
 8008c7c:	d527      	bpl.n	8008cce <__sflush_r+0xb2>
 8008c7e:	2200      	movs	r2, #0
 8008c80:	6062      	str	r2, [r4, #4]
 8008c82:	04d9      	lsls	r1, r3, #19
 8008c84:	6922      	ldr	r2, [r4, #16]
 8008c86:	6022      	str	r2, [r4, #0]
 8008c88:	d504      	bpl.n	8008c94 <__sflush_r+0x78>
 8008c8a:	1c42      	adds	r2, r0, #1
 8008c8c:	d101      	bne.n	8008c92 <__sflush_r+0x76>
 8008c8e:	682b      	ldr	r3, [r5, #0]
 8008c90:	b903      	cbnz	r3, 8008c94 <__sflush_r+0x78>
 8008c92:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c96:	602f      	str	r7, [r5, #0]
 8008c98:	b1b9      	cbz	r1, 8008cca <__sflush_r+0xae>
 8008c9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c9e:	4299      	cmp	r1, r3
 8008ca0:	d002      	beq.n	8008ca8 <__sflush_r+0x8c>
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	f7fe fa34 	bl	8007110 <_free_r>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cac:	e00d      	b.n	8008cca <__sflush_r+0xae>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	47b0      	blx	r6
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	1c50      	adds	r0, r2, #1
 8008cb8:	d1c9      	bne.n	8008c4e <__sflush_r+0x32>
 8008cba:	682b      	ldr	r3, [r5, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d0c6      	beq.n	8008c4e <__sflush_r+0x32>
 8008cc0:	2b1d      	cmp	r3, #29
 8008cc2:	d001      	beq.n	8008cc8 <__sflush_r+0xac>
 8008cc4:	2b16      	cmp	r3, #22
 8008cc6:	d11e      	bne.n	8008d06 <__sflush_r+0xea>
 8008cc8:	602f      	str	r7, [r5, #0]
 8008cca:	2000      	movs	r0, #0
 8008ccc:	e022      	b.n	8008d14 <__sflush_r+0xf8>
 8008cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cd2:	b21b      	sxth	r3, r3
 8008cd4:	e01b      	b.n	8008d0e <__sflush_r+0xf2>
 8008cd6:	690f      	ldr	r7, [r1, #16]
 8008cd8:	2f00      	cmp	r7, #0
 8008cda:	d0f6      	beq.n	8008cca <__sflush_r+0xae>
 8008cdc:	0793      	lsls	r3, r2, #30
 8008cde:	680e      	ldr	r6, [r1, #0]
 8008ce0:	bf08      	it	eq
 8008ce2:	694b      	ldreq	r3, [r1, #20]
 8008ce4:	600f      	str	r7, [r1, #0]
 8008ce6:	bf18      	it	ne
 8008ce8:	2300      	movne	r3, #0
 8008cea:	eba6 0807 	sub.w	r8, r6, r7
 8008cee:	608b      	str	r3, [r1, #8]
 8008cf0:	f1b8 0f00 	cmp.w	r8, #0
 8008cf4:	dde9      	ble.n	8008cca <__sflush_r+0xae>
 8008cf6:	6a21      	ldr	r1, [r4, #32]
 8008cf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008cfa:	4643      	mov	r3, r8
 8008cfc:	463a      	mov	r2, r7
 8008cfe:	4628      	mov	r0, r5
 8008d00:	47b0      	blx	r6
 8008d02:	2800      	cmp	r0, #0
 8008d04:	dc08      	bgt.n	8008d18 <__sflush_r+0xfc>
 8008d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	f04f 30ff 	mov.w	r0, #4294967295
 8008d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d18:	4407      	add	r7, r0
 8008d1a:	eba8 0800 	sub.w	r8, r8, r0
 8008d1e:	e7e7      	b.n	8008cf0 <__sflush_r+0xd4>
 8008d20:	20400001 	.word	0x20400001

08008d24 <_fflush_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	690b      	ldr	r3, [r1, #16]
 8008d28:	4605      	mov	r5, r0
 8008d2a:	460c      	mov	r4, r1
 8008d2c:	b913      	cbnz	r3, 8008d34 <_fflush_r+0x10>
 8008d2e:	2500      	movs	r5, #0
 8008d30:	4628      	mov	r0, r5
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
 8008d34:	b118      	cbz	r0, 8008d3e <_fflush_r+0x1a>
 8008d36:	6a03      	ldr	r3, [r0, #32]
 8008d38:	b90b      	cbnz	r3, 8008d3e <_fflush_r+0x1a>
 8008d3a:	f7fd fa31 	bl	80061a0 <__sinit>
 8008d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0f3      	beq.n	8008d2e <_fflush_r+0xa>
 8008d46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d48:	07d0      	lsls	r0, r2, #31
 8008d4a:	d404      	bmi.n	8008d56 <_fflush_r+0x32>
 8008d4c:	0599      	lsls	r1, r3, #22
 8008d4e:	d402      	bmi.n	8008d56 <_fflush_r+0x32>
 8008d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d52:	f7fd fb7a 	bl	800644a <__retarget_lock_acquire_recursive>
 8008d56:	4628      	mov	r0, r5
 8008d58:	4621      	mov	r1, r4
 8008d5a:	f7ff ff5f 	bl	8008c1c <__sflush_r>
 8008d5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d60:	07da      	lsls	r2, r3, #31
 8008d62:	4605      	mov	r5, r0
 8008d64:	d4e4      	bmi.n	8008d30 <_fflush_r+0xc>
 8008d66:	89a3      	ldrh	r3, [r4, #12]
 8008d68:	059b      	lsls	r3, r3, #22
 8008d6a:	d4e1      	bmi.n	8008d30 <_fflush_r+0xc>
 8008d6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d6e:	f7fd fb6d 	bl	800644c <__retarget_lock_release_recursive>
 8008d72:	e7dd      	b.n	8008d30 <_fflush_r+0xc>

08008d74 <memmove>:
 8008d74:	4288      	cmp	r0, r1
 8008d76:	b510      	push	{r4, lr}
 8008d78:	eb01 0402 	add.w	r4, r1, r2
 8008d7c:	d902      	bls.n	8008d84 <memmove+0x10>
 8008d7e:	4284      	cmp	r4, r0
 8008d80:	4623      	mov	r3, r4
 8008d82:	d807      	bhi.n	8008d94 <memmove+0x20>
 8008d84:	1e43      	subs	r3, r0, #1
 8008d86:	42a1      	cmp	r1, r4
 8008d88:	d008      	beq.n	8008d9c <memmove+0x28>
 8008d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d92:	e7f8      	b.n	8008d86 <memmove+0x12>
 8008d94:	4402      	add	r2, r0
 8008d96:	4601      	mov	r1, r0
 8008d98:	428a      	cmp	r2, r1
 8008d9a:	d100      	bne.n	8008d9e <memmove+0x2a>
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008da2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008da6:	e7f7      	b.n	8008d98 <memmove+0x24>

08008da8 <strncmp>:
 8008da8:	b510      	push	{r4, lr}
 8008daa:	b16a      	cbz	r2, 8008dc8 <strncmp+0x20>
 8008dac:	3901      	subs	r1, #1
 8008dae:	1884      	adds	r4, r0, r2
 8008db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008db4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d103      	bne.n	8008dc4 <strncmp+0x1c>
 8008dbc:	42a0      	cmp	r0, r4
 8008dbe:	d001      	beq.n	8008dc4 <strncmp+0x1c>
 8008dc0:	2a00      	cmp	r2, #0
 8008dc2:	d1f5      	bne.n	8008db0 <strncmp+0x8>
 8008dc4:	1ad0      	subs	r0, r2, r3
 8008dc6:	bd10      	pop	{r4, pc}
 8008dc8:	4610      	mov	r0, r2
 8008dca:	e7fc      	b.n	8008dc6 <strncmp+0x1e>

08008dcc <_sbrk_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	4d06      	ldr	r5, [pc, #24]	@ (8008de8 <_sbrk_r+0x1c>)
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	4608      	mov	r0, r1
 8008dd6:	602b      	str	r3, [r5, #0]
 8008dd8:	f7f9 fa54 	bl	8002284 <_sbrk>
 8008ddc:	1c43      	adds	r3, r0, #1
 8008dde:	d102      	bne.n	8008de6 <_sbrk_r+0x1a>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	b103      	cbz	r3, 8008de6 <_sbrk_r+0x1a>
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	bd38      	pop	{r3, r4, r5, pc}
 8008de8:	200004f4 	.word	0x200004f4

08008dec <memcpy>:
 8008dec:	440a      	add	r2, r1
 8008dee:	4291      	cmp	r1, r2
 8008df0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008df4:	d100      	bne.n	8008df8 <memcpy+0xc>
 8008df6:	4770      	bx	lr
 8008df8:	b510      	push	{r4, lr}
 8008dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e02:	4291      	cmp	r1, r2
 8008e04:	d1f9      	bne.n	8008dfa <memcpy+0xe>
 8008e06:	bd10      	pop	{r4, pc}

08008e08 <nan>:
 8008e08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008e10 <nan+0x8>
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	00000000 	.word	0x00000000
 8008e14:	7ff80000 	.word	0x7ff80000

08008e18 <__assert_func>:
 8008e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e1a:	4614      	mov	r4, r2
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	4b09      	ldr	r3, [pc, #36]	@ (8008e44 <__assert_func+0x2c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4605      	mov	r5, r0
 8008e24:	68d8      	ldr	r0, [r3, #12]
 8008e26:	b14c      	cbz	r4, 8008e3c <__assert_func+0x24>
 8008e28:	4b07      	ldr	r3, [pc, #28]	@ (8008e48 <__assert_func+0x30>)
 8008e2a:	9100      	str	r1, [sp, #0]
 8008e2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e30:	4906      	ldr	r1, [pc, #24]	@ (8008e4c <__assert_func+0x34>)
 8008e32:	462b      	mov	r3, r5
 8008e34:	f000 fba8 	bl	8009588 <fiprintf>
 8008e38:	f000 fbb8 	bl	80095ac <abort>
 8008e3c:	4b04      	ldr	r3, [pc, #16]	@ (8008e50 <__assert_func+0x38>)
 8008e3e:	461c      	mov	r4, r3
 8008e40:	e7f3      	b.n	8008e2a <__assert_func+0x12>
 8008e42:	bf00      	nop
 8008e44:	20000024 	.word	0x20000024
 8008e48:	08009dae 	.word	0x08009dae
 8008e4c:	08009dbb 	.word	0x08009dbb
 8008e50:	08009de9 	.word	0x08009de9

08008e54 <_calloc_r>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	fba1 5402 	umull	r5, r4, r1, r2
 8008e5a:	b934      	cbnz	r4, 8008e6a <_calloc_r+0x16>
 8008e5c:	4629      	mov	r1, r5
 8008e5e:	f7fe f9cb 	bl	80071f8 <_malloc_r>
 8008e62:	4606      	mov	r6, r0
 8008e64:	b928      	cbnz	r0, 8008e72 <_calloc_r+0x1e>
 8008e66:	4630      	mov	r0, r6
 8008e68:	bd70      	pop	{r4, r5, r6, pc}
 8008e6a:	220c      	movs	r2, #12
 8008e6c:	6002      	str	r2, [r0, #0]
 8008e6e:	2600      	movs	r6, #0
 8008e70:	e7f9      	b.n	8008e66 <_calloc_r+0x12>
 8008e72:	462a      	mov	r2, r5
 8008e74:	4621      	mov	r1, r4
 8008e76:	f7fd fa6b 	bl	8006350 <memset>
 8008e7a:	e7f4      	b.n	8008e66 <_calloc_r+0x12>

08008e7c <rshift>:
 8008e7c:	6903      	ldr	r3, [r0, #16]
 8008e7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008e82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e8a:	f100 0414 	add.w	r4, r0, #20
 8008e8e:	dd45      	ble.n	8008f1c <rshift+0xa0>
 8008e90:	f011 011f 	ands.w	r1, r1, #31
 8008e94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008e98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e9c:	d10c      	bne.n	8008eb8 <rshift+0x3c>
 8008e9e:	f100 0710 	add.w	r7, r0, #16
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	42b1      	cmp	r1, r6
 8008ea6:	d334      	bcc.n	8008f12 <rshift+0x96>
 8008ea8:	1a9b      	subs	r3, r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	1eea      	subs	r2, r5, #3
 8008eae:	4296      	cmp	r6, r2
 8008eb0:	bf38      	it	cc
 8008eb2:	2300      	movcc	r3, #0
 8008eb4:	4423      	add	r3, r4
 8008eb6:	e015      	b.n	8008ee4 <rshift+0x68>
 8008eb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ebc:	f1c1 0820 	rsb	r8, r1, #32
 8008ec0:	40cf      	lsrs	r7, r1
 8008ec2:	f105 0e04 	add.w	lr, r5, #4
 8008ec6:	46a1      	mov	r9, r4
 8008ec8:	4576      	cmp	r6, lr
 8008eca:	46f4      	mov	ip, lr
 8008ecc:	d815      	bhi.n	8008efa <rshift+0x7e>
 8008ece:	1a9a      	subs	r2, r3, r2
 8008ed0:	0092      	lsls	r2, r2, #2
 8008ed2:	3a04      	subs	r2, #4
 8008ed4:	3501      	adds	r5, #1
 8008ed6:	42ae      	cmp	r6, r5
 8008ed8:	bf38      	it	cc
 8008eda:	2200      	movcc	r2, #0
 8008edc:	18a3      	adds	r3, r4, r2
 8008ede:	50a7      	str	r7, [r4, r2]
 8008ee0:	b107      	cbz	r7, 8008ee4 <rshift+0x68>
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	1b1a      	subs	r2, r3, r4
 8008ee6:	42a3      	cmp	r3, r4
 8008ee8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008eec:	bf08      	it	eq
 8008eee:	2300      	moveq	r3, #0
 8008ef0:	6102      	str	r2, [r0, #16]
 8008ef2:	bf08      	it	eq
 8008ef4:	6143      	streq	r3, [r0, #20]
 8008ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008efa:	f8dc c000 	ldr.w	ip, [ip]
 8008efe:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f02:	ea4c 0707 	orr.w	r7, ip, r7
 8008f06:	f849 7b04 	str.w	r7, [r9], #4
 8008f0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f0e:	40cf      	lsrs	r7, r1
 8008f10:	e7da      	b.n	8008ec8 <rshift+0x4c>
 8008f12:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f16:	f847 cf04 	str.w	ip, [r7, #4]!
 8008f1a:	e7c3      	b.n	8008ea4 <rshift+0x28>
 8008f1c:	4623      	mov	r3, r4
 8008f1e:	e7e1      	b.n	8008ee4 <rshift+0x68>

08008f20 <__hexdig_fun>:
 8008f20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008f24:	2b09      	cmp	r3, #9
 8008f26:	d802      	bhi.n	8008f2e <__hexdig_fun+0xe>
 8008f28:	3820      	subs	r0, #32
 8008f2a:	b2c0      	uxtb	r0, r0
 8008f2c:	4770      	bx	lr
 8008f2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008f32:	2b05      	cmp	r3, #5
 8008f34:	d801      	bhi.n	8008f3a <__hexdig_fun+0x1a>
 8008f36:	3847      	subs	r0, #71	@ 0x47
 8008f38:	e7f7      	b.n	8008f2a <__hexdig_fun+0xa>
 8008f3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008f3e:	2b05      	cmp	r3, #5
 8008f40:	d801      	bhi.n	8008f46 <__hexdig_fun+0x26>
 8008f42:	3827      	subs	r0, #39	@ 0x27
 8008f44:	e7f1      	b.n	8008f2a <__hexdig_fun+0xa>
 8008f46:	2000      	movs	r0, #0
 8008f48:	4770      	bx	lr
	...

08008f4c <__gethex>:
 8008f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f50:	b085      	sub	sp, #20
 8008f52:	468a      	mov	sl, r1
 8008f54:	9302      	str	r3, [sp, #8]
 8008f56:	680b      	ldr	r3, [r1, #0]
 8008f58:	9001      	str	r0, [sp, #4]
 8008f5a:	4690      	mov	r8, r2
 8008f5c:	1c9c      	adds	r4, r3, #2
 8008f5e:	46a1      	mov	r9, r4
 8008f60:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008f64:	2830      	cmp	r0, #48	@ 0x30
 8008f66:	d0fa      	beq.n	8008f5e <__gethex+0x12>
 8008f68:	eba9 0303 	sub.w	r3, r9, r3
 8008f6c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008f70:	f7ff ffd6 	bl	8008f20 <__hexdig_fun>
 8008f74:	4605      	mov	r5, r0
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d168      	bne.n	800904c <__gethex+0x100>
 8008f7a:	49a0      	ldr	r1, [pc, #640]	@ (80091fc <__gethex+0x2b0>)
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	4648      	mov	r0, r9
 8008f80:	f7ff ff12 	bl	8008da8 <strncmp>
 8008f84:	4607      	mov	r7, r0
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d167      	bne.n	800905a <__gethex+0x10e>
 8008f8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008f8e:	4626      	mov	r6, r4
 8008f90:	f7ff ffc6 	bl	8008f20 <__hexdig_fun>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d062      	beq.n	800905e <__gethex+0x112>
 8008f98:	4623      	mov	r3, r4
 8008f9a:	7818      	ldrb	r0, [r3, #0]
 8008f9c:	2830      	cmp	r0, #48	@ 0x30
 8008f9e:	4699      	mov	r9, r3
 8008fa0:	f103 0301 	add.w	r3, r3, #1
 8008fa4:	d0f9      	beq.n	8008f9a <__gethex+0x4e>
 8008fa6:	f7ff ffbb 	bl	8008f20 <__hexdig_fun>
 8008faa:	fab0 f580 	clz	r5, r0
 8008fae:	096d      	lsrs	r5, r5, #5
 8008fb0:	f04f 0b01 	mov.w	fp, #1
 8008fb4:	464a      	mov	r2, r9
 8008fb6:	4616      	mov	r6, r2
 8008fb8:	3201      	adds	r2, #1
 8008fba:	7830      	ldrb	r0, [r6, #0]
 8008fbc:	f7ff ffb0 	bl	8008f20 <__hexdig_fun>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	d1f8      	bne.n	8008fb6 <__gethex+0x6a>
 8008fc4:	498d      	ldr	r1, [pc, #564]	@ (80091fc <__gethex+0x2b0>)
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f7ff feed 	bl	8008da8 <strncmp>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d13f      	bne.n	8009052 <__gethex+0x106>
 8008fd2:	b944      	cbnz	r4, 8008fe6 <__gethex+0x9a>
 8008fd4:	1c74      	adds	r4, r6, #1
 8008fd6:	4622      	mov	r2, r4
 8008fd8:	4616      	mov	r6, r2
 8008fda:	3201      	adds	r2, #1
 8008fdc:	7830      	ldrb	r0, [r6, #0]
 8008fde:	f7ff ff9f 	bl	8008f20 <__hexdig_fun>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d1f8      	bne.n	8008fd8 <__gethex+0x8c>
 8008fe6:	1ba4      	subs	r4, r4, r6
 8008fe8:	00a7      	lsls	r7, r4, #2
 8008fea:	7833      	ldrb	r3, [r6, #0]
 8008fec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008ff0:	2b50      	cmp	r3, #80	@ 0x50
 8008ff2:	d13e      	bne.n	8009072 <__gethex+0x126>
 8008ff4:	7873      	ldrb	r3, [r6, #1]
 8008ff6:	2b2b      	cmp	r3, #43	@ 0x2b
 8008ff8:	d033      	beq.n	8009062 <__gethex+0x116>
 8008ffa:	2b2d      	cmp	r3, #45	@ 0x2d
 8008ffc:	d034      	beq.n	8009068 <__gethex+0x11c>
 8008ffe:	1c71      	adds	r1, r6, #1
 8009000:	2400      	movs	r4, #0
 8009002:	7808      	ldrb	r0, [r1, #0]
 8009004:	f7ff ff8c 	bl	8008f20 <__hexdig_fun>
 8009008:	1e43      	subs	r3, r0, #1
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b18      	cmp	r3, #24
 800900e:	d830      	bhi.n	8009072 <__gethex+0x126>
 8009010:	f1a0 0210 	sub.w	r2, r0, #16
 8009014:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009018:	f7ff ff82 	bl	8008f20 <__hexdig_fun>
 800901c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009020:	fa5f fc8c 	uxtb.w	ip, ip
 8009024:	f1bc 0f18 	cmp.w	ip, #24
 8009028:	f04f 030a 	mov.w	r3, #10
 800902c:	d91e      	bls.n	800906c <__gethex+0x120>
 800902e:	b104      	cbz	r4, 8009032 <__gethex+0xe6>
 8009030:	4252      	negs	r2, r2
 8009032:	4417      	add	r7, r2
 8009034:	f8ca 1000 	str.w	r1, [sl]
 8009038:	b1ed      	cbz	r5, 8009076 <__gethex+0x12a>
 800903a:	f1bb 0f00 	cmp.w	fp, #0
 800903e:	bf0c      	ite	eq
 8009040:	2506      	moveq	r5, #6
 8009042:	2500      	movne	r5, #0
 8009044:	4628      	mov	r0, r5
 8009046:	b005      	add	sp, #20
 8009048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904c:	2500      	movs	r5, #0
 800904e:	462c      	mov	r4, r5
 8009050:	e7b0      	b.n	8008fb4 <__gethex+0x68>
 8009052:	2c00      	cmp	r4, #0
 8009054:	d1c7      	bne.n	8008fe6 <__gethex+0x9a>
 8009056:	4627      	mov	r7, r4
 8009058:	e7c7      	b.n	8008fea <__gethex+0x9e>
 800905a:	464e      	mov	r6, r9
 800905c:	462f      	mov	r7, r5
 800905e:	2501      	movs	r5, #1
 8009060:	e7c3      	b.n	8008fea <__gethex+0x9e>
 8009062:	2400      	movs	r4, #0
 8009064:	1cb1      	adds	r1, r6, #2
 8009066:	e7cc      	b.n	8009002 <__gethex+0xb6>
 8009068:	2401      	movs	r4, #1
 800906a:	e7fb      	b.n	8009064 <__gethex+0x118>
 800906c:	fb03 0002 	mla	r0, r3, r2, r0
 8009070:	e7ce      	b.n	8009010 <__gethex+0xc4>
 8009072:	4631      	mov	r1, r6
 8009074:	e7de      	b.n	8009034 <__gethex+0xe8>
 8009076:	eba6 0309 	sub.w	r3, r6, r9
 800907a:	3b01      	subs	r3, #1
 800907c:	4629      	mov	r1, r5
 800907e:	2b07      	cmp	r3, #7
 8009080:	dc0a      	bgt.n	8009098 <__gethex+0x14c>
 8009082:	9801      	ldr	r0, [sp, #4]
 8009084:	f7fe f944 	bl	8007310 <_Balloc>
 8009088:	4604      	mov	r4, r0
 800908a:	b940      	cbnz	r0, 800909e <__gethex+0x152>
 800908c:	4b5c      	ldr	r3, [pc, #368]	@ (8009200 <__gethex+0x2b4>)
 800908e:	4602      	mov	r2, r0
 8009090:	21e4      	movs	r1, #228	@ 0xe4
 8009092:	485c      	ldr	r0, [pc, #368]	@ (8009204 <__gethex+0x2b8>)
 8009094:	f7ff fec0 	bl	8008e18 <__assert_func>
 8009098:	3101      	adds	r1, #1
 800909a:	105b      	asrs	r3, r3, #1
 800909c:	e7ef      	b.n	800907e <__gethex+0x132>
 800909e:	f100 0a14 	add.w	sl, r0, #20
 80090a2:	2300      	movs	r3, #0
 80090a4:	4655      	mov	r5, sl
 80090a6:	469b      	mov	fp, r3
 80090a8:	45b1      	cmp	r9, r6
 80090aa:	d337      	bcc.n	800911c <__gethex+0x1d0>
 80090ac:	f845 bb04 	str.w	fp, [r5], #4
 80090b0:	eba5 050a 	sub.w	r5, r5, sl
 80090b4:	10ad      	asrs	r5, r5, #2
 80090b6:	6125      	str	r5, [r4, #16]
 80090b8:	4658      	mov	r0, fp
 80090ba:	f7fe fa1b 	bl	80074f4 <__hi0bits>
 80090be:	016d      	lsls	r5, r5, #5
 80090c0:	f8d8 6000 	ldr.w	r6, [r8]
 80090c4:	1a2d      	subs	r5, r5, r0
 80090c6:	42b5      	cmp	r5, r6
 80090c8:	dd54      	ble.n	8009174 <__gethex+0x228>
 80090ca:	1bad      	subs	r5, r5, r6
 80090cc:	4629      	mov	r1, r5
 80090ce:	4620      	mov	r0, r4
 80090d0:	f7fe fda7 	bl	8007c22 <__any_on>
 80090d4:	4681      	mov	r9, r0
 80090d6:	b178      	cbz	r0, 80090f8 <__gethex+0x1ac>
 80090d8:	1e6b      	subs	r3, r5, #1
 80090da:	1159      	asrs	r1, r3, #5
 80090dc:	f003 021f 	and.w	r2, r3, #31
 80090e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80090e4:	f04f 0901 	mov.w	r9, #1
 80090e8:	fa09 f202 	lsl.w	r2, r9, r2
 80090ec:	420a      	tst	r2, r1
 80090ee:	d003      	beq.n	80090f8 <__gethex+0x1ac>
 80090f0:	454b      	cmp	r3, r9
 80090f2:	dc36      	bgt.n	8009162 <__gethex+0x216>
 80090f4:	f04f 0902 	mov.w	r9, #2
 80090f8:	4629      	mov	r1, r5
 80090fa:	4620      	mov	r0, r4
 80090fc:	f7ff febe 	bl	8008e7c <rshift>
 8009100:	442f      	add	r7, r5
 8009102:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009106:	42bb      	cmp	r3, r7
 8009108:	da42      	bge.n	8009190 <__gethex+0x244>
 800910a:	9801      	ldr	r0, [sp, #4]
 800910c:	4621      	mov	r1, r4
 800910e:	f7fe f93f 	bl	8007390 <_Bfree>
 8009112:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009114:	2300      	movs	r3, #0
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	25a3      	movs	r5, #163	@ 0xa3
 800911a:	e793      	b.n	8009044 <__gethex+0xf8>
 800911c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009120:	2a2e      	cmp	r2, #46	@ 0x2e
 8009122:	d012      	beq.n	800914a <__gethex+0x1fe>
 8009124:	2b20      	cmp	r3, #32
 8009126:	d104      	bne.n	8009132 <__gethex+0x1e6>
 8009128:	f845 bb04 	str.w	fp, [r5], #4
 800912c:	f04f 0b00 	mov.w	fp, #0
 8009130:	465b      	mov	r3, fp
 8009132:	7830      	ldrb	r0, [r6, #0]
 8009134:	9303      	str	r3, [sp, #12]
 8009136:	f7ff fef3 	bl	8008f20 <__hexdig_fun>
 800913a:	9b03      	ldr	r3, [sp, #12]
 800913c:	f000 000f 	and.w	r0, r0, #15
 8009140:	4098      	lsls	r0, r3
 8009142:	ea4b 0b00 	orr.w	fp, fp, r0
 8009146:	3304      	adds	r3, #4
 8009148:	e7ae      	b.n	80090a8 <__gethex+0x15c>
 800914a:	45b1      	cmp	r9, r6
 800914c:	d8ea      	bhi.n	8009124 <__gethex+0x1d8>
 800914e:	492b      	ldr	r1, [pc, #172]	@ (80091fc <__gethex+0x2b0>)
 8009150:	9303      	str	r3, [sp, #12]
 8009152:	2201      	movs	r2, #1
 8009154:	4630      	mov	r0, r6
 8009156:	f7ff fe27 	bl	8008da8 <strncmp>
 800915a:	9b03      	ldr	r3, [sp, #12]
 800915c:	2800      	cmp	r0, #0
 800915e:	d1e1      	bne.n	8009124 <__gethex+0x1d8>
 8009160:	e7a2      	b.n	80090a8 <__gethex+0x15c>
 8009162:	1ea9      	subs	r1, r5, #2
 8009164:	4620      	mov	r0, r4
 8009166:	f7fe fd5c 	bl	8007c22 <__any_on>
 800916a:	2800      	cmp	r0, #0
 800916c:	d0c2      	beq.n	80090f4 <__gethex+0x1a8>
 800916e:	f04f 0903 	mov.w	r9, #3
 8009172:	e7c1      	b.n	80090f8 <__gethex+0x1ac>
 8009174:	da09      	bge.n	800918a <__gethex+0x23e>
 8009176:	1b75      	subs	r5, r6, r5
 8009178:	4621      	mov	r1, r4
 800917a:	9801      	ldr	r0, [sp, #4]
 800917c:	462a      	mov	r2, r5
 800917e:	f7fe fb17 	bl	80077b0 <__lshift>
 8009182:	1b7f      	subs	r7, r7, r5
 8009184:	4604      	mov	r4, r0
 8009186:	f100 0a14 	add.w	sl, r0, #20
 800918a:	f04f 0900 	mov.w	r9, #0
 800918e:	e7b8      	b.n	8009102 <__gethex+0x1b6>
 8009190:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009194:	42bd      	cmp	r5, r7
 8009196:	dd6f      	ble.n	8009278 <__gethex+0x32c>
 8009198:	1bed      	subs	r5, r5, r7
 800919a:	42ae      	cmp	r6, r5
 800919c:	dc34      	bgt.n	8009208 <__gethex+0x2bc>
 800919e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d022      	beq.n	80091ec <__gethex+0x2a0>
 80091a6:	2b03      	cmp	r3, #3
 80091a8:	d024      	beq.n	80091f4 <__gethex+0x2a8>
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d115      	bne.n	80091da <__gethex+0x28e>
 80091ae:	42ae      	cmp	r6, r5
 80091b0:	d113      	bne.n	80091da <__gethex+0x28e>
 80091b2:	2e01      	cmp	r6, #1
 80091b4:	d10b      	bne.n	80091ce <__gethex+0x282>
 80091b6:	9a02      	ldr	r2, [sp, #8]
 80091b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	2301      	movs	r3, #1
 80091c0:	6123      	str	r3, [r4, #16]
 80091c2:	f8ca 3000 	str.w	r3, [sl]
 80091c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091c8:	2562      	movs	r5, #98	@ 0x62
 80091ca:	601c      	str	r4, [r3, #0]
 80091cc:	e73a      	b.n	8009044 <__gethex+0xf8>
 80091ce:	1e71      	subs	r1, r6, #1
 80091d0:	4620      	mov	r0, r4
 80091d2:	f7fe fd26 	bl	8007c22 <__any_on>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d1ed      	bne.n	80091b6 <__gethex+0x26a>
 80091da:	9801      	ldr	r0, [sp, #4]
 80091dc:	4621      	mov	r1, r4
 80091de:	f7fe f8d7 	bl	8007390 <_Bfree>
 80091e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091e4:	2300      	movs	r3, #0
 80091e6:	6013      	str	r3, [r2, #0]
 80091e8:	2550      	movs	r5, #80	@ 0x50
 80091ea:	e72b      	b.n	8009044 <__gethex+0xf8>
 80091ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1f3      	bne.n	80091da <__gethex+0x28e>
 80091f2:	e7e0      	b.n	80091b6 <__gethex+0x26a>
 80091f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1dd      	bne.n	80091b6 <__gethex+0x26a>
 80091fa:	e7ee      	b.n	80091da <__gethex+0x28e>
 80091fc:	08009d93 	.word	0x08009d93
 8009200:	08009d29 	.word	0x08009d29
 8009204:	08009dea 	.word	0x08009dea
 8009208:	1e6f      	subs	r7, r5, #1
 800920a:	f1b9 0f00 	cmp.w	r9, #0
 800920e:	d130      	bne.n	8009272 <__gethex+0x326>
 8009210:	b127      	cbz	r7, 800921c <__gethex+0x2d0>
 8009212:	4639      	mov	r1, r7
 8009214:	4620      	mov	r0, r4
 8009216:	f7fe fd04 	bl	8007c22 <__any_on>
 800921a:	4681      	mov	r9, r0
 800921c:	117a      	asrs	r2, r7, #5
 800921e:	2301      	movs	r3, #1
 8009220:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009224:	f007 071f 	and.w	r7, r7, #31
 8009228:	40bb      	lsls	r3, r7
 800922a:	4213      	tst	r3, r2
 800922c:	4629      	mov	r1, r5
 800922e:	4620      	mov	r0, r4
 8009230:	bf18      	it	ne
 8009232:	f049 0902 	orrne.w	r9, r9, #2
 8009236:	f7ff fe21 	bl	8008e7c <rshift>
 800923a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800923e:	1b76      	subs	r6, r6, r5
 8009240:	2502      	movs	r5, #2
 8009242:	f1b9 0f00 	cmp.w	r9, #0
 8009246:	d047      	beq.n	80092d8 <__gethex+0x38c>
 8009248:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800924c:	2b02      	cmp	r3, #2
 800924e:	d015      	beq.n	800927c <__gethex+0x330>
 8009250:	2b03      	cmp	r3, #3
 8009252:	d017      	beq.n	8009284 <__gethex+0x338>
 8009254:	2b01      	cmp	r3, #1
 8009256:	d109      	bne.n	800926c <__gethex+0x320>
 8009258:	f019 0f02 	tst.w	r9, #2
 800925c:	d006      	beq.n	800926c <__gethex+0x320>
 800925e:	f8da 3000 	ldr.w	r3, [sl]
 8009262:	ea49 0903 	orr.w	r9, r9, r3
 8009266:	f019 0f01 	tst.w	r9, #1
 800926a:	d10e      	bne.n	800928a <__gethex+0x33e>
 800926c:	f045 0510 	orr.w	r5, r5, #16
 8009270:	e032      	b.n	80092d8 <__gethex+0x38c>
 8009272:	f04f 0901 	mov.w	r9, #1
 8009276:	e7d1      	b.n	800921c <__gethex+0x2d0>
 8009278:	2501      	movs	r5, #1
 800927a:	e7e2      	b.n	8009242 <__gethex+0x2f6>
 800927c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800927e:	f1c3 0301 	rsb	r3, r3, #1
 8009282:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009286:	2b00      	cmp	r3, #0
 8009288:	d0f0      	beq.n	800926c <__gethex+0x320>
 800928a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800928e:	f104 0314 	add.w	r3, r4, #20
 8009292:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009296:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800929a:	f04f 0c00 	mov.w	ip, #0
 800929e:	4618      	mov	r0, r3
 80092a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80092a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80092a8:	d01b      	beq.n	80092e2 <__gethex+0x396>
 80092aa:	3201      	adds	r2, #1
 80092ac:	6002      	str	r2, [r0, #0]
 80092ae:	2d02      	cmp	r5, #2
 80092b0:	f104 0314 	add.w	r3, r4, #20
 80092b4:	d13c      	bne.n	8009330 <__gethex+0x3e4>
 80092b6:	f8d8 2000 	ldr.w	r2, [r8]
 80092ba:	3a01      	subs	r2, #1
 80092bc:	42b2      	cmp	r2, r6
 80092be:	d109      	bne.n	80092d4 <__gethex+0x388>
 80092c0:	1171      	asrs	r1, r6, #5
 80092c2:	2201      	movs	r2, #1
 80092c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092c8:	f006 061f 	and.w	r6, r6, #31
 80092cc:	fa02 f606 	lsl.w	r6, r2, r6
 80092d0:	421e      	tst	r6, r3
 80092d2:	d13a      	bne.n	800934a <__gethex+0x3fe>
 80092d4:	f045 0520 	orr.w	r5, r5, #32
 80092d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092da:	601c      	str	r4, [r3, #0]
 80092dc:	9b02      	ldr	r3, [sp, #8]
 80092de:	601f      	str	r7, [r3, #0]
 80092e0:	e6b0      	b.n	8009044 <__gethex+0xf8>
 80092e2:	4299      	cmp	r1, r3
 80092e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80092e8:	d8d9      	bhi.n	800929e <__gethex+0x352>
 80092ea:	68a3      	ldr	r3, [r4, #8]
 80092ec:	459b      	cmp	fp, r3
 80092ee:	db17      	blt.n	8009320 <__gethex+0x3d4>
 80092f0:	6861      	ldr	r1, [r4, #4]
 80092f2:	9801      	ldr	r0, [sp, #4]
 80092f4:	3101      	adds	r1, #1
 80092f6:	f7fe f80b 	bl	8007310 <_Balloc>
 80092fa:	4681      	mov	r9, r0
 80092fc:	b918      	cbnz	r0, 8009306 <__gethex+0x3ba>
 80092fe:	4b1a      	ldr	r3, [pc, #104]	@ (8009368 <__gethex+0x41c>)
 8009300:	4602      	mov	r2, r0
 8009302:	2184      	movs	r1, #132	@ 0x84
 8009304:	e6c5      	b.n	8009092 <__gethex+0x146>
 8009306:	6922      	ldr	r2, [r4, #16]
 8009308:	3202      	adds	r2, #2
 800930a:	f104 010c 	add.w	r1, r4, #12
 800930e:	0092      	lsls	r2, r2, #2
 8009310:	300c      	adds	r0, #12
 8009312:	f7ff fd6b 	bl	8008dec <memcpy>
 8009316:	4621      	mov	r1, r4
 8009318:	9801      	ldr	r0, [sp, #4]
 800931a:	f7fe f839 	bl	8007390 <_Bfree>
 800931e:	464c      	mov	r4, r9
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009328:	6122      	str	r2, [r4, #16]
 800932a:	2201      	movs	r2, #1
 800932c:	615a      	str	r2, [r3, #20]
 800932e:	e7be      	b.n	80092ae <__gethex+0x362>
 8009330:	6922      	ldr	r2, [r4, #16]
 8009332:	455a      	cmp	r2, fp
 8009334:	dd0b      	ble.n	800934e <__gethex+0x402>
 8009336:	2101      	movs	r1, #1
 8009338:	4620      	mov	r0, r4
 800933a:	f7ff fd9f 	bl	8008e7c <rshift>
 800933e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009342:	3701      	adds	r7, #1
 8009344:	42bb      	cmp	r3, r7
 8009346:	f6ff aee0 	blt.w	800910a <__gethex+0x1be>
 800934a:	2501      	movs	r5, #1
 800934c:	e7c2      	b.n	80092d4 <__gethex+0x388>
 800934e:	f016 061f 	ands.w	r6, r6, #31
 8009352:	d0fa      	beq.n	800934a <__gethex+0x3fe>
 8009354:	4453      	add	r3, sl
 8009356:	f1c6 0620 	rsb	r6, r6, #32
 800935a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800935e:	f7fe f8c9 	bl	80074f4 <__hi0bits>
 8009362:	42b0      	cmp	r0, r6
 8009364:	dbe7      	blt.n	8009336 <__gethex+0x3ea>
 8009366:	e7f0      	b.n	800934a <__gethex+0x3fe>
 8009368:	08009d29 	.word	0x08009d29

0800936c <L_shift>:
 800936c:	f1c2 0208 	rsb	r2, r2, #8
 8009370:	0092      	lsls	r2, r2, #2
 8009372:	b570      	push	{r4, r5, r6, lr}
 8009374:	f1c2 0620 	rsb	r6, r2, #32
 8009378:	6843      	ldr	r3, [r0, #4]
 800937a:	6804      	ldr	r4, [r0, #0]
 800937c:	fa03 f506 	lsl.w	r5, r3, r6
 8009380:	432c      	orrs	r4, r5
 8009382:	40d3      	lsrs	r3, r2
 8009384:	6004      	str	r4, [r0, #0]
 8009386:	f840 3f04 	str.w	r3, [r0, #4]!
 800938a:	4288      	cmp	r0, r1
 800938c:	d3f4      	bcc.n	8009378 <L_shift+0xc>
 800938e:	bd70      	pop	{r4, r5, r6, pc}

08009390 <__match>:
 8009390:	b530      	push	{r4, r5, lr}
 8009392:	6803      	ldr	r3, [r0, #0]
 8009394:	3301      	adds	r3, #1
 8009396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800939a:	b914      	cbnz	r4, 80093a2 <__match+0x12>
 800939c:	6003      	str	r3, [r0, #0]
 800939e:	2001      	movs	r0, #1
 80093a0:	bd30      	pop	{r4, r5, pc}
 80093a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80093aa:	2d19      	cmp	r5, #25
 80093ac:	bf98      	it	ls
 80093ae:	3220      	addls	r2, #32
 80093b0:	42a2      	cmp	r2, r4
 80093b2:	d0f0      	beq.n	8009396 <__match+0x6>
 80093b4:	2000      	movs	r0, #0
 80093b6:	e7f3      	b.n	80093a0 <__match+0x10>

080093b8 <__hexnan>:
 80093b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	680b      	ldr	r3, [r1, #0]
 80093be:	6801      	ldr	r1, [r0, #0]
 80093c0:	115e      	asrs	r6, r3, #5
 80093c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80093c6:	f013 031f 	ands.w	r3, r3, #31
 80093ca:	b087      	sub	sp, #28
 80093cc:	bf18      	it	ne
 80093ce:	3604      	addne	r6, #4
 80093d0:	2500      	movs	r5, #0
 80093d2:	1f37      	subs	r7, r6, #4
 80093d4:	4682      	mov	sl, r0
 80093d6:	4690      	mov	r8, r2
 80093d8:	9301      	str	r3, [sp, #4]
 80093da:	f846 5c04 	str.w	r5, [r6, #-4]
 80093de:	46b9      	mov	r9, r7
 80093e0:	463c      	mov	r4, r7
 80093e2:	9502      	str	r5, [sp, #8]
 80093e4:	46ab      	mov	fp, r5
 80093e6:	784a      	ldrb	r2, [r1, #1]
 80093e8:	1c4b      	adds	r3, r1, #1
 80093ea:	9303      	str	r3, [sp, #12]
 80093ec:	b342      	cbz	r2, 8009440 <__hexnan+0x88>
 80093ee:	4610      	mov	r0, r2
 80093f0:	9105      	str	r1, [sp, #20]
 80093f2:	9204      	str	r2, [sp, #16]
 80093f4:	f7ff fd94 	bl	8008f20 <__hexdig_fun>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	d151      	bne.n	80094a0 <__hexnan+0xe8>
 80093fc:	9a04      	ldr	r2, [sp, #16]
 80093fe:	9905      	ldr	r1, [sp, #20]
 8009400:	2a20      	cmp	r2, #32
 8009402:	d818      	bhi.n	8009436 <__hexnan+0x7e>
 8009404:	9b02      	ldr	r3, [sp, #8]
 8009406:	459b      	cmp	fp, r3
 8009408:	dd13      	ble.n	8009432 <__hexnan+0x7a>
 800940a:	454c      	cmp	r4, r9
 800940c:	d206      	bcs.n	800941c <__hexnan+0x64>
 800940e:	2d07      	cmp	r5, #7
 8009410:	dc04      	bgt.n	800941c <__hexnan+0x64>
 8009412:	462a      	mov	r2, r5
 8009414:	4649      	mov	r1, r9
 8009416:	4620      	mov	r0, r4
 8009418:	f7ff ffa8 	bl	800936c <L_shift>
 800941c:	4544      	cmp	r4, r8
 800941e:	d952      	bls.n	80094c6 <__hexnan+0x10e>
 8009420:	2300      	movs	r3, #0
 8009422:	f1a4 0904 	sub.w	r9, r4, #4
 8009426:	f844 3c04 	str.w	r3, [r4, #-4]
 800942a:	f8cd b008 	str.w	fp, [sp, #8]
 800942e:	464c      	mov	r4, r9
 8009430:	461d      	mov	r5, r3
 8009432:	9903      	ldr	r1, [sp, #12]
 8009434:	e7d7      	b.n	80093e6 <__hexnan+0x2e>
 8009436:	2a29      	cmp	r2, #41	@ 0x29
 8009438:	d157      	bne.n	80094ea <__hexnan+0x132>
 800943a:	3102      	adds	r1, #2
 800943c:	f8ca 1000 	str.w	r1, [sl]
 8009440:	f1bb 0f00 	cmp.w	fp, #0
 8009444:	d051      	beq.n	80094ea <__hexnan+0x132>
 8009446:	454c      	cmp	r4, r9
 8009448:	d206      	bcs.n	8009458 <__hexnan+0xa0>
 800944a:	2d07      	cmp	r5, #7
 800944c:	dc04      	bgt.n	8009458 <__hexnan+0xa0>
 800944e:	462a      	mov	r2, r5
 8009450:	4649      	mov	r1, r9
 8009452:	4620      	mov	r0, r4
 8009454:	f7ff ff8a 	bl	800936c <L_shift>
 8009458:	4544      	cmp	r4, r8
 800945a:	d936      	bls.n	80094ca <__hexnan+0x112>
 800945c:	f1a8 0204 	sub.w	r2, r8, #4
 8009460:	4623      	mov	r3, r4
 8009462:	f853 1b04 	ldr.w	r1, [r3], #4
 8009466:	f842 1f04 	str.w	r1, [r2, #4]!
 800946a:	429f      	cmp	r7, r3
 800946c:	d2f9      	bcs.n	8009462 <__hexnan+0xaa>
 800946e:	1b3b      	subs	r3, r7, r4
 8009470:	f023 0303 	bic.w	r3, r3, #3
 8009474:	3304      	adds	r3, #4
 8009476:	3401      	adds	r4, #1
 8009478:	3e03      	subs	r6, #3
 800947a:	42b4      	cmp	r4, r6
 800947c:	bf88      	it	hi
 800947e:	2304      	movhi	r3, #4
 8009480:	4443      	add	r3, r8
 8009482:	2200      	movs	r2, #0
 8009484:	f843 2b04 	str.w	r2, [r3], #4
 8009488:	429f      	cmp	r7, r3
 800948a:	d2fb      	bcs.n	8009484 <__hexnan+0xcc>
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	b91b      	cbnz	r3, 8009498 <__hexnan+0xe0>
 8009490:	4547      	cmp	r7, r8
 8009492:	d128      	bne.n	80094e6 <__hexnan+0x12e>
 8009494:	2301      	movs	r3, #1
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	2005      	movs	r0, #5
 800949a:	b007      	add	sp, #28
 800949c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a0:	3501      	adds	r5, #1
 80094a2:	2d08      	cmp	r5, #8
 80094a4:	f10b 0b01 	add.w	fp, fp, #1
 80094a8:	dd06      	ble.n	80094b8 <__hexnan+0x100>
 80094aa:	4544      	cmp	r4, r8
 80094ac:	d9c1      	bls.n	8009432 <__hexnan+0x7a>
 80094ae:	2300      	movs	r3, #0
 80094b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80094b4:	2501      	movs	r5, #1
 80094b6:	3c04      	subs	r4, #4
 80094b8:	6822      	ldr	r2, [r4, #0]
 80094ba:	f000 000f 	and.w	r0, r0, #15
 80094be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80094c2:	6020      	str	r0, [r4, #0]
 80094c4:	e7b5      	b.n	8009432 <__hexnan+0x7a>
 80094c6:	2508      	movs	r5, #8
 80094c8:	e7b3      	b.n	8009432 <__hexnan+0x7a>
 80094ca:	9b01      	ldr	r3, [sp, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0dd      	beq.n	800948c <__hexnan+0xd4>
 80094d0:	f1c3 0320 	rsb	r3, r3, #32
 80094d4:	f04f 32ff 	mov.w	r2, #4294967295
 80094d8:	40da      	lsrs	r2, r3
 80094da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80094de:	4013      	ands	r3, r2
 80094e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80094e4:	e7d2      	b.n	800948c <__hexnan+0xd4>
 80094e6:	3f04      	subs	r7, #4
 80094e8:	e7d0      	b.n	800948c <__hexnan+0xd4>
 80094ea:	2004      	movs	r0, #4
 80094ec:	e7d5      	b.n	800949a <__hexnan+0xe2>

080094ee <__ascii_mbtowc>:
 80094ee:	b082      	sub	sp, #8
 80094f0:	b901      	cbnz	r1, 80094f4 <__ascii_mbtowc+0x6>
 80094f2:	a901      	add	r1, sp, #4
 80094f4:	b142      	cbz	r2, 8009508 <__ascii_mbtowc+0x1a>
 80094f6:	b14b      	cbz	r3, 800950c <__ascii_mbtowc+0x1e>
 80094f8:	7813      	ldrb	r3, [r2, #0]
 80094fa:	600b      	str	r3, [r1, #0]
 80094fc:	7812      	ldrb	r2, [r2, #0]
 80094fe:	1e10      	subs	r0, r2, #0
 8009500:	bf18      	it	ne
 8009502:	2001      	movne	r0, #1
 8009504:	b002      	add	sp, #8
 8009506:	4770      	bx	lr
 8009508:	4610      	mov	r0, r2
 800950a:	e7fb      	b.n	8009504 <__ascii_mbtowc+0x16>
 800950c:	f06f 0001 	mvn.w	r0, #1
 8009510:	e7f8      	b.n	8009504 <__ascii_mbtowc+0x16>

08009512 <_realloc_r>:
 8009512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009516:	4607      	mov	r7, r0
 8009518:	4614      	mov	r4, r2
 800951a:	460d      	mov	r5, r1
 800951c:	b921      	cbnz	r1, 8009528 <_realloc_r+0x16>
 800951e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009522:	4611      	mov	r1, r2
 8009524:	f7fd be68 	b.w	80071f8 <_malloc_r>
 8009528:	b92a      	cbnz	r2, 8009536 <_realloc_r+0x24>
 800952a:	f7fd fdf1 	bl	8007110 <_free_r>
 800952e:	4625      	mov	r5, r4
 8009530:	4628      	mov	r0, r5
 8009532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009536:	f000 f840 	bl	80095ba <_malloc_usable_size_r>
 800953a:	4284      	cmp	r4, r0
 800953c:	4606      	mov	r6, r0
 800953e:	d802      	bhi.n	8009546 <_realloc_r+0x34>
 8009540:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009544:	d8f4      	bhi.n	8009530 <_realloc_r+0x1e>
 8009546:	4621      	mov	r1, r4
 8009548:	4638      	mov	r0, r7
 800954a:	f7fd fe55 	bl	80071f8 <_malloc_r>
 800954e:	4680      	mov	r8, r0
 8009550:	b908      	cbnz	r0, 8009556 <_realloc_r+0x44>
 8009552:	4645      	mov	r5, r8
 8009554:	e7ec      	b.n	8009530 <_realloc_r+0x1e>
 8009556:	42b4      	cmp	r4, r6
 8009558:	4622      	mov	r2, r4
 800955a:	4629      	mov	r1, r5
 800955c:	bf28      	it	cs
 800955e:	4632      	movcs	r2, r6
 8009560:	f7ff fc44 	bl	8008dec <memcpy>
 8009564:	4629      	mov	r1, r5
 8009566:	4638      	mov	r0, r7
 8009568:	f7fd fdd2 	bl	8007110 <_free_r>
 800956c:	e7f1      	b.n	8009552 <_realloc_r+0x40>

0800956e <__ascii_wctomb>:
 800956e:	4603      	mov	r3, r0
 8009570:	4608      	mov	r0, r1
 8009572:	b141      	cbz	r1, 8009586 <__ascii_wctomb+0x18>
 8009574:	2aff      	cmp	r2, #255	@ 0xff
 8009576:	d904      	bls.n	8009582 <__ascii_wctomb+0x14>
 8009578:	228a      	movs	r2, #138	@ 0x8a
 800957a:	601a      	str	r2, [r3, #0]
 800957c:	f04f 30ff 	mov.w	r0, #4294967295
 8009580:	4770      	bx	lr
 8009582:	700a      	strb	r2, [r1, #0]
 8009584:	2001      	movs	r0, #1
 8009586:	4770      	bx	lr

08009588 <fiprintf>:
 8009588:	b40e      	push	{r1, r2, r3}
 800958a:	b503      	push	{r0, r1, lr}
 800958c:	4601      	mov	r1, r0
 800958e:	ab03      	add	r3, sp, #12
 8009590:	4805      	ldr	r0, [pc, #20]	@ (80095a8 <fiprintf+0x20>)
 8009592:	f853 2b04 	ldr.w	r2, [r3], #4
 8009596:	6800      	ldr	r0, [r0, #0]
 8009598:	9301      	str	r3, [sp, #4]
 800959a:	f000 f83f 	bl	800961c <_vfiprintf_r>
 800959e:	b002      	add	sp, #8
 80095a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095a4:	b003      	add	sp, #12
 80095a6:	4770      	bx	lr
 80095a8:	20000024 	.word	0x20000024

080095ac <abort>:
 80095ac:	b508      	push	{r3, lr}
 80095ae:	2006      	movs	r0, #6
 80095b0:	f000 fa08 	bl	80099c4 <raise>
 80095b4:	2001      	movs	r0, #1
 80095b6:	f7f8 fded 	bl	8002194 <_exit>

080095ba <_malloc_usable_size_r>:
 80095ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095be:	1f18      	subs	r0, r3, #4
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	bfbc      	itt	lt
 80095c4:	580b      	ldrlt	r3, [r1, r0]
 80095c6:	18c0      	addlt	r0, r0, r3
 80095c8:	4770      	bx	lr

080095ca <__sfputc_r>:
 80095ca:	6893      	ldr	r3, [r2, #8]
 80095cc:	3b01      	subs	r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	b410      	push	{r4}
 80095d2:	6093      	str	r3, [r2, #8]
 80095d4:	da08      	bge.n	80095e8 <__sfputc_r+0x1e>
 80095d6:	6994      	ldr	r4, [r2, #24]
 80095d8:	42a3      	cmp	r3, r4
 80095da:	db01      	blt.n	80095e0 <__sfputc_r+0x16>
 80095dc:	290a      	cmp	r1, #10
 80095de:	d103      	bne.n	80095e8 <__sfputc_r+0x1e>
 80095e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095e4:	f000 b932 	b.w	800984c <__swbuf_r>
 80095e8:	6813      	ldr	r3, [r2, #0]
 80095ea:	1c58      	adds	r0, r3, #1
 80095ec:	6010      	str	r0, [r2, #0]
 80095ee:	7019      	strb	r1, [r3, #0]
 80095f0:	4608      	mov	r0, r1
 80095f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <__sfputs_r>:
 80095f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fa:	4606      	mov	r6, r0
 80095fc:	460f      	mov	r7, r1
 80095fe:	4614      	mov	r4, r2
 8009600:	18d5      	adds	r5, r2, r3
 8009602:	42ac      	cmp	r4, r5
 8009604:	d101      	bne.n	800960a <__sfputs_r+0x12>
 8009606:	2000      	movs	r0, #0
 8009608:	e007      	b.n	800961a <__sfputs_r+0x22>
 800960a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800960e:	463a      	mov	r2, r7
 8009610:	4630      	mov	r0, r6
 8009612:	f7ff ffda 	bl	80095ca <__sfputc_r>
 8009616:	1c43      	adds	r3, r0, #1
 8009618:	d1f3      	bne.n	8009602 <__sfputs_r+0xa>
 800961a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800961c <_vfiprintf_r>:
 800961c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009620:	460d      	mov	r5, r1
 8009622:	b09d      	sub	sp, #116	@ 0x74
 8009624:	4614      	mov	r4, r2
 8009626:	4698      	mov	r8, r3
 8009628:	4606      	mov	r6, r0
 800962a:	b118      	cbz	r0, 8009634 <_vfiprintf_r+0x18>
 800962c:	6a03      	ldr	r3, [r0, #32]
 800962e:	b90b      	cbnz	r3, 8009634 <_vfiprintf_r+0x18>
 8009630:	f7fc fdb6 	bl	80061a0 <__sinit>
 8009634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009636:	07d9      	lsls	r1, r3, #31
 8009638:	d405      	bmi.n	8009646 <_vfiprintf_r+0x2a>
 800963a:	89ab      	ldrh	r3, [r5, #12]
 800963c:	059a      	lsls	r2, r3, #22
 800963e:	d402      	bmi.n	8009646 <_vfiprintf_r+0x2a>
 8009640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009642:	f7fc ff02 	bl	800644a <__retarget_lock_acquire_recursive>
 8009646:	89ab      	ldrh	r3, [r5, #12]
 8009648:	071b      	lsls	r3, r3, #28
 800964a:	d501      	bpl.n	8009650 <_vfiprintf_r+0x34>
 800964c:	692b      	ldr	r3, [r5, #16]
 800964e:	b99b      	cbnz	r3, 8009678 <_vfiprintf_r+0x5c>
 8009650:	4629      	mov	r1, r5
 8009652:	4630      	mov	r0, r6
 8009654:	f000 f938 	bl	80098c8 <__swsetup_r>
 8009658:	b170      	cbz	r0, 8009678 <_vfiprintf_r+0x5c>
 800965a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800965c:	07dc      	lsls	r4, r3, #31
 800965e:	d504      	bpl.n	800966a <_vfiprintf_r+0x4e>
 8009660:	f04f 30ff 	mov.w	r0, #4294967295
 8009664:	b01d      	add	sp, #116	@ 0x74
 8009666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966a:	89ab      	ldrh	r3, [r5, #12]
 800966c:	0598      	lsls	r0, r3, #22
 800966e:	d4f7      	bmi.n	8009660 <_vfiprintf_r+0x44>
 8009670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009672:	f7fc feeb 	bl	800644c <__retarget_lock_release_recursive>
 8009676:	e7f3      	b.n	8009660 <_vfiprintf_r+0x44>
 8009678:	2300      	movs	r3, #0
 800967a:	9309      	str	r3, [sp, #36]	@ 0x24
 800967c:	2320      	movs	r3, #32
 800967e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009682:	f8cd 800c 	str.w	r8, [sp, #12]
 8009686:	2330      	movs	r3, #48	@ 0x30
 8009688:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009838 <_vfiprintf_r+0x21c>
 800968c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009690:	f04f 0901 	mov.w	r9, #1
 8009694:	4623      	mov	r3, r4
 8009696:	469a      	mov	sl, r3
 8009698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800969c:	b10a      	cbz	r2, 80096a2 <_vfiprintf_r+0x86>
 800969e:	2a25      	cmp	r2, #37	@ 0x25
 80096a0:	d1f9      	bne.n	8009696 <_vfiprintf_r+0x7a>
 80096a2:	ebba 0b04 	subs.w	fp, sl, r4
 80096a6:	d00b      	beq.n	80096c0 <_vfiprintf_r+0xa4>
 80096a8:	465b      	mov	r3, fp
 80096aa:	4622      	mov	r2, r4
 80096ac:	4629      	mov	r1, r5
 80096ae:	4630      	mov	r0, r6
 80096b0:	f7ff ffa2 	bl	80095f8 <__sfputs_r>
 80096b4:	3001      	adds	r0, #1
 80096b6:	f000 80a7 	beq.w	8009808 <_vfiprintf_r+0x1ec>
 80096ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096bc:	445a      	add	r2, fp
 80096be:	9209      	str	r2, [sp, #36]	@ 0x24
 80096c0:	f89a 3000 	ldrb.w	r3, [sl]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 809f 	beq.w	8009808 <_vfiprintf_r+0x1ec>
 80096ca:	2300      	movs	r3, #0
 80096cc:	f04f 32ff 	mov.w	r2, #4294967295
 80096d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096d4:	f10a 0a01 	add.w	sl, sl, #1
 80096d8:	9304      	str	r3, [sp, #16]
 80096da:	9307      	str	r3, [sp, #28]
 80096dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80096e2:	4654      	mov	r4, sl
 80096e4:	2205      	movs	r2, #5
 80096e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ea:	4853      	ldr	r0, [pc, #332]	@ (8009838 <_vfiprintf_r+0x21c>)
 80096ec:	f7f6 fd80 	bl	80001f0 <memchr>
 80096f0:	9a04      	ldr	r2, [sp, #16]
 80096f2:	b9d8      	cbnz	r0, 800972c <_vfiprintf_r+0x110>
 80096f4:	06d1      	lsls	r1, r2, #27
 80096f6:	bf44      	itt	mi
 80096f8:	2320      	movmi	r3, #32
 80096fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096fe:	0713      	lsls	r3, r2, #28
 8009700:	bf44      	itt	mi
 8009702:	232b      	movmi	r3, #43	@ 0x2b
 8009704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009708:	f89a 3000 	ldrb.w	r3, [sl]
 800970c:	2b2a      	cmp	r3, #42	@ 0x2a
 800970e:	d015      	beq.n	800973c <_vfiprintf_r+0x120>
 8009710:	9a07      	ldr	r2, [sp, #28]
 8009712:	4654      	mov	r4, sl
 8009714:	2000      	movs	r0, #0
 8009716:	f04f 0c0a 	mov.w	ip, #10
 800971a:	4621      	mov	r1, r4
 800971c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009720:	3b30      	subs	r3, #48	@ 0x30
 8009722:	2b09      	cmp	r3, #9
 8009724:	d94b      	bls.n	80097be <_vfiprintf_r+0x1a2>
 8009726:	b1b0      	cbz	r0, 8009756 <_vfiprintf_r+0x13a>
 8009728:	9207      	str	r2, [sp, #28]
 800972a:	e014      	b.n	8009756 <_vfiprintf_r+0x13a>
 800972c:	eba0 0308 	sub.w	r3, r0, r8
 8009730:	fa09 f303 	lsl.w	r3, r9, r3
 8009734:	4313      	orrs	r3, r2
 8009736:	9304      	str	r3, [sp, #16]
 8009738:	46a2      	mov	sl, r4
 800973a:	e7d2      	b.n	80096e2 <_vfiprintf_r+0xc6>
 800973c:	9b03      	ldr	r3, [sp, #12]
 800973e:	1d19      	adds	r1, r3, #4
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	9103      	str	r1, [sp, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	bfbb      	ittet	lt
 8009748:	425b      	neglt	r3, r3
 800974a:	f042 0202 	orrlt.w	r2, r2, #2
 800974e:	9307      	strge	r3, [sp, #28]
 8009750:	9307      	strlt	r3, [sp, #28]
 8009752:	bfb8      	it	lt
 8009754:	9204      	strlt	r2, [sp, #16]
 8009756:	7823      	ldrb	r3, [r4, #0]
 8009758:	2b2e      	cmp	r3, #46	@ 0x2e
 800975a:	d10a      	bne.n	8009772 <_vfiprintf_r+0x156>
 800975c:	7863      	ldrb	r3, [r4, #1]
 800975e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009760:	d132      	bne.n	80097c8 <_vfiprintf_r+0x1ac>
 8009762:	9b03      	ldr	r3, [sp, #12]
 8009764:	1d1a      	adds	r2, r3, #4
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	9203      	str	r2, [sp, #12]
 800976a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800976e:	3402      	adds	r4, #2
 8009770:	9305      	str	r3, [sp, #20]
 8009772:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009848 <_vfiprintf_r+0x22c>
 8009776:	7821      	ldrb	r1, [r4, #0]
 8009778:	2203      	movs	r2, #3
 800977a:	4650      	mov	r0, sl
 800977c:	f7f6 fd38 	bl	80001f0 <memchr>
 8009780:	b138      	cbz	r0, 8009792 <_vfiprintf_r+0x176>
 8009782:	9b04      	ldr	r3, [sp, #16]
 8009784:	eba0 000a 	sub.w	r0, r0, sl
 8009788:	2240      	movs	r2, #64	@ 0x40
 800978a:	4082      	lsls	r2, r0
 800978c:	4313      	orrs	r3, r2
 800978e:	3401      	adds	r4, #1
 8009790:	9304      	str	r3, [sp, #16]
 8009792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009796:	4829      	ldr	r0, [pc, #164]	@ (800983c <_vfiprintf_r+0x220>)
 8009798:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800979c:	2206      	movs	r2, #6
 800979e:	f7f6 fd27 	bl	80001f0 <memchr>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d03f      	beq.n	8009826 <_vfiprintf_r+0x20a>
 80097a6:	4b26      	ldr	r3, [pc, #152]	@ (8009840 <_vfiprintf_r+0x224>)
 80097a8:	bb1b      	cbnz	r3, 80097f2 <_vfiprintf_r+0x1d6>
 80097aa:	9b03      	ldr	r3, [sp, #12]
 80097ac:	3307      	adds	r3, #7
 80097ae:	f023 0307 	bic.w	r3, r3, #7
 80097b2:	3308      	adds	r3, #8
 80097b4:	9303      	str	r3, [sp, #12]
 80097b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097b8:	443b      	add	r3, r7
 80097ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80097bc:	e76a      	b.n	8009694 <_vfiprintf_r+0x78>
 80097be:	fb0c 3202 	mla	r2, ip, r2, r3
 80097c2:	460c      	mov	r4, r1
 80097c4:	2001      	movs	r0, #1
 80097c6:	e7a8      	b.n	800971a <_vfiprintf_r+0xfe>
 80097c8:	2300      	movs	r3, #0
 80097ca:	3401      	adds	r4, #1
 80097cc:	9305      	str	r3, [sp, #20]
 80097ce:	4619      	mov	r1, r3
 80097d0:	f04f 0c0a 	mov.w	ip, #10
 80097d4:	4620      	mov	r0, r4
 80097d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097da:	3a30      	subs	r2, #48	@ 0x30
 80097dc:	2a09      	cmp	r2, #9
 80097de:	d903      	bls.n	80097e8 <_vfiprintf_r+0x1cc>
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0c6      	beq.n	8009772 <_vfiprintf_r+0x156>
 80097e4:	9105      	str	r1, [sp, #20]
 80097e6:	e7c4      	b.n	8009772 <_vfiprintf_r+0x156>
 80097e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ec:	4604      	mov	r4, r0
 80097ee:	2301      	movs	r3, #1
 80097f0:	e7f0      	b.n	80097d4 <_vfiprintf_r+0x1b8>
 80097f2:	ab03      	add	r3, sp, #12
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	462a      	mov	r2, r5
 80097f8:	4b12      	ldr	r3, [pc, #72]	@ (8009844 <_vfiprintf_r+0x228>)
 80097fa:	a904      	add	r1, sp, #16
 80097fc:	4630      	mov	r0, r6
 80097fe:	f7fb fe7f 	bl	8005500 <_printf_float>
 8009802:	4607      	mov	r7, r0
 8009804:	1c78      	adds	r0, r7, #1
 8009806:	d1d6      	bne.n	80097b6 <_vfiprintf_r+0x19a>
 8009808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800980a:	07d9      	lsls	r1, r3, #31
 800980c:	d405      	bmi.n	800981a <_vfiprintf_r+0x1fe>
 800980e:	89ab      	ldrh	r3, [r5, #12]
 8009810:	059a      	lsls	r2, r3, #22
 8009812:	d402      	bmi.n	800981a <_vfiprintf_r+0x1fe>
 8009814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009816:	f7fc fe19 	bl	800644c <__retarget_lock_release_recursive>
 800981a:	89ab      	ldrh	r3, [r5, #12]
 800981c:	065b      	lsls	r3, r3, #25
 800981e:	f53f af1f 	bmi.w	8009660 <_vfiprintf_r+0x44>
 8009822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009824:	e71e      	b.n	8009664 <_vfiprintf_r+0x48>
 8009826:	ab03      	add	r3, sp, #12
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	462a      	mov	r2, r5
 800982c:	4b05      	ldr	r3, [pc, #20]	@ (8009844 <_vfiprintf_r+0x228>)
 800982e:	a904      	add	r1, sp, #16
 8009830:	4630      	mov	r0, r6
 8009832:	f7fc f8fd 	bl	8005a30 <_printf_i>
 8009836:	e7e4      	b.n	8009802 <_vfiprintf_r+0x1e6>
 8009838:	08009d95 	.word	0x08009d95
 800983c:	08009d9f 	.word	0x08009d9f
 8009840:	08005501 	.word	0x08005501
 8009844:	080095f9 	.word	0x080095f9
 8009848:	08009d9b 	.word	0x08009d9b

0800984c <__swbuf_r>:
 800984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984e:	460e      	mov	r6, r1
 8009850:	4614      	mov	r4, r2
 8009852:	4605      	mov	r5, r0
 8009854:	b118      	cbz	r0, 800985e <__swbuf_r+0x12>
 8009856:	6a03      	ldr	r3, [r0, #32]
 8009858:	b90b      	cbnz	r3, 800985e <__swbuf_r+0x12>
 800985a:	f7fc fca1 	bl	80061a0 <__sinit>
 800985e:	69a3      	ldr	r3, [r4, #24]
 8009860:	60a3      	str	r3, [r4, #8]
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	071a      	lsls	r2, r3, #28
 8009866:	d501      	bpl.n	800986c <__swbuf_r+0x20>
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	b943      	cbnz	r3, 800987e <__swbuf_r+0x32>
 800986c:	4621      	mov	r1, r4
 800986e:	4628      	mov	r0, r5
 8009870:	f000 f82a 	bl	80098c8 <__swsetup_r>
 8009874:	b118      	cbz	r0, 800987e <__swbuf_r+0x32>
 8009876:	f04f 37ff 	mov.w	r7, #4294967295
 800987a:	4638      	mov	r0, r7
 800987c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	6922      	ldr	r2, [r4, #16]
 8009882:	1a98      	subs	r0, r3, r2
 8009884:	6963      	ldr	r3, [r4, #20]
 8009886:	b2f6      	uxtb	r6, r6
 8009888:	4283      	cmp	r3, r0
 800988a:	4637      	mov	r7, r6
 800988c:	dc05      	bgt.n	800989a <__swbuf_r+0x4e>
 800988e:	4621      	mov	r1, r4
 8009890:	4628      	mov	r0, r5
 8009892:	f7ff fa47 	bl	8008d24 <_fflush_r>
 8009896:	2800      	cmp	r0, #0
 8009898:	d1ed      	bne.n	8009876 <__swbuf_r+0x2a>
 800989a:	68a3      	ldr	r3, [r4, #8]
 800989c:	3b01      	subs	r3, #1
 800989e:	60a3      	str	r3, [r4, #8]
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	6022      	str	r2, [r4, #0]
 80098a6:	701e      	strb	r6, [r3, #0]
 80098a8:	6962      	ldr	r2, [r4, #20]
 80098aa:	1c43      	adds	r3, r0, #1
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d004      	beq.n	80098ba <__swbuf_r+0x6e>
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	07db      	lsls	r3, r3, #31
 80098b4:	d5e1      	bpl.n	800987a <__swbuf_r+0x2e>
 80098b6:	2e0a      	cmp	r6, #10
 80098b8:	d1df      	bne.n	800987a <__swbuf_r+0x2e>
 80098ba:	4621      	mov	r1, r4
 80098bc:	4628      	mov	r0, r5
 80098be:	f7ff fa31 	bl	8008d24 <_fflush_r>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	d0d9      	beq.n	800987a <__swbuf_r+0x2e>
 80098c6:	e7d6      	b.n	8009876 <__swbuf_r+0x2a>

080098c8 <__swsetup_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	4b29      	ldr	r3, [pc, #164]	@ (8009970 <__swsetup_r+0xa8>)
 80098cc:	4605      	mov	r5, r0
 80098ce:	6818      	ldr	r0, [r3, #0]
 80098d0:	460c      	mov	r4, r1
 80098d2:	b118      	cbz	r0, 80098dc <__swsetup_r+0x14>
 80098d4:	6a03      	ldr	r3, [r0, #32]
 80098d6:	b90b      	cbnz	r3, 80098dc <__swsetup_r+0x14>
 80098d8:	f7fc fc62 	bl	80061a0 <__sinit>
 80098dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e0:	0719      	lsls	r1, r3, #28
 80098e2:	d422      	bmi.n	800992a <__swsetup_r+0x62>
 80098e4:	06da      	lsls	r2, r3, #27
 80098e6:	d407      	bmi.n	80098f8 <__swsetup_r+0x30>
 80098e8:	2209      	movs	r2, #9
 80098ea:	602a      	str	r2, [r5, #0]
 80098ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098f0:	81a3      	strh	r3, [r4, #12]
 80098f2:	f04f 30ff 	mov.w	r0, #4294967295
 80098f6:	e033      	b.n	8009960 <__swsetup_r+0x98>
 80098f8:	0758      	lsls	r0, r3, #29
 80098fa:	d512      	bpl.n	8009922 <__swsetup_r+0x5a>
 80098fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098fe:	b141      	cbz	r1, 8009912 <__swsetup_r+0x4a>
 8009900:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009904:	4299      	cmp	r1, r3
 8009906:	d002      	beq.n	800990e <__swsetup_r+0x46>
 8009908:	4628      	mov	r0, r5
 800990a:	f7fd fc01 	bl	8007110 <_free_r>
 800990e:	2300      	movs	r3, #0
 8009910:	6363      	str	r3, [r4, #52]	@ 0x34
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009918:	81a3      	strh	r3, [r4, #12]
 800991a:	2300      	movs	r3, #0
 800991c:	6063      	str	r3, [r4, #4]
 800991e:	6923      	ldr	r3, [r4, #16]
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	89a3      	ldrh	r3, [r4, #12]
 8009924:	f043 0308 	orr.w	r3, r3, #8
 8009928:	81a3      	strh	r3, [r4, #12]
 800992a:	6923      	ldr	r3, [r4, #16]
 800992c:	b94b      	cbnz	r3, 8009942 <__swsetup_r+0x7a>
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009938:	d003      	beq.n	8009942 <__swsetup_r+0x7a>
 800993a:	4621      	mov	r1, r4
 800993c:	4628      	mov	r0, r5
 800993e:	f000 f883 	bl	8009a48 <__smakebuf_r>
 8009942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009946:	f013 0201 	ands.w	r2, r3, #1
 800994a:	d00a      	beq.n	8009962 <__swsetup_r+0x9a>
 800994c:	2200      	movs	r2, #0
 800994e:	60a2      	str	r2, [r4, #8]
 8009950:	6962      	ldr	r2, [r4, #20]
 8009952:	4252      	negs	r2, r2
 8009954:	61a2      	str	r2, [r4, #24]
 8009956:	6922      	ldr	r2, [r4, #16]
 8009958:	b942      	cbnz	r2, 800996c <__swsetup_r+0xa4>
 800995a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800995e:	d1c5      	bne.n	80098ec <__swsetup_r+0x24>
 8009960:	bd38      	pop	{r3, r4, r5, pc}
 8009962:	0799      	lsls	r1, r3, #30
 8009964:	bf58      	it	pl
 8009966:	6962      	ldrpl	r2, [r4, #20]
 8009968:	60a2      	str	r2, [r4, #8]
 800996a:	e7f4      	b.n	8009956 <__swsetup_r+0x8e>
 800996c:	2000      	movs	r0, #0
 800996e:	e7f7      	b.n	8009960 <__swsetup_r+0x98>
 8009970:	20000024 	.word	0x20000024

08009974 <_raise_r>:
 8009974:	291f      	cmp	r1, #31
 8009976:	b538      	push	{r3, r4, r5, lr}
 8009978:	4605      	mov	r5, r0
 800997a:	460c      	mov	r4, r1
 800997c:	d904      	bls.n	8009988 <_raise_r+0x14>
 800997e:	2316      	movs	r3, #22
 8009980:	6003      	str	r3, [r0, #0]
 8009982:	f04f 30ff 	mov.w	r0, #4294967295
 8009986:	bd38      	pop	{r3, r4, r5, pc}
 8009988:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800998a:	b112      	cbz	r2, 8009992 <_raise_r+0x1e>
 800998c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009990:	b94b      	cbnz	r3, 80099a6 <_raise_r+0x32>
 8009992:	4628      	mov	r0, r5
 8009994:	f000 f830 	bl	80099f8 <_getpid_r>
 8009998:	4622      	mov	r2, r4
 800999a:	4601      	mov	r1, r0
 800999c:	4628      	mov	r0, r5
 800999e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099a2:	f000 b817 	b.w	80099d4 <_kill_r>
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d00a      	beq.n	80099c0 <_raise_r+0x4c>
 80099aa:	1c59      	adds	r1, r3, #1
 80099ac:	d103      	bne.n	80099b6 <_raise_r+0x42>
 80099ae:	2316      	movs	r3, #22
 80099b0:	6003      	str	r3, [r0, #0]
 80099b2:	2001      	movs	r0, #1
 80099b4:	e7e7      	b.n	8009986 <_raise_r+0x12>
 80099b6:	2100      	movs	r1, #0
 80099b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80099bc:	4620      	mov	r0, r4
 80099be:	4798      	blx	r3
 80099c0:	2000      	movs	r0, #0
 80099c2:	e7e0      	b.n	8009986 <_raise_r+0x12>

080099c4 <raise>:
 80099c4:	4b02      	ldr	r3, [pc, #8]	@ (80099d0 <raise+0xc>)
 80099c6:	4601      	mov	r1, r0
 80099c8:	6818      	ldr	r0, [r3, #0]
 80099ca:	f7ff bfd3 	b.w	8009974 <_raise_r>
 80099ce:	bf00      	nop
 80099d0:	20000024 	.word	0x20000024

080099d4 <_kill_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d07      	ldr	r5, [pc, #28]	@ (80099f4 <_kill_r+0x20>)
 80099d8:	2300      	movs	r3, #0
 80099da:	4604      	mov	r4, r0
 80099dc:	4608      	mov	r0, r1
 80099de:	4611      	mov	r1, r2
 80099e0:	602b      	str	r3, [r5, #0]
 80099e2:	f7f8 fbc7 	bl	8002174 <_kill>
 80099e6:	1c43      	adds	r3, r0, #1
 80099e8:	d102      	bne.n	80099f0 <_kill_r+0x1c>
 80099ea:	682b      	ldr	r3, [r5, #0]
 80099ec:	b103      	cbz	r3, 80099f0 <_kill_r+0x1c>
 80099ee:	6023      	str	r3, [r4, #0]
 80099f0:	bd38      	pop	{r3, r4, r5, pc}
 80099f2:	bf00      	nop
 80099f4:	200004f4 	.word	0x200004f4

080099f8 <_getpid_r>:
 80099f8:	f7f8 bbb4 	b.w	8002164 <_getpid>

080099fc <__swhatbuf_r>:
 80099fc:	b570      	push	{r4, r5, r6, lr}
 80099fe:	460c      	mov	r4, r1
 8009a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a04:	2900      	cmp	r1, #0
 8009a06:	b096      	sub	sp, #88	@ 0x58
 8009a08:	4615      	mov	r5, r2
 8009a0a:	461e      	mov	r6, r3
 8009a0c:	da0d      	bge.n	8009a2a <__swhatbuf_r+0x2e>
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a14:	f04f 0100 	mov.w	r1, #0
 8009a18:	bf14      	ite	ne
 8009a1a:	2340      	movne	r3, #64	@ 0x40
 8009a1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a20:	2000      	movs	r0, #0
 8009a22:	6031      	str	r1, [r6, #0]
 8009a24:	602b      	str	r3, [r5, #0]
 8009a26:	b016      	add	sp, #88	@ 0x58
 8009a28:	bd70      	pop	{r4, r5, r6, pc}
 8009a2a:	466a      	mov	r2, sp
 8009a2c:	f000 f848 	bl	8009ac0 <_fstat_r>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	dbec      	blt.n	8009a0e <__swhatbuf_r+0x12>
 8009a34:	9901      	ldr	r1, [sp, #4]
 8009a36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a3e:	4259      	negs	r1, r3
 8009a40:	4159      	adcs	r1, r3
 8009a42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a46:	e7eb      	b.n	8009a20 <__swhatbuf_r+0x24>

08009a48 <__smakebuf_r>:
 8009a48:	898b      	ldrh	r3, [r1, #12]
 8009a4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a4c:	079d      	lsls	r5, r3, #30
 8009a4e:	4606      	mov	r6, r0
 8009a50:	460c      	mov	r4, r1
 8009a52:	d507      	bpl.n	8009a64 <__smakebuf_r+0x1c>
 8009a54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	6123      	str	r3, [r4, #16]
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	6163      	str	r3, [r4, #20]
 8009a60:	b003      	add	sp, #12
 8009a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a64:	ab01      	add	r3, sp, #4
 8009a66:	466a      	mov	r2, sp
 8009a68:	f7ff ffc8 	bl	80099fc <__swhatbuf_r>
 8009a6c:	9f00      	ldr	r7, [sp, #0]
 8009a6e:	4605      	mov	r5, r0
 8009a70:	4639      	mov	r1, r7
 8009a72:	4630      	mov	r0, r6
 8009a74:	f7fd fbc0 	bl	80071f8 <_malloc_r>
 8009a78:	b948      	cbnz	r0, 8009a8e <__smakebuf_r+0x46>
 8009a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a7e:	059a      	lsls	r2, r3, #22
 8009a80:	d4ee      	bmi.n	8009a60 <__smakebuf_r+0x18>
 8009a82:	f023 0303 	bic.w	r3, r3, #3
 8009a86:	f043 0302 	orr.w	r3, r3, #2
 8009a8a:	81a3      	strh	r3, [r4, #12]
 8009a8c:	e7e2      	b.n	8009a54 <__smakebuf_r+0xc>
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	6020      	str	r0, [r4, #0]
 8009a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a96:	81a3      	strh	r3, [r4, #12]
 8009a98:	9b01      	ldr	r3, [sp, #4]
 8009a9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a9e:	b15b      	cbz	r3, 8009ab8 <__smakebuf_r+0x70>
 8009aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f000 f81d 	bl	8009ae4 <_isatty_r>
 8009aaa:	b128      	cbz	r0, 8009ab8 <__smakebuf_r+0x70>
 8009aac:	89a3      	ldrh	r3, [r4, #12]
 8009aae:	f023 0303 	bic.w	r3, r3, #3
 8009ab2:	f043 0301 	orr.w	r3, r3, #1
 8009ab6:	81a3      	strh	r3, [r4, #12]
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	431d      	orrs	r5, r3
 8009abc:	81a5      	strh	r5, [r4, #12]
 8009abe:	e7cf      	b.n	8009a60 <__smakebuf_r+0x18>

08009ac0 <_fstat_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	4d07      	ldr	r5, [pc, #28]	@ (8009ae0 <_fstat_r+0x20>)
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	4608      	mov	r0, r1
 8009aca:	4611      	mov	r1, r2
 8009acc:	602b      	str	r3, [r5, #0]
 8009ace:	f7f8 fbb1 	bl	8002234 <_fstat>
 8009ad2:	1c43      	adds	r3, r0, #1
 8009ad4:	d102      	bne.n	8009adc <_fstat_r+0x1c>
 8009ad6:	682b      	ldr	r3, [r5, #0]
 8009ad8:	b103      	cbz	r3, 8009adc <_fstat_r+0x1c>
 8009ada:	6023      	str	r3, [r4, #0]
 8009adc:	bd38      	pop	{r3, r4, r5, pc}
 8009ade:	bf00      	nop
 8009ae0:	200004f4 	.word	0x200004f4

08009ae4 <_isatty_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4d06      	ldr	r5, [pc, #24]	@ (8009b00 <_isatty_r+0x1c>)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	4604      	mov	r4, r0
 8009aec:	4608      	mov	r0, r1
 8009aee:	602b      	str	r3, [r5, #0]
 8009af0:	f7f8 fbb0 	bl	8002254 <_isatty>
 8009af4:	1c43      	adds	r3, r0, #1
 8009af6:	d102      	bne.n	8009afe <_isatty_r+0x1a>
 8009af8:	682b      	ldr	r3, [r5, #0]
 8009afa:	b103      	cbz	r3, 8009afe <_isatty_r+0x1a>
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	bd38      	pop	{r3, r4, r5, pc}
 8009b00:	200004f4 	.word	0x200004f4

08009b04 <_init>:
 8009b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b06:	bf00      	nop
 8009b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0a:	bc08      	pop	{r3}
 8009b0c:	469e      	mov	lr, r3
 8009b0e:	4770      	bx	lr

08009b10 <_fini>:
 8009b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b12:	bf00      	nop
 8009b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b16:	bc08      	pop	{r3}
 8009b18:	469e      	mov	lr, r3
 8009b1a:	4770      	bx	lr
